/*
   The code is automatically generated by the genBind tool. 
   Author: ying32
   https://github.com/ying32  
*/


#ifndef _LIBLCL_H
#define _LIBLCL_H

#ifdef __cplusplus
extern "C" {
#define CChar const
#else
#define CChar
#endif

#ifdef __GNUC__
   // #pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#endif

#include <stdint.h>
#include <stdio.h>
#include <assert.h>

#ifdef __GNUC__
#include <pthread.h>
#endif

#ifdef _WIN32
    #include<Windows.h>
    #define LCLAPI __stdcall
#else
    #include <dlfcn.h>
    #include <stddef.h>
    #include <stdbool.h>
    // __cdecl 默认
    #define LCLAPI
    #define TRUE 1
    #define FALSE 0
#endif

#ifndef NULL
    #define NULL 0
#endif

//#ifdef __APPLE__
//    #include <Cocoa/Cocoa.h>
//#endif



// 非Windows下的类型定义
#ifndef _WIN32
    typedef int32_t BOOL;
#endif

#ifdef __linux__
    typedef void* PGdkWindow;
    //typedef uintptr_t TXId;
    typedef void* PGtkFixed;
#endif

#ifdef __APPLE__
    //#include <Cocoa/Cocoa.h>
    typedef void* MyNSWindow;
#endif

// printf("GetFunc: %s=%p\n", ""#name"", p##name);

// 获取dll函数地址
#define GET_FUNC_ADDR(name) \
if(!p##name) \
   p##name = get_proc_addr(""#name""); \
assert(p##name != NULL);

// 定义dll函数指针
#define DEFINE_FUNC_PTR(name) \
static void* p##name;

// 转换参数
#define COV_PARAM(name) \
(uintptr_t)name


/*--------------------常量定义--------------------*/

// Lazarus中的颜色表，Lazarus中的TColor与一般HTML的RGB有点不一样，反过来的以BGR表示.
#define clClSysNone  0x1FFFFFFF
#define clSysDefault  0x20000000

// Actual colors
#define clAliceblue  0xFFF8F0
#define clAntiquewhite  0xD7EBFA
#define clAqua  0xFFFF00
#define clAquamarine  0xD4FF7F
#define clAzure  0xFFFFF0
#define clBeige  0xDCF5F5
#define clBisque  0xC4E4FF
#define clBlack  0x000000
#define clBlanchedalmond  0xCDEBFF
#define clBlue  0xFF0000
#define clBlueviolet  0xE22B8A
#define clBrown  0x2A2AA5
#define clBurlywood  0x87B8DE
#define clCadetblue  0xA09E5F
#define clChartreuse  0x00FF7F
#define clChocolate  0x1E69D2
#define clCoral  0x507FFF
#define clCornflowerblue  0xED9564
#define clCornsilk  0xDCF8FF
#define clCrimson  0x3C14DC
#define clCyan  0xFFFF00
#define clDarkblue  0x8B0000
#define clDarkcyan  0x8B8B00
#define clDarkgoldenrod  0x0B86B8
#define clDarkgray  0xA9A9A9
#define clDarkgreen  0x006400
#define clDarkgrey  0xA9A9A9
#define clDarkkhaki  0x6BB7BD
#define clDarkmagenta  0x8B008B
#define clDarkolivegreen  0x2F6B55
#define clDarkorange  0x008CFF
#define clDarkorchid  0xCC3299
#define clDarkred  0x00008B
#define clDarksalmon  0x7A96E9
#define clDarkseagreen  0x8FBC8F
#define clDarkslateblue  0x8B3D48
#define clDarkslategray  0x4F4F2F
#define clDarkslategrey  0x4F4F2F
#define clDarkturquoise  0xD1CE00
#define clDarkviolet  0xD30094
#define clDeeppink  0x9314FF
#define clDeepskyblue  0xFFBF00
#define clDimgray  0x696969
#define clDimgrey  0x696969
#define clDodgerblue  0xFF901E
#define clFirebrick  0x2222B2
#define clFloralwhite  0xF0FAFF
#define clForestgreen  0x228B22
#define clFuchsia  0xFF00FF
#define clGainsboro  0xDCDCDC
#define clGhostwhite  0xFFF8F8
#define clGold  0x00D7FF
#define clGoldenrod  0x20A5DA
#define clGray  0x808080
#define clGreen  0x008000
#define clGreenyellow  0x2FFFAD
#define clGrey  0x808080
#define clHoneydew  0xF0FFF0
#define clHotpink  0xB469FF
#define clIndianred  0x5C5CCD
#define clIndigo  0x82004B
#define clIvory  0xF0FFFF
#define clKhaki  0x8CE6F0
#define clLavender  0xFAE6E6
#define clLavenderblush  0xF5F0FF
#define clLawngreen  0x00FC7C
#define clLemonchiffon  0xCDFAFF
#define clLightblue  0xE6D8AD
#define clLightcoral  0x8080F0
#define clLightcyan  0xFFFFE0
#define clLightgoldenrodyellow  0xD2FAFA
#define clLightgray  0xD3D3D3
#define clLightgreen  0x90EE90
#define clLightgrey  0xD3D3D3
#define clLightpink  0xC1B6FF
#define clLightsalmon  0x7AA0FF
#define clLightseagreen  0xAAB220
#define clLightskyblue  0xFACE87
#define clLightslategray  0x998877
#define clLightslategrey  0x998877
#define clLightsteelblue  0xDEC4B0
#define clLightyellow  0xE0FFFF
#define clLtGray  0xC0C0C0
#define clMedGray  0xA4A0A0
#define clDkGray  0x808080
#define clMoneyGreen  0xC0DCC0
#define clLegacySkyBlue  0xF0CAA6
#define clCream  0xF0FBFF
#define clLime  0x00FF00
#define clLimegreen  0x32CD32
#define clLinen  0xE6F0FA
#define clMagenta  0xFF00FF
#define clMaroon  0x000080
#define clMediumaquamarine  0xAACD66
#define clMediumblue  0xCD0000
#define clMediumorchid  0xD355BA
#define clMediumpurple  0xDB7093
#define clMediumseagreen  0x71B33C
#define clMediumslateblue  0xEE687B
#define clMediumspringgreen  0x9AFA00
#define clMediumturquoise  0xCCD148
#define clMediumvioletred  0x8515C7
#define clMidnightblue  0x701919
#define clMintcream  0xFAFFF5
#define clMistyrose  0xE1E4FF
#define clMoccasin  0xB5E4FF
#define clNavajowhite  0xADDEFF
#define clNavy  0x800000
#define clOldlace  0xE6F5FD
#define clOlive  0x008080
#define clOlivedrab  0x238E6B
#define clOrange  0x00A5FF
#define clOrangered  0x0045FF
#define clOrchid  0xD670DA
#define clPalegoldenrod  0xAAE8EE
#define clPalegreen  0x98FB98
#define clPaleturquoise  0xEEEEAF
#define clPalevioletred  0x9370DB
#define clPapayawhip  0xD5EFFF
#define clPeachpuff  0xB9DAFF
#define clPeru  0x3F85CD
#define clPink  0xCBC0FF
#define clPlum  0xDDA0DD
#define clPowderblue  0xE6E0B0
#define clPurple  0x800080
#define clRed  0x0000FF
#define clRosybrown  0x8F8FBC
#define clRoyalblue  0xE16941
#define clSaddlebrown  0x13458B
#define clSalmon  0x7280FA
#define clSandybrown  0x60A4F4
#define clSeagreen  0x578B2E
#define clSeashell  0xEEF5FF
#define clSienna  0x2D52A0
#define clSilver  0xC0C0C0
#define clSkyblue  0xEBCE87
#define clSlateblue  0xCD5A6A
#define clSlategray  0x908070
#define clSlategrey  0x908070
#define clSnow  0xFAFAFF
#define clSpringgreen  0x7FFF00
#define clSteelblue  0xB48246
#define clTan  0x8CB4D2
#define clTeal  0x808000
#define clThistle  0xD8BFD8
#define clTomato  0x4763FF
#define clTurquoise  0xD0E040
#define clViolet  0xEE82EE
#define clWheat  0xB3DEF5
#define clWhite  0xFFFFFF
#define clWhitesmoke  0xF5F5F5
#define clYellow  0x00FFFF
#define clYellowgreen  0x32CD9A
#define clBtnFace  0xFF00000F
#define clNull  0x00000000

// Virtual Keys, Standard Set
#define vkLButton  0x01 // 1
#define vkRButton  0x02 // 2
#define vkCancel  0x03 // 3
#define vkMButton  0x04 // 4
#define vkXButton1  0x05 // 5
#define vkXButton2  0x06 // 6
#define vkBack  0x08 // 8
#define vkTab  0x09 // 9
#define vkLineFeed  0x0A // 10
#define vkClear  0x0C // 12
#define vkReturn  0x0D // 13
#define vkShift  0x10 // 16
#define vkControl  0x11 // 17
#define vkMenu  0x12 // 18
#define vkPause  0x13 // 19
#define vkCapital  0x14 // 20
#define vkKana  0x15 // 21
#define vkHangul  0x15 // 21
#define vkJunja  0x17 // 23
#define vkFinal  0x18 // 24
#define vkHanja  0x19 // 25
#define vkKanji  0x19 // 25
#define vkConvert  0x1C // 28
#define vkNonConvert  0x1D // 29
#define vkAccept  0x1E // 30
#define vkModeChange  0x1F // 31
#define vkEscape  0x1B // 27
#define vkSpace  0x20 // 32
#define vkPrior  0x21 // 33
#define vkNext  0x22 // 34
#define vkEnd  0x23 // 35
#define vkHome  0x24 // 36
#define vkLeft  0x25 // 37
#define vkUp  0x26 // 38
#define vkRight  0x27 // 39
#define vkDown  0x28 // 40
#define vkSelect  0x29 // 41
#define vkPrint  0x2A // 42
#define vkExecute  0x2B // 43
#define vkSnapshot  0x2C // 44
#define vkInsert  0x2D // 45
#define vkDelete  0x2E // 46
#define vkHelp  0x2F // 47

// vk0 thru vk9 are the same as ASCII '0' thru '9' (0x30 - 0x39)
#define vk0  0x30 // 48
#define vk1  0x31 // 49
#define vk2  0x32 // 50
#define vk3  0x33 // 51
#define vk4  0x34 // 52
#define vk5  0x35 // 53
#define vk6  0x36 // 54
#define vk7  0x37 // 55
#define vk8  0x38 // 56
#define vk9  0x39 // 57

// vkA thru vkZ are the same as ASCII 'A' thru 'Z' (0x41 - 0x5A)
#define vkA  0x41 // 65
#define vkB  0x42 // 66
#define vkC  0x43 // 67
#define vkD  0x44 // 68
#define vkE  0x45 // 69
#define vkF  0x46 // 70
#define vkG  0x47 // 71
#define vkH  0x48 // 72
#define vkI  0x49 // 73
#define vkJ  0x4A // 74
#define vkK  0x4B // 75
#define vkL  0x4C // 76
#define vkM  0x4D // 77
#define vkN  0x4E // 78
#define vkO  0x4F // 79
#define vkP  0x50 // 80
#define vkQ  0x51 // 81
#define vkR  0x52 // 82
#define vkS  0x53 // 83
#define vkT  0x54 // 84
#define vkU  0x55 // 85
#define vkV  0x56 // 86
#define vkW  0x57 // 87
#define vkX  0x58 // 88
#define vkY  0x59 // 89
#define vkZ  0x5A // 90
#define vkLWin  0x5B // 91
#define vkRWin  0x5C // 92
#define vkApps  0x5D // 93
#define vkSleep  0x5F // 95
#define vkNumpad0  0x60 // 96
#define vkNumpad1  0x61 // 97
#define vkNumpad2  0x62 // 98
#define vkNumpad3  0x63 // 99
#define vkNumpad4  0x64 // 100
#define vkNumpad5  0x65 // 101
#define vkNumpad6  0x66 // 102
#define vkNumpad7  0x67 // 103
#define vkNumpad8  0x68 // 104
#define vkNumpad9  0x69 // 105
#define vkMultiply  0x6A // 106
#define vkAdd  0x6B // 107
#define vkSeparator  0x6C // 108
#define vkSubtract  0x6D // 109
#define vkDecimal  0x6E // 110
#define vkDivide  0x6F // 111
#define vkF1  0x70 // 112
#define vkF2  0x71 // 113
#define vkF3  0x72 // 114
#define vkF4  0x73 // 115
#define vkF5  0x74 // 116
#define vkF6  0x75 // 117
#define vkF7  0x76 // 118
#define vkF8  0x77 // 119
#define vkF9  0x78 // 120
#define vkF10  0x79 // 121
#define vkF11  0x7A // 122
#define vkF12  0x7B // 123
#define vkF13  0x7C // 124
#define vkF14  0x7D // 125
#define vkF15  0x7E // 126
#define vkF16  0x7F // 127
#define vkF17  0x80 // 128
#define vkF18  0x81 // 129
#define vkF19  0x82 // 130
#define vkF20  0x83 // 131
#define vkF21  0x84 // 132
#define vkF22  0x85 // 133
#define vkF23  0x86 // 134
#define vkF24  0x87 // 135
#define vkCamera  0x88 // 136
#define vkHardwareBack  0x89 // 137
#define vkNumLock  0x90 // 144
#define vkScroll  0x91 // 145
#define vkLShift  0xA0 // 160
#define vkRShift  0xA1 // 161
#define vkLControl  0xA2 // 162
#define vkRControl  0xA3 // 163
#define vkLMenu  0xA4 // 164
#define vkRMenu  0xA5 // 165
#define vkBrowserBack  0xA6 // 166
#define vkBrowserForward  0xA7 // 167
#define vkBrowserRefresh  0xA8 // 168
#define vkBrowserStop  0xA9 // 169
#define vkBrowserSearch  0xAA // 170
#define vkBrowserFavorites  0xAB // 171
#define vkBrowserHome  0xAC // 172
#define vkVolumeMute  0xAD // 173
#define vkVolumeDown  0xAE // 174
#define vkVolumeUp  0xAF // 175
#define vkMediaNextTrack  0xB0 // 176
#define vkMediaPrevTrack  0xB1 // 177
#define vkMediaStop  0xB2 // 178
#define vkMediaPlayPause  0xB3 // 179
#define vkLaunchMail  0xB4 // 180
#define vkLaunchMediaSelect  0xB5 // 181
#define vkLaunchApp1  0xB6 // 182
#define vkLaunchApp2  0xB7 // 183
#define vkSemicolon  0xBA // 186
#define vkEqual  0xBB // 187
#define vkComma  0xBC // 188
#define vkMinus  0xBD // 189
#define vkPeriod  0xBE // 190
#define vkSlash  0xBF // 191
#define vkTilde  0xC0 // 192
#define vkLeftBracket  0xDB // 219
#define vkBackslash  0xDC // 220
#define vkRightBracket  0xDD // 221
#define vkQuote  0xDE // 222
#define vkPara  0xDF // 223
#define vkOem102  0xE2 // 226
#define vkIcoHelp  0xE3 // 227
#define vkIco00  0xE4 // 228
#define vkProcessKey  0xE5 // 229
#define vkIcoClear  0xE6 // 230
#define vkPacket  0xE7 // 231
#define vkAttn  0xF6 // 246
#define vkCrsel  0xF7 // 247
#define vkExsel  0xF8 // 248
#define vkErEof  0xF9 // 249
#define vkPlay  0xFA // 250
#define vkZoom  0xFB // 251
#define vkNoname  0xFC // 252
#define vkPA1  0xFD // 253
#define vkOemClear  0xFE // 254
#define vkNone  0xFF // 255

// MessageBox or MessageDlg return value
#define idOK  1
#define idCancel  2
#define idAbort  3
#define idRetry  4
#define idIgnore  5
#define idYes  6
#define idNo  7
#define idClose  8
#define idHelp  9
#define idTryAgain  10
#define idContinue  11
#define mrNone  0
#define mrOk  idOK
#define mrCancel  idCancel
#define mrAbort  idAbort
#define mrRetry  idRetry
#define mrIgnore  idIgnore
#define mrYes  idYes
#define mrNo  idNo
#define mrClose  idClose
#define mrHelp  idHelp
#define mrTryAgain  idTryAgain
#define mrContinue  idContinue
#define mrAll  mrContinue + 1
#define mrNoToAll  mrAll + 1
#define mrYesToAll  mrNoToAll + 1

// Predefined Clipboard Formats
#ifndef _WIN32

#define CF_BITMAP  2
#define CF_DIB  8
#define CF_PALETTE  9
#define CF_ENHMETAFILE  14
#define CF_METAFILEPICT  3
#define CF_OEMTEXT  7
#define CF_TEXT  1
#define CF_UNICODETEXT  13
#define CF_DIF  5
#define CF_DSPBITMAP  130
#define CF_DSPENHMETAFILE  142
#define CF_DSPMETAFILEPICT  131
#define CF_DSPTEXT  129
#define CF_GDIOBJFIRST  768
#define CF_GDIOBJLAST  1023
#define CF_HDROP  15
#define CF_LOCALE  16
#define CF_OWNERDISPLAY  128
#define CF_PENDATA  10
#define CF_PRIVATEFIRST  512
#define CF_PRIVATELAST  767
#define CF_RIFF  11
#define CF_SYLK  4
#define CF_WAVE  12
#define CF_TIFF  6

#endif

// custom
#define CF_PICTURE  700
#define CF_HTML  701
#define CF_COMPONENT  702

// mouse cursor definition.
#define crHigh  TCursor(0)
#define crDefault  TCursor(0)
#define crNone  TCursor(-1)
#define crArrow  TCursor(-2)
#define crCross  TCursor(-3)
#define crIBeam  TCursor(-4)
#define crSize  TCursor(-22)
#define crSizeNESW  TCursor(-6) // diagonal north east - south west
#define crSizeNS  TCursor(-7)
#define crSizeNWSE  TCursor(-8)
#define crSizeWE  TCursor(-9)
#define crSizeNW  TCursor(-23)
#define crSizeN  TCursor(-24)
#define crSizeNE  TCursor(-25)
#define crSizeW  TCursor(-26)
#define crSizeE  TCursor(-27)
#define crSizeSW  TCursor(-28)
#define crSizeS  TCursor(-29)
#define crSizeSE  TCursor(-30)
#define crUpArrow  TCursor(-10)
#define crHourGlass  TCursor(-11)
#define crDrag  TCursor(-12)
#define crNoDrop  TCursor(-13)
#define crHSplit  TCursor(-14)
#define crVSplit  TCursor(-15)
#define crMultiDrag  TCursor(-16)
#define crSQLWait  TCursor(-17)
#define crNo  TCursor(-18)
#define crAppStart  TCursor(-19)
#define crHelp  TCursor(-20)
#define crHandPoint  TCursor(-21)
#define crSizeAll  TCursor(-22)
#define crLow  TCursor(-30)

/*--------------------枚举定义/集合定义--------------------*/
// 集合定义
typedef uint32_t TSet;


typedef enum {
    alNone,
    alTop,
    alBottom,
    alLeft,
    alRight,
    alClient,
    alCustom,
} TAlign;

typedef TSet TAlignSet;

typedef enum {
    bsNone,
    bsSingle,
    bsSizeable,
    bsDialog,
    bsToolWindow,
    bsSizeToolWin,
} TBorderStyle;

typedef enum {
    fsNormal,
    fsMDIChild,
    fsMDIForm,
    fsStayOnTop,
    fsSplash,
    fsSystemStayOnTop,
} TFormStyle;

typedef enum {
    poDesigned, // use bounds from the designer (read from stream)
    poDefault, // LCL decision (normally window manager decides)
    poDefaultPosOnly, // designed size and LCL position
    poDefaultSizeOnly, // designed position and LCL size
    poScreenCenter, // center form on screen (depends on DefaultMonitor)
    poDesktopCenter, // center form on desktop (total of all screens)
    poMainFormCenter, // center form on main form (depends on DefaultMonitor)
    poOwnerFormCenter, // center form on owner form (depends on DefaultMonitor)
    poWorkAreaCenter, // center form on working area (depends on DefaultMonitor)
} TPosition;

typedef enum {
    soBeginning,
    soCurrent,
    soEnd,
} TSeekOrigin;

typedef enum {
    pfDevice,
    pf1bit,
    pf4bit,
    pf8bit,
    pf15bit,
    pf16bit,
    pf24bit,
    pf32bit,
    pfCustom,
} TPixelFormat;

typedef enum {
    taLeftJustify,
    taRightJustify,
    taCenter,
} TAlignment;

typedef enum {
    bdLeftToRight,
    bdRightToLeft,
    bdRightToLeftNoAlign,
    bdRightToLeftReadingOnly,
} TBiDiMode;

typedef enum {
    taAlignTop,
    taAlignBottom,
    taVerticalCenter,
} TVerticalAlignment;

typedef enum {
    csDropDown, // like an TEdit plus a button to drop down the list, default
    csSimple, // like an TEdit plus a TListBox
    csDropDownList, // like TLabel plus a button to drop down the list
    csOwnerDrawFixed, // like csDropDownList, but custom drawn
    csOwnerDrawVariable, // like csDropDownList, but custom drawn and with each item can have another height
    csOwnerDrawEditableFixed, // like csOwnerDrawFixed, but with TEdit
    csOwnerDrawEditableVariable, // like csOwnerDrawVariable, but with TEdit
} TComboBoxStyle;

typedef enum {
    wsNormal,
    wsMinimized,
    wsMaximized,
    wsFullScreen,
} TWindowState;

typedef enum {
    tlTop,
    tlCenter,
    tlBottom,
} TTextLayout;

typedef enum {
    epNone,
    epPathEllipsis,
    epEndEllipsis,
    epWordEllipsis,
} TEllipsisPosition;

typedef enum {
    lbStandard,
    lbOwnerDrawFixed,
    lbOwnerDrawVariable,
    lbVirtual,
} TListBoxStyle;

typedef enum {
    paLeft,
    paRight,
    paCenter,
} TPopupAlignment;

typedef enum {
    tbRightButton,
    tbLeftButton,
} TTrackButton;

typedef enum {
    pbHorizontal,
    pbVertical,
    pbRightToLeft,
    pbTopDown,
} TProgressBarOrientation;

typedef enum {
    pbstNormal,
    pbstMarquee,
} TProgressBarStyle;

typedef enum {
    pbsNormal,
    pbsError,
    pbsPaused,
} TProgressBarState;

typedef enum {
    blGlyphLeft,
    blGlyphRight,
    blGlyphTop,
    blGlyphBottom,
} TButtonLayout;

typedef enum {
    bsUp, // button is up
    bsDisabled, // button disabled (grayed)
    bsDown, // button is down
    bsExclusive, // button is the only down in his group
    bsHot, // button is under mouse
} TButtonState;

typedef enum {
    bsAutoDetect,
    bsWin31,
    bsNew,
} TButtonStyle;

typedef enum {
    sbsNone,
    sbsSingle,
    sbsSunken,
} TStaticBorderStyle;

typedef enum {
    fsBold,
    fsItalic,
    fsUnderline,
    fsStrikeOut,
} TFontStyle;

typedef TSet TFontStyles;

typedef enum {
    ssNone,
    ssHorizontal,
    ssVertical,
    ssBoth,
    ssAutoHorizontal,
    ssAutoVertical,
    ssAutoBoth,
} TScrollStyle;

typedef enum {
    stNone,
    stData,
    stText,
    stBoth,
} TSortType;

typedef enum {
    arAlignBottom,
    arAlignLeft,
    arAlignRight,
    arAlignTop,
    arDefault,
    arSnapToGrid,
} TListArrangement;

typedef enum {
    vsIcon,
    vsSmallIcon,
    vsList,
    vsReport,
} TViewStyle;

typedef enum {
    isNone,
    isCut,
    isDropHilited,
    isFocused,
    isSelected,
    isActivating,
} TItemState;

typedef TSet TItemStates;

typedef enum {
    ctText,
    ctImage,
    ctState,
} TItemChange;

typedef enum {
    ifData,
    ifPartialString,
    ifExactString,
    ifNearest,
} TItemFind;

typedef enum {
    sdLeft,
    sdRight,
    sdAbove,
    sdBelow,
    sdAll,
} TSearchDirection;

typedef enum {
    htHandPoint,
    htUnderlineCold,
    htUnderlineHot,
} TListHotTrackStyle;

typedef TSet TListHotTrackStyles;

typedef enum {
    irText,
    irImage,
    irParam,
    irState,
    irIndent,
} TItemRequests;

typedef enum {
    bsSolid,
    bsClear,
    bsHorizontal,
    bsVertical,
    bsFDiagonal,
    bsBDiagonal,
    bsCross,
    bsDiagCross,
    bsImage,
    bsPattern,
} TBrushStyle;

typedef enum {
    psSolid,
    psDash,
    psDot,
    psDashDot,
    psDashDotDot,
    psinsideFrame,
    psPattern,
    psClear,
} TPenStyle;

typedef enum {
    btNext,
    btPrev,
} TUDBtnType;

typedef enum {
    tpTop,
    tpBottom,
    tpLeft,
    tpRight,
} TTabPosition;

typedef enum {
    tsTabs,
    tsButtons,
    tsFlatButtons,
} TTabStyle;

typedef enum {
    fpDefault,
    fpVariable,
    fpFixed,
} TFontPitch;

typedef enum {
    pmBlack,
    pmWhite,
    pmNop,
    pmNot,
    pmCopy,
    pmNotCopy,
    pmMergePenNot,
    pmMaskPenNot,
    pmMergeNotPen,
    pmMaskNotPen,
    pmMerge,
    pmNotMerge,
    pmMask,
    pmNotMask,
    pmXor,
    pmNotXor,
} TPenMode;

typedef enum {
    trHorizontal,
    trVertical,
} TTrackBarOrientation;

typedef enum {
    udHorizontal,
    udVertical,
} TUDOrientation;

typedef enum {
    fqDefault,
    fqDraft,
    fqProof,
    fqNonAntialiased,
    fqAntialiased,
    fqClearType,
    fqClearTypeNatural,
} TFontQuality;

typedef enum {
    caNone,
    caHide,
    caFree,
    caMinimize,
} TCloseAction;

typedef enum {
    bfNone,
    bfInfo,
    bfWarning,
    bfError,
} TBalloonFlags;

typedef enum {
    mtWarning,
    mtError,
    mtInformation,
    mtConfirmation,
    mtCustom,
} TMsgDlgType;

typedef enum {
    mbYes,
    mbNo,
    mbOK,
    mbCancel,
    mbAbort,
    mbRetry,
    mbIgnore,
    mbAll,
    mbNoToAll,
    mbYesToAll,
    mbHelp,
    mbClose,
} TMsgDlgBtn;

typedef TSet TMsgDlgButtons;

typedef enum {
    sltURL,
    sltID,
} TSysLinkType;

typedef enum {
    psText,
    psOwnerDraw,
} TStatusPanelStyle;

typedef enum {
    jpBestQuality,
    jpBestSpeed,
} TJPEGPerformance;

typedef enum {
    nsCut,
    nsDropHilite, // = Node.DropTarget
    nsFocused, // = Node.Focused
    nsSelected, // = Node.Selected
    nsMultiSelected, // = Node.MultiSelected
    nsExpanded, // = Node.Expanded
    nsHasChildren, // = Node.HasChildren
    nsDeleting, // = Node.Deleting, set on Destroy
    nsVisible, // = Node.Visible
    nsBound, // bound to a tree, e.g. has Parent or is top lvl node
} TNodeState;

typedef enum {
    naAdd, // add as last sibling of Destination
    naAddFirst, // add as first sibling of Destination
    naAddChild, // add as last child of Destination
    naAddChildFirst, // add as first child of Destination
    naInsert, // insert in front of Destination
    naInsertBehind, // insert behind Destination
} TNodeAttachMode;

typedef enum {
    taAddFirst,
    taAdd,
    taInsert,
} TAddMode;

typedef enum {
    msControlSelect,
    msShiftSelect,
    msVisibleOnly,
    msSiblingOnly,
} TMultiSelectStyles;

typedef TSet TMultiSelectStyle;

typedef enum {
    asNormal,
    asSuspended,
    asSuspendedEnabled,
} TActionListState;

typedef enum {
    gdHorizontal,
    gdVertical,
} TGradientDirection;

typedef enum {
    dSFocus,
    dSSelected,
    dSNormal,
    dSTransparent,
} TDrawingStyle;

typedef enum {
    itImage,
    itMask,
} TImageType;

typedef enum {
    rtBitmap,
    rtCursor,
    rtIcon,
} TResType;

typedef enum {
    lrDefaultColor,
    lrDefaultSize,
    lrFromFile,
    lrMap3DColors,
    lrTransparent,
    lrMonoChrome,
} TLoadResource;

typedef TSet TLoadResources;

typedef enum {
    cdDefault,
    cdDeviceDependent,
    cd4Bit,
    cd8Bit,
    cd16Bit,
    cd24Bit,
    cd32Bit,
} TColorDepth;

typedef enum {
    cbUnchecked,
    cbChecked,
    cbGrayed,
} TCheckBoxState;

typedef enum {
    tbsButton, // button (can be clicked)
    tbsCheck, // check item (click to toggle state, can be grouped)
    tbsDropDown, // button with dropdown button to show a popup menu
    tbsSeparator, // space holder
    tbsDivider, // space holder with line
    tbsButtonDrop, // button with arrow (not separated from each other)
} TToolButtonStyle;

typedef enum {
    gdoHotTrack,
    gdoGradient,
} TTBGradientDrawingOption;

typedef TSet TTBGradientDrawingOptions;

typedef enum {
    cdFullOpen,
    cdPreventFullOpen,
    cdShowHelp,
    cdSolidColor,
    cdAnyColor,
} TColorDialogOption;

typedef TSet TColorDialogOptions;

typedef enum {
    biSystemMenu,
    biMinimize,
    biMaximize,
    biHelp,
} TBorderIcon;

typedef TSet TBorderIcons;

typedef enum {
    fdAnsiOnly,
    fdTrueTypeOnly,
    fdEffects,
    fdFixedPitchOnly,
    fdForceFontExist,
    fdNoFaceSel,
    fdNoOEMFonts,
    fdNoSimulations,
    fdNoSizeSel,
    fdNoStyleSel,
    fdNoVectorFonts,
    fdShowHelp,
    fdWysiwyg,
    fdLimitSize,
    fdScalableOnly,
    fdApplyButton,
} TFontDialogOption;

typedef TSet TFontDialogOptions;

typedef enum {
    ofReadOnly,
    ofOverwritePrompt, // if selected file exists shows a message, that file
    ofHideReadOnly, // hide read only file
    ofNoChangeDir, // do not change current directory
    ofShowHelp, // show a help button
    ofNoValidate,
    ofAllowMultiSelect, // allow multiselection
    ofExtensionDifferent,
    ofPathMustExist, // shows an error message if selected path does not exist
    ofFileMustExist, // shows an error message if selected file does not exist
    ofCreatePrompt,
    ofShareAware,
    ofNoReadOnlyReturn, // do not return filenames that are readonly
    ofNoTestFileCreate,
    ofNoNetworkButton,
    ofNoLongNames,
    ofOldStyleDialog,
    ofNoDereferenceLinks, // do not resolve links while dialog is shown (only on Windows, see OFN_NODEREFERENCELINKS)
    ofNoResolveLinks, // do not resolve links after Execute
    ofEnableIncludeNotify,
    ofEnableSizing, // dialog can be resized, e.g. via the mouse
    ofDontAddToRecent, // do not add the path to the history list
    ofForceShowHidden, // show hidden files
    ofViewDetail, // details are OS and interface dependent
    ofAutoPreview, // details are OS and interface dependent
} TOpenOption;

typedef TSet TOpenOptions;

typedef enum {
    ofExNoPlacesBar,
} TOpenOptionEx;

typedef TSet TOpenOptionsEx;

typedef enum {
    prAllPages,
    prSelection,
    prPageNums,
    prCurrentPage,
} TPrintRange;

typedef enum {
    poPrintToFile,
    poPageNums,
    poSelection,
    poWarning,
    poHelp,
    poDisablePrintToFile,
    poBeforeBeginDoc,
} TPrintDialogOption;

typedef TSet TPrintDialogOptions;

typedef enum {
    psoDefaultMinMargins,
    psoDisableMargins,
    psoDisableOrientation,
    psoDisablePagePainting,
    psoDisablePaper,
    psoDisablePrinter,
    psoMargins,
    psoMinMargins,
    psoShowHelp,
    psoWarning,
    psoNoNetworkButton,
} TPageSetupDialogOption;

typedef TSet TPageSetupDialogOptions;

typedef enum {
    pkDotMatrix,
    pkHPPCL,
} TPrinterKind;

typedef enum {
    ptEnvelope,
    ptPaper,
} TPageType;

typedef enum {
    pmDefault,
    pmMillimeters,
    pmInches,
} TPageMeasureUnits;

typedef enum {
    soStrictDelimiter,
    soWriteBOM,
    soTrailingLineBreak,
    soUseLocale,
} TStringsOption;

typedef TSet TStringsOptions;

typedef enum {
    ssShift,
    ssAlt,
    ssCtrl,
    ssLeft,
    ssRight,
    ssMiddle,
    ssDouble,
    ssMeta,
    ssSuper,
    ssHyper,
    ssAltGr,
    ssCaps,
    ssNum,
    ssScroll,
    ssTriple,
    ssQuad,
    ssExtra1,
    ssExtra2,
} TShiftStateEnum;

typedef TSet TShiftState;

typedef enum {
    mbLeft,
    mbRight,
    mbMiddle,
    mbExtra1,
    mbExtra2,
} TMouseButton;

typedef enum {
    fsSurface,
    fsBorder,
} TFillStyle;

typedef enum {
    fmAlternate,
    fmWinding,
} TFillMode;

typedef enum {
    csHandleValid,
    csFontValid,
    csPenValid,
    csBrushValid,
    csRegionValid,
} TCanvasStates;

typedef TSet TCanvasState;

typedef enum {
    coLeftToRight,
    coRightToLeft,
} TCanvasOrientation;

typedef enum {
    tfBottom,
    tfCalcRect,
    tfCenter,
    tfEditControl,
    tfEndEllipsis,
    tfPathEllipsis,
    tfExpandTabs,
    tfExternalLeading,
    tfLeft,
    tfModifyString,
    tfNoClip,
    tfNoPrefix,
    tfRight,
    tfRtlReading,
    tfSingleLine,
    tfTop,
    tfVerticalCenter,
    tfWordBreak,
    tfHidePrefix,
    tfNoFullWidthCharBreak,
    tfPrefixOnly,
    tfTabStop,
    tfWordEllipsis,
    tfComposited,
} TTextFormats;

typedef TSet TTextFormat;

typedef enum {
    bvNone,
    bvLowered,
    bvRaised,
    bvSpace,
} TBevelCut;

typedef enum {
    beLeft,
    beTop,
    beRight,
    beBottom,
} TBevelEdge;

typedef TSet TBevelEdges;

typedef enum {
    bkNone,
    bkTile,
    bkSoft,
    bkFlat,
} TBevelKind;

typedef enum {
    tmBottomRight,
    tmTopLeft,
    tmBoth,
} TTickMark;

typedef enum {
    tsNone,
    tsAuto,
    tsManual,
} TTickStyle;

typedef enum {
    ptNone,
    ptTop,
    ptLeft,
    ptBottom,
    ptRight,
} TPositionToolTip;

typedef enum {
    dtkDate,
    dtkTime,
    dtkDateTime,
} TDateTimeKind;

typedef enum {
    dmComboBox,
    dmUpDown,
    dmNone,
} TDTDateMode;

typedef enum {
    dfShort,
    dfLong,
} TDTDateFormat;

typedef enum {
    dtaLeft,
    dtaRight,
    dtaDefault,
} TDTCalAlignment;

typedef enum {
    dowMonday,
    dowTuesday,
    dowWednesday,
    dowThursday,
    dowFriday,
    dowSaturday,
    dowSunday,
    dowLocaleDefault,
} TCalDayOfWeek;

typedef enum {
    stWholeWord,
    stMatchCase,
} TSearchType;

typedef TSet TSearchTypes;

typedef enum {
    nsNone,
    nsBullte,
} TNumberingStyle;

typedef enum {
    atSelected,
    atDefaultText,
} TAttributeType;

typedef enum {
    caBold,
    caColor,
    caFace,
    caItalic,
    caSize,
    caStrikeOut,
    caUnderline,
    caProtected,
} TConsistentAttribute;

typedef TSet TConsistentAttributes;

typedef enum {
    iaTop,
    iaLeft,
} TIconArrangement;

typedef enum {
    hsGradient,
    hsImage,
    hsThemed,
} THeaderStyle;

typedef enum {
    iiaLeft,
    iiaRight,
    iiaTop,
    iiaBottom,
    iiaCenter,
} TImageAlignment;

typedef enum {
    akTop,
    akLeft,
    akRight,
    akBottom,
} TAnchorKind;

typedef TSet TAnchors;

typedef enum {
    odSelected,
    odGrayed,
    odDisabled,
    odChecked,
    odFocused,
    odDefault,
    odHotLight,
    odInactive,
    odNoAccel,
    odNoFocusRect,
    odReserved1,
    odReserved2,
    odComboBoxEdit,
    odBackgroundPainted, // item background already painted
} TOwnerDrawStateType;

typedef TSet TOwnerDrawState;

typedef enum {
    bkCustom,
    bkOK,
    bkCancel,
    bkHelp,
    bkYes,
    bkNo,
    bkClose,
    bkAbort,
    bkRetry,
    bkIgnore,
    bkAll,
    bkNoToAll,
    bkYesToAll,
} TBitBtnKind;

typedef enum {
    sbHorizontal,
    sbVertical,
} TScrollBarKind;

typedef enum {
    ssRegular,
    ssFlat,
    ssHotTrack,
} TScrollBarStyle;

typedef enum {
    stRectangle,
    stSquare,
    stRoundRect,
    stRoundSquare,
    stEllipse,
    stCircle,
    stSquaredDiamond,
    stDiamond,
    stTriangle,
    stTriangleLeft,
    stTriangleRight,
    stTriangleDown,
    stStar,
    stStarDown,
} TShapeType;

typedef enum {
    bsBox,
    bsFrame,
    bsTopLine,
    bsBottomLine,
    bsLeftLine,
    bsRightLine,
    bsSpacer,
} TBevelShape;

typedef enum {
    gkText,
    gkHorizontalBar,
    gkVerticalBar,
    gkPie,
    gkNeedle,
    gkHalfPie,
} TGaugeKind;

typedef enum {
    dtControl,
    dtItem,
    dtSubItem,
} TCustomDrawTarget;

typedef enum {
    cdPrePaint,
    cdPostPaint,
    cdPreErase,
    cdPostErase,
} TCustomDrawStage;

typedef enum {
    cdsSelected,
    cdsGrayed,
    cdsDisabled,
    cdsChecked,
    cdsFocused,
    cdsDefault,
    cdsHot,
    cdsMarked,
    cdsIndeterminate,
} TCustomDrawStateFlag;

typedef TSet TCustomDrawState;

typedef enum {
    drBounds,
    drIcon,
    drLabel,
    drSelectBounds,
} TDisplayCode;

typedef enum {
    sdAllowCreate,
    sdPerformCreate,
    sdPrompt,
} TSelectDirOpt;

typedef TSet TSelectDirOpts;

typedef enum {
    frDown,
    frFindNext,
    frHideMatchCase,
    frHideWholeWord,
    frHideUpDown,
    frMatchCase,
    frDisableMatchCase,
    frDisableUpDown,
    frDisableWholeWord,
    frReplace,
    frReplaceAll,
    frWholeWord,
    frShowHelp,
    frEntireScope,
    frHideEntireScope,
    frPromptOnReplace,
    frHidePromptOnReplace,
    frButtonsAtBottom,
} TFindOption;

typedef TSet TFindOptions;

typedef enum {
    dmManual,
    dmAutomatic,
} TDragMode;

typedef enum {
    dsDragEnter,
    dsDragLeave,
    dsDragMove,
} TDragState;

typedef enum {
    dkDrag,
    dkDock,
} TDragKind;

typedef enum {
    ecNormal,
    ecUpperCase,
    ecLowerCase,
} TEditCharCase;

typedef enum {
    ebLeft,
    ebTop,
    ebRight,
    ebBottom,
} TEdgeBorder;

typedef TSet TEdgeBorders;

typedef enum {
    esNone,
    esRaised,
    esLowered,
} TEdgeStyle;

typedef enum {
    gdsClassic,
    gdsThemed,
    gdsGradient,
} TGridDrawingStyle;

typedef enum {
    goFixedVertLine,
    goFixedHorzLine,
    goVertLine,
    goHorzLine,
    goRangeSelect,
    goDrawFocusSelected,
    goRowSizing,
    goColSizing,
    goRowMoving,
    goColMoving,
    goEditing,
    goAutoAddRows,
    goTabs,
    goRowSelect,
    goAlwaysShowEditor,
    goThumbTracking,
    goColSpanning, // Enable cellextent calcs
    goRelaxedRowSelect, // User can see focused cell on goRowSelect
    goDblClickAutoSize, // dblclicking columns borders (on hdrs) resize col.
    goSmoothScroll, // Switch scrolling mode (pixel scroll is by default)
    goFixedRowNumbering, // Ya
    goScrollKeepVisible, // keeps focused cell visible while scrolling
    goHeaderHotTracking, // Header cells change look when mouse is over them
    goHeaderPushedLook, // Header cells looks pushed when clicked
    goSelectionActive, // Setting grid.Selection moves also cell cursor
    goFixedColSizing, // Allow to resize fixed columns
    goDontScrollPartCell, // clicking partially visible cells will not scroll
    goCellHints, // show individual cell hints
    goTruncCellHints, // show cell hints if cell text is too long
    goCellEllipsis, // show "..." if cell text is too long
    goAutoAddRowsSkipContentCheck, // BB Also add a row (if AutoAddRows in Options) if last row is empty
    goRowHighlight, // Highlight the current Row
} TGridOption;

typedef TSet TGridOptions;

typedef enum {
    gdSelected,
    gdFocused,
    gdFixed,
    gdHot,
    gdPushed,
    gdRowHighlight,
} TGridDrawStates;

typedef TSet TGridDrawState;

typedef enum {
    hsText,
    hsOwnerDraw,
} THeaderSectionStyle;

typedef enum {
    lpAbove,
    lpBelow,
    lpLeft,
    lpRight,
} TLabelPosition;

typedef enum {
    fsLeftRightTopBottom,
    fsRightLeftTopBottom,
    fsLeftRightBottomTop,
    fsRightLeftBottomTop,
    fsTopBottomLeftRight,
    fsBottomTopLeftRight,
    fsTopBottomRightLeft,
    fsBottomTopRightLeft,
} TFlowStyle;

typedef enum {
    bmNone,
    bmClick,
    bmDblClick,
} TCoolBandMaximize;

typedef enum {
    mbNone,
    mbBreak,
    mbBarBreak,
} TMenuBreak;

typedef enum {
    tsTrackBegin,
    tsTrackMove,
    tsTrackEnd,
} TSectionTrackState;

typedef enum {
    csLButtonDown,
    csClicked,
    csPalette,
    csReadingState,
    csFocusing,
    csCreating, // not used, exists for Delphi compatibility
    csPaintCopy,
    csCustomPaint,
    csDestroyingHandle,
    csDocking,
    csVisibleSetInLoading,
} TControlStateType;

typedef TSet TControlState;

typedef enum {
    csAcceptsControls, // can have children in the designer
    csCaptureMouse, // auto capture mouse when clicked
    csDesignInteractive, // wants mouse events in design mode
    csClickEvents, // handles mouse events
    csFramed, // not implemented, has 3d frame
    csSetCaption, // if Name=Caption, changing the Name changes the Caption
    csOpaque, // the control paints its area completely
    csDoubleClicks, // understands mouse double clicks
    csTripleClicks, // understands mouse triple clicks
    csQuadClicks, // understands mouse quad clicks
    csFixedWidth, // cannot change its width
    csFixedHeight, // cannot change its height (for example combobox)
    csNoDesignVisible, // is invisible in the designer
    csReplicatable, // PaintTo works
    csNoStdEvents, // standard events such as mouse, key, and click events are ignored.
    csDisplayDragImage, // display images from dragimagelist during drag operation over control
    csReflector, // not implemented, the controls respond to size, focus and dlg messages - it can be used as ActiveX control under Windows
    csActionClient, // Action is set
    csMenuEvents, // not implemented
    csNoFocus, // control will not take focus when clicked with mouse.
    csNeedsBorderPaint, // not implemented
    csParentBackground, // tells WinXP to paint the theme background of parent on controls background
    csDesignNoSmoothResize, // when resizing control in the designer do not SetBounds while dragging
    csDesignFixedBounds, // can not be moved nor resized in designer
    csHasDefaultAction, // implements useful ExecuteDefaultAction
    csHasCancelAction, // implements useful ExecuteCancelAction
    csNoDesignSelectable, // can not be selected at design time
    csOwnedChildrenNotSelectable, // child controls owned by this control are NOT selectable in the designer
    csAutoSize0x0, // if the preferred size is 0x0 then control is shrinked ot 0x0
    csAutoSizeKeepChildLeft, // when AutoSize=true do not move children horizontally
    csAutoSizeKeepChildTop, // when AutoSize=true do not move children vertically
    csRequiresKeyboardInput, // If the device has no physical keyboard then show the virtual keyboard when this control gets focus (therefore available only to TWinControl descendents)
} TControlStyleType;

typedef TSet TControlStyle;

typedef enum {
    maDefault,
    maActivate,
    maActivateAndEat,
    maNoActivate,
    maNoActivateAndEat,
} TMouseActivate;

typedef enum {
    none,
    indeterminate,
    normal,
    error,
    paused,
} TTaskBarProgressState;

typedef enum {
    bmDIB,
    bmDDB,
} TBitmapHandleType;

typedef enum {
    psNoDefine,
    psReady,
    psPrinting,
    psStopped,
} TPrinterState;

typedef enum {
    poPortrait,
    poLandscape,
    poReverseLandscape,
    poReversePortrait,
} TPrinterOrientation;

typedef enum {
    pcCopies,
    pcOrientation,
    pcCollation,
} TPrinterCapability;

typedef TSet TPrinterCapabilities;

typedef enum {
    ptLocal,
    ptNetWork,
} TPrinterType;

typedef enum {
    rsUninitialized,
    rsLoading,
    rsLoaded,
    rsInterActive,
    rsComplete,
} TReadyState;

typedef enum {
    seUnknown,
    seANSI,
    seUnicode,
    seUTF8,
} TStringEncoding;

typedef enum {
    stDefault, // use default rules for showing taskbar item
    stAlways, // always show taskbar item for the form
    stNever, // never show taskbar item for the form
} TShowInTaskbar;

typedef enum {
    tcbOk,
    tcbYes,
    tcbNo,
    tcbCancel,
    tcbRetry,
    tcbClose,
} TTaskDialogCommonButton;

typedef TSet TTaskDialogCommonButtons;

typedef enum {
    tfEnableHyperlinks,
    tfUseHiconMain,
    tfUseHiconFooter,
    tfAllowDialogCancellation,
    tfUseCommandLinks,
    tfUseCommandLinksNoIcon,
    tfExpandFooterArea,
    tfExpandedByDefault,
    tfVerificationFlagChecked,
    tfShowProgressBar,
    tfShowMarqueeProgressBar,
    tfCallbackTimer,
    tfPositionRelativeToWindow,
    tfRtlLayout,
    tfNoDefaultRadioButton,
    tfCanBeMinimized,
} TTaskDialogFlag;

typedef TSet TTaskDialogFlags;

typedef enum {
    tdiNone,
    tdiWarning,
    tdiError,
    tdiInformation,
    tdiShield,
    tdiQuestion,
} TTaskDialogIcon;

typedef enum {
    csExDropDown,
    csExSimple,
    csExDropDownList,
} TComboBoxExStyle;

typedef enum {
    csExCaseSensitive,
    csExNoEditImage,
    csExNoEditImageIndent,
    csExNoSizeLimit,
    csExPathWordBreak,
} TComboBoxExStyleEx;

typedef TSet TComboBoxExStyles;

typedef enum {
    acoAutoSuggest,
    acoAutoAppend,
    acoSearch,
    acoFilterPrefixes,
    acoUseTab,
    acoUpDownKeyDropsList,
    acoRtlReading,
} TAutoCompleteOption;

typedef TSet TAutoCompleteOptions;

typedef enum {
    dmDesktop,
    dmPrimary,
    dmMainForm,
    dmActiveForm,
} TDefaultMonitor;

typedef enum {
    tmAuto,
    tmFixed,
} TTransparentMode;

typedef enum {
    dimNormal,
    dimCenter,
    dimStretch,
} TDrawImageMode;

typedef enum {
    lboDrawFocusRect, // draw focus rect in case of owner drawing
} TListBoxOption;

typedef TSet TListBoxOptions;

typedef enum {
    amDontCare, // default antialiasing
    amOn, // enabled
    amOff, // disabled
} TAntialiasingMode;

typedef enum {
    sdAscending,
    sdDescending,
} TSortDirection;

typedef enum {
    tvestTheme, // use themed sign
    tvestPlusMinus, // use +/- sign
    tvestArrow, // use blank arrow
    tvestArrowFill, // use filled arrow
} TTreeViewExpandSignType;

typedef enum {
    tvoAllowMultiselect,
    tvoAutoExpand,
    tvoAutoInsertMark,
    tvoAutoItemHeight,
    tvoHideSelection,
    tvoHotTrack,
    tvoKeepCollapsedNodes,
    tvoReadOnly,
    tvoRightClickSelect,
    tvoRowSelect,
    tvoShowButtons,
    tvoShowLines,
    tvoShowRoot,
    tvoShowSeparators,
    tvoToolTips,
    tvoNoDoubleClickExpand,
    tvoThemedDraw,
} TTreeViewOption;

typedef TSet TTreeViewOptions;

typedef enum {
    gsmAlways, // always show
    gsmNever, // never show
    gsmApplication, // depends on application settings
    gsmSystem, // depends on system settings
} TGlyphShowMode;

typedef enum {
    nboShowCloseButtons,
    nboMultiLine,
    nboHidePageListPopup,
    nboKeyboardTabSwitch,
    nboShowAddTabButton,
    nboDoChangeOnSetIndex,
} TCTabControlOption;

typedef TSet TCTabControlOptions;

typedef enum {
    asrTop,
    asrBottom,
    asrCenter,
} TAnchorSideReference;

typedef enum {
    ccaFill,
    ccaLeftTop,
    ccaRightBottom,
    ccaCenter,
} TControlCellAlign;

typedef TSet TControlCellAligns;

typedef enum {
    crsAnchorAligning, // (like Delphi)
    crsScaleChilds, // scale children equally, keep space between children fixed
    crsHomogenousChildResize, // enlarge children equally (i.e. by the same amount of pixel)
    crsHomogenousSpaceResize, // enlarge space between children equally
} TChildControlResizeStyle;

typedef enum {
    cclNone,
    cclLeftToRightThenTopToBottom, // if BiDiMode <> bdLeftToRight then it becomes RightToLeft
    cclTopToBottomThenLeftToRight,
} TControlChildrenLayout;

typedef enum {
    clHorizontalThenVertical,
    clVerticalThenHorizontal,
} TColumnLayout;

typedef enum {
    siNone,
    siAscending,
    siDescending,
} TSortIndicator;

typedef enum {
    cbsAuto,
    cbsEllipsis,
    cbsNone,
    cbsPickList,
    cbsCheckboxColumn,
    cbsButton,
    cbsButtonColumn,
} TColumnButtonStyle;

typedef enum {
    gzNormal,
    gzFixedCols,
    gzFixedRows,
    gzFixedCells,
    gzInvalid,
} TGridZone;

typedef TSet TGridZoneSet;

typedef enum {
    soAscending,
    soDescending,
} TSortOrder;

typedef enum {
    aaNone,
    aaDown,
    aaRight,
    aaLeft,
    aaRightDown,
    aaLeftDown,
    aaRightUp,
    aaLeftUp,
} TAutoAdvance;

typedef enum {
    chpAll,
    chpAllNoDefault,
    chpTruncOnly,
} TCellHintPriority;

typedef enum {
    mwCursor,
    mwGrid,
} TMouseWheelOption;

typedef enum {
    goScrollToLastCol, // allow scrolling to last column (so that last column can be leftcol)
    goScrollToLastRow, // allow scrolling to last row (so that last row can be toprow)
} TGridOption2;

typedef TSet TGridOptions2;

typedef enum {
    rsmSingle,
    rsmMulti,
} TRangeSelectMode;

typedef enum {
    tsLazarus,
    tsStandard,
    tsNative,
} TTitleStyle;

typedef enum {
    poNone,
    poHeaderClick,
} TPrefixOption;

typedef enum {
    dsShowHeadings,
    dsShowDayNames,
    dsNoMonthChange,
    dsShowWeekNumbers,
    dsStartMonday,
} TDisplaySetting;

typedef enum {
    tf12, // 12 hours format, with am/pm string
    tf24, // 24 hours format
} TTimeFormat;

typedef enum {
    tdHM, // hour and minute
    tdHMS, // hour Minute and second
    tdHMSMs, // hour Minute Second and milisecond
} TTimeDisplay;

typedef enum {
    asClassicSmaller,
    asClassicLarger,
    asModernSmaller,
    asModernLarger,
    asYetAnotherShape,
    asTheme,
} TArrowShape;

typedef enum {
    ddoDMY,
    ddoMDY,
    ddoYMD,
    ddoTryDefault,
} TDateDisplayOrder;

typedef enum {
    dtpDay,
    dtpMonth,
    dtpYear,
    dtpHour,
    dtpMinute,
    dtpSecond,
    dtpMiliSec,
    dtpAMPM,
} TDateTimePart;

typedef TSet TDateTimeParts;

typedef enum {
    dtpoDoChangeOnSetDateTime,
    dtpoEnabledIfUnchecked,
    dtpoAutoCheck,
    dtpoFlatButton,
} TDateTimePickerOption;

typedef TSet TDateTimePickerOptions;

typedef enum {
    ioHorizontal,
    ioVertical,
} TImageOrientation;

typedef enum {
    lapDefault, // widgetset dependent
    lapFixedLayout, // A fixed absolute layout in all platforms
    lapAutoAdjustWithoutHorizontalScrolling, // Smartphone platforms use this one,
    lapAutoAdjustForDPI, // For desktops using High DPI, scale x and y to fit the DPI
} TLayoutAdjustmentPolicy;

typedef enum {
    htAbove,
    htBelow,
    htNowhere,
    htOnItem,
    htOnButton,
    htOnIcon,
    htOnIndent,
    htOnLabel,
    htOnRight,
    htOnStateIcon,
    htToLeft,
    htToRight,
} THitTest;

typedef TSet THitTests;

typedef enum {
    lisCut,
    lisDropTarget,
    lisFocused,
    lisSelected,
} TListItemState;

typedef TSet TListItemStates;

typedef enum {
    pcfText,
    pcfBitmap,
    pcfPixmap,
    pcfIcon,
    pcfPicture,
    pcfMetaFilePict,
    pcfObject,
    pcfComponent,
    pcfCustomData,
} TPredefinedClipboardFormat;

typedef enum {
    waAuto, // auto
    waForce, // always wrap after this control
    waAvoid, // try not to wrap after this control, if the control is already at the beginning of the row, wrap though
    waForbid, // never wrap after this control
} TWrapAfter;

typedef enum {
    gdeNormal, // no effect
    gdeDisabled, // grayed image
    gdeHighlighted, // a bit highlighted image
    gdeShadowed, // a bit shadowed image
    gde1Bit, // 1 Bit image (for non-XP windows buttons)
} TGraphicsDrawEffect;

/*--------------------类型定义--------------------*/

typedef struct TPoint {
    int32_t x;
    int32_t y;
} TPoint;

typedef struct TRect {
    int32_t left;
    int32_t top;
    int32_t right;
    int32_t bottom;
} TRect;

typedef struct TSize {
    int32_t cx;
    int32_t cy;
} TSize;

#ifndef _WIN32


typedef uintptr_t HWND;

typedef uintptr_t HBITMAP;

typedef uintptr_t HMENU;

typedef uintptr_t HICON;

typedef uintptr_t HDC;

typedef uintptr_t HFONT;

typedef uintptr_t HBRUSH;

typedef uintptr_t HPEN;

typedef uintptr_t HKEY;

typedef uintptr_t HMONITOR;

typedef uintptr_t HGDIOBJ;

typedef uintptr_t HMODULE;

typedef uint32_t COLORREF;

typedef uint32_t DWORD;

typedef HICON HCURSOR;

#endif


typedef uintptr_t HINST;

#ifndef _WIN32


typedef uintptr_t LPCWSTR;

typedef uintptr_t HRGN;

typedef uint32_t UINT;

typedef uintptr_t LPARAM;

typedef uintptr_t WPARAM;

typedef uintptr_t LRESULT;

#endif


typedef uintptr_t HResult;

#ifndef _WIN32


typedef uintptr_t HPALETTE;

typedef uintptr_t HRSRC;

typedef uintptr_t HGLOBAL;

#endif


typedef uintptr_t TFNWndEnumProc;

typedef uint64_t TXId;

typedef uint16_t ATOM;

typedef uint16_t TAtom;

typedef uintptr_t SIZE_T;

typedef uintptr_t DWORD_PTR;

typedef struct TUTF8Char {
    int8_t len;
    int8_t content[7];
} TUTF8Char;

typedef struct TMsg {
    HWND hwnd;
    uint32_t message;
    uintptr_t wParam;
    uintptr_t lParam;
    uint32_t time;
    TPoint pt;
} TMsg;

typedef struct TCursorInfo {
    uint32_t cbSize;
    uint32_t flags;
    HCURSOR hCursor;
    TPoint ptScreenPos;
} TCursorInfo;

typedef struct TWndClass {
    uint32_t style;
    uintptr_t lpfnWndProc;
    int32_t cbClsExtra;
    int32_t cbWndExtra;
    uintptr_t hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
} TWndClass;

typedef int32_t TModalResult;

typedef uint32_t TColor;

typedef uintptr_t THelpEventData;

typedef int16_t TTabOrder;

typedef uintptr_t PFNLVCOMPARE;

typedef uintptr_t PFNTVCOMPARE;

typedef int32_t Integer;

typedef uint32_t Cardinal;

typedef float Single;

typedef uint16_t Word;

typedef uint8_t Byte;

typedef uint8_t TFontCharset;

typedef int32_t TSpacingSize;

typedef uint16_t Char;

typedef uintptr_t TClass;

typedef uintptr_t TThreadID;

typedef uintptr_t TClipboardFormat;

typedef struct TGridCoord {
    int32_t x;
    int32_t y;
} TGridCoord;

typedef uintptr_t TCustomData;

typedef TRect TGridRect;

typedef uintptr_t IObjectArray;

typedef struct TSysLocale {
    int32_t defaultLCID;
    int32_t priLangID;
    int32_t subLangID;
    BOOL farEast;
    BOOL middleEast;
} TSysLocale;

typedef struct TSmallPoint {
    int16_t x;
    int16_t y;
} TSmallPoint;

typedef struct TGUID {
    uint32_t d1;
    uint16_t d2;
    uint16_t d3;
    uint8_t d4[8];
} TGUID;

typedef struct TLibResource {
    char* name;
    uintptr_t ptr;
} TLibResource;

typedef struct TResItem {
    uintptr_t name;
    uintptr_t value;
} TResItem;

typedef int32_t TConstraintSize;

typedef struct TAlignInfo {
    uintptr_t alignList;
    int32_t controlIndex;
    TAlign align;
    int32_t scratch;
} TAlignInfo;

typedef struct TCreateParams {
    LPCWSTR caption;
    uint32_t style;
    uint32_t exStyle;
    int32_t x;
    int32_t y;
    int32_t width;
    int32_t height;
    HWND wndParent;
    uintptr_t param;
    TWndClass windowClass;
    int8_t winClassName[64];
} TCreateParams;

typedef TBorderStyle TFormBorderStyle;

typedef int16_t TCursor;

typedef int32_t TLeftRight;

typedef TComboBoxStyle TColorBoxStyle;

typedef TAlignment TLinkAlignment;

typedef int32_t TNumGlyphs;

typedef TPixelFormat TJPEGPixelFormat;

typedef uint16_t TShortCut;

typedef int16_t TScrollBarInc;

typedef int32_t TBevelStyle;

typedef int32_t TLibType;

#if defined(_WIN64) || defined(__x86_64__)

typedef struct TDWordFiller {
    uint8_t filler[4];
} TDWordFiller;

typedef struct TWMKey {
    uint32_t msg;
    TDWordFiller msgFiller;
    uint16_t charCode[2];
    TDWordFiller charCodeUnusedFiller;
    uint32_t keyData;
    TDWordFiller keyDataFiller;
    uintptr_t result;
} TWMKey;

typedef struct TMessage {
    uint32_t msg;
    uint32_t _UnusedMsg;
    WPARAM wParam;
    LPARAM lParam;
    LRESULT result;
} TMessage;
#else

typedef struct TDWordFiller {
} TDWordFiller;

typedef struct TWMKey {
    uint32_t msg;
    TDWordFiller msgFiller;
    uint16_t charCode[2];
    TDWordFiller charCodeUnusedFiller;
    uint32_t keyData;
    TDWordFiller keyDataFiller;
    uintptr_t result;
} TWMKey;

typedef struct TMessage {
    uint32_t msg;
    WPARAM wParam;
    LPARAM lParam;
    LRESULT result;
} TMessage;
#endif


/*--------------------类的定义--------------------*/
typedef void* TObject;
typedef void* TComponent;
typedef void* TControl;
typedef void* TWinControl;
typedef void* TGraphic;
typedef void* TStrings;
typedef void* TStream;
typedef void* TCheckBox;
typedef void* TRadioButton;
typedef void* TGroupBox;
typedef void* TLabel;
typedef void* TListBox;
typedef void* TComboBox;
typedef void* TPanel;
typedef void* TImage;
typedef void* TLinkLabel;
typedef void* TSpeedButton;
typedef void* TSplitter;
typedef void* TRadioGroup;
typedef void* TStaticText;
typedef void* TColorBox;
typedef void* TColorListBox;
typedef void* TTrayIcon;
typedef void* TOpenDialog;
typedef void* TSaveDialog;
typedef void* TColorDialog;
typedef void* TFontDialog;
typedef void* TPrintDialog;
typedef void* TOpenPictureDialog;
typedef void* TSavePictureDialog;
typedef void* TSelectDirectoryDialog;
typedef void* TRichEdit;
typedef void* TTrackBar;
typedef void* TImageList;
typedef void* TUpDown;
typedef void* TProgressBar;
typedef void* TDateTimePicker;
typedef void* TMonthCalendar;
typedef void* TListView;
typedef void* TTreeView;
typedef void* TStatusBar;
typedef void* TToolBar;
typedef void* TBitBtn;
typedef void* TIcon;
typedef void* TBitmap;
typedef void* TMemo;
typedef void* TMemoryStream;
typedef void* TFont;
typedef void* TPopupMenu;
typedef void* TStringList;
typedef void* TBrush;
typedef void* TPen;
typedef void* TMenuItem;
typedef void* TPicture;
typedef void* TListColumns;
typedef void* TListItems;
typedef void* TTreeNodes;
typedef void* TListItem;
typedef void* TTreeNode;
typedef void* TPageControl;
typedef void* TTabSheet;
typedef void* TButton;
typedef void* TEdit;
typedef void* TScreen;
typedef void* TMouse;
typedef void* TListColumn;
typedef void* TCollectionItem;
typedef void* TStatusPanels;
typedef void* TStatusPanel;
typedef void* TSpinEdit;
typedef void* TFloatSpinEdit;
typedef void* TDirectoryEdit;
typedef void* TColorButton;
typedef void* TMiniWebview;
typedef void* TCanvas;
typedef void* TApplication;
typedef void* TMainMenu;
typedef void* TPngImage;
typedef void* TJPEGImage;
typedef void* TGIFImage;
typedef void* TActionList;
typedef void* TAction;
typedef void* TToolButton;
typedef void* TIniFile;
typedef void* TRegistry;
typedef void* TClipboard;
typedef void* TMonitor;
typedef void* TPaintBox;
typedef void* TTimer;
typedef void* TList;
typedef void* TForm;
typedef void* TParaAttributes;
typedef void* TTextAttributes;
typedef void* TIconOptions;
typedef void* Exception;
typedef void* TScrollBar;
typedef void* TMaskEdit;
typedef void* TShape;
typedef void* TBevel;
typedef void* TScrollBox;
typedef void* TCheckListBox;
typedef void* TGauge;
typedef void* TImageButton;
typedef void* TFindDialog;
typedef void* TReplaceDialog;
typedef void* TPrinterSetupDialog;
typedef void* TPageSetupDialog;
typedef void* TDragObject;
typedef void* TDragDockObject;
typedef void* TStringGrid;
typedef void* TDrawGrid;
typedef void* TValueListEditor;
typedef void* THeaderControl;
typedef void* THeaderSection;
typedef void* THeaderSections;
typedef void* TLabeledEdit;
typedef void* TBoundLabel;
typedef void* TFlowPanel;
typedef void* TFlowPanelControlList;
typedef void* TFlowPanelControl;
typedef void* TCoolBar;
typedef void* TCoolBands;
typedef void* TCoolBand;
typedef void* TCollection;
typedef void* TPrinter;
typedef void* TTaskDialog;
typedef void* TTaskDialogButtons;
typedef void* TTaskDialogButtonItem;
typedef void* TTaskDialogRadioButtonItem;
typedef void* TTaskDialogBaseButtonItem;
typedef void* TComboBoxEx;
typedef void* TComboExItems;
typedef void* TComboExItem;
typedef void* TFrame;
typedef void* TControlScrollBar;
typedef void* TSizeConstraints;
typedef void* TXButton;
typedef void* TAnchorSide;
typedef void* TControlBorderSpacing;
typedef void* TControlChildSizing;
typedef void* TCheckGroup;
typedef void* TToggleBox;
typedef void* TCheckComboBox;
typedef void* TGridColumnTitle;
typedef void* TGridColumn;
typedef void* TGridColumns;

/*--------------------事件定义--------------------*/
// void (TObject sender)
typedef void(*TNotifyEvent)(TObject);

// void (TObject sender, TUDBtnType button)
typedef void(*TUDClickEvent)(TObject, TUDBtnType);

// void (TObject sender, TCloseAction* action)
typedef void(*TCloseEvent)(TObject, TCloseAction*);

// void (TObject sender, BOOL* canClose)
typedef void(*TCloseQueryEvent)(TObject, BOOL*);

// void (TObject sender, TMenuItem source, BOOL rebuild)
typedef void(*TMenuChangeEvent)(TObject, TMenuItem, BOOL);

// void (TObject sender, char* link, TSysLinkType linkType)
typedef void(*TSysLinkEvent)(TObject, char*, TSysLinkType);

// void (TObject sender, Exception e)
typedef void(*TExceptionEvent)(TObject, Exception);

// void (TObject sender, Char* key, TShiftState shift)
typedef void(*TKeyEvent)(TObject, Char*, TShiftState);

// void (TObject sender, Char* key)
typedef void(*TKeyPressEvent)(TObject, Char*);

// void (TObject sender, TMouseButton button, TShiftState shift, int32_t x, int32_t y)
typedef void(*TMouseEvent)(TObject, TMouseButton, TShiftState, int32_t, int32_t);

// void (TObject sender, TShiftState shift, int32_t x, int32_t y)
typedef void(*TMouseMoveEvent)(TObject, TShiftState, int32_t, int32_t);

// void (TObject sender, TShiftState shift, int32_t wheelDelta, int32_t x, int32_t y, BOOL* handled)
typedef void(*TMouseWheelEvent)(TObject, TShiftState, int32_t, int32_t, int32_t, BOOL*);

// void (TWinControl control, int32_t index, TRect* aRect, TOwnerDrawState state)
typedef void(*TDrawItemEvent)(TWinControl, int32_t, TRect*, TOwnerDrawState);

// void (TObject sender, TListColumn column)
typedef void(*TLVColumnClickEvent)(TObject, TListColumn);

// void (TObject sender, TListColumn column, TPoint* point)
typedef void(*TLVColumnRClickEvent)(TObject, TListColumn, TPoint*);

// void (TObject sender, TListItem item, BOOL selected)
typedef void(*TLVSelectItemEvent)(TObject, TListItem, BOOL);

// void (TObject sender, TListItem item)
typedef void(*TLVCheckedItemEvent)(TObject, TListItem);

// void (TObject sender, TListItem item1, TListItem item2, int32_t data, int32_t* compare)
typedef void(*TLVCompareEvent)(TObject, TListItem, TListItem, int32_t, int32_t*);

// void (TObject sender, TListItem item, TItemChange change)
typedef void(*TLVChangeEvent)(TObject, TListItem, TItemChange);

// void (TObject sender, TListItem item)
typedef void(*TLVNotifyEvent)(TObject, TListItem);

// void (TListView sender, TRect* aRect, TCustomDrawStage stage, BOOL* defaultDraw)
typedef void(*TLVAdvancedCustomDrawEvent)(TListView, TRect*, TCustomDrawStage, BOOL*);

// void (TListView sender, TListItem item, TCustomDrawState state, TCustomDrawStage Stage, BOOL* defaultDraw)
typedef void(*TLVAdvancedCustomDrawItemEvent)(TListView, TListItem, TCustomDrawState, TCustomDrawStage, BOOL*);

// void (TListView sender, TListItem item, int32_t subItem, TCustomDrawState state, TCustomDrawStage stage, BOOL* defaultDraw)
typedef void(*TLVAdvancedCustomDrawSubItemEvent)(TListView, TListItem, int32_t, TCustomDrawState, TCustomDrawStage, BOOL*);

// void (TObject sender, TTreeNode node1, TTreeNode node2, int32_t data, int32_t* compare)
typedef void(*TTVCompareEvent)(TObject, TTreeNode, TTreeNode, int32_t, int32_t*);

// void (TObject sender, TTreeNode node)
typedef void(*TTVExpandedEvent)(TObject, TTreeNode);

// void (TObject sender, TTreeNode node)
typedef void(*TTVChangedEvent)(TObject, TTreeNode);

// void (TTreeView sender, TRect* aRect, TCustomDrawStage stage, BOOL* defaultDraw)
typedef void(*TTVAdvancedCustomDrawEvent)(TTreeView, TRect*, TCustomDrawStage, BOOL*);

// void (TTreeView sender, TTreeNode node, TCustomDrawState state, TCustomDrawStage stage, BOOL* paintImages, BOOL* defaultDraw)
typedef void(*TTVAdvancedCustomDrawItemEvent)(TTreeView, TTreeNode, TCustomDrawState, TCustomDrawStage, BOOL*, BOOL*);

// void (TObject sender, int32_t tabIndex, int32_t* imageIndex)
typedef void(*TTabGetImageEvent)(TObject, int32_t, int32_t*);

// void (TToolBar sender, TRect* aRect, TCustomDrawStage stage, BOOL* defaultDraw)
typedef void(*TTBAdvancedCustomDrawEvent)(TToolBar, TRect*, TCustomDrawStage, BOOL*);

// void ()
typedef void(*TThreadProc)();

// void (TObject sender, void* aFileNames, intptr_t len)
typedef void(*TDropFilesEvent)(TObject, void*, intptr_t);

// void (TObject sender, int32_t* minWidth, int32_t* minHeight, int32_t* maxWidth, int32_t* maxHeight)
typedef void(*TConstrainedResizeEvent)(TObject, int32_t*, int32_t*, int32_t*, int32_t*);

// void (uint16_t command, THelpEventData data, BOOL* callHelp, BOOL* result)
typedef void(*THelpEvent)(uint16_t, THelpEventData, BOOL*, BOOL*);

// void (TWMKey* msg, BOOL* handled)
typedef void(*TShortCutEvent)(TWMKey*, BOOL*);

// void (TObject sender, TPoint* mousePos, BOOL* handled)
typedef void(*TContextPopupEvent)(TObject, TPoint*, BOOL*);

// void (TObject sender, TObject source, int32_t x, int32_t y, TDragState state, BOOL* accept)
typedef void(*TDragOverEvent)(TObject, TObject, int32_t, int32_t, TDragState, BOOL*);

// void (TObject sender, TObject source, int32_t x, int32_t y)
typedef void(*TDragDropEvent)(TObject, TObject, int32_t, int32_t);

// void (TObject sender, TObject target, int32_t x, int32_t y)
typedef void(*TEndDragEvent)(TObject, TObject, int32_t, int32_t);

// void (TObject sender, TDragDockObject source, int32_t x, int32_t y)
typedef void(*TDockDropEvent)(TObject, TDragDockObject, int32_t, int32_t);

// void (TObject sender, TDragDockObject source, int32_t x, int32_t y, TDragState state, BOOL* accept)
typedef void(*TDockOverEvent)(TObject, TDragDockObject, int32_t, int32_t, TDragState, BOOL*);

// void (TObject sender, TControl client, TControl newTarget, BOOL* allow)
typedef void(*TUnDockEvent)(TObject, TControl, TControl, BOOL*);

// void (TObject sender, TDragDockObject* dragObject)
typedef void(*TStartDockEvent)(TObject, TDragDockObject*);

// void (TObject sender, TControl dockClient, TRect* influenceRect, TPoint* mousePos, BOOL* canDock)
typedef void(*TGetSiteInfoEvent)(TObject, TControl, TRect*, TPoint*, BOOL*);

// void (TObject sender, TShiftState shift, TPoint* mousePos, BOOL* handled)
typedef void(*TMouseWheelUpDownEvent)(TObject, TShiftState, TPoint*, BOOL*);

// void (TObject sender, BOOL isColumn, int32_t sIndex, int32_t tIndex)
typedef void(*TGridOperationEvent)(TObject, BOOL, int32_t, int32_t);

// void (TObject sender, int32_t aCol, int32_t aRow, TRect* aRect, TGridDrawState state)
typedef void(*TDrawCellEvent)(TObject, int32_t, int32_t, TRect*, TGridDrawState);

// void (TObject sender, int32_t aCol, int32_t aRow)
typedef void(*TFixedCellClickEvent)(TObject, int32_t, int32_t);

// void (TObject sender, int32_t aCol, int32_t aRow, char** value)
typedef void(*TGetEditEvent)(TObject, int32_t, int32_t, char**);

// void (TObject sender, int32_t aCol, int32_t aRow, BOOL* canSelect)
typedef void(*TSelectCellEvent)(TObject, int32_t, int32_t, BOOL*);

// void (TObject sender, int32_t aCol, int32_t aRow, char* value)
typedef void(*TSetEditEvent)(TObject, int32_t, int32_t, char*);

// void (THeaderControl headerControl, THeaderSection section, TRect* aRect, BOOL pressed)
typedef void(*TDrawSectionEvent)(THeaderControl, THeaderSection, TRect*, BOOL);

// void (THeaderControl headerControl, THeaderSection section)
typedef void(*TSectionNotifyEvent)(THeaderControl, THeaderSection);

// void (THeaderControl headerControl, THeaderSection section, int32_t width, TSectionTrackState state)
typedef void(*TSectionTrackEvent)(THeaderControl, THeaderSection, int32_t, TSectionTrackState);

// void (TObject sender, THeaderSection fromSection, THeaderSection toSection, BOOL* allowDrag)
typedef void(*TSectionDragEvent)(TObject, THeaderSection, THeaderSection, BOOL*);

// void (THeaderControl headerControl, THeaderSection section)
typedef void(*TCustomSectionNotifyEvent)(THeaderControl, THeaderSection);

// void (TObject sender, TMouseButton button, TShiftState shift, int32_t x, int32_t y, int32_t hitTest, TMouseActivate* mouseActivate)
typedef void(*TMouseActivateEvent)(TObject, TMouseButton, TShiftState, int32_t, int32_t, int32_t, TMouseActivate*);

// void (TWinControl control, int32_t index, char** data)
typedef void(*TLBGetDataEvent)(TWinControl, int32_t, char**);

// void (TWinControl control, int32_t index, TObject dataObject)
typedef void(*TLBGetDataObjectEvent)(TWinControl, int32_t, TObject);

// void (TWinControl control, char* findString, int32_t result)
typedef void(*TLBFindDataEvent)(TWinControl, char*, int32_t);

// void (TWinControl control, int32_t index, int32_t* height)
typedef void(*TMeasureItemEvent)(TWinControl, int32_t, int32_t*);

// void (TObject sender, TListItem item, TItemChange change, BOOL* allowChange)
typedef void(*TLVChangingEvent)(TObject, TListItem, TItemChange, BOOL*);

// void (TObject sender, TListItem item)
typedef void(*TLVDataEvent)(TObject, TListItem);

// void (TObject sender, TItemFind find, char* findString, TPoint* findPosition, TCustomData findData, int32_t startIndex, TSearchDirection direction, BOOL warp, int32_t* index)
typedef void(*TLVDataFindEvent)(TObject, TItemFind, char*, TPoint*, TCustomData, int32_t, TSearchDirection, BOOL, int32_t*);

// void (TObject sender, TListItem item)
typedef void(*TLVDeletedEvent)(TObject, TListItem);

// void (TObject sender, TListItem item, BOOL* allowEdit)
typedef void(*TLVEditingEvent)(TObject, TListItem, BOOL*);

// void (TObject sender, TListItem item, char** s)
typedef void(*TLVEditedEvent)(TObject, TListItem, char**);

// void (TObject sender, TCanvas aCanvas, int32_t* width, int32_t* height)
typedef void(*TMenuMeasureItemEvent)(TObject, TCanvas, int32_t*, int32_t*);

// void (TObject sender, BOOL* allowChange)
typedef void(*TTabChangingEvent)(TObject, BOOL*);

// void (TObject sender, TTreeNode node, BOOL* allowChange)
typedef void(*TTVChangingEvent)(TObject, TTreeNode, BOOL*);

// void (TObject sender, TTreeNode node, BOOL* allowCollapse)
typedef void(*TTVCollapsingEvent)(TObject, TTreeNode, BOOL*);

// void (TObject sender, TTreeNode node, char** s)
typedef void(*TTVEditedEvent)(TObject, TTreeNode, char**);

// void (TObject sender, TTreeNode node, BOOL* allowEdit)
typedef void(*TTVEditingEvent)(TObject, TTreeNode, BOOL*);

// void (TObject sender, TTreeNode node, BOOL* allowExpansion)
typedef void(*TTVExpandingEvent)(TObject, TTreeNode, BOOL*);

// void (TObject sender, TTreeNode node, char** hint)
typedef void(*TTVHintEvent)(TObject, TTreeNode, char**);

// void (TObject sender, BOOL* allowChange)
typedef void(*TUDChangingEvent)(TObject, BOOL*);

// void (TObject sender, uint32_t winErrorCode, char* errorDescription, BOOL* handled)
typedef void(*TCreatingListErrorEvent)(TObject, uint32_t, char*, BOOL*);

// void (TListView sender, TRect* aRect, BOOL* defaultDraw)
typedef void(*TLVCustomDrawEvent)(TListView, TRect*, BOOL*);

// void (TListView sender, TListItem item, TCustomDrawState state, BOOL* defaultDraw)
typedef void(*TLVCustomDrawItemEvent)(TListView, TListItem, TCustomDrawState, BOOL*);

// void (TListView sender, TListItem item, int32_t subItem, TCustomDrawState state, BOOL* defaultDraw)
typedef void(*TLVCustomDrawSubItemEvent)(TListView, TListItem, int32_t, TCustomDrawState, BOOL*);

// void (TListView sender, TListItem item, TRect* rect, TOwnerDrawState state)
typedef void(*TLVDrawItemEvent)(TListView, TListItem, TRect*, TOwnerDrawState);

// void (TObject sender, int32_t startIndex, int32_t endIndex)
typedef void(*TLVDataHintEvent)(TObject, int32_t, int32_t);

// void (TTreeView sender, TRect* aRect, BOOL* defaultDraw)
typedef void(*TTVCustomDrawEvent)(TTreeView, TRect*, BOOL*);

// void (TTreeView sender, TTreeNode node, TCustomDrawState state, BOOL* defaultDraw)
typedef void(*TTVCustomDrawItemEvent)(TTreeView, TTreeNode, TCustomDrawState, BOOL*);

// void (TMessage* msg)
typedef void(*TWndProcEvent)(TMessage*);

// void (TObject sender, char* text)
typedef void(*TWebTitleChangeEvent)(TObject, char*);

// void (TObject sender, char* funcName, char* args, char** retVal)
typedef void(*TWebJSExternalEvent)(TObject, char*, char*, char**);

// void (TObject sender, TModalResult modalResult, BOOL* canClose)
typedef void(*TTaskDlgClickEvent)(TObject, TModalResult, BOOL*);

// void (TObject sender, uint32_t tickCount, BOOL* reset)
typedef void(*TTaskDlgTimerEvent)(TObject, uint32_t, BOOL*);

// void (TWinControl sender, TControl control, int32_t* newLeft, int32_t* newTop, int32_t* newWidth, int32_t* newHeight, TRect* alignRect, TAlignInfo alignInfo)
typedef void(*TAlignPositionEvent)(TWinControl, TControl, int32_t*, int32_t*, int32_t*, int32_t*, TRect*, TAlignInfo);

// void (TObject sender, int32_t index)
typedef void(*TCheckGroupClicked)(TObject, int32_t);

// void (TObject sender, int32_t aCol, int32_t aRow)
typedef void(*TOnSelectEvent)(TObject, int32_t, int32_t);

// void (TObject sender, int32_t aCol, int32_t aRow, TCheckBoxState aState)
typedef void(*TToggledCheckboxEvent)(TObject, int32_t, int32_t, TCheckBoxState);

// void (TObject sender, int32_t ACol, int32_t ARow, int32_t BCol, int32_t BRow, int32_t* result)
typedef void(*TOnCompareCells)(TObject, int32_t, int32_t, int32_t, int32_t, int32_t*);

// void (TObject sender, int32_t ACol, int32_t ARow, char** hintText)
typedef void(*TGetCellHintEvent)(TObject, int32_t, int32_t, char**);

// void (TObject sender, int32_t ACol, int32_t ARow, TCheckBoxState* value)
typedef void(*TGetCheckboxStateEvent)(TObject, int32_t, int32_t, TCheckBoxState*);

// void (TObject sender, int32_t ACol, int32_t ARow, TCheckBoxState Value)
typedef void(*TSetCheckboxStateEvent)(TObject, int32_t, int32_t, TCheckBoxState);

// void (TObject sender, BOOL isColumn, int32_t index)
typedef void(*THdrEvent)(TObject, BOOL, int32_t);

// void (TObject sender, BOOL isColumn, int32_t aIndex, int32_t aSize)
typedef void(*THeaderSizingEvent)(TObject, BOOL, int32_t, int32_t);

// void (TObject sender, int32_t aCol, int32_t aRow, TWinControl* editor)
typedef void(*TSelectEditorEvent)(TObject, int32_t, int32_t, TWinControl*);

// void (TObject sender, int32_t aCol, int32_t aRow, TCheckBoxState CheckedState, TBitmap* aBitmap)
typedef void(*TUserCheckBoxBitmapEvent)(TObject, int32_t, int32_t, TCheckBoxState, TBitmap*);

// void (TObject sender, int32_t aCol, int32_t aRow, char* oldValue, char** newValue)
typedef void(*TValidateEntryEvent)(TObject, int32_t, int32_t, char*, char**);

// void (TObject sender, int32_t aCol, int32_t aRow, TGridDrawState aState)
typedef void(*TOnPrepareCanvasEvent)(TObject, int32_t, int32_t, TGridDrawState);

// void (TObject sender, char** value)
typedef void(*TAcceptFileNameEvent)(TObject, char**);

// void (TObject sender, int32_t index)
typedef void(*TCheckItemChange)(TObject, int32_t);

// void (TObject sender, TUTF8Char* utf8key)
typedef void(*TUTF8KeyPressEvent)(TObject, TUTF8Char*);

// void (TObject sender, TCanvas aCanvas, TRect* aRect, TOwnerDrawState aState)
typedef void(*TMenuDrawItemEvent)(TObject, TCanvas, TRect*, TOwnerDrawState);




// 集合加法，val...中存储为位的索引，下标为0
TSet Include(TSet s, uint8_t val);
//TSet Include(TSet s, ...) {
//    uint32_t r = (uint32_t)s;
//    va_list varlist;
//    va_start(varlist, s);
//    uint8_t val;
//    while ((val = va_arg(varlist, int)) != -1) {
//        r |= (1 << (uint8_t)val);
//    }
//    va_end(varlist);
//    return (TSet)r;
//}

// 集合减法，val...中存储为位的索引，下标为0
TSet Exclude(TSet s, uint8_t val);
//TSet Exclude(TSet s, ...) {
//    uint32_t r = (uint32_t)s;
//    va_list varlist;
//    va_start(varlist, s);
//    uint8_t val;
//    while ((val = va_arg(varlist, int)) != -1) {
//        r &= ~(1 << (uint8_t)val);
//    }
//    va_end(varlist);
//    return (TSet)r;
//}

// 集合类型的判断，val表示位数，下标为0
BOOL InSet(uint32_t s, uint8_t val);


// liblcl句柄
static uintptr_t libHandle;


// 函数call
typedef intptr_t LCLAPI (*SYSCALL0)();
typedef intptr_t LCLAPI (*SYSCALL1)(intptr_t);
typedef intptr_t LCLAPI (*SYSCALL2)(intptr_t, uintptr_t);
typedef intptr_t LCLAPI (*SYSCALL3)(intptr_t, uintptr_t, uintptr_t);
typedef intptr_t LCLAPI (*SYSCALL4)(intptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef intptr_t LCLAPI (*SYSCALL5)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef intptr_t LCLAPI (*SYSCALL6)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef intptr_t LCLAPI (*SYSCALL7)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef intptr_t LCLAPI (*SYSCALL8)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef intptr_t LCLAPI (*SYSCALL9)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef intptr_t LCLAPI (*SYSCALL10)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef intptr_t LCLAPI (*SYSCALL11)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef intptr_t LCLAPI (*SYSCALL12)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);

// 全局实例类定义
extern TApplication Application;
extern TScreen Screen;
extern TMouse Mouse;
extern TClipboard Clipboard;
extern TPrinter Printer;

// 全局互斥锁
#ifdef __GNUC__
static pthread_mutex_t threadSyncMutex;
#else
static RTL_CRITICAL_SECTION threadSyncMutex;
#endif

// 初始liblcl库
static void init_lib_lcl();
// 反向初始liblcl库
static void un_init_lib_lcl();


// 获取过程地址
static void* get_proc_addr(const char *name) {
#ifdef _WIN32
    return (void*)GetProcAddress((HMODULE)libHandle, name);
#else
    return (void*)dlsym((void*)libHandle, name);
#endif
}

// 加载库
BOOL load_liblcl(const char *name);

// 关闭库
void close_liblcl();

/*--------------------一些其它函数--------------------*/

/*--------------------一些其它函数--------------------*/

TStringEncoding
LibStringEncoding();

uint32_t
LibVersion();

void
SysLocale(TSysLocale* AInfo);

TApplication
Application_Instance();

TMouse
Mouse_Instance();

TScreen
Screen_Instance();

TShortCut
TextToShortCut(CChar char* AText);

char*
ShortCutToText(TShortCut AVal);

TClipboard
Clipboard_Instance();

TClipboardFormat
PredefinedClipboardFormat(TPredefinedClipboardFormat AFormat);

TClipboard
SetClipboard(TClipboard ANewClipboard);
#ifndef _WIN32


LRESULT
SendMessage(HWND hWd, uint32_t msg, WPARAM wParam, LPARAM lParam);

BOOL
PostMessage(HWND hWd, uint32_t msg, WPARAM wParam, LPARAM lParam);

BOOL
IsIconic(HWND hWnd);

BOOL
IsWindow(HWND hWnd);

BOOL
IsZoomed(HWND hWnd);

BOOL
IsWindowVisible(HWND hWnd);

HDC
GetDC(HWND hWnd);

int32_t
ReleaseDC(HWND hWnd, HDC dc);

BOOL
SetForegroundWindow(HWND hWnd);

TClipboardFormat
RegisterClipboardFormat(CChar char* AFormat);

HWND
WindowFromPoint(TPoint* point);

#endif


void
SetEventCallback(void* APtr);

void
SetMessageCallback(void* APtr);

void
SetThreadSyncCallback(void* APtr);

void
SetExceptionHandlerCallback(void* APtr);

void
SetRequestCallCreateParamsCallback(void* APtr);

void
SetRemoveEventCallback(void* APtr);

char*
GetStringArrOf(void* P, intptr_t AIndex);

intptr_t
StrLen(CChar char* p);

void
ShowMessage(CChar char* AMsg);

HINST
GetMainInstance();

int32_t
MessageDlg(CChar char* Msg, TMsgDlgType DlgType, TMsgDlgButtons Buttons, int32_t HelpCtx);

void
Synchronize(BOOL AUseMsg);

TThreadID
MainThreadId();

TThreadID
CurrentThreadId();

void
SysOpen(CChar char* FileName);

char*
ExtractFilePath(CChar char* AFileName);

BOOL
FileExists(CChar char* AFileName);

BOOL
SelectDirectory1(CChar char** Directory, TSelectDirOpts Options, int32_t HelpCtx);

BOOL
SelectDirectory2(CChar char* Caption, CChar char* Root, BOOL AShowHidden, CChar char** Directory);

char*
InputBox(CChar char* ACaption, CChar char* APrompt, CChar char* ADefault);

BOOL
InputQuery(CChar char* ACaption, CChar char* APrompt, CChar char* Value, CChar char** AOut);

char*
PasswordBox(CChar char* ACaption, CChar char* APrompt);

int32_t
InputCombo(CChar char* ACaption, CChar char* APrompt, TStrings AList);

char*
InputComboEx(CChar char* ACaption, CChar char* APrompt, TStrings AList, BOOL AllowCustomText);
#ifdef _WIN32


void
CreateURLShortCut(CChar char* ADestPath, CChar char* AShortCutName, CChar char* AURL);

BOOL
CreateShortCut(CChar char* ADestPath, CChar char* AShortCutName, CChar char* ASrcFileName, CChar char* AIconFileName, CChar char* ADescription, CChar char* ACmdArgs);

#endif


void
SetPropertyValue(TObject Instance, CChar char* PropName, CChar char* Value);

void
SetPropertySecValue(TObject Instance, CChar char* PropName, CChar char* SecPropName, CChar char* Value);

char*
GUIDToString(TGUID AGUID);

TGUID
StringToGUID(CChar char* AGUIDStr);

TGUID
CreateGUID();

TPrinter
Printer_Instance();

char*
LibAbout();

int32_t
GetLibResourceCount();

TResItem
GetLibResourceItem(int32_t AIndex);

void
ModifyLibResource(void* APtr, CChar char* AValue);

TLibType
GetLibType();

void
InitGoDll(TThreadID AMainThreadId);

TWinControl
FindControl(HWND AHandle);

TControl
FindLCLControl(TPoint AScreenPos);

TWinControl
FindOwnerControl(HWND Handle);

TControl
FindControlAtPosition(TPoint APosition, BOOL AllowDisabled);

TWinControl
FindLCLWindow(TPoint AScreenPos, BOOL AllowDisabled);

TControl
FindDragTarget(TPoint APosition, BOOL AllowDisabled);

#ifdef __linux__


PGtkFixed
GtkWidget_GetGtkFixed(HWND Ah);

PGdkWindow
GdkWindow_FromForm(TForm AForm);

void
GdkWindow_GetXId(PGdkWindow AW, TXId* AXId);

PGdkWindow
GtkWidget_Window(HWND Ah);

#endif


#ifdef __APPLE__


MyNSWindow
NSWindow_FromForm(TForm AForm);

#endif


void
ResFormLoadFromResourceName(uintptr_t AInstance, CChar char* AResName, TComponent ARoot);

void
ResFormLoadFromFile(CChar char* AFileName, TComponent ARoot);

void
ResFormLoadFromStream(TStream AStream, TComponent ARoot);

BOOL
ResFormRegisterFormResource(CChar char* AClassName, void* AData, int32_t ALen);

BOOL
ResFormLoadFromClassName(CChar char* AClassName, TComponent ARoot);
/*--------------------类成员函数--------------------*/

// -------------------TObject-------------------

TObject
Object_Create();

void
Object_Free(TObject AObj);

TClass
Object_ClassType(TObject AObj);

char*
Object_ClassName(TObject AObj);

int32_t
Object_InstanceSize(TObject AObj);

BOOL
Object_InheritsFrom(TObject AObj, TClass AClass);

BOOL
Object_Equals(TObject AObj, TObject Obj);

int32_t
Object_GetHashCode(TObject AObj);

char*
Object_ToString(TObject AObj);

TClass
Object_StaticClassType();

// -------------------TComponent-------------------

TComponent
Component_Create(TComponent AOwner);

void
Component_Free(TComponent AObj);

TComponent
Component_FindComponent(TComponent AObj, CChar char* AName);

char*
Component_GetNamePath(TComponent AObj);

BOOL
Component_HasParent(TComponent AObj);

void
Component_Assign(TComponent AObj, TObject Source);

TClass
Component_ClassType(TComponent AObj);

char*
Component_ClassName(TComponent AObj);

int32_t
Component_InstanceSize(TComponent AObj);

BOOL
Component_InheritsFrom(TComponent AObj, TClass AClass);

BOOL
Component_Equals(TComponent AObj, TObject Obj);

int32_t
Component_GetHashCode(TComponent AObj);

char*
Component_ToString(TComponent AObj);

int32_t
Component_GetComponentCount(TComponent AObj);

int32_t
Component_GetComponentIndex(TComponent AObj);

void
Component_SetComponentIndex(TComponent AObj, int32_t AValue);

TComponent
Component_GetOwner(TComponent AObj);

char*
Component_GetName(TComponent AObj);

void
Component_SetName(TComponent AObj, CChar char* AValue);

intptr_t
Component_GetTag(TComponent AObj);

void
Component_SetTag(TComponent AObj, intptr_t AValue);

TComponent
Component_GetComponents(TComponent AObj, int32_t AIndex);

TClass
Component_StaticClassType();

// -------------------TControl-------------------

TControl
Control_Create(TComponent AOwner);

void
Control_Free(TControl AObj);

void
Control_BringToFront(TControl AObj);

TPoint
Control_ClientToScreen(TControl AObj, TPoint Point);

TPoint
Control_ClientToParent(TControl AObj, TPoint Point, TWinControl AParent);

BOOL
Control_Dragging(TControl AObj);

BOOL
Control_HasParent(TControl AObj);

void
Control_Hide(TControl AObj);

void
Control_Invalidate(TControl AObj);

intptr_t
Control_Perform(TControl AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
Control_Refresh(TControl AObj);

void
Control_Repaint(TControl AObj);

TPoint
Control_ScreenToClient(TControl AObj, TPoint Point);

TPoint
Control_ParentToClient(TControl AObj, TPoint Point, TWinControl AParent);

void
Control_SendToBack(TControl AObj);

void
Control_SetBounds(TControl AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
Control_Show(TControl AObj);

void
Control_Update(TControl AObj);

int32_t
Control_GetTextBuf(TControl AObj, CChar char* Buffer, int32_t BufSize);

int32_t
Control_GetTextLen(TControl AObj);

void
Control_SetTextBuf(TControl AObj, CChar char* Buffer);

TComponent
Control_FindComponent(TControl AObj, CChar char* AName);

char*
Control_GetNamePath(TControl AObj);

void
Control_Assign(TControl AObj, TObject Source);

TClass
Control_ClassType(TControl AObj);

char*
Control_ClassName(TControl AObj);

int32_t
Control_InstanceSize(TControl AObj);

BOOL
Control_InheritsFrom(TControl AObj, TClass AClass);

BOOL
Control_Equals(TControl AObj, TObject Obj);

int32_t
Control_GetHashCode(TControl AObj);

char*
Control_ToString(TControl AObj);

void
Control_AnchorToNeighbour(TControl AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Control_AnchorParallel(TControl AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Control_AnchorHorizontalCenterTo(TControl AObj, TControl ASibling);

void
Control_AnchorVerticalCenterTo(TControl AObj, TControl ASibling);

void
Control_AnchorSame(TControl AObj, TAnchorKind ASide, TControl ASibling);

void
Control_AnchorAsAlign(TControl AObj, TAlign ATheAlign, int32_t ASpace);

void
Control_AnchorClient(TControl AObj, int32_t ASpace);

int32_t
Control_ScaleDesignToForm(TControl AObj, int32_t ASize);

int32_t
Control_ScaleFormToDesign(TControl AObj, int32_t ASize);

int32_t
Control_Scale96ToForm(TControl AObj, int32_t ASize);

int32_t
Control_ScaleFormTo96(TControl AObj, int32_t ASize);

int32_t
Control_Scale96ToFont(TControl AObj, int32_t ASize);

int32_t
Control_ScaleFontTo96(TControl AObj, int32_t ASize);

int32_t
Control_ScaleScreenToFont(TControl AObj, int32_t ASize);

int32_t
Control_ScaleFontToScreen(TControl AObj, int32_t ASize);

int32_t
Control_Scale96ToScreen(TControl AObj, int32_t ASize);

int32_t
Control_ScaleScreenTo96(TControl AObj, int32_t ASize);

void
Control_AutoAdjustLayout(TControl AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
Control_FixDesignFontsPPI(TControl AObj, int32_t ADesignTimePPI);

void
Control_ScaleFontsPPI(TControl AObj, int32_t AToPPI, double AProportion);

BOOL
Control_GetEnabled(TControl AObj);

void
Control_SetEnabled(TControl AObj, BOOL AValue);

TAction
Control_GetAction(TControl AObj);

void
Control_SetAction(TControl AObj, TAction AValue);

TAlign
Control_GetAlign(TControl AObj);

void
Control_SetAlign(TControl AObj, TAlign AValue);

TAnchors
Control_GetAnchors(TControl AObj);

void
Control_SetAnchors(TControl AObj, TAnchors AValue);

TBiDiMode
Control_GetBiDiMode(TControl AObj);

void
Control_SetBiDiMode(TControl AObj, TBiDiMode AValue);

TRect
Control_GetBoundsRect(TControl AObj);

void
Control_SetBoundsRect(TControl AObj, TRect AValue);

int32_t
Control_GetClientHeight(TControl AObj);

void
Control_SetClientHeight(TControl AObj, int32_t AValue);

TPoint
Control_GetClientOrigin(TControl AObj);

TRect
Control_GetClientRect(TControl AObj);

int32_t
Control_GetClientWidth(TControl AObj);

void
Control_SetClientWidth(TControl AObj, int32_t AValue);

TSizeConstraints
Control_GetConstraints(TControl AObj);

void
Control_SetConstraints(TControl AObj, TSizeConstraints AValue);

TControlState
Control_GetControlState(TControl AObj);

void
Control_SetControlState(TControl AObj, TControlState AValue);

TControlStyle
Control_GetControlStyle(TControl AObj);

void
Control_SetControlStyle(TControl AObj, TControlStyle AValue);

BOOL
Control_GetFloating(TControl AObj);

BOOL
Control_GetShowHint(TControl AObj);

void
Control_SetShowHint(TControl AObj, BOOL AValue);

BOOL
Control_GetVisible(TControl AObj);

void
Control_SetVisible(TControl AObj, BOOL AValue);

TWinControl
Control_GetParent(TControl AObj);

void
Control_SetParent(TControl AObj, TWinControl AValue);

int32_t
Control_GetLeft(TControl AObj);

void
Control_SetLeft(TControl AObj, int32_t AValue);

int32_t
Control_GetTop(TControl AObj);

void
Control_SetTop(TControl AObj, int32_t AValue);

int32_t
Control_GetWidth(TControl AObj);

void
Control_SetWidth(TControl AObj, int32_t AValue);

int32_t
Control_GetHeight(TControl AObj);

void
Control_SetHeight(TControl AObj, int32_t AValue);

TCursor
Control_GetCursor(TControl AObj);

void
Control_SetCursor(TControl AObj, TCursor AValue);

char*
Control_GetHint(TControl AObj);

void
Control_SetHint(TControl AObj, CChar char* AValue);

int32_t
Control_GetComponentCount(TControl AObj);

int32_t
Control_GetComponentIndex(TControl AObj);

void
Control_SetComponentIndex(TControl AObj, int32_t AValue);

TComponent
Control_GetOwner(TControl AObj);

char*
Control_GetName(TControl AObj);

void
Control_SetName(TControl AObj, CChar char* AValue);

intptr_t
Control_GetTag(TControl AObj);

void
Control_SetTag(TControl AObj, intptr_t AValue);

TAnchorSide
Control_GetAnchorSideLeft(TControl AObj);

void
Control_SetAnchorSideLeft(TControl AObj, TAnchorSide AValue);

TAnchorSide
Control_GetAnchorSideTop(TControl AObj);

void
Control_SetAnchorSideTop(TControl AObj, TAnchorSide AValue);

TAnchorSide
Control_GetAnchorSideRight(TControl AObj);

void
Control_SetAnchorSideRight(TControl AObj, TAnchorSide AValue);

TAnchorSide
Control_GetAnchorSideBottom(TControl AObj);

void
Control_SetAnchorSideBottom(TControl AObj, TAnchorSide AValue);

TControlBorderSpacing
Control_GetBorderSpacing(TControl AObj);

void
Control_SetBorderSpacing(TControl AObj, TControlBorderSpacing AValue);

TComponent
Control_GetComponents(TControl AObj, int32_t AIndex);

TAnchorSide
Control_GetAnchorSide(TControl AObj, TAnchorKind AKind);

TClass
Control_StaticClassType();

// -------------------TWinControl-------------------

TWinControl
WinControl_Create(TComponent AOwner);

void
WinControl_Free(TWinControl AObj);

BOOL
WinControl_CanFocus(TWinControl AObj);

BOOL
WinControl_ContainsControl(TWinControl AObj, TControl Control);

TControl
WinControl_ControlAtPos(TWinControl AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
WinControl_DisableAlign(TWinControl AObj);

void
WinControl_EnableAlign(TWinControl AObj);

TControl
WinControl_FindChildControl(TWinControl AObj, CChar char* ControlName);

void
WinControl_FlipChildren(TWinControl AObj, BOOL AllLevels);

BOOL
WinControl_Focused(TWinControl AObj);

BOOL
WinControl_HandleAllocated(TWinControl AObj);

void
WinControl_InsertControl(TWinControl AObj, TControl AControl);

void
WinControl_Invalidate(TWinControl AObj);

void
WinControl_PaintTo(TWinControl AObj, HDC DC, int32_t X, int32_t Y);

void
WinControl_RemoveControl(TWinControl AObj, TControl AControl);

void
WinControl_Realign(TWinControl AObj);

void
WinControl_Repaint(TWinControl AObj);

void
WinControl_ScaleBy(TWinControl AObj, int32_t M, int32_t D);

void
WinControl_ScrollBy(TWinControl AObj, int32_t DeltaX, int32_t DeltaY);

void
WinControl_SetBounds(TWinControl AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
WinControl_SetFocus(TWinControl AObj);

void
WinControl_Update(TWinControl AObj);

void
WinControl_BringToFront(TWinControl AObj);

TPoint
WinControl_ClientToScreen(TWinControl AObj, TPoint Point);

TPoint
WinControl_ClientToParent(TWinControl AObj, TPoint Point, TWinControl AParent);

BOOL
WinControl_Dragging(TWinControl AObj);

BOOL
WinControl_HasParent(TWinControl AObj);

void
WinControl_Hide(TWinControl AObj);

intptr_t
WinControl_Perform(TWinControl AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
WinControl_Refresh(TWinControl AObj);

TPoint
WinControl_ScreenToClient(TWinControl AObj, TPoint Point);

TPoint
WinControl_ParentToClient(TWinControl AObj, TPoint Point, TWinControl AParent);

void
WinControl_SendToBack(TWinControl AObj);

void
WinControl_Show(TWinControl AObj);

int32_t
WinControl_GetTextBuf(TWinControl AObj, CChar char* Buffer, int32_t BufSize);

int32_t
WinControl_GetTextLen(TWinControl AObj);

void
WinControl_SetTextBuf(TWinControl AObj, CChar char* Buffer);

TComponent
WinControl_FindComponent(TWinControl AObj, CChar char* AName);

char*
WinControl_GetNamePath(TWinControl AObj);

void
WinControl_Assign(TWinControl AObj, TObject Source);

TClass
WinControl_ClassType(TWinControl AObj);

char*
WinControl_ClassName(TWinControl AObj);

int32_t
WinControl_InstanceSize(TWinControl AObj);

BOOL
WinControl_InheritsFrom(TWinControl AObj, TClass AClass);

BOOL
WinControl_Equals(TWinControl AObj, TObject Obj);

int32_t
WinControl_GetHashCode(TWinControl AObj);

char*
WinControl_ToString(TWinControl AObj);

void
WinControl_AnchorToNeighbour(TWinControl AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
WinControl_AnchorParallel(TWinControl AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
WinControl_AnchorHorizontalCenterTo(TWinControl AObj, TControl ASibling);

void
WinControl_AnchorVerticalCenterTo(TWinControl AObj, TControl ASibling);

void
WinControl_AnchorSame(TWinControl AObj, TAnchorKind ASide, TControl ASibling);

void
WinControl_AnchorAsAlign(TWinControl AObj, TAlign ATheAlign, int32_t ASpace);

void
WinControl_AnchorClient(TWinControl AObj, int32_t ASpace);

int32_t
WinControl_ScaleDesignToForm(TWinControl AObj, int32_t ASize);

int32_t
WinControl_ScaleFormToDesign(TWinControl AObj, int32_t ASize);

int32_t
WinControl_Scale96ToForm(TWinControl AObj, int32_t ASize);

int32_t
WinControl_ScaleFormTo96(TWinControl AObj, int32_t ASize);

int32_t
WinControl_Scale96ToFont(TWinControl AObj, int32_t ASize);

int32_t
WinControl_ScaleFontTo96(TWinControl AObj, int32_t ASize);

int32_t
WinControl_ScaleScreenToFont(TWinControl AObj, int32_t ASize);

int32_t
WinControl_ScaleFontToScreen(TWinControl AObj, int32_t ASize);

int32_t
WinControl_Scale96ToScreen(TWinControl AObj, int32_t ASize);

int32_t
WinControl_ScaleScreenTo96(TWinControl AObj, int32_t ASize);

void
WinControl_AutoAdjustLayout(TWinControl AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
WinControl_FixDesignFontsPPI(TWinControl AObj, int32_t ADesignTimePPI);

void
WinControl_ScaleFontsPPI(TWinControl AObj, int32_t AToPPI, double AProportion);

int32_t
WinControl_GetDockClientCount(TWinControl AObj);

BOOL
WinControl_GetDockSite(TWinControl AObj);

void
WinControl_SetDockSite(TWinControl AObj, BOOL AValue);

BOOL
WinControl_GetDoubleBuffered(TWinControl AObj);

void
WinControl_SetDoubleBuffered(TWinControl AObj, BOOL AValue);

BOOL
WinControl_GetMouseInClient(TWinControl AObj);

int32_t
WinControl_GetVisibleDockClientCount(TWinControl AObj);

TBrush
WinControl_GetBrush(TWinControl AObj);

int32_t
WinControl_GetControlCount(TWinControl AObj);

HWND
WinControl_GetHandle(TWinControl AObj);

BOOL
WinControl_GetParentDoubleBuffered(TWinControl AObj);

void
WinControl_SetParentDoubleBuffered(TWinControl AObj, BOOL AValue);

HWND
WinControl_GetParentWindow(TWinControl AObj);

void
WinControl_SetParentWindow(TWinControl AObj, HWND AValue);

BOOL
WinControl_GetShowing(TWinControl AObj);

TTabOrder
WinControl_GetTabOrder(TWinControl AObj);

void
WinControl_SetTabOrder(TWinControl AObj, TTabOrder AValue);

BOOL
WinControl_GetTabStop(TWinControl AObj);

void
WinControl_SetTabStop(TWinControl AObj, BOOL AValue);

BOOL
WinControl_GetUseDockManager(TWinControl AObj);

void
WinControl_SetUseDockManager(TWinControl AObj, BOOL AValue);

BOOL
WinControl_GetEnabled(TWinControl AObj);

void
WinControl_SetEnabled(TWinControl AObj, BOOL AValue);

TAction
WinControl_GetAction(TWinControl AObj);

void
WinControl_SetAction(TWinControl AObj, TAction AValue);

TAlign
WinControl_GetAlign(TWinControl AObj);

void
WinControl_SetAlign(TWinControl AObj, TAlign AValue);

TAnchors
WinControl_GetAnchors(TWinControl AObj);

void
WinControl_SetAnchors(TWinControl AObj, TAnchors AValue);

TBiDiMode
WinControl_GetBiDiMode(TWinControl AObj);

void
WinControl_SetBiDiMode(TWinControl AObj, TBiDiMode AValue);

TRect
WinControl_GetBoundsRect(TWinControl AObj);

void
WinControl_SetBoundsRect(TWinControl AObj, TRect AValue);

int32_t
WinControl_GetClientHeight(TWinControl AObj);

void
WinControl_SetClientHeight(TWinControl AObj, int32_t AValue);

TPoint
WinControl_GetClientOrigin(TWinControl AObj);

TRect
WinControl_GetClientRect(TWinControl AObj);

int32_t
WinControl_GetClientWidth(TWinControl AObj);

void
WinControl_SetClientWidth(TWinControl AObj, int32_t AValue);

TSizeConstraints
WinControl_GetConstraints(TWinControl AObj);

void
WinControl_SetConstraints(TWinControl AObj, TSizeConstraints AValue);

TControlState
WinControl_GetControlState(TWinControl AObj);

void
WinControl_SetControlState(TWinControl AObj, TControlState AValue);

TControlStyle
WinControl_GetControlStyle(TWinControl AObj);

void
WinControl_SetControlStyle(TWinControl AObj, TControlStyle AValue);

BOOL
WinControl_GetFloating(TWinControl AObj);

BOOL
WinControl_GetShowHint(TWinControl AObj);

void
WinControl_SetShowHint(TWinControl AObj, BOOL AValue);

BOOL
WinControl_GetVisible(TWinControl AObj);

void
WinControl_SetVisible(TWinControl AObj, BOOL AValue);

TWinControl
WinControl_GetParent(TWinControl AObj);

void
WinControl_SetParent(TWinControl AObj, TWinControl AValue);

int32_t
WinControl_GetLeft(TWinControl AObj);

void
WinControl_SetLeft(TWinControl AObj, int32_t AValue);

int32_t
WinControl_GetTop(TWinControl AObj);

void
WinControl_SetTop(TWinControl AObj, int32_t AValue);

int32_t
WinControl_GetWidth(TWinControl AObj);

void
WinControl_SetWidth(TWinControl AObj, int32_t AValue);

int32_t
WinControl_GetHeight(TWinControl AObj);

void
WinControl_SetHeight(TWinControl AObj, int32_t AValue);

TCursor
WinControl_GetCursor(TWinControl AObj);

void
WinControl_SetCursor(TWinControl AObj, TCursor AValue);

char*
WinControl_GetHint(TWinControl AObj);

void
WinControl_SetHint(TWinControl AObj, CChar char* AValue);

int32_t
WinControl_GetComponentCount(TWinControl AObj);

int32_t
WinControl_GetComponentIndex(TWinControl AObj);

void
WinControl_SetComponentIndex(TWinControl AObj, int32_t AValue);

TComponent
WinControl_GetOwner(TWinControl AObj);

char*
WinControl_GetName(TWinControl AObj);

void
WinControl_SetName(TWinControl AObj, CChar char* AValue);

intptr_t
WinControl_GetTag(TWinControl AObj);

void
WinControl_SetTag(TWinControl AObj, intptr_t AValue);

TAnchorSide
WinControl_GetAnchorSideLeft(TWinControl AObj);

void
WinControl_SetAnchorSideLeft(TWinControl AObj, TAnchorSide AValue);

TAnchorSide
WinControl_GetAnchorSideTop(TWinControl AObj);

void
WinControl_SetAnchorSideTop(TWinControl AObj, TAnchorSide AValue);

TAnchorSide
WinControl_GetAnchorSideRight(TWinControl AObj);

void
WinControl_SetAnchorSideRight(TWinControl AObj, TAnchorSide AValue);

TAnchorSide
WinControl_GetAnchorSideBottom(TWinControl AObj);

void
WinControl_SetAnchorSideBottom(TWinControl AObj, TAnchorSide AValue);

TControlChildSizing
WinControl_GetChildSizing(TWinControl AObj);

void
WinControl_SetChildSizing(TWinControl AObj, TControlChildSizing AValue);

TControlBorderSpacing
WinControl_GetBorderSpacing(TWinControl AObj);

void
WinControl_SetBorderSpacing(TWinControl AObj, TControlBorderSpacing AValue);

TControl
WinControl_GetDockClients(TWinControl AObj, int32_t Index);

TControl
WinControl_GetControls(TWinControl AObj, int32_t Index);

TComponent
WinControl_GetComponents(TWinControl AObj, int32_t AIndex);

TAnchorSide
WinControl_GetAnchorSide(TWinControl AObj, TAnchorKind AKind);

TClass
WinControl_StaticClassType();

// -------------------TGraphic-------------------

TGraphic
Graphic_Create();

void
Graphic_Free(TGraphic AObj);

BOOL
Graphic_Equals(TGraphic AObj, TObject Obj);

void
Graphic_LoadFromFile(TGraphic AObj, CChar char* Filename);

void
Graphic_SaveToFile(TGraphic AObj, CChar char* Filename);

void
Graphic_LoadFromStream(TGraphic AObj, TStream Stream);

void
Graphic_SaveToStream(TGraphic AObj, TStream Stream);

void
Graphic_Assign(TGraphic AObj, TObject Source);

char*
Graphic_GetNamePath(TGraphic AObj);

TClass
Graphic_ClassType(TGraphic AObj);

char*
Graphic_ClassName(TGraphic AObj);

int32_t
Graphic_InstanceSize(TGraphic AObj);

BOOL
Graphic_InheritsFrom(TGraphic AObj, TClass AClass);

int32_t
Graphic_GetHashCode(TGraphic AObj);

char*
Graphic_ToString(TGraphic AObj);

BOOL
Graphic_GetEmpty(TGraphic AObj);

int32_t
Graphic_GetHeight(TGraphic AObj);

void
Graphic_SetHeight(TGraphic AObj, int32_t AValue);

BOOL
Graphic_GetModified(TGraphic AObj);

void
Graphic_SetModified(TGraphic AObj, BOOL AValue);

HPALETTE
Graphic_GetPalette(TGraphic AObj);

void
Graphic_SetPalette(TGraphic AObj, HPALETTE AValue);

BOOL
Graphic_GetPaletteModified(TGraphic AObj);

void
Graphic_SetPaletteModified(TGraphic AObj, BOOL AValue);

BOOL
Graphic_GetTransparent(TGraphic AObj);

void
Graphic_SetTransparent(TGraphic AObj, BOOL AValue);

int32_t
Graphic_GetWidth(TGraphic AObj);

void
Graphic_SetWidth(TGraphic AObj, int32_t AValue);

void
Graphic_SetOnChange(TGraphic AObj, TNotifyEvent AEventData);

TClass
Graphic_StaticClassType();

// -------------------TStrings-------------------

TStrings
Strings_Create();

void
Strings_Free(TStrings AObj);

int32_t
Strings_Add(TStrings AObj, CChar char* S);

int32_t
Strings_AddObject(TStrings AObj, CChar char* S, TObject AObject);

void
Strings_Append(TStrings AObj, CChar char* S);

void
Strings_Assign(TStrings AObj, TObject Source);

void
Strings_BeginUpdate(TStrings AObj);

void
Strings_Clear(TStrings AObj);

void
Strings_Delete(TStrings AObj, int32_t Index);

void
Strings_EndUpdate(TStrings AObj);

BOOL
Strings_Equals(TStrings AObj, TStrings Strings);

void
Strings_Exchange(TStrings AObj, int32_t Index1, int32_t Index2);

int32_t
Strings_IndexOf(TStrings AObj, CChar char* S);

int32_t
Strings_IndexOfName(TStrings AObj, CChar char* Name);

int32_t
Strings_IndexOfObject(TStrings AObj, TObject AObject);

void
Strings_Insert(TStrings AObj, int32_t Index, CChar char* S);

void
Strings_InsertObject(TStrings AObj, int32_t Index, CChar char* S, TObject AObject);

void
Strings_LoadFromFile(TStrings AObj, CChar char* FileName);

void
Strings_LoadFromStream(TStrings AObj, TStream Stream);

void
Strings_Move(TStrings AObj, int32_t CurIndex, int32_t NewIndex);

void
Strings_SaveToFile(TStrings AObj, CChar char* FileName);

void
Strings_SaveToStream(TStrings AObj, TStream Stream);

char*
Strings_GetNamePath(TStrings AObj);

TClass
Strings_ClassType(TStrings AObj);

char*
Strings_ClassName(TStrings AObj);

int32_t
Strings_InstanceSize(TStrings AObj);

BOOL
Strings_InheritsFrom(TStrings AObj, TClass AClass);

int32_t
Strings_GetHashCode(TStrings AObj);

char*
Strings_ToString(TStrings AObj);

int32_t
Strings_GetCapacity(TStrings AObj);

void
Strings_SetCapacity(TStrings AObj, int32_t AValue);

char*
Strings_GetCommaText(TStrings AObj);

void
Strings_SetCommaText(TStrings AObj, CChar char* AValue);

int32_t
Strings_GetCount(TStrings AObj);

Char
Strings_GetDelimiter(TStrings AObj);

void
Strings_SetDelimiter(TStrings AObj, Char AValue);

Char
Strings_GetNameValueSeparator(TStrings AObj);

void
Strings_SetNameValueSeparator(TStrings AObj, Char AValue);

char*
Strings_GetText(TStrings AObj);

void
Strings_SetText(TStrings AObj, CChar char* AValue);

TObject
Strings_GetObjects(TStrings AObj, int32_t Index);

void
Strings_SetObjects(TStrings AObj, int32_t Index, TObject AValue);

char*
Strings_GetValues(TStrings AObj, CChar char* Name);

void
Strings_SetValues(TStrings AObj, CChar char* Name, CChar char* AValue);

char*
Strings_GetValueFromIndex(TStrings AObj, int32_t Index);

void
Strings_SetValueFromIndex(TStrings AObj, int32_t Index, CChar char* AValue);

char*
Strings_GetStrings(TStrings AObj, int32_t Index);

void
Strings_SetStrings(TStrings AObj, int32_t Index, CChar char* AValue);

TClass
Strings_StaticClassType();

// -------------------TStream-------------------

// -------------------TCheckBox-------------------

TCheckBox
CheckBox_Create(TComponent AOwner);

void
CheckBox_Free(TCheckBox AObj);

BOOL
CheckBox_CanFocus(TCheckBox AObj);

BOOL
CheckBox_ContainsControl(TCheckBox AObj, TControl Control);

TControl
CheckBox_ControlAtPos(TCheckBox AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
CheckBox_DisableAlign(TCheckBox AObj);

void
CheckBox_EnableAlign(TCheckBox AObj);

TControl
CheckBox_FindChildControl(TCheckBox AObj, CChar char* ControlName);

void
CheckBox_FlipChildren(TCheckBox AObj, BOOL AllLevels);

BOOL
CheckBox_Focused(TCheckBox AObj);

BOOL
CheckBox_HandleAllocated(TCheckBox AObj);

void
CheckBox_InsertControl(TCheckBox AObj, TControl AControl);

void
CheckBox_Invalidate(TCheckBox AObj);

void
CheckBox_PaintTo(TCheckBox AObj, HDC DC, int32_t X, int32_t Y);

void
CheckBox_RemoveControl(TCheckBox AObj, TControl AControl);

void
CheckBox_Realign(TCheckBox AObj);

void
CheckBox_Repaint(TCheckBox AObj);

void
CheckBox_ScaleBy(TCheckBox AObj, int32_t M, int32_t D);

void
CheckBox_ScrollBy(TCheckBox AObj, int32_t DeltaX, int32_t DeltaY);

void
CheckBox_SetBounds(TCheckBox AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
CheckBox_SetFocus(TCheckBox AObj);

void
CheckBox_Update(TCheckBox AObj);

void
CheckBox_BringToFront(TCheckBox AObj);

TPoint
CheckBox_ClientToScreen(TCheckBox AObj, TPoint Point);

TPoint
CheckBox_ClientToParent(TCheckBox AObj, TPoint Point, TWinControl AParent);

BOOL
CheckBox_Dragging(TCheckBox AObj);

BOOL
CheckBox_HasParent(TCheckBox AObj);

void
CheckBox_Hide(TCheckBox AObj);

intptr_t
CheckBox_Perform(TCheckBox AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
CheckBox_Refresh(TCheckBox AObj);

TPoint
CheckBox_ScreenToClient(TCheckBox AObj, TPoint Point);

TPoint
CheckBox_ParentToClient(TCheckBox AObj, TPoint Point, TWinControl AParent);

void
CheckBox_SendToBack(TCheckBox AObj);

void
CheckBox_Show(TCheckBox AObj);

int32_t
CheckBox_GetTextBuf(TCheckBox AObj, CChar char* Buffer, int32_t BufSize);

int32_t
CheckBox_GetTextLen(TCheckBox AObj);

void
CheckBox_SetTextBuf(TCheckBox AObj, CChar char* Buffer);

TComponent
CheckBox_FindComponent(TCheckBox AObj, CChar char* AName);

char*
CheckBox_GetNamePath(TCheckBox AObj);

void
CheckBox_Assign(TCheckBox AObj, TObject Source);

TClass
CheckBox_ClassType(TCheckBox AObj);

char*
CheckBox_ClassName(TCheckBox AObj);

int32_t
CheckBox_InstanceSize(TCheckBox AObj);

BOOL
CheckBox_InheritsFrom(TCheckBox AObj, TClass AClass);

BOOL
CheckBox_Equals(TCheckBox AObj, TObject Obj);

int32_t
CheckBox_GetHashCode(TCheckBox AObj);

char*
CheckBox_ToString(TCheckBox AObj);

void
CheckBox_AnchorToNeighbour(TCheckBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
CheckBox_AnchorParallel(TCheckBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
CheckBox_AnchorHorizontalCenterTo(TCheckBox AObj, TControl ASibling);

void
CheckBox_AnchorVerticalCenterTo(TCheckBox AObj, TControl ASibling);

void
CheckBox_AnchorSame(TCheckBox AObj, TAnchorKind ASide, TControl ASibling);

void
CheckBox_AnchorAsAlign(TCheckBox AObj, TAlign ATheAlign, int32_t ASpace);

void
CheckBox_AnchorClient(TCheckBox AObj, int32_t ASpace);

int32_t
CheckBox_ScaleDesignToForm(TCheckBox AObj, int32_t ASize);

int32_t
CheckBox_ScaleFormToDesign(TCheckBox AObj, int32_t ASize);

int32_t
CheckBox_Scale96ToForm(TCheckBox AObj, int32_t ASize);

int32_t
CheckBox_ScaleFormTo96(TCheckBox AObj, int32_t ASize);

int32_t
CheckBox_Scale96ToFont(TCheckBox AObj, int32_t ASize);

int32_t
CheckBox_ScaleFontTo96(TCheckBox AObj, int32_t ASize);

int32_t
CheckBox_ScaleScreenToFont(TCheckBox AObj, int32_t ASize);

int32_t
CheckBox_ScaleFontToScreen(TCheckBox AObj, int32_t ASize);

int32_t
CheckBox_Scale96ToScreen(TCheckBox AObj, int32_t ASize);

int32_t
CheckBox_ScaleScreenTo96(TCheckBox AObj, int32_t ASize);

void
CheckBox_AutoAdjustLayout(TCheckBox AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
CheckBox_FixDesignFontsPPI(TCheckBox AObj, int32_t ADesignTimePPI);

void
CheckBox_ScaleFontsPPI(TCheckBox AObj, int32_t AToPPI, double AProportion);

void
CheckBox_SetOnChange(TCheckBox AObj, TNotifyEvent AEventData);

TAction
CheckBox_GetAction(TCheckBox AObj);

void
CheckBox_SetAction(TCheckBox AObj, TAction AValue);

TAlign
CheckBox_GetAlign(TCheckBox AObj);

void
CheckBox_SetAlign(TCheckBox AObj, TAlign AValue);

TLeftRight
CheckBox_GetAlignment(TCheckBox AObj);

void
CheckBox_SetAlignment(TCheckBox AObj, TLeftRight AValue);

BOOL
CheckBox_GetAllowGrayed(TCheckBox AObj);

void
CheckBox_SetAllowGrayed(TCheckBox AObj, BOOL AValue);

TAnchors
CheckBox_GetAnchors(TCheckBox AObj);

void
CheckBox_SetAnchors(TCheckBox AObj, TAnchors AValue);

TBiDiMode
CheckBox_GetBiDiMode(TCheckBox AObj);

void
CheckBox_SetBiDiMode(TCheckBox AObj, TBiDiMode AValue);

char*
CheckBox_GetCaption(TCheckBox AObj);

void
CheckBox_SetCaption(TCheckBox AObj, CChar char* AValue);

BOOL
CheckBox_GetChecked(TCheckBox AObj);

void
CheckBox_SetChecked(TCheckBox AObj, BOOL AValue);

TColor
CheckBox_GetColor(TCheckBox AObj);

void
CheckBox_SetColor(TCheckBox AObj, TColor AValue);

TSizeConstraints
CheckBox_GetConstraints(TCheckBox AObj);

void
CheckBox_SetConstraints(TCheckBox AObj, TSizeConstraints AValue);

BOOL
CheckBox_GetDoubleBuffered(TCheckBox AObj);

void
CheckBox_SetDoubleBuffered(TCheckBox AObj, BOOL AValue);

TCursor
CheckBox_GetDragCursor(TCheckBox AObj);

void
CheckBox_SetDragCursor(TCheckBox AObj, TCursor AValue);

TDragKind
CheckBox_GetDragKind(TCheckBox AObj);

void
CheckBox_SetDragKind(TCheckBox AObj, TDragKind AValue);

TDragMode
CheckBox_GetDragMode(TCheckBox AObj);

void
CheckBox_SetDragMode(TCheckBox AObj, TDragMode AValue);

BOOL
CheckBox_GetEnabled(TCheckBox AObj);

void
CheckBox_SetEnabled(TCheckBox AObj, BOOL AValue);

TFont
CheckBox_GetFont(TCheckBox AObj);

void
CheckBox_SetFont(TCheckBox AObj, TFont AValue);

BOOL
CheckBox_GetParentColor(TCheckBox AObj);

void
CheckBox_SetParentColor(TCheckBox AObj, BOOL AValue);

BOOL
CheckBox_GetParentDoubleBuffered(TCheckBox AObj);

void
CheckBox_SetParentDoubleBuffered(TCheckBox AObj, BOOL AValue);

BOOL
CheckBox_GetParentFont(TCheckBox AObj);

void
CheckBox_SetParentFont(TCheckBox AObj, BOOL AValue);

BOOL
CheckBox_GetParentShowHint(TCheckBox AObj);

void
CheckBox_SetParentShowHint(TCheckBox AObj, BOOL AValue);

TPopupMenu
CheckBox_GetPopupMenu(TCheckBox AObj);

void
CheckBox_SetPopupMenu(TCheckBox AObj, TPopupMenu AValue);

BOOL
CheckBox_GetShowHint(TCheckBox AObj);

void
CheckBox_SetShowHint(TCheckBox AObj, BOOL AValue);

TCheckBoxState
CheckBox_GetState(TCheckBox AObj);

void
CheckBox_SetState(TCheckBox AObj, TCheckBoxState AValue);

TTabOrder
CheckBox_GetTabOrder(TCheckBox AObj);

void
CheckBox_SetTabOrder(TCheckBox AObj, TTabOrder AValue);

BOOL
CheckBox_GetTabStop(TCheckBox AObj);

void
CheckBox_SetTabStop(TCheckBox AObj, BOOL AValue);

BOOL
CheckBox_GetVisible(TCheckBox AObj);

void
CheckBox_SetVisible(TCheckBox AObj, BOOL AValue);

void
CheckBox_SetOnClick(TCheckBox AObj, TNotifyEvent AEventData);

void
CheckBox_SetOnContextPopup(TCheckBox AObj, TContextPopupEvent AEventData);

void
CheckBox_SetOnDragDrop(TCheckBox AObj, TDragDropEvent AEventData);

void
CheckBox_SetOnDragOver(TCheckBox AObj, TDragOverEvent AEventData);

void
CheckBox_SetOnEndDrag(TCheckBox AObj, TEndDragEvent AEventData);

void
CheckBox_SetOnEnter(TCheckBox AObj, TNotifyEvent AEventData);

void
CheckBox_SetOnExit(TCheckBox AObj, TNotifyEvent AEventData);

void
CheckBox_SetOnKeyDown(TCheckBox AObj, TKeyEvent AEventData);

void
CheckBox_SetOnKeyPress(TCheckBox AObj, TKeyPressEvent AEventData);

void
CheckBox_SetOnKeyUp(TCheckBox AObj, TKeyEvent AEventData);

void
CheckBox_SetOnMouseDown(TCheckBox AObj, TMouseEvent AEventData);

void
CheckBox_SetOnMouseEnter(TCheckBox AObj, TNotifyEvent AEventData);

void
CheckBox_SetOnMouseLeave(TCheckBox AObj, TNotifyEvent AEventData);

void
CheckBox_SetOnMouseMove(TCheckBox AObj, TMouseMoveEvent AEventData);

void
CheckBox_SetOnMouseUp(TCheckBox AObj, TMouseEvent AEventData);

int32_t
CheckBox_GetDockClientCount(TCheckBox AObj);

BOOL
CheckBox_GetDockSite(TCheckBox AObj);

void
CheckBox_SetDockSite(TCheckBox AObj, BOOL AValue);

BOOL
CheckBox_GetMouseInClient(TCheckBox AObj);

int32_t
CheckBox_GetVisibleDockClientCount(TCheckBox AObj);

TBrush
CheckBox_GetBrush(TCheckBox AObj);

int32_t
CheckBox_GetControlCount(TCheckBox AObj);

HWND
CheckBox_GetHandle(TCheckBox AObj);

HWND
CheckBox_GetParentWindow(TCheckBox AObj);

void
CheckBox_SetParentWindow(TCheckBox AObj, HWND AValue);

BOOL
CheckBox_GetShowing(TCheckBox AObj);

BOOL
CheckBox_GetUseDockManager(TCheckBox AObj);

void
CheckBox_SetUseDockManager(TCheckBox AObj, BOOL AValue);

TRect
CheckBox_GetBoundsRect(TCheckBox AObj);

void
CheckBox_SetBoundsRect(TCheckBox AObj, TRect AValue);

int32_t
CheckBox_GetClientHeight(TCheckBox AObj);

void
CheckBox_SetClientHeight(TCheckBox AObj, int32_t AValue);

TPoint
CheckBox_GetClientOrigin(TCheckBox AObj);

TRect
CheckBox_GetClientRect(TCheckBox AObj);

int32_t
CheckBox_GetClientWidth(TCheckBox AObj);

void
CheckBox_SetClientWidth(TCheckBox AObj, int32_t AValue);

TControlState
CheckBox_GetControlState(TCheckBox AObj);

void
CheckBox_SetControlState(TCheckBox AObj, TControlState AValue);

TControlStyle
CheckBox_GetControlStyle(TCheckBox AObj);

void
CheckBox_SetControlStyle(TCheckBox AObj, TControlStyle AValue);

BOOL
CheckBox_GetFloating(TCheckBox AObj);

TWinControl
CheckBox_GetParent(TCheckBox AObj);

void
CheckBox_SetParent(TCheckBox AObj, TWinControl AValue);

int32_t
CheckBox_GetLeft(TCheckBox AObj);

void
CheckBox_SetLeft(TCheckBox AObj, int32_t AValue);

int32_t
CheckBox_GetTop(TCheckBox AObj);

void
CheckBox_SetTop(TCheckBox AObj, int32_t AValue);

int32_t
CheckBox_GetWidth(TCheckBox AObj);

void
CheckBox_SetWidth(TCheckBox AObj, int32_t AValue);

int32_t
CheckBox_GetHeight(TCheckBox AObj);

void
CheckBox_SetHeight(TCheckBox AObj, int32_t AValue);

TCursor
CheckBox_GetCursor(TCheckBox AObj);

void
CheckBox_SetCursor(TCheckBox AObj, TCursor AValue);

char*
CheckBox_GetHint(TCheckBox AObj);

void
CheckBox_SetHint(TCheckBox AObj, CChar char* AValue);

int32_t
CheckBox_GetComponentCount(TCheckBox AObj);

int32_t
CheckBox_GetComponentIndex(TCheckBox AObj);

void
CheckBox_SetComponentIndex(TCheckBox AObj, int32_t AValue);

TComponent
CheckBox_GetOwner(TCheckBox AObj);

char*
CheckBox_GetName(TCheckBox AObj);

void
CheckBox_SetName(TCheckBox AObj, CChar char* AValue);

intptr_t
CheckBox_GetTag(TCheckBox AObj);

void
CheckBox_SetTag(TCheckBox AObj, intptr_t AValue);

TAnchorSide
CheckBox_GetAnchorSideLeft(TCheckBox AObj);

void
CheckBox_SetAnchorSideLeft(TCheckBox AObj, TAnchorSide AValue);

TAnchorSide
CheckBox_GetAnchorSideTop(TCheckBox AObj);

void
CheckBox_SetAnchorSideTop(TCheckBox AObj, TAnchorSide AValue);

TAnchorSide
CheckBox_GetAnchorSideRight(TCheckBox AObj);

void
CheckBox_SetAnchorSideRight(TCheckBox AObj, TAnchorSide AValue);

TAnchorSide
CheckBox_GetAnchorSideBottom(TCheckBox AObj);

void
CheckBox_SetAnchorSideBottom(TCheckBox AObj, TAnchorSide AValue);

TControlChildSizing
CheckBox_GetChildSizing(TCheckBox AObj);

void
CheckBox_SetChildSizing(TCheckBox AObj, TControlChildSizing AValue);

TControlBorderSpacing
CheckBox_GetBorderSpacing(TCheckBox AObj);

void
CheckBox_SetBorderSpacing(TCheckBox AObj, TControlBorderSpacing AValue);

TControl
CheckBox_GetDockClients(TCheckBox AObj, int32_t Index);

TControl
CheckBox_GetControls(TCheckBox AObj, int32_t Index);

TComponent
CheckBox_GetComponents(TCheckBox AObj, int32_t AIndex);

TAnchorSide
CheckBox_GetAnchorSide(TCheckBox AObj, TAnchorKind AKind);

TClass
CheckBox_StaticClassType();

// -------------------TRadioButton-------------------

TRadioButton
RadioButton_Create(TComponent AOwner);

void
RadioButton_Free(TRadioButton AObj);

BOOL
RadioButton_CanFocus(TRadioButton AObj);

BOOL
RadioButton_ContainsControl(TRadioButton AObj, TControl Control);

TControl
RadioButton_ControlAtPos(TRadioButton AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
RadioButton_DisableAlign(TRadioButton AObj);

void
RadioButton_EnableAlign(TRadioButton AObj);

TControl
RadioButton_FindChildControl(TRadioButton AObj, CChar char* ControlName);

void
RadioButton_FlipChildren(TRadioButton AObj, BOOL AllLevels);

BOOL
RadioButton_Focused(TRadioButton AObj);

BOOL
RadioButton_HandleAllocated(TRadioButton AObj);

void
RadioButton_InsertControl(TRadioButton AObj, TControl AControl);

void
RadioButton_Invalidate(TRadioButton AObj);

void
RadioButton_PaintTo(TRadioButton AObj, HDC DC, int32_t X, int32_t Y);

void
RadioButton_RemoveControl(TRadioButton AObj, TControl AControl);

void
RadioButton_Realign(TRadioButton AObj);

void
RadioButton_Repaint(TRadioButton AObj);

void
RadioButton_ScaleBy(TRadioButton AObj, int32_t M, int32_t D);

void
RadioButton_ScrollBy(TRadioButton AObj, int32_t DeltaX, int32_t DeltaY);

void
RadioButton_SetBounds(TRadioButton AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
RadioButton_SetFocus(TRadioButton AObj);

void
RadioButton_Update(TRadioButton AObj);

void
RadioButton_BringToFront(TRadioButton AObj);

TPoint
RadioButton_ClientToScreen(TRadioButton AObj, TPoint Point);

TPoint
RadioButton_ClientToParent(TRadioButton AObj, TPoint Point, TWinControl AParent);

BOOL
RadioButton_Dragging(TRadioButton AObj);

BOOL
RadioButton_HasParent(TRadioButton AObj);

void
RadioButton_Hide(TRadioButton AObj);

intptr_t
RadioButton_Perform(TRadioButton AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
RadioButton_Refresh(TRadioButton AObj);

TPoint
RadioButton_ScreenToClient(TRadioButton AObj, TPoint Point);

TPoint
RadioButton_ParentToClient(TRadioButton AObj, TPoint Point, TWinControl AParent);

void
RadioButton_SendToBack(TRadioButton AObj);

void
RadioButton_Show(TRadioButton AObj);

int32_t
RadioButton_GetTextBuf(TRadioButton AObj, CChar char* Buffer, int32_t BufSize);

int32_t
RadioButton_GetTextLen(TRadioButton AObj);

void
RadioButton_SetTextBuf(TRadioButton AObj, CChar char* Buffer);

TComponent
RadioButton_FindComponent(TRadioButton AObj, CChar char* AName);

char*
RadioButton_GetNamePath(TRadioButton AObj);

void
RadioButton_Assign(TRadioButton AObj, TObject Source);

TClass
RadioButton_ClassType(TRadioButton AObj);

char*
RadioButton_ClassName(TRadioButton AObj);

int32_t
RadioButton_InstanceSize(TRadioButton AObj);

BOOL
RadioButton_InheritsFrom(TRadioButton AObj, TClass AClass);

BOOL
RadioButton_Equals(TRadioButton AObj, TObject Obj);

int32_t
RadioButton_GetHashCode(TRadioButton AObj);

char*
RadioButton_ToString(TRadioButton AObj);

void
RadioButton_AnchorToNeighbour(TRadioButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
RadioButton_AnchorParallel(TRadioButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
RadioButton_AnchorHorizontalCenterTo(TRadioButton AObj, TControl ASibling);

void
RadioButton_AnchorVerticalCenterTo(TRadioButton AObj, TControl ASibling);

void
RadioButton_AnchorSame(TRadioButton AObj, TAnchorKind ASide, TControl ASibling);

void
RadioButton_AnchorAsAlign(TRadioButton AObj, TAlign ATheAlign, int32_t ASpace);

void
RadioButton_AnchorClient(TRadioButton AObj, int32_t ASpace);

int32_t
RadioButton_ScaleDesignToForm(TRadioButton AObj, int32_t ASize);

int32_t
RadioButton_ScaleFormToDesign(TRadioButton AObj, int32_t ASize);

int32_t
RadioButton_Scale96ToForm(TRadioButton AObj, int32_t ASize);

int32_t
RadioButton_ScaleFormTo96(TRadioButton AObj, int32_t ASize);

int32_t
RadioButton_Scale96ToFont(TRadioButton AObj, int32_t ASize);

int32_t
RadioButton_ScaleFontTo96(TRadioButton AObj, int32_t ASize);

int32_t
RadioButton_ScaleScreenToFont(TRadioButton AObj, int32_t ASize);

int32_t
RadioButton_ScaleFontToScreen(TRadioButton AObj, int32_t ASize);

int32_t
RadioButton_Scale96ToScreen(TRadioButton AObj, int32_t ASize);

int32_t
RadioButton_ScaleScreenTo96(TRadioButton AObj, int32_t ASize);

void
RadioButton_AutoAdjustLayout(TRadioButton AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
RadioButton_FixDesignFontsPPI(TRadioButton AObj, int32_t ADesignTimePPI);

void
RadioButton_ScaleFontsPPI(TRadioButton AObj, int32_t AToPPI, double AProportion);

void
RadioButton_SetOnChange(TRadioButton AObj, TNotifyEvent AEventData);

TAction
RadioButton_GetAction(TRadioButton AObj);

void
RadioButton_SetAction(TRadioButton AObj, TAction AValue);

TAlign
RadioButton_GetAlign(TRadioButton AObj);

void
RadioButton_SetAlign(TRadioButton AObj, TAlign AValue);

TLeftRight
RadioButton_GetAlignment(TRadioButton AObj);

void
RadioButton_SetAlignment(TRadioButton AObj, TLeftRight AValue);

TAnchors
RadioButton_GetAnchors(TRadioButton AObj);

void
RadioButton_SetAnchors(TRadioButton AObj, TAnchors AValue);

TBiDiMode
RadioButton_GetBiDiMode(TRadioButton AObj);

void
RadioButton_SetBiDiMode(TRadioButton AObj, TBiDiMode AValue);

char*
RadioButton_GetCaption(TRadioButton AObj);

void
RadioButton_SetCaption(TRadioButton AObj, CChar char* AValue);

BOOL
RadioButton_GetChecked(TRadioButton AObj);

void
RadioButton_SetChecked(TRadioButton AObj, BOOL AValue);

TColor
RadioButton_GetColor(TRadioButton AObj);

void
RadioButton_SetColor(TRadioButton AObj, TColor AValue);

TSizeConstraints
RadioButton_GetConstraints(TRadioButton AObj);

void
RadioButton_SetConstraints(TRadioButton AObj, TSizeConstraints AValue);

BOOL
RadioButton_GetDoubleBuffered(TRadioButton AObj);

void
RadioButton_SetDoubleBuffered(TRadioButton AObj, BOOL AValue);

TCursor
RadioButton_GetDragCursor(TRadioButton AObj);

void
RadioButton_SetDragCursor(TRadioButton AObj, TCursor AValue);

TDragKind
RadioButton_GetDragKind(TRadioButton AObj);

void
RadioButton_SetDragKind(TRadioButton AObj, TDragKind AValue);

TDragMode
RadioButton_GetDragMode(TRadioButton AObj);

void
RadioButton_SetDragMode(TRadioButton AObj, TDragMode AValue);

BOOL
RadioButton_GetEnabled(TRadioButton AObj);

void
RadioButton_SetEnabled(TRadioButton AObj, BOOL AValue);

TFont
RadioButton_GetFont(TRadioButton AObj);

void
RadioButton_SetFont(TRadioButton AObj, TFont AValue);

BOOL
RadioButton_GetParentColor(TRadioButton AObj);

void
RadioButton_SetParentColor(TRadioButton AObj, BOOL AValue);

BOOL
RadioButton_GetParentDoubleBuffered(TRadioButton AObj);

void
RadioButton_SetParentDoubleBuffered(TRadioButton AObj, BOOL AValue);

BOOL
RadioButton_GetParentFont(TRadioButton AObj);

void
RadioButton_SetParentFont(TRadioButton AObj, BOOL AValue);

BOOL
RadioButton_GetParentShowHint(TRadioButton AObj);

void
RadioButton_SetParentShowHint(TRadioButton AObj, BOOL AValue);

TPopupMenu
RadioButton_GetPopupMenu(TRadioButton AObj);

void
RadioButton_SetPopupMenu(TRadioButton AObj, TPopupMenu AValue);

BOOL
RadioButton_GetShowHint(TRadioButton AObj);

void
RadioButton_SetShowHint(TRadioButton AObj, BOOL AValue);

TTabOrder
RadioButton_GetTabOrder(TRadioButton AObj);

void
RadioButton_SetTabOrder(TRadioButton AObj, TTabOrder AValue);

BOOL
RadioButton_GetTabStop(TRadioButton AObj);

void
RadioButton_SetTabStop(TRadioButton AObj, BOOL AValue);

BOOL
RadioButton_GetVisible(TRadioButton AObj);

void
RadioButton_SetVisible(TRadioButton AObj, BOOL AValue);

void
RadioButton_SetOnClick(TRadioButton AObj, TNotifyEvent AEventData);

void
RadioButton_SetOnContextPopup(TRadioButton AObj, TContextPopupEvent AEventData);

void
RadioButton_SetOnDragDrop(TRadioButton AObj, TDragDropEvent AEventData);

void
RadioButton_SetOnDragOver(TRadioButton AObj, TDragOverEvent AEventData);

void
RadioButton_SetOnEndDrag(TRadioButton AObj, TEndDragEvent AEventData);

void
RadioButton_SetOnEnter(TRadioButton AObj, TNotifyEvent AEventData);

void
RadioButton_SetOnExit(TRadioButton AObj, TNotifyEvent AEventData);

void
RadioButton_SetOnKeyDown(TRadioButton AObj, TKeyEvent AEventData);

void
RadioButton_SetOnKeyPress(TRadioButton AObj, TKeyPressEvent AEventData);

void
RadioButton_SetOnKeyUp(TRadioButton AObj, TKeyEvent AEventData);

void
RadioButton_SetOnMouseDown(TRadioButton AObj, TMouseEvent AEventData);

void
RadioButton_SetOnMouseEnter(TRadioButton AObj, TNotifyEvent AEventData);

void
RadioButton_SetOnMouseLeave(TRadioButton AObj, TNotifyEvent AEventData);

void
RadioButton_SetOnMouseMove(TRadioButton AObj, TMouseMoveEvent AEventData);

void
RadioButton_SetOnMouseUp(TRadioButton AObj, TMouseEvent AEventData);

int32_t
RadioButton_GetDockClientCount(TRadioButton AObj);

BOOL
RadioButton_GetDockSite(TRadioButton AObj);

void
RadioButton_SetDockSite(TRadioButton AObj, BOOL AValue);

BOOL
RadioButton_GetMouseInClient(TRadioButton AObj);

int32_t
RadioButton_GetVisibleDockClientCount(TRadioButton AObj);

TBrush
RadioButton_GetBrush(TRadioButton AObj);

int32_t
RadioButton_GetControlCount(TRadioButton AObj);

HWND
RadioButton_GetHandle(TRadioButton AObj);

HWND
RadioButton_GetParentWindow(TRadioButton AObj);

void
RadioButton_SetParentWindow(TRadioButton AObj, HWND AValue);

BOOL
RadioButton_GetShowing(TRadioButton AObj);

BOOL
RadioButton_GetUseDockManager(TRadioButton AObj);

void
RadioButton_SetUseDockManager(TRadioButton AObj, BOOL AValue);

TRect
RadioButton_GetBoundsRect(TRadioButton AObj);

void
RadioButton_SetBoundsRect(TRadioButton AObj, TRect AValue);

int32_t
RadioButton_GetClientHeight(TRadioButton AObj);

void
RadioButton_SetClientHeight(TRadioButton AObj, int32_t AValue);

TPoint
RadioButton_GetClientOrigin(TRadioButton AObj);

TRect
RadioButton_GetClientRect(TRadioButton AObj);

int32_t
RadioButton_GetClientWidth(TRadioButton AObj);

void
RadioButton_SetClientWidth(TRadioButton AObj, int32_t AValue);

TControlState
RadioButton_GetControlState(TRadioButton AObj);

void
RadioButton_SetControlState(TRadioButton AObj, TControlState AValue);

TControlStyle
RadioButton_GetControlStyle(TRadioButton AObj);

void
RadioButton_SetControlStyle(TRadioButton AObj, TControlStyle AValue);

BOOL
RadioButton_GetFloating(TRadioButton AObj);

TWinControl
RadioButton_GetParent(TRadioButton AObj);

void
RadioButton_SetParent(TRadioButton AObj, TWinControl AValue);

int32_t
RadioButton_GetLeft(TRadioButton AObj);

void
RadioButton_SetLeft(TRadioButton AObj, int32_t AValue);

int32_t
RadioButton_GetTop(TRadioButton AObj);

void
RadioButton_SetTop(TRadioButton AObj, int32_t AValue);

int32_t
RadioButton_GetWidth(TRadioButton AObj);

void
RadioButton_SetWidth(TRadioButton AObj, int32_t AValue);

int32_t
RadioButton_GetHeight(TRadioButton AObj);

void
RadioButton_SetHeight(TRadioButton AObj, int32_t AValue);

TCursor
RadioButton_GetCursor(TRadioButton AObj);

void
RadioButton_SetCursor(TRadioButton AObj, TCursor AValue);

char*
RadioButton_GetHint(TRadioButton AObj);

void
RadioButton_SetHint(TRadioButton AObj, CChar char* AValue);

int32_t
RadioButton_GetComponentCount(TRadioButton AObj);

int32_t
RadioButton_GetComponentIndex(TRadioButton AObj);

void
RadioButton_SetComponentIndex(TRadioButton AObj, int32_t AValue);

TComponent
RadioButton_GetOwner(TRadioButton AObj);

char*
RadioButton_GetName(TRadioButton AObj);

void
RadioButton_SetName(TRadioButton AObj, CChar char* AValue);

intptr_t
RadioButton_GetTag(TRadioButton AObj);

void
RadioButton_SetTag(TRadioButton AObj, intptr_t AValue);

TAnchorSide
RadioButton_GetAnchorSideLeft(TRadioButton AObj);

void
RadioButton_SetAnchorSideLeft(TRadioButton AObj, TAnchorSide AValue);

TAnchorSide
RadioButton_GetAnchorSideTop(TRadioButton AObj);

void
RadioButton_SetAnchorSideTop(TRadioButton AObj, TAnchorSide AValue);

TAnchorSide
RadioButton_GetAnchorSideRight(TRadioButton AObj);

void
RadioButton_SetAnchorSideRight(TRadioButton AObj, TAnchorSide AValue);

TAnchorSide
RadioButton_GetAnchorSideBottom(TRadioButton AObj);

void
RadioButton_SetAnchorSideBottom(TRadioButton AObj, TAnchorSide AValue);

TControlChildSizing
RadioButton_GetChildSizing(TRadioButton AObj);

void
RadioButton_SetChildSizing(TRadioButton AObj, TControlChildSizing AValue);

TControlBorderSpacing
RadioButton_GetBorderSpacing(TRadioButton AObj);

void
RadioButton_SetBorderSpacing(TRadioButton AObj, TControlBorderSpacing AValue);

TControl
RadioButton_GetDockClients(TRadioButton AObj, int32_t Index);

TControl
RadioButton_GetControls(TRadioButton AObj, int32_t Index);

TComponent
RadioButton_GetComponents(TRadioButton AObj, int32_t AIndex);

TAnchorSide
RadioButton_GetAnchorSide(TRadioButton AObj, TAnchorKind AKind);

TClass
RadioButton_StaticClassType();

// -------------------TGroupBox-------------------

TGroupBox
GroupBox_Create(TComponent AOwner);

void
GroupBox_Free(TGroupBox AObj);

BOOL
GroupBox_CanFocus(TGroupBox AObj);

BOOL
GroupBox_ContainsControl(TGroupBox AObj, TControl Control);

TControl
GroupBox_ControlAtPos(TGroupBox AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
GroupBox_DisableAlign(TGroupBox AObj);

void
GroupBox_EnableAlign(TGroupBox AObj);

TControl
GroupBox_FindChildControl(TGroupBox AObj, CChar char* ControlName);

void
GroupBox_FlipChildren(TGroupBox AObj, BOOL AllLevels);

BOOL
GroupBox_Focused(TGroupBox AObj);

BOOL
GroupBox_HandleAllocated(TGroupBox AObj);

void
GroupBox_InsertControl(TGroupBox AObj, TControl AControl);

void
GroupBox_Invalidate(TGroupBox AObj);

void
GroupBox_PaintTo(TGroupBox AObj, HDC DC, int32_t X, int32_t Y);

void
GroupBox_RemoveControl(TGroupBox AObj, TControl AControl);

void
GroupBox_Realign(TGroupBox AObj);

void
GroupBox_Repaint(TGroupBox AObj);

void
GroupBox_ScaleBy(TGroupBox AObj, int32_t M, int32_t D);

void
GroupBox_ScrollBy(TGroupBox AObj, int32_t DeltaX, int32_t DeltaY);

void
GroupBox_SetBounds(TGroupBox AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
GroupBox_SetFocus(TGroupBox AObj);

void
GroupBox_Update(TGroupBox AObj);

void
GroupBox_BringToFront(TGroupBox AObj);

TPoint
GroupBox_ClientToScreen(TGroupBox AObj, TPoint Point);

TPoint
GroupBox_ClientToParent(TGroupBox AObj, TPoint Point, TWinControl AParent);

BOOL
GroupBox_Dragging(TGroupBox AObj);

BOOL
GroupBox_HasParent(TGroupBox AObj);

void
GroupBox_Hide(TGroupBox AObj);

intptr_t
GroupBox_Perform(TGroupBox AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
GroupBox_Refresh(TGroupBox AObj);

TPoint
GroupBox_ScreenToClient(TGroupBox AObj, TPoint Point);

TPoint
GroupBox_ParentToClient(TGroupBox AObj, TPoint Point, TWinControl AParent);

void
GroupBox_SendToBack(TGroupBox AObj);

void
GroupBox_Show(TGroupBox AObj);

int32_t
GroupBox_GetTextBuf(TGroupBox AObj, CChar char* Buffer, int32_t BufSize);

int32_t
GroupBox_GetTextLen(TGroupBox AObj);

void
GroupBox_SetTextBuf(TGroupBox AObj, CChar char* Buffer);

TComponent
GroupBox_FindComponent(TGroupBox AObj, CChar char* AName);

char*
GroupBox_GetNamePath(TGroupBox AObj);

void
GroupBox_Assign(TGroupBox AObj, TObject Source);

TClass
GroupBox_ClassType(TGroupBox AObj);

char*
GroupBox_ClassName(TGroupBox AObj);

int32_t
GroupBox_InstanceSize(TGroupBox AObj);

BOOL
GroupBox_InheritsFrom(TGroupBox AObj, TClass AClass);

BOOL
GroupBox_Equals(TGroupBox AObj, TObject Obj);

int32_t
GroupBox_GetHashCode(TGroupBox AObj);

char*
GroupBox_ToString(TGroupBox AObj);

void
GroupBox_AnchorToNeighbour(TGroupBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
GroupBox_AnchorParallel(TGroupBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
GroupBox_AnchorHorizontalCenterTo(TGroupBox AObj, TControl ASibling);

void
GroupBox_AnchorVerticalCenterTo(TGroupBox AObj, TControl ASibling);

void
GroupBox_AnchorSame(TGroupBox AObj, TAnchorKind ASide, TControl ASibling);

void
GroupBox_AnchorAsAlign(TGroupBox AObj, TAlign ATheAlign, int32_t ASpace);

void
GroupBox_AnchorClient(TGroupBox AObj, int32_t ASpace);

int32_t
GroupBox_ScaleDesignToForm(TGroupBox AObj, int32_t ASize);

int32_t
GroupBox_ScaleFormToDesign(TGroupBox AObj, int32_t ASize);

int32_t
GroupBox_Scale96ToForm(TGroupBox AObj, int32_t ASize);

int32_t
GroupBox_ScaleFormTo96(TGroupBox AObj, int32_t ASize);

int32_t
GroupBox_Scale96ToFont(TGroupBox AObj, int32_t ASize);

int32_t
GroupBox_ScaleFontTo96(TGroupBox AObj, int32_t ASize);

int32_t
GroupBox_ScaleScreenToFont(TGroupBox AObj, int32_t ASize);

int32_t
GroupBox_ScaleFontToScreen(TGroupBox AObj, int32_t ASize);

int32_t
GroupBox_Scale96ToScreen(TGroupBox AObj, int32_t ASize);

int32_t
GroupBox_ScaleScreenTo96(TGroupBox AObj, int32_t ASize);

void
GroupBox_AutoAdjustLayout(TGroupBox AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
GroupBox_FixDesignFontsPPI(TGroupBox AObj, int32_t ADesignTimePPI);

void
GroupBox_ScaleFontsPPI(TGroupBox AObj, int32_t AToPPI, double AProportion);

TAlign
GroupBox_GetAlign(TGroupBox AObj);

void
GroupBox_SetAlign(TGroupBox AObj, TAlign AValue);

TAnchors
GroupBox_GetAnchors(TGroupBox AObj);

void
GroupBox_SetAnchors(TGroupBox AObj, TAnchors AValue);

TBiDiMode
GroupBox_GetBiDiMode(TGroupBox AObj);

void
GroupBox_SetBiDiMode(TGroupBox AObj, TBiDiMode AValue);

char*
GroupBox_GetCaption(TGroupBox AObj);

void
GroupBox_SetCaption(TGroupBox AObj, CChar char* AValue);

TColor
GroupBox_GetColor(TGroupBox AObj);

void
GroupBox_SetColor(TGroupBox AObj, TColor AValue);

TSizeConstraints
GroupBox_GetConstraints(TGroupBox AObj);

void
GroupBox_SetConstraints(TGroupBox AObj, TSizeConstraints AValue);

BOOL
GroupBox_GetDockSite(TGroupBox AObj);

void
GroupBox_SetDockSite(TGroupBox AObj, BOOL AValue);

BOOL
GroupBox_GetDoubleBuffered(TGroupBox AObj);

void
GroupBox_SetDoubleBuffered(TGroupBox AObj, BOOL AValue);

TCursor
GroupBox_GetDragCursor(TGroupBox AObj);

void
GroupBox_SetDragCursor(TGroupBox AObj, TCursor AValue);

TDragKind
GroupBox_GetDragKind(TGroupBox AObj);

void
GroupBox_SetDragKind(TGroupBox AObj, TDragKind AValue);

TDragMode
GroupBox_GetDragMode(TGroupBox AObj);

void
GroupBox_SetDragMode(TGroupBox AObj, TDragMode AValue);

BOOL
GroupBox_GetEnabled(TGroupBox AObj);

void
GroupBox_SetEnabled(TGroupBox AObj, BOOL AValue);

TFont
GroupBox_GetFont(TGroupBox AObj);

void
GroupBox_SetFont(TGroupBox AObj, TFont AValue);

BOOL
GroupBox_GetParentBackground(TGroupBox AObj);

void
GroupBox_SetParentBackground(TGroupBox AObj, BOOL AValue);

BOOL
GroupBox_GetParentColor(TGroupBox AObj);

void
GroupBox_SetParentColor(TGroupBox AObj, BOOL AValue);

BOOL
GroupBox_GetParentDoubleBuffered(TGroupBox AObj);

void
GroupBox_SetParentDoubleBuffered(TGroupBox AObj, BOOL AValue);

BOOL
GroupBox_GetParentFont(TGroupBox AObj);

void
GroupBox_SetParentFont(TGroupBox AObj, BOOL AValue);

BOOL
GroupBox_GetParentShowHint(TGroupBox AObj);

void
GroupBox_SetParentShowHint(TGroupBox AObj, BOOL AValue);

TPopupMenu
GroupBox_GetPopupMenu(TGroupBox AObj);

void
GroupBox_SetPopupMenu(TGroupBox AObj, TPopupMenu AValue);

BOOL
GroupBox_GetShowHint(TGroupBox AObj);

void
GroupBox_SetShowHint(TGroupBox AObj, BOOL AValue);

TTabOrder
GroupBox_GetTabOrder(TGroupBox AObj);

void
GroupBox_SetTabOrder(TGroupBox AObj, TTabOrder AValue);

BOOL
GroupBox_GetTabStop(TGroupBox AObj);

void
GroupBox_SetTabStop(TGroupBox AObj, BOOL AValue);

BOOL
GroupBox_GetVisible(TGroupBox AObj);

void
GroupBox_SetVisible(TGroupBox AObj, BOOL AValue);

void
GroupBox_SetOnAlignPosition(TGroupBox AObj, TAlignPositionEvent AEventData);

void
GroupBox_SetOnClick(TGroupBox AObj, TNotifyEvent AEventData);

void
GroupBox_SetOnContextPopup(TGroupBox AObj, TContextPopupEvent AEventData);

void
GroupBox_SetOnDblClick(TGroupBox AObj, TNotifyEvent AEventData);

void
GroupBox_SetOnDragDrop(TGroupBox AObj, TDragDropEvent AEventData);

void
GroupBox_SetOnDockDrop(TGroupBox AObj, TDockDropEvent AEventData);

void
GroupBox_SetOnDragOver(TGroupBox AObj, TDragOverEvent AEventData);

void
GroupBox_SetOnEndDock(TGroupBox AObj, TEndDragEvent AEventData);

void
GroupBox_SetOnEndDrag(TGroupBox AObj, TEndDragEvent AEventData);

void
GroupBox_SetOnEnter(TGroupBox AObj, TNotifyEvent AEventData);

void
GroupBox_SetOnExit(TGroupBox AObj, TNotifyEvent AEventData);

void
GroupBox_SetOnGetSiteInfo(TGroupBox AObj, TGetSiteInfoEvent AEventData);

void
GroupBox_SetOnMouseDown(TGroupBox AObj, TMouseEvent AEventData);

void
GroupBox_SetOnMouseEnter(TGroupBox AObj, TNotifyEvent AEventData);

void
GroupBox_SetOnMouseLeave(TGroupBox AObj, TNotifyEvent AEventData);

void
GroupBox_SetOnMouseMove(TGroupBox AObj, TMouseMoveEvent AEventData);

void
GroupBox_SetOnMouseUp(TGroupBox AObj, TMouseEvent AEventData);

void
GroupBox_SetOnStartDock(TGroupBox AObj, TStartDockEvent AEventData);

void
GroupBox_SetOnUnDock(TGroupBox AObj, TUnDockEvent AEventData);

int32_t
GroupBox_GetDockClientCount(TGroupBox AObj);

BOOL
GroupBox_GetMouseInClient(TGroupBox AObj);

int32_t
GroupBox_GetVisibleDockClientCount(TGroupBox AObj);

TBrush
GroupBox_GetBrush(TGroupBox AObj);

int32_t
GroupBox_GetControlCount(TGroupBox AObj);

HWND
GroupBox_GetHandle(TGroupBox AObj);

HWND
GroupBox_GetParentWindow(TGroupBox AObj);

void
GroupBox_SetParentWindow(TGroupBox AObj, HWND AValue);

BOOL
GroupBox_GetShowing(TGroupBox AObj);

BOOL
GroupBox_GetUseDockManager(TGroupBox AObj);

void
GroupBox_SetUseDockManager(TGroupBox AObj, BOOL AValue);

TAction
GroupBox_GetAction(TGroupBox AObj);

void
GroupBox_SetAction(TGroupBox AObj, TAction AValue);

TRect
GroupBox_GetBoundsRect(TGroupBox AObj);

void
GroupBox_SetBoundsRect(TGroupBox AObj, TRect AValue);

int32_t
GroupBox_GetClientHeight(TGroupBox AObj);

void
GroupBox_SetClientHeight(TGroupBox AObj, int32_t AValue);

TPoint
GroupBox_GetClientOrigin(TGroupBox AObj);

TRect
GroupBox_GetClientRect(TGroupBox AObj);

int32_t
GroupBox_GetClientWidth(TGroupBox AObj);

void
GroupBox_SetClientWidth(TGroupBox AObj, int32_t AValue);

TControlState
GroupBox_GetControlState(TGroupBox AObj);

void
GroupBox_SetControlState(TGroupBox AObj, TControlState AValue);

TControlStyle
GroupBox_GetControlStyle(TGroupBox AObj);

void
GroupBox_SetControlStyle(TGroupBox AObj, TControlStyle AValue);

BOOL
GroupBox_GetFloating(TGroupBox AObj);

TWinControl
GroupBox_GetParent(TGroupBox AObj);

void
GroupBox_SetParent(TGroupBox AObj, TWinControl AValue);

int32_t
GroupBox_GetLeft(TGroupBox AObj);

void
GroupBox_SetLeft(TGroupBox AObj, int32_t AValue);

int32_t
GroupBox_GetTop(TGroupBox AObj);

void
GroupBox_SetTop(TGroupBox AObj, int32_t AValue);

int32_t
GroupBox_GetWidth(TGroupBox AObj);

void
GroupBox_SetWidth(TGroupBox AObj, int32_t AValue);

int32_t
GroupBox_GetHeight(TGroupBox AObj);

void
GroupBox_SetHeight(TGroupBox AObj, int32_t AValue);

TCursor
GroupBox_GetCursor(TGroupBox AObj);

void
GroupBox_SetCursor(TGroupBox AObj, TCursor AValue);

char*
GroupBox_GetHint(TGroupBox AObj);

void
GroupBox_SetHint(TGroupBox AObj, CChar char* AValue);

int32_t
GroupBox_GetComponentCount(TGroupBox AObj);

int32_t
GroupBox_GetComponentIndex(TGroupBox AObj);

void
GroupBox_SetComponentIndex(TGroupBox AObj, int32_t AValue);

TComponent
GroupBox_GetOwner(TGroupBox AObj);

char*
GroupBox_GetName(TGroupBox AObj);

void
GroupBox_SetName(TGroupBox AObj, CChar char* AValue);

intptr_t
GroupBox_GetTag(TGroupBox AObj);

void
GroupBox_SetTag(TGroupBox AObj, intptr_t AValue);

TAnchorSide
GroupBox_GetAnchorSideLeft(TGroupBox AObj);

void
GroupBox_SetAnchorSideLeft(TGroupBox AObj, TAnchorSide AValue);

TAnchorSide
GroupBox_GetAnchorSideTop(TGroupBox AObj);

void
GroupBox_SetAnchorSideTop(TGroupBox AObj, TAnchorSide AValue);

TAnchorSide
GroupBox_GetAnchorSideRight(TGroupBox AObj);

void
GroupBox_SetAnchorSideRight(TGroupBox AObj, TAnchorSide AValue);

TAnchorSide
GroupBox_GetAnchorSideBottom(TGroupBox AObj);

void
GroupBox_SetAnchorSideBottom(TGroupBox AObj, TAnchorSide AValue);

TControlChildSizing
GroupBox_GetChildSizing(TGroupBox AObj);

void
GroupBox_SetChildSizing(TGroupBox AObj, TControlChildSizing AValue);

TControlBorderSpacing
GroupBox_GetBorderSpacing(TGroupBox AObj);

void
GroupBox_SetBorderSpacing(TGroupBox AObj, TControlBorderSpacing AValue);

TControl
GroupBox_GetDockClients(TGroupBox AObj, int32_t Index);

TControl
GroupBox_GetControls(TGroupBox AObj, int32_t Index);

TComponent
GroupBox_GetComponents(TGroupBox AObj, int32_t AIndex);

TAnchorSide
GroupBox_GetAnchorSide(TGroupBox AObj, TAnchorKind AKind);

TClass
GroupBox_StaticClassType();

// -------------------TLabel-------------------

TLabel
Label_Create(TComponent AOwner);

void
Label_Free(TLabel AObj);

void
Label_BringToFront(TLabel AObj);

TPoint
Label_ClientToScreen(TLabel AObj, TPoint Point);

TPoint
Label_ClientToParent(TLabel AObj, TPoint Point, TWinControl AParent);

BOOL
Label_Dragging(TLabel AObj);

BOOL
Label_HasParent(TLabel AObj);

void
Label_Hide(TLabel AObj);

void
Label_Invalidate(TLabel AObj);

intptr_t
Label_Perform(TLabel AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
Label_Refresh(TLabel AObj);

void
Label_Repaint(TLabel AObj);

TPoint
Label_ScreenToClient(TLabel AObj, TPoint Point);

TPoint
Label_ParentToClient(TLabel AObj, TPoint Point, TWinControl AParent);

void
Label_SendToBack(TLabel AObj);

void
Label_SetBounds(TLabel AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
Label_Show(TLabel AObj);

void
Label_Update(TLabel AObj);

int32_t
Label_GetTextBuf(TLabel AObj, CChar char* Buffer, int32_t BufSize);

int32_t
Label_GetTextLen(TLabel AObj);

void
Label_SetTextBuf(TLabel AObj, CChar char* Buffer);

TComponent
Label_FindComponent(TLabel AObj, CChar char* AName);

char*
Label_GetNamePath(TLabel AObj);

void
Label_Assign(TLabel AObj, TObject Source);

TClass
Label_ClassType(TLabel AObj);

char*
Label_ClassName(TLabel AObj);

int32_t
Label_InstanceSize(TLabel AObj);

BOOL
Label_InheritsFrom(TLabel AObj, TClass AClass);

BOOL
Label_Equals(TLabel AObj, TObject Obj);

int32_t
Label_GetHashCode(TLabel AObj);

char*
Label_ToString(TLabel AObj);

void
Label_AnchorToNeighbour(TLabel AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Label_AnchorParallel(TLabel AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Label_AnchorHorizontalCenterTo(TLabel AObj, TControl ASibling);

void
Label_AnchorVerticalCenterTo(TLabel AObj, TControl ASibling);

void
Label_AnchorSame(TLabel AObj, TAnchorKind ASide, TControl ASibling);

void
Label_AnchorAsAlign(TLabel AObj, TAlign ATheAlign, int32_t ASpace);

void
Label_AnchorClient(TLabel AObj, int32_t ASpace);

int32_t
Label_ScaleDesignToForm(TLabel AObj, int32_t ASize);

int32_t
Label_ScaleFormToDesign(TLabel AObj, int32_t ASize);

int32_t
Label_Scale96ToForm(TLabel AObj, int32_t ASize);

int32_t
Label_ScaleFormTo96(TLabel AObj, int32_t ASize);

int32_t
Label_Scale96ToFont(TLabel AObj, int32_t ASize);

int32_t
Label_ScaleFontTo96(TLabel AObj, int32_t ASize);

int32_t
Label_ScaleScreenToFont(TLabel AObj, int32_t ASize);

int32_t
Label_ScaleFontToScreen(TLabel AObj, int32_t ASize);

int32_t
Label_Scale96ToScreen(TLabel AObj, int32_t ASize);

int32_t
Label_ScaleScreenTo96(TLabel AObj, int32_t ASize);

void
Label_AutoAdjustLayout(TLabel AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
Label_FixDesignFontsPPI(TLabel AObj, int32_t ADesignTimePPI);

void
Label_ScaleFontsPPI(TLabel AObj, int32_t AToPPI, double AProportion);

BOOL
Label_GetOptimalFill(TLabel AObj);

void
Label_SetOptimalFill(TLabel AObj, BOOL AValue);

TAlign
Label_GetAlign(TLabel AObj);

void
Label_SetAlign(TLabel AObj, TAlign AValue);

TAlignment
Label_GetAlignment(TLabel AObj);

void
Label_SetAlignment(TLabel AObj, TAlignment AValue);

TAnchors
Label_GetAnchors(TLabel AObj);

void
Label_SetAnchors(TLabel AObj, TAnchors AValue);

BOOL
Label_GetAutoSize(TLabel AObj);

void
Label_SetAutoSize(TLabel AObj, BOOL AValue);

TBiDiMode
Label_GetBiDiMode(TLabel AObj);

void
Label_SetBiDiMode(TLabel AObj, TBiDiMode AValue);

char*
Label_GetCaption(TLabel AObj);

void
Label_SetCaption(TLabel AObj, CChar char* AValue);

TColor
Label_GetColor(TLabel AObj);

void
Label_SetColor(TLabel AObj, TColor AValue);

TSizeConstraints
Label_GetConstraints(TLabel AObj);

void
Label_SetConstraints(TLabel AObj, TSizeConstraints AValue);

TCursor
Label_GetDragCursor(TLabel AObj);

void
Label_SetDragCursor(TLabel AObj, TCursor AValue);

TDragKind
Label_GetDragKind(TLabel AObj);

void
Label_SetDragKind(TLabel AObj, TDragKind AValue);

TDragMode
Label_GetDragMode(TLabel AObj);

void
Label_SetDragMode(TLabel AObj, TDragMode AValue);

BOOL
Label_GetEnabled(TLabel AObj);

void
Label_SetEnabled(TLabel AObj, BOOL AValue);

TWinControl
Label_GetFocusControl(TLabel AObj);

void
Label_SetFocusControl(TLabel AObj, TWinControl AValue);

TFont
Label_GetFont(TLabel AObj);

void
Label_SetFont(TLabel AObj, TFont AValue);

BOOL
Label_GetParentColor(TLabel AObj);

void
Label_SetParentColor(TLabel AObj, BOOL AValue);

BOOL
Label_GetParentFont(TLabel AObj);

void
Label_SetParentFont(TLabel AObj, BOOL AValue);

BOOL
Label_GetParentShowHint(TLabel AObj);

void
Label_SetParentShowHint(TLabel AObj, BOOL AValue);

TPopupMenu
Label_GetPopupMenu(TLabel AObj);

void
Label_SetPopupMenu(TLabel AObj, TPopupMenu AValue);

BOOL
Label_GetShowAccelChar(TLabel AObj);

void
Label_SetShowAccelChar(TLabel AObj, BOOL AValue);

BOOL
Label_GetShowHint(TLabel AObj);

void
Label_SetShowHint(TLabel AObj, BOOL AValue);

BOOL
Label_GetTransparent(TLabel AObj);

void
Label_SetTransparent(TLabel AObj, BOOL AValue);

TTextLayout
Label_GetLayout(TLabel AObj);

void
Label_SetLayout(TLabel AObj, TTextLayout AValue);

BOOL
Label_GetVisible(TLabel AObj);

void
Label_SetVisible(TLabel AObj, BOOL AValue);

BOOL
Label_GetWordWrap(TLabel AObj);

void
Label_SetWordWrap(TLabel AObj, BOOL AValue);

void
Label_SetOnClick(TLabel AObj, TNotifyEvent AEventData);

void
Label_SetOnContextPopup(TLabel AObj, TContextPopupEvent AEventData);

void
Label_SetOnDblClick(TLabel AObj, TNotifyEvent AEventData);

void
Label_SetOnDragDrop(TLabel AObj, TDragDropEvent AEventData);

void
Label_SetOnDragOver(TLabel AObj, TDragOverEvent AEventData);

void
Label_SetOnEndDrag(TLabel AObj, TEndDragEvent AEventData);

void
Label_SetOnMouseDown(TLabel AObj, TMouseEvent AEventData);

void
Label_SetOnMouseMove(TLabel AObj, TMouseMoveEvent AEventData);

void
Label_SetOnMouseUp(TLabel AObj, TMouseEvent AEventData);

void
Label_SetOnMouseEnter(TLabel AObj, TNotifyEvent AEventData);

void
Label_SetOnMouseLeave(TLabel AObj, TNotifyEvent AEventData);

TCanvas
Label_GetCanvas(TLabel AObj);

TAction
Label_GetAction(TLabel AObj);

void
Label_SetAction(TLabel AObj, TAction AValue);

TRect
Label_GetBoundsRect(TLabel AObj);

void
Label_SetBoundsRect(TLabel AObj, TRect AValue);

int32_t
Label_GetClientHeight(TLabel AObj);

void
Label_SetClientHeight(TLabel AObj, int32_t AValue);

TPoint
Label_GetClientOrigin(TLabel AObj);

TRect
Label_GetClientRect(TLabel AObj);

int32_t
Label_GetClientWidth(TLabel AObj);

void
Label_SetClientWidth(TLabel AObj, int32_t AValue);

TControlState
Label_GetControlState(TLabel AObj);

void
Label_SetControlState(TLabel AObj, TControlState AValue);

TControlStyle
Label_GetControlStyle(TLabel AObj);

void
Label_SetControlStyle(TLabel AObj, TControlStyle AValue);

BOOL
Label_GetFloating(TLabel AObj);

TWinControl
Label_GetParent(TLabel AObj);

void
Label_SetParent(TLabel AObj, TWinControl AValue);

int32_t
Label_GetLeft(TLabel AObj);

void
Label_SetLeft(TLabel AObj, int32_t AValue);

int32_t
Label_GetTop(TLabel AObj);

void
Label_SetTop(TLabel AObj, int32_t AValue);

int32_t
Label_GetWidth(TLabel AObj);

void
Label_SetWidth(TLabel AObj, int32_t AValue);

int32_t
Label_GetHeight(TLabel AObj);

void
Label_SetHeight(TLabel AObj, int32_t AValue);

TCursor
Label_GetCursor(TLabel AObj);

void
Label_SetCursor(TLabel AObj, TCursor AValue);

char*
Label_GetHint(TLabel AObj);

void
Label_SetHint(TLabel AObj, CChar char* AValue);

int32_t
Label_GetComponentCount(TLabel AObj);

int32_t
Label_GetComponentIndex(TLabel AObj);

void
Label_SetComponentIndex(TLabel AObj, int32_t AValue);

TComponent
Label_GetOwner(TLabel AObj);

char*
Label_GetName(TLabel AObj);

void
Label_SetName(TLabel AObj, CChar char* AValue);

intptr_t
Label_GetTag(TLabel AObj);

void
Label_SetTag(TLabel AObj, intptr_t AValue);

TAnchorSide
Label_GetAnchorSideLeft(TLabel AObj);

void
Label_SetAnchorSideLeft(TLabel AObj, TAnchorSide AValue);

TAnchorSide
Label_GetAnchorSideTop(TLabel AObj);

void
Label_SetAnchorSideTop(TLabel AObj, TAnchorSide AValue);

TAnchorSide
Label_GetAnchorSideRight(TLabel AObj);

void
Label_SetAnchorSideRight(TLabel AObj, TAnchorSide AValue);

TAnchorSide
Label_GetAnchorSideBottom(TLabel AObj);

void
Label_SetAnchorSideBottom(TLabel AObj, TAnchorSide AValue);

TControlBorderSpacing
Label_GetBorderSpacing(TLabel AObj);

void
Label_SetBorderSpacing(TLabel AObj, TControlBorderSpacing AValue);

TComponent
Label_GetComponents(TLabel AObj, int32_t AIndex);

TAnchorSide
Label_GetAnchorSide(TLabel AObj, TAnchorKind AKind);

TClass
Label_StaticClassType();

// -------------------TListBox-------------------

TListBox
ListBox_Create(TComponent AOwner);

void
ListBox_Free(TListBox AObj);

void
ListBox_AddItem(TListBox AObj, CChar char* Item, TObject AObject);

void
ListBox_Clear(TListBox AObj);

void
ListBox_ClearSelection(TListBox AObj);

void
ListBox_DeleteSelected(TListBox AObj);

int32_t
ListBox_ItemAtPos(TListBox AObj, TPoint Pos, BOOL Existing);

TRect
ListBox_ItemRect(TListBox AObj, int32_t Index);

void
ListBox_SelectAll(TListBox AObj);

BOOL
ListBox_CanFocus(TListBox AObj);

BOOL
ListBox_ContainsControl(TListBox AObj, TControl Control);

TControl
ListBox_ControlAtPos(TListBox AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
ListBox_DisableAlign(TListBox AObj);

void
ListBox_EnableAlign(TListBox AObj);

TControl
ListBox_FindChildControl(TListBox AObj, CChar char* ControlName);

void
ListBox_FlipChildren(TListBox AObj, BOOL AllLevels);

BOOL
ListBox_Focused(TListBox AObj);

BOOL
ListBox_HandleAllocated(TListBox AObj);

void
ListBox_InsertControl(TListBox AObj, TControl AControl);

void
ListBox_Invalidate(TListBox AObj);

void
ListBox_PaintTo(TListBox AObj, HDC DC, int32_t X, int32_t Y);

void
ListBox_RemoveControl(TListBox AObj, TControl AControl);

void
ListBox_Realign(TListBox AObj);

void
ListBox_Repaint(TListBox AObj);

void
ListBox_ScaleBy(TListBox AObj, int32_t M, int32_t D);

void
ListBox_ScrollBy(TListBox AObj, int32_t DeltaX, int32_t DeltaY);

void
ListBox_SetBounds(TListBox AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ListBox_SetFocus(TListBox AObj);

void
ListBox_Update(TListBox AObj);

void
ListBox_BringToFront(TListBox AObj);

TPoint
ListBox_ClientToScreen(TListBox AObj, TPoint Point);

TPoint
ListBox_ClientToParent(TListBox AObj, TPoint Point, TWinControl AParent);

BOOL
ListBox_Dragging(TListBox AObj);

BOOL
ListBox_HasParent(TListBox AObj);

void
ListBox_Hide(TListBox AObj);

intptr_t
ListBox_Perform(TListBox AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ListBox_Refresh(TListBox AObj);

TPoint
ListBox_ScreenToClient(TListBox AObj, TPoint Point);

TPoint
ListBox_ParentToClient(TListBox AObj, TPoint Point, TWinControl AParent);

void
ListBox_SendToBack(TListBox AObj);

void
ListBox_Show(TListBox AObj);

int32_t
ListBox_GetTextBuf(TListBox AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ListBox_GetTextLen(TListBox AObj);

void
ListBox_SetTextBuf(TListBox AObj, CChar char* Buffer);

TComponent
ListBox_FindComponent(TListBox AObj, CChar char* AName);

char*
ListBox_GetNamePath(TListBox AObj);

void
ListBox_Assign(TListBox AObj, TObject Source);

TClass
ListBox_ClassType(TListBox AObj);

char*
ListBox_ClassName(TListBox AObj);

int32_t
ListBox_InstanceSize(TListBox AObj);

BOOL
ListBox_InheritsFrom(TListBox AObj, TClass AClass);

BOOL
ListBox_Equals(TListBox AObj, TObject Obj);

int32_t
ListBox_GetHashCode(TListBox AObj);

char*
ListBox_ToString(TListBox AObj);

void
ListBox_AnchorToNeighbour(TListBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ListBox_AnchorParallel(TListBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ListBox_AnchorHorizontalCenterTo(TListBox AObj, TControl ASibling);

void
ListBox_AnchorVerticalCenterTo(TListBox AObj, TControl ASibling);

void
ListBox_AnchorSame(TListBox AObj, TAnchorKind ASide, TControl ASibling);

void
ListBox_AnchorAsAlign(TListBox AObj, TAlign ATheAlign, int32_t ASpace);

void
ListBox_AnchorClient(TListBox AObj, int32_t ASpace);

int32_t
ListBox_ScaleDesignToForm(TListBox AObj, int32_t ASize);

int32_t
ListBox_ScaleFormToDesign(TListBox AObj, int32_t ASize);

int32_t
ListBox_Scale96ToForm(TListBox AObj, int32_t ASize);

int32_t
ListBox_ScaleFormTo96(TListBox AObj, int32_t ASize);

int32_t
ListBox_Scale96ToFont(TListBox AObj, int32_t ASize);

int32_t
ListBox_ScaleFontTo96(TListBox AObj, int32_t ASize);

int32_t
ListBox_ScaleScreenToFont(TListBox AObj, int32_t ASize);

int32_t
ListBox_ScaleFontToScreen(TListBox AObj, int32_t ASize);

int32_t
ListBox_Scale96ToScreen(TListBox AObj, int32_t ASize);

int32_t
ListBox_ScaleScreenTo96(TListBox AObj, int32_t ASize);

void
ListBox_AutoAdjustLayout(TListBox AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ListBox_FixDesignFontsPPI(TListBox AObj, int32_t ADesignTimePPI);

void
ListBox_ScaleFontsPPI(TListBox AObj, int32_t AToPPI, double AProportion);

BOOL
ListBox_GetClickOnSelChange(TListBox AObj);

void
ListBox_SetClickOnSelChange(TListBox AObj, BOOL AValue);

TListBoxOptions
ListBox_GetOptions(TListBox AObj);

void
ListBox_SetOptions(TListBox AObj, TListBoxOptions AValue);

int32_t
ListBox_GetTopIndex(TListBox AObj);

void
ListBox_SetTopIndex(TListBox AObj, int32_t AValue);

TListBoxStyle
ListBox_GetStyle(TListBox AObj);

void
ListBox_SetStyle(TListBox AObj, TListBoxStyle AValue);

TAlign
ListBox_GetAlign(TListBox AObj);

void
ListBox_SetAlign(TListBox AObj, TAlign AValue);

TAnchors
ListBox_GetAnchors(TListBox AObj);

void
ListBox_SetAnchors(TListBox AObj, TAnchors AValue);

TBiDiMode
ListBox_GetBiDiMode(TListBox AObj);

void
ListBox_SetBiDiMode(TListBox AObj, TBiDiMode AValue);

TBorderStyle
ListBox_GetBorderStyle(TListBox AObj);

void
ListBox_SetBorderStyle(TListBox AObj, TBorderStyle AValue);

TColor
ListBox_GetColor(TListBox AObj);

void
ListBox_SetColor(TListBox AObj, TColor AValue);

int32_t
ListBox_GetColumns(TListBox AObj);

void
ListBox_SetColumns(TListBox AObj, int32_t AValue);

TSizeConstraints
ListBox_GetConstraints(TListBox AObj);

void
ListBox_SetConstraints(TListBox AObj, TSizeConstraints AValue);

BOOL
ListBox_GetDoubleBuffered(TListBox AObj);

void
ListBox_SetDoubleBuffered(TListBox AObj, BOOL AValue);

TCursor
ListBox_GetDragCursor(TListBox AObj);

void
ListBox_SetDragCursor(TListBox AObj, TCursor AValue);

TDragKind
ListBox_GetDragKind(TListBox AObj);

void
ListBox_SetDragKind(TListBox AObj, TDragKind AValue);

TDragMode
ListBox_GetDragMode(TListBox AObj);

void
ListBox_SetDragMode(TListBox AObj, TDragMode AValue);

BOOL
ListBox_GetEnabled(TListBox AObj);

void
ListBox_SetEnabled(TListBox AObj, BOOL AValue);

BOOL
ListBox_GetExtendedSelect(TListBox AObj);

void
ListBox_SetExtendedSelect(TListBox AObj, BOOL AValue);

TFont
ListBox_GetFont(TListBox AObj);

void
ListBox_SetFont(TListBox AObj, TFont AValue);

int32_t
ListBox_GetItemHeight(TListBox AObj);

void
ListBox_SetItemHeight(TListBox AObj, int32_t AValue);

TStrings
ListBox_GetItems(TListBox AObj);

void
ListBox_SetItems(TListBox AObj, TStrings AValue);

BOOL
ListBox_GetMultiSelect(TListBox AObj);

void
ListBox_SetMultiSelect(TListBox AObj, BOOL AValue);

BOOL
ListBox_GetParentColor(TListBox AObj);

void
ListBox_SetParentColor(TListBox AObj, BOOL AValue);

BOOL
ListBox_GetParentDoubleBuffered(TListBox AObj);

void
ListBox_SetParentDoubleBuffered(TListBox AObj, BOOL AValue);

BOOL
ListBox_GetParentFont(TListBox AObj);

void
ListBox_SetParentFont(TListBox AObj, BOOL AValue);

BOOL
ListBox_GetParentShowHint(TListBox AObj);

void
ListBox_SetParentShowHint(TListBox AObj, BOOL AValue);

TPopupMenu
ListBox_GetPopupMenu(TListBox AObj);

void
ListBox_SetPopupMenu(TListBox AObj, TPopupMenu AValue);

BOOL
ListBox_GetShowHint(TListBox AObj);

void
ListBox_SetShowHint(TListBox AObj, BOOL AValue);

BOOL
ListBox_GetSorted(TListBox AObj);

void
ListBox_SetSorted(TListBox AObj, BOOL AValue);

TTabOrder
ListBox_GetTabOrder(TListBox AObj);

void
ListBox_SetTabOrder(TListBox AObj, TTabOrder AValue);

BOOL
ListBox_GetTabStop(TListBox AObj);

void
ListBox_SetTabStop(TListBox AObj, BOOL AValue);

BOOL
ListBox_GetVisible(TListBox AObj);

void
ListBox_SetVisible(TListBox AObj, BOOL AValue);

void
ListBox_SetOnClick(TListBox AObj, TNotifyEvent AEventData);

void
ListBox_SetOnContextPopup(TListBox AObj, TContextPopupEvent AEventData);

void
ListBox_SetOnDblClick(TListBox AObj, TNotifyEvent AEventData);

void
ListBox_SetOnDragDrop(TListBox AObj, TDragDropEvent AEventData);

void
ListBox_SetOnDragOver(TListBox AObj, TDragOverEvent AEventData);

void
ListBox_SetOnDrawItem(TListBox AObj, TDrawItemEvent AEventData);

void
ListBox_SetOnEndDrag(TListBox AObj, TEndDragEvent AEventData);

void
ListBox_SetOnEnter(TListBox AObj, TNotifyEvent AEventData);

void
ListBox_SetOnExit(TListBox AObj, TNotifyEvent AEventData);

void
ListBox_SetOnKeyDown(TListBox AObj, TKeyEvent AEventData);

void
ListBox_SetOnKeyPress(TListBox AObj, TKeyPressEvent AEventData);

void
ListBox_SetOnKeyUp(TListBox AObj, TKeyEvent AEventData);

void
ListBox_SetOnMeasureItem(TListBox AObj, TMeasureItemEvent AEventData);

void
ListBox_SetOnMouseDown(TListBox AObj, TMouseEvent AEventData);

void
ListBox_SetOnMouseEnter(TListBox AObj, TNotifyEvent AEventData);

void
ListBox_SetOnMouseLeave(TListBox AObj, TNotifyEvent AEventData);

void
ListBox_SetOnMouseMove(TListBox AObj, TMouseMoveEvent AEventData);

void
ListBox_SetOnMouseUp(TListBox AObj, TMouseEvent AEventData);

TCanvas
ListBox_GetCanvas(TListBox AObj);

int32_t
ListBox_GetCount(TListBox AObj);

int32_t
ListBox_GetSelCount(TListBox AObj);

int32_t
ListBox_GetItemIndex(TListBox AObj);

void
ListBox_SetItemIndex(TListBox AObj, int32_t AValue);

int32_t
ListBox_GetDockClientCount(TListBox AObj);

BOOL
ListBox_GetDockSite(TListBox AObj);

void
ListBox_SetDockSite(TListBox AObj, BOOL AValue);

BOOL
ListBox_GetMouseInClient(TListBox AObj);

int32_t
ListBox_GetVisibleDockClientCount(TListBox AObj);

TBrush
ListBox_GetBrush(TListBox AObj);

int32_t
ListBox_GetControlCount(TListBox AObj);

HWND
ListBox_GetHandle(TListBox AObj);

HWND
ListBox_GetParentWindow(TListBox AObj);

void
ListBox_SetParentWindow(TListBox AObj, HWND AValue);

BOOL
ListBox_GetShowing(TListBox AObj);

BOOL
ListBox_GetUseDockManager(TListBox AObj);

void
ListBox_SetUseDockManager(TListBox AObj, BOOL AValue);

TAction
ListBox_GetAction(TListBox AObj);

void
ListBox_SetAction(TListBox AObj, TAction AValue);

TRect
ListBox_GetBoundsRect(TListBox AObj);

void
ListBox_SetBoundsRect(TListBox AObj, TRect AValue);

int32_t
ListBox_GetClientHeight(TListBox AObj);

void
ListBox_SetClientHeight(TListBox AObj, int32_t AValue);

TPoint
ListBox_GetClientOrigin(TListBox AObj);

TRect
ListBox_GetClientRect(TListBox AObj);

int32_t
ListBox_GetClientWidth(TListBox AObj);

void
ListBox_SetClientWidth(TListBox AObj, int32_t AValue);

TControlState
ListBox_GetControlState(TListBox AObj);

void
ListBox_SetControlState(TListBox AObj, TControlState AValue);

TControlStyle
ListBox_GetControlStyle(TListBox AObj);

void
ListBox_SetControlStyle(TListBox AObj, TControlStyle AValue);

BOOL
ListBox_GetFloating(TListBox AObj);

TWinControl
ListBox_GetParent(TListBox AObj);

void
ListBox_SetParent(TListBox AObj, TWinControl AValue);

int32_t
ListBox_GetLeft(TListBox AObj);

void
ListBox_SetLeft(TListBox AObj, int32_t AValue);

int32_t
ListBox_GetTop(TListBox AObj);

void
ListBox_SetTop(TListBox AObj, int32_t AValue);

int32_t
ListBox_GetWidth(TListBox AObj);

void
ListBox_SetWidth(TListBox AObj, int32_t AValue);

int32_t
ListBox_GetHeight(TListBox AObj);

void
ListBox_SetHeight(TListBox AObj, int32_t AValue);

TCursor
ListBox_GetCursor(TListBox AObj);

void
ListBox_SetCursor(TListBox AObj, TCursor AValue);

char*
ListBox_GetHint(TListBox AObj);

void
ListBox_SetHint(TListBox AObj, CChar char* AValue);

int32_t
ListBox_GetComponentCount(TListBox AObj);

int32_t
ListBox_GetComponentIndex(TListBox AObj);

void
ListBox_SetComponentIndex(TListBox AObj, int32_t AValue);

TComponent
ListBox_GetOwner(TListBox AObj);

char*
ListBox_GetName(TListBox AObj);

void
ListBox_SetName(TListBox AObj, CChar char* AValue);

intptr_t
ListBox_GetTag(TListBox AObj);

void
ListBox_SetTag(TListBox AObj, intptr_t AValue);

TAnchorSide
ListBox_GetAnchorSideLeft(TListBox AObj);

void
ListBox_SetAnchorSideLeft(TListBox AObj, TAnchorSide AValue);

TAnchorSide
ListBox_GetAnchorSideTop(TListBox AObj);

void
ListBox_SetAnchorSideTop(TListBox AObj, TAnchorSide AValue);

TAnchorSide
ListBox_GetAnchorSideRight(TListBox AObj);

void
ListBox_SetAnchorSideRight(TListBox AObj, TAnchorSide AValue);

TAnchorSide
ListBox_GetAnchorSideBottom(TListBox AObj);

void
ListBox_SetAnchorSideBottom(TListBox AObj, TAnchorSide AValue);

TControlChildSizing
ListBox_GetChildSizing(TListBox AObj);

void
ListBox_SetChildSizing(TListBox AObj, TControlChildSizing AValue);

TControlBorderSpacing
ListBox_GetBorderSpacing(TListBox AObj);

void
ListBox_SetBorderSpacing(TListBox AObj, TControlBorderSpacing AValue);

BOOL
ListBox_GetSelected(TListBox AObj, int32_t Index);

void
ListBox_SetSelected(TListBox AObj, int32_t Index, BOOL AValue);

TControl
ListBox_GetDockClients(TListBox AObj, int32_t Index);

TControl
ListBox_GetControls(TListBox AObj, int32_t Index);

TComponent
ListBox_GetComponents(TListBox AObj, int32_t AIndex);

TAnchorSide
ListBox_GetAnchorSide(TListBox AObj, TAnchorKind AKind);

TClass
ListBox_StaticClassType();

// -------------------TComboBox-------------------

TComboBox
ComboBox_Create(TComponent AOwner);

void
ComboBox_Free(TComboBox AObj);

void
ComboBox_AddItem(TComboBox AObj, CChar char* Item, TObject AObject);

void
ComboBox_Clear(TComboBox AObj);

void
ComboBox_ClearSelection(TComboBox AObj);

void
ComboBox_DeleteSelected(TComboBox AObj);

BOOL
ComboBox_Focused(TComboBox AObj);

void
ComboBox_SelectAll(TComboBox AObj);

BOOL
ComboBox_CanFocus(TComboBox AObj);

BOOL
ComboBox_ContainsControl(TComboBox AObj, TControl Control);

TControl
ComboBox_ControlAtPos(TComboBox AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
ComboBox_DisableAlign(TComboBox AObj);

void
ComboBox_EnableAlign(TComboBox AObj);

TControl
ComboBox_FindChildControl(TComboBox AObj, CChar char* ControlName);

void
ComboBox_FlipChildren(TComboBox AObj, BOOL AllLevels);

BOOL
ComboBox_HandleAllocated(TComboBox AObj);

void
ComboBox_InsertControl(TComboBox AObj, TControl AControl);

void
ComboBox_Invalidate(TComboBox AObj);

void
ComboBox_PaintTo(TComboBox AObj, HDC DC, int32_t X, int32_t Y);

void
ComboBox_RemoveControl(TComboBox AObj, TControl AControl);

void
ComboBox_Realign(TComboBox AObj);

void
ComboBox_Repaint(TComboBox AObj);

void
ComboBox_ScaleBy(TComboBox AObj, int32_t M, int32_t D);

void
ComboBox_ScrollBy(TComboBox AObj, int32_t DeltaX, int32_t DeltaY);

void
ComboBox_SetBounds(TComboBox AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ComboBox_SetFocus(TComboBox AObj);

void
ComboBox_Update(TComboBox AObj);

void
ComboBox_BringToFront(TComboBox AObj);

TPoint
ComboBox_ClientToScreen(TComboBox AObj, TPoint Point);

TPoint
ComboBox_ClientToParent(TComboBox AObj, TPoint Point, TWinControl AParent);

BOOL
ComboBox_Dragging(TComboBox AObj);

BOOL
ComboBox_HasParent(TComboBox AObj);

void
ComboBox_Hide(TComboBox AObj);

intptr_t
ComboBox_Perform(TComboBox AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ComboBox_Refresh(TComboBox AObj);

TPoint
ComboBox_ScreenToClient(TComboBox AObj, TPoint Point);

TPoint
ComboBox_ParentToClient(TComboBox AObj, TPoint Point, TWinControl AParent);

void
ComboBox_SendToBack(TComboBox AObj);

void
ComboBox_Show(TComboBox AObj);

int32_t
ComboBox_GetTextBuf(TComboBox AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ComboBox_GetTextLen(TComboBox AObj);

void
ComboBox_SetTextBuf(TComboBox AObj, CChar char* Buffer);

TComponent
ComboBox_FindComponent(TComboBox AObj, CChar char* AName);

char*
ComboBox_GetNamePath(TComboBox AObj);

void
ComboBox_Assign(TComboBox AObj, TObject Source);

TClass
ComboBox_ClassType(TComboBox AObj);

char*
ComboBox_ClassName(TComboBox AObj);

int32_t
ComboBox_InstanceSize(TComboBox AObj);

BOOL
ComboBox_InheritsFrom(TComboBox AObj, TClass AClass);

BOOL
ComboBox_Equals(TComboBox AObj, TObject Obj);

int32_t
ComboBox_GetHashCode(TComboBox AObj);

char*
ComboBox_ToString(TComboBox AObj);

void
ComboBox_AnchorToNeighbour(TComboBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ComboBox_AnchorParallel(TComboBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ComboBox_AnchorHorizontalCenterTo(TComboBox AObj, TControl ASibling);

void
ComboBox_AnchorVerticalCenterTo(TComboBox AObj, TControl ASibling);

void
ComboBox_AnchorSame(TComboBox AObj, TAnchorKind ASide, TControl ASibling);

void
ComboBox_AnchorAsAlign(TComboBox AObj, TAlign ATheAlign, int32_t ASpace);

void
ComboBox_AnchorClient(TComboBox AObj, int32_t ASpace);

int32_t
ComboBox_ScaleDesignToForm(TComboBox AObj, int32_t ASize);

int32_t
ComboBox_ScaleFormToDesign(TComboBox AObj, int32_t ASize);

int32_t
ComboBox_Scale96ToForm(TComboBox AObj, int32_t ASize);

int32_t
ComboBox_ScaleFormTo96(TComboBox AObj, int32_t ASize);

int32_t
ComboBox_Scale96ToFont(TComboBox AObj, int32_t ASize);

int32_t
ComboBox_ScaleFontTo96(TComboBox AObj, int32_t ASize);

int32_t
ComboBox_ScaleScreenToFont(TComboBox AObj, int32_t ASize);

int32_t
ComboBox_ScaleFontToScreen(TComboBox AObj, int32_t ASize);

int32_t
ComboBox_Scale96ToScreen(TComboBox AObj, int32_t ASize);

int32_t
ComboBox_ScaleScreenTo96(TComboBox AObj, int32_t ASize);

void
ComboBox_AutoAdjustLayout(TComboBox AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ComboBox_FixDesignFontsPPI(TComboBox AObj, int32_t ADesignTimePPI);

void
ComboBox_ScaleFontsPPI(TComboBox AObj, int32_t AToPPI, double AProportion);

BOOL
ComboBox_GetReadOnly(TComboBox AObj);

void
ComboBox_SetReadOnly(TComboBox AObj, BOOL AValue);

TAlign
ComboBox_GetAlign(TComboBox AObj);

void
ComboBox_SetAlign(TComboBox AObj, TAlign AValue);

BOOL
ComboBox_GetAutoComplete(TComboBox AObj);

void
ComboBox_SetAutoComplete(TComboBox AObj, BOOL AValue);

BOOL
ComboBox_GetAutoDropDown(TComboBox AObj);

void
ComboBox_SetAutoDropDown(TComboBox AObj, BOOL AValue);

TComboBoxStyle
ComboBox_GetStyle(TComboBox AObj);

void
ComboBox_SetStyle(TComboBox AObj, TComboBoxStyle AValue);

TAnchors
ComboBox_GetAnchors(TComboBox AObj);

void
ComboBox_SetAnchors(TComboBox AObj, TAnchors AValue);

TBiDiMode
ComboBox_GetBiDiMode(TComboBox AObj);

void
ComboBox_SetBiDiMode(TComboBox AObj, TBiDiMode AValue);

TEditCharCase
ComboBox_GetCharCase(TComboBox AObj);

void
ComboBox_SetCharCase(TComboBox AObj, TEditCharCase AValue);

TColor
ComboBox_GetColor(TComboBox AObj);

void
ComboBox_SetColor(TComboBox AObj, TColor AValue);

TSizeConstraints
ComboBox_GetConstraints(TComboBox AObj);

void
ComboBox_SetConstraints(TComboBox AObj, TSizeConstraints AValue);

BOOL
ComboBox_GetDoubleBuffered(TComboBox AObj);

void
ComboBox_SetDoubleBuffered(TComboBox AObj, BOOL AValue);

TCursor
ComboBox_GetDragCursor(TComboBox AObj);

void
ComboBox_SetDragCursor(TComboBox AObj, TCursor AValue);

TDragKind
ComboBox_GetDragKind(TComboBox AObj);

void
ComboBox_SetDragKind(TComboBox AObj, TDragKind AValue);

TDragMode
ComboBox_GetDragMode(TComboBox AObj);

void
ComboBox_SetDragMode(TComboBox AObj, TDragMode AValue);

int32_t
ComboBox_GetDropDownCount(TComboBox AObj);

void
ComboBox_SetDropDownCount(TComboBox AObj, int32_t AValue);

BOOL
ComboBox_GetEnabled(TComboBox AObj);

void
ComboBox_SetEnabled(TComboBox AObj, BOOL AValue);

TFont
ComboBox_GetFont(TComboBox AObj);

void
ComboBox_SetFont(TComboBox AObj, TFont AValue);

int32_t
ComboBox_GetItemHeight(TComboBox AObj);

void
ComboBox_SetItemHeight(TComboBox AObj, int32_t AValue);

int32_t
ComboBox_GetItemIndex(TComboBox AObj);

void
ComboBox_SetItemIndex(TComboBox AObj, int32_t AValue);

int32_t
ComboBox_GetMaxLength(TComboBox AObj);

void
ComboBox_SetMaxLength(TComboBox AObj, int32_t AValue);

BOOL
ComboBox_GetParentColor(TComboBox AObj);

void
ComboBox_SetParentColor(TComboBox AObj, BOOL AValue);

BOOL
ComboBox_GetParentDoubleBuffered(TComboBox AObj);

void
ComboBox_SetParentDoubleBuffered(TComboBox AObj, BOOL AValue);

BOOL
ComboBox_GetParentFont(TComboBox AObj);

void
ComboBox_SetParentFont(TComboBox AObj, BOOL AValue);

BOOL
ComboBox_GetParentShowHint(TComboBox AObj);

void
ComboBox_SetParentShowHint(TComboBox AObj, BOOL AValue);

TPopupMenu
ComboBox_GetPopupMenu(TComboBox AObj);

void
ComboBox_SetPopupMenu(TComboBox AObj, TPopupMenu AValue);

BOOL
ComboBox_GetShowHint(TComboBox AObj);

void
ComboBox_SetShowHint(TComboBox AObj, BOOL AValue);

BOOL
ComboBox_GetSorted(TComboBox AObj);

void
ComboBox_SetSorted(TComboBox AObj, BOOL AValue);

TTabOrder
ComboBox_GetTabOrder(TComboBox AObj);

void
ComboBox_SetTabOrder(TComboBox AObj, TTabOrder AValue);

BOOL
ComboBox_GetTabStop(TComboBox AObj);

void
ComboBox_SetTabStop(TComboBox AObj, BOOL AValue);

char*
ComboBox_GetText(TComboBox AObj);

void
ComboBox_SetText(TComboBox AObj, CChar char* AValue);

BOOL
ComboBox_GetVisible(TComboBox AObj);

void
ComboBox_SetVisible(TComboBox AObj, BOOL AValue);

void
ComboBox_SetOnChange(TComboBox AObj, TNotifyEvent AEventData);

void
ComboBox_SetOnClick(TComboBox AObj, TNotifyEvent AEventData);

void
ComboBox_SetOnCloseUp(TComboBox AObj, TNotifyEvent AEventData);

void
ComboBox_SetOnContextPopup(TComboBox AObj, TContextPopupEvent AEventData);

void
ComboBox_SetOnDblClick(TComboBox AObj, TNotifyEvent AEventData);

void
ComboBox_SetOnDragDrop(TComboBox AObj, TDragDropEvent AEventData);

void
ComboBox_SetOnDragOver(TComboBox AObj, TDragOverEvent AEventData);

void
ComboBox_SetOnDrawItem(TComboBox AObj, TDrawItemEvent AEventData);

void
ComboBox_SetOnDropDown(TComboBox AObj, TNotifyEvent AEventData);

void
ComboBox_SetOnEndDrag(TComboBox AObj, TEndDragEvent AEventData);

void
ComboBox_SetOnEnter(TComboBox AObj, TNotifyEvent AEventData);

void
ComboBox_SetOnExit(TComboBox AObj, TNotifyEvent AEventData);

void
ComboBox_SetOnKeyDown(TComboBox AObj, TKeyEvent AEventData);

void
ComboBox_SetOnKeyPress(TComboBox AObj, TKeyPressEvent AEventData);

void
ComboBox_SetOnKeyUp(TComboBox AObj, TKeyEvent AEventData);

void
ComboBox_SetOnMeasureItem(TComboBox AObj, TMeasureItemEvent AEventData);

void
ComboBox_SetOnMouseEnter(TComboBox AObj, TNotifyEvent AEventData);

void
ComboBox_SetOnMouseLeave(TComboBox AObj, TNotifyEvent AEventData);

void
ComboBox_SetOnSelect(TComboBox AObj, TNotifyEvent AEventData);

TStrings
ComboBox_GetItems(TComboBox AObj);

void
ComboBox_SetItems(TComboBox AObj, TStrings AValue);

char*
ComboBox_GetSelText(TComboBox AObj);

void
ComboBox_SetSelText(TComboBox AObj, CChar char* AValue);

TCanvas
ComboBox_GetCanvas(TComboBox AObj);

BOOL
ComboBox_GetDroppedDown(TComboBox AObj);

void
ComboBox_SetDroppedDown(TComboBox AObj, BOOL AValue);

int32_t
ComboBox_GetSelLength(TComboBox AObj);

void
ComboBox_SetSelLength(TComboBox AObj, int32_t AValue);

int32_t
ComboBox_GetSelStart(TComboBox AObj);

void
ComboBox_SetSelStart(TComboBox AObj, int32_t AValue);

int32_t
ComboBox_GetDockClientCount(TComboBox AObj);

BOOL
ComboBox_GetDockSite(TComboBox AObj);

void
ComboBox_SetDockSite(TComboBox AObj, BOOL AValue);

BOOL
ComboBox_GetMouseInClient(TComboBox AObj);

int32_t
ComboBox_GetVisibleDockClientCount(TComboBox AObj);

TBrush
ComboBox_GetBrush(TComboBox AObj);

int32_t
ComboBox_GetControlCount(TComboBox AObj);

HWND
ComboBox_GetHandle(TComboBox AObj);

HWND
ComboBox_GetParentWindow(TComboBox AObj);

void
ComboBox_SetParentWindow(TComboBox AObj, HWND AValue);

BOOL
ComboBox_GetShowing(TComboBox AObj);

BOOL
ComboBox_GetUseDockManager(TComboBox AObj);

void
ComboBox_SetUseDockManager(TComboBox AObj, BOOL AValue);

TAction
ComboBox_GetAction(TComboBox AObj);

void
ComboBox_SetAction(TComboBox AObj, TAction AValue);

TRect
ComboBox_GetBoundsRect(TComboBox AObj);

void
ComboBox_SetBoundsRect(TComboBox AObj, TRect AValue);

int32_t
ComboBox_GetClientHeight(TComboBox AObj);

void
ComboBox_SetClientHeight(TComboBox AObj, int32_t AValue);

TPoint
ComboBox_GetClientOrigin(TComboBox AObj);

TRect
ComboBox_GetClientRect(TComboBox AObj);

int32_t
ComboBox_GetClientWidth(TComboBox AObj);

void
ComboBox_SetClientWidth(TComboBox AObj, int32_t AValue);

TControlState
ComboBox_GetControlState(TComboBox AObj);

void
ComboBox_SetControlState(TComboBox AObj, TControlState AValue);

TControlStyle
ComboBox_GetControlStyle(TComboBox AObj);

void
ComboBox_SetControlStyle(TComboBox AObj, TControlStyle AValue);

BOOL
ComboBox_GetFloating(TComboBox AObj);

TWinControl
ComboBox_GetParent(TComboBox AObj);

void
ComboBox_SetParent(TComboBox AObj, TWinControl AValue);

int32_t
ComboBox_GetLeft(TComboBox AObj);

void
ComboBox_SetLeft(TComboBox AObj, int32_t AValue);

int32_t
ComboBox_GetTop(TComboBox AObj);

void
ComboBox_SetTop(TComboBox AObj, int32_t AValue);

int32_t
ComboBox_GetWidth(TComboBox AObj);

void
ComboBox_SetWidth(TComboBox AObj, int32_t AValue);

int32_t
ComboBox_GetHeight(TComboBox AObj);

void
ComboBox_SetHeight(TComboBox AObj, int32_t AValue);

TCursor
ComboBox_GetCursor(TComboBox AObj);

void
ComboBox_SetCursor(TComboBox AObj, TCursor AValue);

char*
ComboBox_GetHint(TComboBox AObj);

void
ComboBox_SetHint(TComboBox AObj, CChar char* AValue);

int32_t
ComboBox_GetComponentCount(TComboBox AObj);

int32_t
ComboBox_GetComponentIndex(TComboBox AObj);

void
ComboBox_SetComponentIndex(TComboBox AObj, int32_t AValue);

TComponent
ComboBox_GetOwner(TComboBox AObj);

char*
ComboBox_GetName(TComboBox AObj);

void
ComboBox_SetName(TComboBox AObj, CChar char* AValue);

intptr_t
ComboBox_GetTag(TComboBox AObj);

void
ComboBox_SetTag(TComboBox AObj, intptr_t AValue);

TAnchorSide
ComboBox_GetAnchorSideLeft(TComboBox AObj);

void
ComboBox_SetAnchorSideLeft(TComboBox AObj, TAnchorSide AValue);

TAnchorSide
ComboBox_GetAnchorSideTop(TComboBox AObj);

void
ComboBox_SetAnchorSideTop(TComboBox AObj, TAnchorSide AValue);

TAnchorSide
ComboBox_GetAnchorSideRight(TComboBox AObj);

void
ComboBox_SetAnchorSideRight(TComboBox AObj, TAnchorSide AValue);

TAnchorSide
ComboBox_GetAnchorSideBottom(TComboBox AObj);

void
ComboBox_SetAnchorSideBottom(TComboBox AObj, TAnchorSide AValue);

TControlChildSizing
ComboBox_GetChildSizing(TComboBox AObj);

void
ComboBox_SetChildSizing(TComboBox AObj, TControlChildSizing AValue);

TControlBorderSpacing
ComboBox_GetBorderSpacing(TComboBox AObj);

void
ComboBox_SetBorderSpacing(TComboBox AObj, TControlBorderSpacing AValue);

TControl
ComboBox_GetDockClients(TComboBox AObj, int32_t Index);

TControl
ComboBox_GetControls(TComboBox AObj, int32_t Index);

TComponent
ComboBox_GetComponents(TComboBox AObj, int32_t AIndex);

TAnchorSide
ComboBox_GetAnchorSide(TComboBox AObj, TAnchorKind AKind);

TClass
ComboBox_StaticClassType();

// -------------------TPanel-------------------

TPanel
Panel_Create(TComponent AOwner);

void
Panel_Free(TPanel AObj);

BOOL
Panel_CanFocus(TPanel AObj);

BOOL
Panel_ContainsControl(TPanel AObj, TControl Control);

TControl
Panel_ControlAtPos(TPanel AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
Panel_DisableAlign(TPanel AObj);

void
Panel_EnableAlign(TPanel AObj);

TControl
Panel_FindChildControl(TPanel AObj, CChar char* ControlName);

void
Panel_FlipChildren(TPanel AObj, BOOL AllLevels);

BOOL
Panel_Focused(TPanel AObj);

BOOL
Panel_HandleAllocated(TPanel AObj);

void
Panel_InsertControl(TPanel AObj, TControl AControl);

void
Panel_Invalidate(TPanel AObj);

void
Panel_PaintTo(TPanel AObj, HDC DC, int32_t X, int32_t Y);

void
Panel_RemoveControl(TPanel AObj, TControl AControl);

void
Panel_Realign(TPanel AObj);

void
Panel_Repaint(TPanel AObj);

void
Panel_ScaleBy(TPanel AObj, int32_t M, int32_t D);

void
Panel_ScrollBy(TPanel AObj, int32_t DeltaX, int32_t DeltaY);

void
Panel_SetBounds(TPanel AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
Panel_SetFocus(TPanel AObj);

void
Panel_Update(TPanel AObj);

void
Panel_BringToFront(TPanel AObj);

TPoint
Panel_ClientToScreen(TPanel AObj, TPoint Point);

TPoint
Panel_ClientToParent(TPanel AObj, TPoint Point, TWinControl AParent);

BOOL
Panel_Dragging(TPanel AObj);

BOOL
Panel_HasParent(TPanel AObj);

void
Panel_Hide(TPanel AObj);

intptr_t
Panel_Perform(TPanel AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
Panel_Refresh(TPanel AObj);

TPoint
Panel_ScreenToClient(TPanel AObj, TPoint Point);

TPoint
Panel_ParentToClient(TPanel AObj, TPoint Point, TWinControl AParent);

void
Panel_SendToBack(TPanel AObj);

void
Panel_Show(TPanel AObj);

int32_t
Panel_GetTextBuf(TPanel AObj, CChar char* Buffer, int32_t BufSize);

int32_t
Panel_GetTextLen(TPanel AObj);

void
Panel_SetTextBuf(TPanel AObj, CChar char* Buffer);

TComponent
Panel_FindComponent(TPanel AObj, CChar char* AName);

char*
Panel_GetNamePath(TPanel AObj);

void
Panel_Assign(TPanel AObj, TObject Source);

TClass
Panel_ClassType(TPanel AObj);

char*
Panel_ClassName(TPanel AObj);

int32_t
Panel_InstanceSize(TPanel AObj);

BOOL
Panel_InheritsFrom(TPanel AObj, TClass AClass);

BOOL
Panel_Equals(TPanel AObj, TObject Obj);

int32_t
Panel_GetHashCode(TPanel AObj);

char*
Panel_ToString(TPanel AObj);

void
Panel_AnchorToNeighbour(TPanel AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Panel_AnchorParallel(TPanel AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Panel_AnchorHorizontalCenterTo(TPanel AObj, TControl ASibling);

void
Panel_AnchorVerticalCenterTo(TPanel AObj, TControl ASibling);

void
Panel_AnchorSame(TPanel AObj, TAnchorKind ASide, TControl ASibling);

void
Panel_AnchorAsAlign(TPanel AObj, TAlign ATheAlign, int32_t ASpace);

void
Panel_AnchorClient(TPanel AObj, int32_t ASpace);

int32_t
Panel_ScaleDesignToForm(TPanel AObj, int32_t ASize);

int32_t
Panel_ScaleFormToDesign(TPanel AObj, int32_t ASize);

int32_t
Panel_Scale96ToForm(TPanel AObj, int32_t ASize);

int32_t
Panel_ScaleFormTo96(TPanel AObj, int32_t ASize);

int32_t
Panel_Scale96ToFont(TPanel AObj, int32_t ASize);

int32_t
Panel_ScaleFontTo96(TPanel AObj, int32_t ASize);

int32_t
Panel_ScaleScreenToFont(TPanel AObj, int32_t ASize);

int32_t
Panel_ScaleFontToScreen(TPanel AObj, int32_t ASize);

int32_t
Panel_Scale96ToScreen(TPanel AObj, int32_t ASize);

int32_t
Panel_ScaleScreenTo96(TPanel AObj, int32_t ASize);

void
Panel_AutoAdjustLayout(TPanel AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
Panel_FixDesignFontsPPI(TPanel AObj, int32_t ADesignTimePPI);

void
Panel_ScaleFontsPPI(TPanel AObj, int32_t AToPPI, double AProportion);

TCanvas
Panel_GetCanvas(TPanel AObj);

void
Panel_SetCanvas(TPanel AObj, TCanvas AValue);

void
Panel_SetOnPaint(TPanel AObj, TNotifyEvent AEventData);

TAlign
Panel_GetAlign(TPanel AObj);

void
Panel_SetAlign(TPanel AObj, TAlign AValue);

TAlignment
Panel_GetAlignment(TPanel AObj);

void
Panel_SetAlignment(TPanel AObj, TAlignment AValue);

TAnchors
Panel_GetAnchors(TPanel AObj);

void
Panel_SetAnchors(TPanel AObj, TAnchors AValue);

BOOL
Panel_GetAutoSize(TPanel AObj);

void
Panel_SetAutoSize(TPanel AObj, BOOL AValue);

TBevelCut
Panel_GetBevelInner(TPanel AObj);

void
Panel_SetBevelInner(TPanel AObj, TBevelCut AValue);

TBevelCut
Panel_GetBevelOuter(TPanel AObj);

void
Panel_SetBevelOuter(TPanel AObj, TBevelCut AValue);

TBiDiMode
Panel_GetBiDiMode(TPanel AObj);

void
Panel_SetBiDiMode(TPanel AObj, TBiDiMode AValue);

int32_t
Panel_GetBorderWidth(TPanel AObj);

void
Panel_SetBorderWidth(TPanel AObj, int32_t AValue);

TBorderStyle
Panel_GetBorderStyle(TPanel AObj);

void
Panel_SetBorderStyle(TPanel AObj, TBorderStyle AValue);

char*
Panel_GetCaption(TPanel AObj);

void
Panel_SetCaption(TPanel AObj, CChar char* AValue);

TColor
Panel_GetColor(TPanel AObj);

void
Panel_SetColor(TPanel AObj, TColor AValue);

TSizeConstraints
Panel_GetConstraints(TPanel AObj);

void
Panel_SetConstraints(TPanel AObj, TSizeConstraints AValue);

BOOL
Panel_GetUseDockManager(TPanel AObj);

void
Panel_SetUseDockManager(TPanel AObj, BOOL AValue);

BOOL
Panel_GetDockSite(TPanel AObj);

void
Panel_SetDockSite(TPanel AObj, BOOL AValue);

BOOL
Panel_GetDoubleBuffered(TPanel AObj);

void
Panel_SetDoubleBuffered(TPanel AObj, BOOL AValue);

TCursor
Panel_GetDragCursor(TPanel AObj);

void
Panel_SetDragCursor(TPanel AObj, TCursor AValue);

TDragKind
Panel_GetDragKind(TPanel AObj);

void
Panel_SetDragKind(TPanel AObj, TDragKind AValue);

TDragMode
Panel_GetDragMode(TPanel AObj);

void
Panel_SetDragMode(TPanel AObj, TDragMode AValue);

BOOL
Panel_GetEnabled(TPanel AObj);

void
Panel_SetEnabled(TPanel AObj, BOOL AValue);

BOOL
Panel_GetFullRepaint(TPanel AObj);

void
Panel_SetFullRepaint(TPanel AObj, BOOL AValue);

TFont
Panel_GetFont(TPanel AObj);

void
Panel_SetFont(TPanel AObj, TFont AValue);

BOOL
Panel_GetParentBackground(TPanel AObj);

void
Panel_SetParentBackground(TPanel AObj, BOOL AValue);

BOOL
Panel_GetParentColor(TPanel AObj);

void
Panel_SetParentColor(TPanel AObj, BOOL AValue);

BOOL
Panel_GetParentDoubleBuffered(TPanel AObj);

void
Panel_SetParentDoubleBuffered(TPanel AObj, BOOL AValue);

BOOL
Panel_GetParentFont(TPanel AObj);

void
Panel_SetParentFont(TPanel AObj, BOOL AValue);

BOOL
Panel_GetParentShowHint(TPanel AObj);

void
Panel_SetParentShowHint(TPanel AObj, BOOL AValue);

TPopupMenu
Panel_GetPopupMenu(TPanel AObj);

void
Panel_SetPopupMenu(TPanel AObj, TPopupMenu AValue);

BOOL
Panel_GetShowHint(TPanel AObj);

void
Panel_SetShowHint(TPanel AObj, BOOL AValue);

TTabOrder
Panel_GetTabOrder(TPanel AObj);

void
Panel_SetTabOrder(TPanel AObj, TTabOrder AValue);

BOOL
Panel_GetTabStop(TPanel AObj);

void
Panel_SetTabStop(TPanel AObj, BOOL AValue);

BOOL
Panel_GetVisible(TPanel AObj);

void
Panel_SetVisible(TPanel AObj, BOOL AValue);

void
Panel_SetOnAlignPosition(TPanel AObj, TAlignPositionEvent AEventData);

void
Panel_SetOnClick(TPanel AObj, TNotifyEvent AEventData);

void
Panel_SetOnContextPopup(TPanel AObj, TContextPopupEvent AEventData);

void
Panel_SetOnDockDrop(TPanel AObj, TDockDropEvent AEventData);

void
Panel_SetOnDblClick(TPanel AObj, TNotifyEvent AEventData);

void
Panel_SetOnDragDrop(TPanel AObj, TDragDropEvent AEventData);

void
Panel_SetOnDragOver(TPanel AObj, TDragOverEvent AEventData);

void
Panel_SetOnEndDock(TPanel AObj, TEndDragEvent AEventData);

void
Panel_SetOnEndDrag(TPanel AObj, TEndDragEvent AEventData);

void
Panel_SetOnEnter(TPanel AObj, TNotifyEvent AEventData);

void
Panel_SetOnExit(TPanel AObj, TNotifyEvent AEventData);

void
Panel_SetOnGetSiteInfo(TPanel AObj, TGetSiteInfoEvent AEventData);

void
Panel_SetOnMouseDown(TPanel AObj, TMouseEvent AEventData);

void
Panel_SetOnMouseEnter(TPanel AObj, TNotifyEvent AEventData);

void
Panel_SetOnMouseLeave(TPanel AObj, TNotifyEvent AEventData);

void
Panel_SetOnMouseMove(TPanel AObj, TMouseMoveEvent AEventData);

void
Panel_SetOnMouseUp(TPanel AObj, TMouseEvent AEventData);

void
Panel_SetOnResize(TPanel AObj, TNotifyEvent AEventData);

void
Panel_SetOnStartDock(TPanel AObj, TStartDockEvent AEventData);

void
Panel_SetOnUnDock(TPanel AObj, TUnDockEvent AEventData);

int32_t
Panel_GetDockClientCount(TPanel AObj);

BOOL
Panel_GetMouseInClient(TPanel AObj);

int32_t
Panel_GetVisibleDockClientCount(TPanel AObj);

TBrush
Panel_GetBrush(TPanel AObj);

int32_t
Panel_GetControlCount(TPanel AObj);

HWND
Panel_GetHandle(TPanel AObj);

HWND
Panel_GetParentWindow(TPanel AObj);

void
Panel_SetParentWindow(TPanel AObj, HWND AValue);

BOOL
Panel_GetShowing(TPanel AObj);

TAction
Panel_GetAction(TPanel AObj);

void
Panel_SetAction(TPanel AObj, TAction AValue);

TRect
Panel_GetBoundsRect(TPanel AObj);

void
Panel_SetBoundsRect(TPanel AObj, TRect AValue);

int32_t
Panel_GetClientHeight(TPanel AObj);

void
Panel_SetClientHeight(TPanel AObj, int32_t AValue);

TPoint
Panel_GetClientOrigin(TPanel AObj);

TRect
Panel_GetClientRect(TPanel AObj);

int32_t
Panel_GetClientWidth(TPanel AObj);

void
Panel_SetClientWidth(TPanel AObj, int32_t AValue);

TControlState
Panel_GetControlState(TPanel AObj);

void
Panel_SetControlState(TPanel AObj, TControlState AValue);

TControlStyle
Panel_GetControlStyle(TPanel AObj);

void
Panel_SetControlStyle(TPanel AObj, TControlStyle AValue);

BOOL
Panel_GetFloating(TPanel AObj);

TWinControl
Panel_GetParent(TPanel AObj);

void
Panel_SetParent(TPanel AObj, TWinControl AValue);

int32_t
Panel_GetLeft(TPanel AObj);

void
Panel_SetLeft(TPanel AObj, int32_t AValue);

int32_t
Panel_GetTop(TPanel AObj);

void
Panel_SetTop(TPanel AObj, int32_t AValue);

int32_t
Panel_GetWidth(TPanel AObj);

void
Panel_SetWidth(TPanel AObj, int32_t AValue);

int32_t
Panel_GetHeight(TPanel AObj);

void
Panel_SetHeight(TPanel AObj, int32_t AValue);

TCursor
Panel_GetCursor(TPanel AObj);

void
Panel_SetCursor(TPanel AObj, TCursor AValue);

char*
Panel_GetHint(TPanel AObj);

void
Panel_SetHint(TPanel AObj, CChar char* AValue);

int32_t
Panel_GetComponentCount(TPanel AObj);

int32_t
Panel_GetComponentIndex(TPanel AObj);

void
Panel_SetComponentIndex(TPanel AObj, int32_t AValue);

TComponent
Panel_GetOwner(TPanel AObj);

char*
Panel_GetName(TPanel AObj);

void
Panel_SetName(TPanel AObj, CChar char* AValue);

intptr_t
Panel_GetTag(TPanel AObj);

void
Panel_SetTag(TPanel AObj, intptr_t AValue);

TAnchorSide
Panel_GetAnchorSideLeft(TPanel AObj);

void
Panel_SetAnchorSideLeft(TPanel AObj, TAnchorSide AValue);

TAnchorSide
Panel_GetAnchorSideTop(TPanel AObj);

void
Panel_SetAnchorSideTop(TPanel AObj, TAnchorSide AValue);

TAnchorSide
Panel_GetAnchorSideRight(TPanel AObj);

void
Panel_SetAnchorSideRight(TPanel AObj, TAnchorSide AValue);

TAnchorSide
Panel_GetAnchorSideBottom(TPanel AObj);

void
Panel_SetAnchorSideBottom(TPanel AObj, TAnchorSide AValue);

TControlChildSizing
Panel_GetChildSizing(TPanel AObj);

void
Panel_SetChildSizing(TPanel AObj, TControlChildSizing AValue);

TControlBorderSpacing
Panel_GetBorderSpacing(TPanel AObj);

void
Panel_SetBorderSpacing(TPanel AObj, TControlBorderSpacing AValue);

TControl
Panel_GetDockClients(TPanel AObj, int32_t Index);

TControl
Panel_GetControls(TPanel AObj, int32_t Index);

TComponent
Panel_GetComponents(TPanel AObj, int32_t AIndex);

TAnchorSide
Panel_GetAnchorSide(TPanel AObj, TAnchorKind AKind);

TClass
Panel_StaticClassType();

// -------------------TImage-------------------

TImage
Image_Create(TComponent AOwner);

void
Image_Free(TImage AObj);

void
Image_BringToFront(TImage AObj);

TPoint
Image_ClientToScreen(TImage AObj, TPoint Point);

TPoint
Image_ClientToParent(TImage AObj, TPoint Point, TWinControl AParent);

BOOL
Image_Dragging(TImage AObj);

BOOL
Image_HasParent(TImage AObj);

void
Image_Hide(TImage AObj);

void
Image_Invalidate(TImage AObj);

intptr_t
Image_Perform(TImage AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
Image_Refresh(TImage AObj);

void
Image_Repaint(TImage AObj);

TPoint
Image_ScreenToClient(TImage AObj, TPoint Point);

TPoint
Image_ParentToClient(TImage AObj, TPoint Point, TWinControl AParent);

void
Image_SendToBack(TImage AObj);

void
Image_SetBounds(TImage AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
Image_Show(TImage AObj);

void
Image_Update(TImage AObj);

int32_t
Image_GetTextBuf(TImage AObj, CChar char* Buffer, int32_t BufSize);

int32_t
Image_GetTextLen(TImage AObj);

void
Image_SetTextBuf(TImage AObj, CChar char* Buffer);

TComponent
Image_FindComponent(TImage AObj, CChar char* AName);

char*
Image_GetNamePath(TImage AObj);

void
Image_Assign(TImage AObj, TObject Source);

TClass
Image_ClassType(TImage AObj);

char*
Image_ClassName(TImage AObj);

int32_t
Image_InstanceSize(TImage AObj);

BOOL
Image_InheritsFrom(TImage AObj, TClass AClass);

BOOL
Image_Equals(TImage AObj, TObject Obj);

int32_t
Image_GetHashCode(TImage AObj);

char*
Image_ToString(TImage AObj);

void
Image_AnchorToNeighbour(TImage AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Image_AnchorParallel(TImage AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Image_AnchorHorizontalCenterTo(TImage AObj, TControl ASibling);

void
Image_AnchorVerticalCenterTo(TImage AObj, TControl ASibling);

void
Image_AnchorSame(TImage AObj, TAnchorKind ASide, TControl ASibling);

void
Image_AnchorAsAlign(TImage AObj, TAlign ATheAlign, int32_t ASpace);

void
Image_AnchorClient(TImage AObj, int32_t ASpace);

int32_t
Image_ScaleDesignToForm(TImage AObj, int32_t ASize);

int32_t
Image_ScaleFormToDesign(TImage AObj, int32_t ASize);

int32_t
Image_Scale96ToForm(TImage AObj, int32_t ASize);

int32_t
Image_ScaleFormTo96(TImage AObj, int32_t ASize);

int32_t
Image_Scale96ToFont(TImage AObj, int32_t ASize);

int32_t
Image_ScaleFontTo96(TImage AObj, int32_t ASize);

int32_t
Image_ScaleScreenToFont(TImage AObj, int32_t ASize);

int32_t
Image_ScaleFontToScreen(TImage AObj, int32_t ASize);

int32_t
Image_Scale96ToScreen(TImage AObj, int32_t ASize);

int32_t
Image_ScaleScreenTo96(TImage AObj, int32_t ASize);

void
Image_AutoAdjustLayout(TImage AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
Image_FixDesignFontsPPI(TImage AObj, int32_t ADesignTimePPI);

void
Image_ScaleFontsPPI(TImage AObj, int32_t AToPPI, double AProportion);

TAntialiasingMode
Image_GetAntialiasingMode(TImage AObj);

void
Image_SetAntialiasingMode(TImage AObj, TAntialiasingMode AValue);

BOOL
Image_GetKeepOriginXWhenClipped(TImage AObj);

void
Image_SetKeepOriginXWhenClipped(TImage AObj, BOOL AValue);

BOOL
Image_GetKeepOriginYWhenClipped(TImage AObj);

void
Image_SetKeepOriginYWhenClipped(TImage AObj, BOOL AValue);

BOOL
Image_GetStretchInEnabled(TImage AObj);

void
Image_SetStretchInEnabled(TImage AObj, BOOL AValue);

BOOL
Image_GetStretchOutEnabled(TImage AObj);

void
Image_SetStretchOutEnabled(TImage AObj, BOOL AValue);

TCanvas
Image_GetCanvas(TImage AObj);

TAlign
Image_GetAlign(TImage AObj);

void
Image_SetAlign(TImage AObj, TAlign AValue);

TAnchors
Image_GetAnchors(TImage AObj);

void
Image_SetAnchors(TImage AObj, TAnchors AValue);

BOOL
Image_GetAutoSize(TImage AObj);

void
Image_SetAutoSize(TImage AObj, BOOL AValue);

BOOL
Image_GetCenter(TImage AObj);

void
Image_SetCenter(TImage AObj, BOOL AValue);

TSizeConstraints
Image_GetConstraints(TImage AObj);

void
Image_SetConstraints(TImage AObj, TSizeConstraints AValue);

TCursor
Image_GetDragCursor(TImage AObj);

void
Image_SetDragCursor(TImage AObj, TCursor AValue);

TDragMode
Image_GetDragMode(TImage AObj);

void
Image_SetDragMode(TImage AObj, TDragMode AValue);

BOOL
Image_GetEnabled(TImage AObj);

void
Image_SetEnabled(TImage AObj, BOOL AValue);

BOOL
Image_GetParentShowHint(TImage AObj);

void
Image_SetParentShowHint(TImage AObj, BOOL AValue);

TPicture
Image_GetPicture(TImage AObj);

void
Image_SetPicture(TImage AObj, TPicture AValue);

TPopupMenu
Image_GetPopupMenu(TImage AObj);

void
Image_SetPopupMenu(TImage AObj, TPopupMenu AValue);

BOOL
Image_GetProportional(TImage AObj);

void
Image_SetProportional(TImage AObj, BOOL AValue);

BOOL
Image_GetShowHint(TImage AObj);

void
Image_SetShowHint(TImage AObj, BOOL AValue);

BOOL
Image_GetStretch(TImage AObj);

void
Image_SetStretch(TImage AObj, BOOL AValue);

BOOL
Image_GetTransparent(TImage AObj);

void
Image_SetTransparent(TImage AObj, BOOL AValue);

BOOL
Image_GetVisible(TImage AObj);

void
Image_SetVisible(TImage AObj, BOOL AValue);

void
Image_SetOnClick(TImage AObj, TNotifyEvent AEventData);

void
Image_SetOnDblClick(TImage AObj, TNotifyEvent AEventData);

void
Image_SetOnDragDrop(TImage AObj, TDragDropEvent AEventData);

void
Image_SetOnDragOver(TImage AObj, TDragOverEvent AEventData);

void
Image_SetOnEndDrag(TImage AObj, TEndDragEvent AEventData);

void
Image_SetOnMouseDown(TImage AObj, TMouseEvent AEventData);

void
Image_SetOnMouseEnter(TImage AObj, TNotifyEvent AEventData);

void
Image_SetOnMouseLeave(TImage AObj, TNotifyEvent AEventData);

void
Image_SetOnMouseMove(TImage AObj, TMouseMoveEvent AEventData);

void
Image_SetOnMouseUp(TImage AObj, TMouseEvent AEventData);

TAction
Image_GetAction(TImage AObj);

void
Image_SetAction(TImage AObj, TAction AValue);

TBiDiMode
Image_GetBiDiMode(TImage AObj);

void
Image_SetBiDiMode(TImage AObj, TBiDiMode AValue);

TRect
Image_GetBoundsRect(TImage AObj);

void
Image_SetBoundsRect(TImage AObj, TRect AValue);

int32_t
Image_GetClientHeight(TImage AObj);

void
Image_SetClientHeight(TImage AObj, int32_t AValue);

TPoint
Image_GetClientOrigin(TImage AObj);

TRect
Image_GetClientRect(TImage AObj);

int32_t
Image_GetClientWidth(TImage AObj);

void
Image_SetClientWidth(TImage AObj, int32_t AValue);

TControlState
Image_GetControlState(TImage AObj);

void
Image_SetControlState(TImage AObj, TControlState AValue);

TControlStyle
Image_GetControlStyle(TImage AObj);

void
Image_SetControlStyle(TImage AObj, TControlStyle AValue);

BOOL
Image_GetFloating(TImage AObj);

TWinControl
Image_GetParent(TImage AObj);

void
Image_SetParent(TImage AObj, TWinControl AValue);

int32_t
Image_GetLeft(TImage AObj);

void
Image_SetLeft(TImage AObj, int32_t AValue);

int32_t
Image_GetTop(TImage AObj);

void
Image_SetTop(TImage AObj, int32_t AValue);

int32_t
Image_GetWidth(TImage AObj);

void
Image_SetWidth(TImage AObj, int32_t AValue);

int32_t
Image_GetHeight(TImage AObj);

void
Image_SetHeight(TImage AObj, int32_t AValue);

TCursor
Image_GetCursor(TImage AObj);

void
Image_SetCursor(TImage AObj, TCursor AValue);

char*
Image_GetHint(TImage AObj);

void
Image_SetHint(TImage AObj, CChar char* AValue);

int32_t
Image_GetComponentCount(TImage AObj);

int32_t
Image_GetComponentIndex(TImage AObj);

void
Image_SetComponentIndex(TImage AObj, int32_t AValue);

TComponent
Image_GetOwner(TImage AObj);

char*
Image_GetName(TImage AObj);

void
Image_SetName(TImage AObj, CChar char* AValue);

intptr_t
Image_GetTag(TImage AObj);

void
Image_SetTag(TImage AObj, intptr_t AValue);

TAnchorSide
Image_GetAnchorSideLeft(TImage AObj);

void
Image_SetAnchorSideLeft(TImage AObj, TAnchorSide AValue);

TAnchorSide
Image_GetAnchorSideTop(TImage AObj);

void
Image_SetAnchorSideTop(TImage AObj, TAnchorSide AValue);

TAnchorSide
Image_GetAnchorSideRight(TImage AObj);

void
Image_SetAnchorSideRight(TImage AObj, TAnchorSide AValue);

TAnchorSide
Image_GetAnchorSideBottom(TImage AObj);

void
Image_SetAnchorSideBottom(TImage AObj, TAnchorSide AValue);

TControlBorderSpacing
Image_GetBorderSpacing(TImage AObj);

void
Image_SetBorderSpacing(TImage AObj, TControlBorderSpacing AValue);

TComponent
Image_GetComponents(TImage AObj, int32_t AIndex);

TAnchorSide
Image_GetAnchorSide(TImage AObj, TAnchorKind AKind);

TClass
Image_StaticClassType();

// -------------------TLinkLabel-------------------

TLinkLabel
LinkLabel_Create(TComponent AOwner);

void
LinkLabel_Free(TLinkLabel AObj);

void
LinkLabel_Invalidate(TLinkLabel AObj);

void
LinkLabel_Repaint(TLinkLabel AObj);

void
LinkLabel_SetBounds(TLinkLabel AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
LinkLabel_Update(TLinkLabel AObj);

void
LinkLabel_BringToFront(TLinkLabel AObj);

TPoint
LinkLabel_ClientToScreen(TLinkLabel AObj, TPoint Point);

TPoint
LinkLabel_ClientToParent(TLinkLabel AObj, TPoint Point, TWinControl AParent);

BOOL
LinkLabel_Dragging(TLinkLabel AObj);

BOOL
LinkLabel_HasParent(TLinkLabel AObj);

void
LinkLabel_Hide(TLinkLabel AObj);

intptr_t
LinkLabel_Perform(TLinkLabel AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
LinkLabel_Refresh(TLinkLabel AObj);

TPoint
LinkLabel_ScreenToClient(TLinkLabel AObj, TPoint Point);

TPoint
LinkLabel_ParentToClient(TLinkLabel AObj, TPoint Point, TWinControl AParent);

void
LinkLabel_SendToBack(TLinkLabel AObj);

void
LinkLabel_Show(TLinkLabel AObj);

int32_t
LinkLabel_GetTextBuf(TLinkLabel AObj, CChar char* Buffer, int32_t BufSize);

int32_t
LinkLabel_GetTextLen(TLinkLabel AObj);

void
LinkLabel_SetTextBuf(TLinkLabel AObj, CChar char* Buffer);

TComponent
LinkLabel_FindComponent(TLinkLabel AObj, CChar char* AName);

char*
LinkLabel_GetNamePath(TLinkLabel AObj);

void
LinkLabel_Assign(TLinkLabel AObj, TObject Source);

TClass
LinkLabel_ClassType(TLinkLabel AObj);

char*
LinkLabel_ClassName(TLinkLabel AObj);

int32_t
LinkLabel_InstanceSize(TLinkLabel AObj);

BOOL
LinkLabel_InheritsFrom(TLinkLabel AObj, TClass AClass);

BOOL
LinkLabel_Equals(TLinkLabel AObj, TObject Obj);

int32_t
LinkLabel_GetHashCode(TLinkLabel AObj);

char*
LinkLabel_ToString(TLinkLabel AObj);

void
LinkLabel_AnchorToNeighbour(TLinkLabel AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
LinkLabel_AnchorParallel(TLinkLabel AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
LinkLabel_AnchorHorizontalCenterTo(TLinkLabel AObj, TControl ASibling);

void
LinkLabel_AnchorVerticalCenterTo(TLinkLabel AObj, TControl ASibling);

void
LinkLabel_AnchorSame(TLinkLabel AObj, TAnchorKind ASide, TControl ASibling);

void
LinkLabel_AnchorAsAlign(TLinkLabel AObj, TAlign ATheAlign, int32_t ASpace);

void
LinkLabel_AnchorClient(TLinkLabel AObj, int32_t ASpace);

int32_t
LinkLabel_ScaleDesignToForm(TLinkLabel AObj, int32_t ASize);

int32_t
LinkLabel_ScaleFormToDesign(TLinkLabel AObj, int32_t ASize);

int32_t
LinkLabel_Scale96ToForm(TLinkLabel AObj, int32_t ASize);

int32_t
LinkLabel_ScaleFormTo96(TLinkLabel AObj, int32_t ASize);

int32_t
LinkLabel_Scale96ToFont(TLinkLabel AObj, int32_t ASize);

int32_t
LinkLabel_ScaleFontTo96(TLinkLabel AObj, int32_t ASize);

int32_t
LinkLabel_ScaleScreenToFont(TLinkLabel AObj, int32_t ASize);

int32_t
LinkLabel_ScaleFontToScreen(TLinkLabel AObj, int32_t ASize);

int32_t
LinkLabel_Scale96ToScreen(TLinkLabel AObj, int32_t ASize);

int32_t
LinkLabel_ScaleScreenTo96(TLinkLabel AObj, int32_t ASize);

void
LinkLabel_AutoAdjustLayout(TLinkLabel AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
LinkLabel_FixDesignFontsPPI(TLinkLabel AObj, int32_t ADesignTimePPI);

void
LinkLabel_ScaleFontsPPI(TLinkLabel AObj, int32_t AToPPI, double AProportion);

TAlign
LinkLabel_GetAlign(TLinkLabel AObj);

void
LinkLabel_SetAlign(TLinkLabel AObj, TAlign AValue);

TAlignment
LinkLabel_GetAlignment(TLinkLabel AObj);

void
LinkLabel_SetAlignment(TLinkLabel AObj, TAlignment AValue);

TAnchors
LinkLabel_GetAnchors(TLinkLabel AObj);

void
LinkLabel_SetAnchors(TLinkLabel AObj, TAnchors AValue);

BOOL
LinkLabel_GetAutoSize(TLinkLabel AObj);

void
LinkLabel_SetAutoSize(TLinkLabel AObj, BOOL AValue);

char*
LinkLabel_GetCaption(TLinkLabel AObj);

void
LinkLabel_SetCaption(TLinkLabel AObj, CChar char* AValue);

TColor
LinkLabel_GetColor(TLinkLabel AObj);

void
LinkLabel_SetColor(TLinkLabel AObj, TColor AValue);

TSizeConstraints
LinkLabel_GetConstraints(TLinkLabel AObj);

void
LinkLabel_SetConstraints(TLinkLabel AObj, TSizeConstraints AValue);

TCursor
LinkLabel_GetDragCursor(TLinkLabel AObj);

void
LinkLabel_SetDragCursor(TLinkLabel AObj, TCursor AValue);

TDragKind
LinkLabel_GetDragKind(TLinkLabel AObj);

void
LinkLabel_SetDragKind(TLinkLabel AObj, TDragKind AValue);

TDragMode
LinkLabel_GetDragMode(TLinkLabel AObj);

void
LinkLabel_SetDragMode(TLinkLabel AObj, TDragMode AValue);

BOOL
LinkLabel_GetEnabled(TLinkLabel AObj);

void
LinkLabel_SetEnabled(TLinkLabel AObj, BOOL AValue);

TFont
LinkLabel_GetFont(TLinkLabel AObj);

void
LinkLabel_SetFont(TLinkLabel AObj, TFont AValue);

BOOL
LinkLabel_GetParentColor(TLinkLabel AObj);

void
LinkLabel_SetParentColor(TLinkLabel AObj, BOOL AValue);

BOOL
LinkLabel_GetParentFont(TLinkLabel AObj);

void
LinkLabel_SetParentFont(TLinkLabel AObj, BOOL AValue);

BOOL
LinkLabel_GetParentShowHint(TLinkLabel AObj);

void
LinkLabel_SetParentShowHint(TLinkLabel AObj, BOOL AValue);

TPopupMenu
LinkLabel_GetPopupMenu(TLinkLabel AObj);

void
LinkLabel_SetPopupMenu(TLinkLabel AObj, TPopupMenu AValue);

BOOL
LinkLabel_GetShowHint(TLinkLabel AObj);

void
LinkLabel_SetShowHint(TLinkLabel AObj, BOOL AValue);

BOOL
LinkLabel_GetVisible(TLinkLabel AObj);

void
LinkLabel_SetVisible(TLinkLabel AObj, BOOL AValue);

void
LinkLabel_SetOnClick(TLinkLabel AObj, TNotifyEvent AEventData);

void
LinkLabel_SetOnContextPopup(TLinkLabel AObj, TContextPopupEvent AEventData);

void
LinkLabel_SetOnDblClick(TLinkLabel AObj, TNotifyEvent AEventData);

void
LinkLabel_SetOnDragDrop(TLinkLabel AObj, TDragDropEvent AEventData);

void
LinkLabel_SetOnDragOver(TLinkLabel AObj, TDragOverEvent AEventData);

void
LinkLabel_SetOnEndDrag(TLinkLabel AObj, TEndDragEvent AEventData);

void
LinkLabel_SetOnMouseDown(TLinkLabel AObj, TMouseEvent AEventData);

void
LinkLabel_SetOnMouseEnter(TLinkLabel AObj, TNotifyEvent AEventData);

void
LinkLabel_SetOnMouseLeave(TLinkLabel AObj, TNotifyEvent AEventData);

void
LinkLabel_SetOnMouseMove(TLinkLabel AObj, TMouseMoveEvent AEventData);

void
LinkLabel_SetOnMouseUp(TLinkLabel AObj, TMouseEvent AEventData);

void
LinkLabel_SetOnLinkClick(TLinkLabel AObj, TSysLinkEvent AEventData);

BOOL
LinkLabel_GetMouseInClient(TLinkLabel AObj);

TAction
LinkLabel_GetAction(TLinkLabel AObj);

void
LinkLabel_SetAction(TLinkLabel AObj, TAction AValue);

TBiDiMode
LinkLabel_GetBiDiMode(TLinkLabel AObj);

void
LinkLabel_SetBiDiMode(TLinkLabel AObj, TBiDiMode AValue);

TRect
LinkLabel_GetBoundsRect(TLinkLabel AObj);

void
LinkLabel_SetBoundsRect(TLinkLabel AObj, TRect AValue);

int32_t
LinkLabel_GetClientHeight(TLinkLabel AObj);

void
LinkLabel_SetClientHeight(TLinkLabel AObj, int32_t AValue);

TPoint
LinkLabel_GetClientOrigin(TLinkLabel AObj);

TRect
LinkLabel_GetClientRect(TLinkLabel AObj);

int32_t
LinkLabel_GetClientWidth(TLinkLabel AObj);

void
LinkLabel_SetClientWidth(TLinkLabel AObj, int32_t AValue);

TControlState
LinkLabel_GetControlState(TLinkLabel AObj);

void
LinkLabel_SetControlState(TLinkLabel AObj, TControlState AValue);

TControlStyle
LinkLabel_GetControlStyle(TLinkLabel AObj);

void
LinkLabel_SetControlStyle(TLinkLabel AObj, TControlStyle AValue);

BOOL
LinkLabel_GetFloating(TLinkLabel AObj);

TWinControl
LinkLabel_GetParent(TLinkLabel AObj);

void
LinkLabel_SetParent(TLinkLabel AObj, TWinControl AValue);

int32_t
LinkLabel_GetLeft(TLinkLabel AObj);

void
LinkLabel_SetLeft(TLinkLabel AObj, int32_t AValue);

int32_t
LinkLabel_GetTop(TLinkLabel AObj);

void
LinkLabel_SetTop(TLinkLabel AObj, int32_t AValue);

int32_t
LinkLabel_GetWidth(TLinkLabel AObj);

void
LinkLabel_SetWidth(TLinkLabel AObj, int32_t AValue);

int32_t
LinkLabel_GetHeight(TLinkLabel AObj);

void
LinkLabel_SetHeight(TLinkLabel AObj, int32_t AValue);

char*
LinkLabel_GetHint(TLinkLabel AObj);

void
LinkLabel_SetHint(TLinkLabel AObj, CChar char* AValue);

int32_t
LinkLabel_GetComponentCount(TLinkLabel AObj);

int32_t
LinkLabel_GetComponentIndex(TLinkLabel AObj);

void
LinkLabel_SetComponentIndex(TLinkLabel AObj, int32_t AValue);

TComponent
LinkLabel_GetOwner(TLinkLabel AObj);

char*
LinkLabel_GetName(TLinkLabel AObj);

void
LinkLabel_SetName(TLinkLabel AObj, CChar char* AValue);

intptr_t
LinkLabel_GetTag(TLinkLabel AObj);

void
LinkLabel_SetTag(TLinkLabel AObj, intptr_t AValue);

TAnchorSide
LinkLabel_GetAnchorSideLeft(TLinkLabel AObj);

void
LinkLabel_SetAnchorSideLeft(TLinkLabel AObj, TAnchorSide AValue);

TAnchorSide
LinkLabel_GetAnchorSideTop(TLinkLabel AObj);

void
LinkLabel_SetAnchorSideTop(TLinkLabel AObj, TAnchorSide AValue);

TAnchorSide
LinkLabel_GetAnchorSideRight(TLinkLabel AObj);

void
LinkLabel_SetAnchorSideRight(TLinkLabel AObj, TAnchorSide AValue);

TAnchorSide
LinkLabel_GetAnchorSideBottom(TLinkLabel AObj);

void
LinkLabel_SetAnchorSideBottom(TLinkLabel AObj, TAnchorSide AValue);

TControlBorderSpacing
LinkLabel_GetBorderSpacing(TLinkLabel AObj);

void
LinkLabel_SetBorderSpacing(TLinkLabel AObj, TControlBorderSpacing AValue);

TComponent
LinkLabel_GetComponents(TLinkLabel AObj, int32_t AIndex);

TAnchorSide
LinkLabel_GetAnchorSide(TLinkLabel AObj, TAnchorKind AKind);

TClass
LinkLabel_StaticClassType();

// -------------------TSpeedButton-------------------

TSpeedButton
SpeedButton_Create(TComponent AOwner);

void
SpeedButton_Free(TSpeedButton AObj);

void
SpeedButton_Click(TSpeedButton AObj);

void
SpeedButton_BringToFront(TSpeedButton AObj);

TPoint
SpeedButton_ClientToScreen(TSpeedButton AObj, TPoint Point);

TPoint
SpeedButton_ClientToParent(TSpeedButton AObj, TPoint Point, TWinControl AParent);

BOOL
SpeedButton_Dragging(TSpeedButton AObj);

BOOL
SpeedButton_HasParent(TSpeedButton AObj);

void
SpeedButton_Hide(TSpeedButton AObj);

void
SpeedButton_Invalidate(TSpeedButton AObj);

intptr_t
SpeedButton_Perform(TSpeedButton AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
SpeedButton_Refresh(TSpeedButton AObj);

void
SpeedButton_Repaint(TSpeedButton AObj);

TPoint
SpeedButton_ScreenToClient(TSpeedButton AObj, TPoint Point);

TPoint
SpeedButton_ParentToClient(TSpeedButton AObj, TPoint Point, TWinControl AParent);

void
SpeedButton_SendToBack(TSpeedButton AObj);

void
SpeedButton_SetBounds(TSpeedButton AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
SpeedButton_Show(TSpeedButton AObj);

void
SpeedButton_Update(TSpeedButton AObj);

int32_t
SpeedButton_GetTextBuf(TSpeedButton AObj, CChar char* Buffer, int32_t BufSize);

int32_t
SpeedButton_GetTextLen(TSpeedButton AObj);

void
SpeedButton_SetTextBuf(TSpeedButton AObj, CChar char* Buffer);

TComponent
SpeedButton_FindComponent(TSpeedButton AObj, CChar char* AName);

char*
SpeedButton_GetNamePath(TSpeedButton AObj);

void
SpeedButton_Assign(TSpeedButton AObj, TObject Source);

TClass
SpeedButton_ClassType(TSpeedButton AObj);

char*
SpeedButton_ClassName(TSpeedButton AObj);

int32_t
SpeedButton_InstanceSize(TSpeedButton AObj);

BOOL
SpeedButton_InheritsFrom(TSpeedButton AObj, TClass AClass);

BOOL
SpeedButton_Equals(TSpeedButton AObj, TObject Obj);

int32_t
SpeedButton_GetHashCode(TSpeedButton AObj);

char*
SpeedButton_ToString(TSpeedButton AObj);

void
SpeedButton_AnchorToNeighbour(TSpeedButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
SpeedButton_AnchorParallel(TSpeedButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
SpeedButton_AnchorHorizontalCenterTo(TSpeedButton AObj, TControl ASibling);

void
SpeedButton_AnchorVerticalCenterTo(TSpeedButton AObj, TControl ASibling);

void
SpeedButton_AnchorSame(TSpeedButton AObj, TAnchorKind ASide, TControl ASibling);

void
SpeedButton_AnchorAsAlign(TSpeedButton AObj, TAlign ATheAlign, int32_t ASpace);

void
SpeedButton_AnchorClient(TSpeedButton AObj, int32_t ASpace);

int32_t
SpeedButton_ScaleDesignToForm(TSpeedButton AObj, int32_t ASize);

int32_t
SpeedButton_ScaleFormToDesign(TSpeedButton AObj, int32_t ASize);

int32_t
SpeedButton_Scale96ToForm(TSpeedButton AObj, int32_t ASize);

int32_t
SpeedButton_ScaleFormTo96(TSpeedButton AObj, int32_t ASize);

int32_t
SpeedButton_Scale96ToFont(TSpeedButton AObj, int32_t ASize);

int32_t
SpeedButton_ScaleFontTo96(TSpeedButton AObj, int32_t ASize);

int32_t
SpeedButton_ScaleScreenToFont(TSpeedButton AObj, int32_t ASize);

int32_t
SpeedButton_ScaleFontToScreen(TSpeedButton AObj, int32_t ASize);

int32_t
SpeedButton_Scale96ToScreen(TSpeedButton AObj, int32_t ASize);

int32_t
SpeedButton_ScaleScreenTo96(TSpeedButton AObj, int32_t ASize);

void
SpeedButton_AutoAdjustLayout(TSpeedButton AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
SpeedButton_FixDesignFontsPPI(TSpeedButton AObj, int32_t ADesignTimePPI);

void
SpeedButton_ScaleFontsPPI(TSpeedButton AObj, int32_t AToPPI, double AProportion);

int32_t
SpeedButton_GetImageIndex(TSpeedButton AObj);

void
SpeedButton_SetImageIndex(TSpeedButton AObj, int32_t AValue);

TImageList
SpeedButton_GetImages(TSpeedButton AObj);

void
SpeedButton_SetImages(TSpeedButton AObj, TImageList AValue);

int32_t
SpeedButton_GetImageWidth(TSpeedButton AObj);

void
SpeedButton_SetImageWidth(TSpeedButton AObj, int32_t AValue);

BOOL
SpeedButton_GetShowCaption(TSpeedButton AObj);

void
SpeedButton_SetShowCaption(TSpeedButton AObj, BOOL AValue);

TAction
SpeedButton_GetAction(TSpeedButton AObj);

void
SpeedButton_SetAction(TSpeedButton AObj, TAction AValue);

TAlign
SpeedButton_GetAlign(TSpeedButton AObj);

void
SpeedButton_SetAlign(TSpeedButton AObj, TAlign AValue);

BOOL
SpeedButton_GetAllowAllUp(TSpeedButton AObj);

void
SpeedButton_SetAllowAllUp(TSpeedButton AObj, BOOL AValue);

TAnchors
SpeedButton_GetAnchors(TSpeedButton AObj);

void
SpeedButton_SetAnchors(TSpeedButton AObj, TAnchors AValue);

TBiDiMode
SpeedButton_GetBiDiMode(TSpeedButton AObj);

void
SpeedButton_SetBiDiMode(TSpeedButton AObj, TBiDiMode AValue);

TSizeConstraints
SpeedButton_GetConstraints(TSpeedButton AObj);

void
SpeedButton_SetConstraints(TSpeedButton AObj, TSizeConstraints AValue);

int32_t
SpeedButton_GetGroupIndex(TSpeedButton AObj);

void
SpeedButton_SetGroupIndex(TSpeedButton AObj, int32_t AValue);

BOOL
SpeedButton_GetDown(TSpeedButton AObj);

void
SpeedButton_SetDown(TSpeedButton AObj, BOOL AValue);

char*
SpeedButton_GetCaption(TSpeedButton AObj);

void
SpeedButton_SetCaption(TSpeedButton AObj, CChar char* AValue);

BOOL
SpeedButton_GetEnabled(TSpeedButton AObj);

void
SpeedButton_SetEnabled(TSpeedButton AObj, BOOL AValue);

BOOL
SpeedButton_GetFlat(TSpeedButton AObj);

void
SpeedButton_SetFlat(TSpeedButton AObj, BOOL AValue);

TFont
SpeedButton_GetFont(TSpeedButton AObj);

void
SpeedButton_SetFont(TSpeedButton AObj, TFont AValue);

TBitmap
SpeedButton_GetGlyph(TSpeedButton AObj);

void
SpeedButton_SetGlyph(TSpeedButton AObj, TBitmap AValue);

TButtonLayout
SpeedButton_GetLayout(TSpeedButton AObj);

void
SpeedButton_SetLayout(TSpeedButton AObj, TButtonLayout AValue);

TNumGlyphs
SpeedButton_GetNumGlyphs(TSpeedButton AObj);

void
SpeedButton_SetNumGlyphs(TSpeedButton AObj, TNumGlyphs AValue);

BOOL
SpeedButton_GetParentFont(TSpeedButton AObj);

void
SpeedButton_SetParentFont(TSpeedButton AObj, BOOL AValue);

BOOL
SpeedButton_GetParentShowHint(TSpeedButton AObj);

void
SpeedButton_SetParentShowHint(TSpeedButton AObj, BOOL AValue);

TPopupMenu
SpeedButton_GetPopupMenu(TSpeedButton AObj);

void
SpeedButton_SetPopupMenu(TSpeedButton AObj, TPopupMenu AValue);

BOOL
SpeedButton_GetShowHint(TSpeedButton AObj);

void
SpeedButton_SetShowHint(TSpeedButton AObj, BOOL AValue);

int32_t
SpeedButton_GetSpacing(TSpeedButton AObj);

void
SpeedButton_SetSpacing(TSpeedButton AObj, int32_t AValue);

BOOL
SpeedButton_GetTransparent(TSpeedButton AObj);

void
SpeedButton_SetTransparent(TSpeedButton AObj, BOOL AValue);

BOOL
SpeedButton_GetVisible(TSpeedButton AObj);

void
SpeedButton_SetVisible(TSpeedButton AObj, BOOL AValue);

void
SpeedButton_SetOnClick(TSpeedButton AObj, TNotifyEvent AEventData);

void
SpeedButton_SetOnDblClick(TSpeedButton AObj, TNotifyEvent AEventData);

void
SpeedButton_SetOnMouseDown(TSpeedButton AObj, TMouseEvent AEventData);

void
SpeedButton_SetOnMouseEnter(TSpeedButton AObj, TNotifyEvent AEventData);

void
SpeedButton_SetOnMouseLeave(TSpeedButton AObj, TNotifyEvent AEventData);

void
SpeedButton_SetOnMouseMove(TSpeedButton AObj, TMouseMoveEvent AEventData);

void
SpeedButton_SetOnMouseUp(TSpeedButton AObj, TMouseEvent AEventData);

TRect
SpeedButton_GetBoundsRect(TSpeedButton AObj);

void
SpeedButton_SetBoundsRect(TSpeedButton AObj, TRect AValue);

int32_t
SpeedButton_GetClientHeight(TSpeedButton AObj);

void
SpeedButton_SetClientHeight(TSpeedButton AObj, int32_t AValue);

TPoint
SpeedButton_GetClientOrigin(TSpeedButton AObj);

TRect
SpeedButton_GetClientRect(TSpeedButton AObj);

int32_t
SpeedButton_GetClientWidth(TSpeedButton AObj);

void
SpeedButton_SetClientWidth(TSpeedButton AObj, int32_t AValue);

TControlState
SpeedButton_GetControlState(TSpeedButton AObj);

void
SpeedButton_SetControlState(TSpeedButton AObj, TControlState AValue);

TControlStyle
SpeedButton_GetControlStyle(TSpeedButton AObj);

void
SpeedButton_SetControlStyle(TSpeedButton AObj, TControlStyle AValue);

BOOL
SpeedButton_GetFloating(TSpeedButton AObj);

TWinControl
SpeedButton_GetParent(TSpeedButton AObj);

void
SpeedButton_SetParent(TSpeedButton AObj, TWinControl AValue);

int32_t
SpeedButton_GetLeft(TSpeedButton AObj);

void
SpeedButton_SetLeft(TSpeedButton AObj, int32_t AValue);

int32_t
SpeedButton_GetTop(TSpeedButton AObj);

void
SpeedButton_SetTop(TSpeedButton AObj, int32_t AValue);

int32_t
SpeedButton_GetWidth(TSpeedButton AObj);

void
SpeedButton_SetWidth(TSpeedButton AObj, int32_t AValue);

int32_t
SpeedButton_GetHeight(TSpeedButton AObj);

void
SpeedButton_SetHeight(TSpeedButton AObj, int32_t AValue);

TCursor
SpeedButton_GetCursor(TSpeedButton AObj);

void
SpeedButton_SetCursor(TSpeedButton AObj, TCursor AValue);

char*
SpeedButton_GetHint(TSpeedButton AObj);

void
SpeedButton_SetHint(TSpeedButton AObj, CChar char* AValue);

int32_t
SpeedButton_GetComponentCount(TSpeedButton AObj);

int32_t
SpeedButton_GetComponentIndex(TSpeedButton AObj);

void
SpeedButton_SetComponentIndex(TSpeedButton AObj, int32_t AValue);

TComponent
SpeedButton_GetOwner(TSpeedButton AObj);

char*
SpeedButton_GetName(TSpeedButton AObj);

void
SpeedButton_SetName(TSpeedButton AObj, CChar char* AValue);

intptr_t
SpeedButton_GetTag(TSpeedButton AObj);

void
SpeedButton_SetTag(TSpeedButton AObj, intptr_t AValue);

TAnchorSide
SpeedButton_GetAnchorSideLeft(TSpeedButton AObj);

void
SpeedButton_SetAnchorSideLeft(TSpeedButton AObj, TAnchorSide AValue);

TAnchorSide
SpeedButton_GetAnchorSideTop(TSpeedButton AObj);

void
SpeedButton_SetAnchorSideTop(TSpeedButton AObj, TAnchorSide AValue);

TAnchorSide
SpeedButton_GetAnchorSideRight(TSpeedButton AObj);

void
SpeedButton_SetAnchorSideRight(TSpeedButton AObj, TAnchorSide AValue);

TAnchorSide
SpeedButton_GetAnchorSideBottom(TSpeedButton AObj);

void
SpeedButton_SetAnchorSideBottom(TSpeedButton AObj, TAnchorSide AValue);

TControlBorderSpacing
SpeedButton_GetBorderSpacing(TSpeedButton AObj);

void
SpeedButton_SetBorderSpacing(TSpeedButton AObj, TControlBorderSpacing AValue);

TComponent
SpeedButton_GetComponents(TSpeedButton AObj, int32_t AIndex);

TAnchorSide
SpeedButton_GetAnchorSide(TSpeedButton AObj, TAnchorKind AKind);

TClass
SpeedButton_StaticClassType();

// -------------------TSplitter-------------------

TSplitter
Splitter_Create(TComponent AOwner);

void
Splitter_Free(TSplitter AObj);

void
Splitter_BringToFront(TSplitter AObj);

TPoint
Splitter_ClientToScreen(TSplitter AObj, TPoint Point);

TPoint
Splitter_ClientToParent(TSplitter AObj, TPoint Point, TWinControl AParent);

BOOL
Splitter_Dragging(TSplitter AObj);

BOOL
Splitter_HasParent(TSplitter AObj);

void
Splitter_Hide(TSplitter AObj);

void
Splitter_Invalidate(TSplitter AObj);

intptr_t
Splitter_Perform(TSplitter AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
Splitter_Refresh(TSplitter AObj);

void
Splitter_Repaint(TSplitter AObj);

TPoint
Splitter_ScreenToClient(TSplitter AObj, TPoint Point);

TPoint
Splitter_ParentToClient(TSplitter AObj, TPoint Point, TWinControl AParent);

void
Splitter_SendToBack(TSplitter AObj);

void
Splitter_SetBounds(TSplitter AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
Splitter_Show(TSplitter AObj);

void
Splitter_Update(TSplitter AObj);

int32_t
Splitter_GetTextBuf(TSplitter AObj, CChar char* Buffer, int32_t BufSize);

int32_t
Splitter_GetTextLen(TSplitter AObj);

void
Splitter_SetTextBuf(TSplitter AObj, CChar char* Buffer);

TComponent
Splitter_FindComponent(TSplitter AObj, CChar char* AName);

char*
Splitter_GetNamePath(TSplitter AObj);

void
Splitter_Assign(TSplitter AObj, TObject Source);

TClass
Splitter_ClassType(TSplitter AObj);

char*
Splitter_ClassName(TSplitter AObj);

int32_t
Splitter_InstanceSize(TSplitter AObj);

BOOL
Splitter_InheritsFrom(TSplitter AObj, TClass AClass);

BOOL
Splitter_Equals(TSplitter AObj, TObject Obj);

int32_t
Splitter_GetHashCode(TSplitter AObj);

char*
Splitter_ToString(TSplitter AObj);

void
Splitter_AnchorToNeighbour(TSplitter AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Splitter_AnchorParallel(TSplitter AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Splitter_AnchorHorizontalCenterTo(TSplitter AObj, TControl ASibling);

void
Splitter_AnchorVerticalCenterTo(TSplitter AObj, TControl ASibling);

void
Splitter_AnchorSame(TSplitter AObj, TAnchorKind ASide, TControl ASibling);

void
Splitter_AnchorAsAlign(TSplitter AObj, TAlign ATheAlign, int32_t ASpace);

void
Splitter_AnchorClient(TSplitter AObj, int32_t ASpace);

int32_t
Splitter_ScaleDesignToForm(TSplitter AObj, int32_t ASize);

int32_t
Splitter_ScaleFormToDesign(TSplitter AObj, int32_t ASize);

int32_t
Splitter_Scale96ToForm(TSplitter AObj, int32_t ASize);

int32_t
Splitter_ScaleFormTo96(TSplitter AObj, int32_t ASize);

int32_t
Splitter_Scale96ToFont(TSplitter AObj, int32_t ASize);

int32_t
Splitter_ScaleFontTo96(TSplitter AObj, int32_t ASize);

int32_t
Splitter_ScaleScreenToFont(TSplitter AObj, int32_t ASize);

int32_t
Splitter_ScaleFontToScreen(TSplitter AObj, int32_t ASize);

int32_t
Splitter_Scale96ToScreen(TSplitter AObj, int32_t ASize);

int32_t
Splitter_ScaleScreenTo96(TSplitter AObj, int32_t ASize);

void
Splitter_AutoAdjustLayout(TSplitter AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
Splitter_FixDesignFontsPPI(TSplitter AObj, int32_t ADesignTimePPI);

void
Splitter_ScaleFontsPPI(TSplitter AObj, int32_t AToPPI, double AProportion);

TAnchorKind
Splitter_GetResizeAnchor(TSplitter AObj);

void
Splitter_SetResizeAnchor(TSplitter AObj, TAnchorKind AValue);

TCanvas
Splitter_GetCanvas(TSplitter AObj);

TAlign
Splitter_GetAlign(TSplitter AObj);

void
Splitter_SetAlign(TSplitter AObj, TAlign AValue);

TColor
Splitter_GetColor(TSplitter AObj);

void
Splitter_SetColor(TSplitter AObj, TColor AValue);

TCursor
Splitter_GetCursor(TSplitter AObj);

void
Splitter_SetCursor(TSplitter AObj, TCursor AValue);

TSizeConstraints
Splitter_GetConstraints(TSplitter AObj);

void
Splitter_SetConstraints(TSplitter AObj, TSizeConstraints AValue);

int32_t
Splitter_GetMinSize(TSplitter AObj);

void
Splitter_SetMinSize(TSplitter AObj, int32_t AValue);

BOOL
Splitter_GetParentColor(TSplitter AObj);

void
Splitter_SetParentColor(TSplitter AObj, BOOL AValue);

BOOL
Splitter_GetVisible(TSplitter AObj);

void
Splitter_SetVisible(TSplitter AObj, BOOL AValue);

int32_t
Splitter_GetWidth(TSplitter AObj);

void
Splitter_SetWidth(TSplitter AObj, int32_t AValue);

void
Splitter_SetOnPaint(TSplitter AObj, TNotifyEvent AEventData);

BOOL
Splitter_GetEnabled(TSplitter AObj);

void
Splitter_SetEnabled(TSplitter AObj, BOOL AValue);

TAction
Splitter_GetAction(TSplitter AObj);

void
Splitter_SetAction(TSplitter AObj, TAction AValue);

TAnchors
Splitter_GetAnchors(TSplitter AObj);

void
Splitter_SetAnchors(TSplitter AObj, TAnchors AValue);

TBiDiMode
Splitter_GetBiDiMode(TSplitter AObj);

void
Splitter_SetBiDiMode(TSplitter AObj, TBiDiMode AValue);

TRect
Splitter_GetBoundsRect(TSplitter AObj);

void
Splitter_SetBoundsRect(TSplitter AObj, TRect AValue);

int32_t
Splitter_GetClientHeight(TSplitter AObj);

void
Splitter_SetClientHeight(TSplitter AObj, int32_t AValue);

TPoint
Splitter_GetClientOrigin(TSplitter AObj);

TRect
Splitter_GetClientRect(TSplitter AObj);

int32_t
Splitter_GetClientWidth(TSplitter AObj);

void
Splitter_SetClientWidth(TSplitter AObj, int32_t AValue);

TControlState
Splitter_GetControlState(TSplitter AObj);

void
Splitter_SetControlState(TSplitter AObj, TControlState AValue);

TControlStyle
Splitter_GetControlStyle(TSplitter AObj);

void
Splitter_SetControlStyle(TSplitter AObj, TControlStyle AValue);

BOOL
Splitter_GetFloating(TSplitter AObj);

BOOL
Splitter_GetShowHint(TSplitter AObj);

void
Splitter_SetShowHint(TSplitter AObj, BOOL AValue);

TWinControl
Splitter_GetParent(TSplitter AObj);

void
Splitter_SetParent(TSplitter AObj, TWinControl AValue);

int32_t
Splitter_GetLeft(TSplitter AObj);

void
Splitter_SetLeft(TSplitter AObj, int32_t AValue);

int32_t
Splitter_GetTop(TSplitter AObj);

void
Splitter_SetTop(TSplitter AObj, int32_t AValue);

int32_t
Splitter_GetHeight(TSplitter AObj);

void
Splitter_SetHeight(TSplitter AObj, int32_t AValue);

char*
Splitter_GetHint(TSplitter AObj);

void
Splitter_SetHint(TSplitter AObj, CChar char* AValue);

int32_t
Splitter_GetComponentCount(TSplitter AObj);

int32_t
Splitter_GetComponentIndex(TSplitter AObj);

void
Splitter_SetComponentIndex(TSplitter AObj, int32_t AValue);

TComponent
Splitter_GetOwner(TSplitter AObj);

char*
Splitter_GetName(TSplitter AObj);

void
Splitter_SetName(TSplitter AObj, CChar char* AValue);

intptr_t
Splitter_GetTag(TSplitter AObj);

void
Splitter_SetTag(TSplitter AObj, intptr_t AValue);

TAnchorSide
Splitter_GetAnchorSideLeft(TSplitter AObj);

void
Splitter_SetAnchorSideLeft(TSplitter AObj, TAnchorSide AValue);

TAnchorSide
Splitter_GetAnchorSideTop(TSplitter AObj);

void
Splitter_SetAnchorSideTop(TSplitter AObj, TAnchorSide AValue);

TAnchorSide
Splitter_GetAnchorSideRight(TSplitter AObj);

void
Splitter_SetAnchorSideRight(TSplitter AObj, TAnchorSide AValue);

TAnchorSide
Splitter_GetAnchorSideBottom(TSplitter AObj);

void
Splitter_SetAnchorSideBottom(TSplitter AObj, TAnchorSide AValue);

TControlBorderSpacing
Splitter_GetBorderSpacing(TSplitter AObj);

void
Splitter_SetBorderSpacing(TSplitter AObj, TControlBorderSpacing AValue);

TComponent
Splitter_GetComponents(TSplitter AObj, int32_t AIndex);

TAnchorSide
Splitter_GetAnchorSide(TSplitter AObj, TAnchorKind AKind);

TClass
Splitter_StaticClassType();

// -------------------TRadioGroup-------------------

TRadioGroup
RadioGroup_Create(TComponent AOwner);

void
RadioGroup_Free(TRadioGroup AObj);

void
RadioGroup_FlipChildren(TRadioGroup AObj, BOOL AllLevels);

BOOL
RadioGroup_CanFocus(TRadioGroup AObj);

BOOL
RadioGroup_ContainsControl(TRadioGroup AObj, TControl Control);

TControl
RadioGroup_ControlAtPos(TRadioGroup AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
RadioGroup_DisableAlign(TRadioGroup AObj);

void
RadioGroup_EnableAlign(TRadioGroup AObj);

TControl
RadioGroup_FindChildControl(TRadioGroup AObj, CChar char* ControlName);

BOOL
RadioGroup_Focused(TRadioGroup AObj);

BOOL
RadioGroup_HandleAllocated(TRadioGroup AObj);

void
RadioGroup_InsertControl(TRadioGroup AObj, TControl AControl);

void
RadioGroup_Invalidate(TRadioGroup AObj);

void
RadioGroup_PaintTo(TRadioGroup AObj, HDC DC, int32_t X, int32_t Y);

void
RadioGroup_RemoveControl(TRadioGroup AObj, TControl AControl);

void
RadioGroup_Realign(TRadioGroup AObj);

void
RadioGroup_Repaint(TRadioGroup AObj);

void
RadioGroup_ScaleBy(TRadioGroup AObj, int32_t M, int32_t D);

void
RadioGroup_ScrollBy(TRadioGroup AObj, int32_t DeltaX, int32_t DeltaY);

void
RadioGroup_SetBounds(TRadioGroup AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
RadioGroup_SetFocus(TRadioGroup AObj);

void
RadioGroup_Update(TRadioGroup AObj);

void
RadioGroup_BringToFront(TRadioGroup AObj);

TPoint
RadioGroup_ClientToScreen(TRadioGroup AObj, TPoint Point);

TPoint
RadioGroup_ClientToParent(TRadioGroup AObj, TPoint Point, TWinControl AParent);

BOOL
RadioGroup_Dragging(TRadioGroup AObj);

BOOL
RadioGroup_HasParent(TRadioGroup AObj);

void
RadioGroup_Hide(TRadioGroup AObj);

intptr_t
RadioGroup_Perform(TRadioGroup AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
RadioGroup_Refresh(TRadioGroup AObj);

TPoint
RadioGroup_ScreenToClient(TRadioGroup AObj, TPoint Point);

TPoint
RadioGroup_ParentToClient(TRadioGroup AObj, TPoint Point, TWinControl AParent);

void
RadioGroup_SendToBack(TRadioGroup AObj);

void
RadioGroup_Show(TRadioGroup AObj);

int32_t
RadioGroup_GetTextBuf(TRadioGroup AObj, CChar char* Buffer, int32_t BufSize);

int32_t
RadioGroup_GetTextLen(TRadioGroup AObj);

void
RadioGroup_SetTextBuf(TRadioGroup AObj, CChar char* Buffer);

TComponent
RadioGroup_FindComponent(TRadioGroup AObj, CChar char* AName);

char*
RadioGroup_GetNamePath(TRadioGroup AObj);

void
RadioGroup_Assign(TRadioGroup AObj, TObject Source);

TClass
RadioGroup_ClassType(TRadioGroup AObj);

char*
RadioGroup_ClassName(TRadioGroup AObj);

int32_t
RadioGroup_InstanceSize(TRadioGroup AObj);

BOOL
RadioGroup_InheritsFrom(TRadioGroup AObj, TClass AClass);

BOOL
RadioGroup_Equals(TRadioGroup AObj, TObject Obj);

int32_t
RadioGroup_GetHashCode(TRadioGroup AObj);

char*
RadioGroup_ToString(TRadioGroup AObj);

void
RadioGroup_AnchorToNeighbour(TRadioGroup AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
RadioGroup_AnchorParallel(TRadioGroup AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
RadioGroup_AnchorHorizontalCenterTo(TRadioGroup AObj, TControl ASibling);

void
RadioGroup_AnchorVerticalCenterTo(TRadioGroup AObj, TControl ASibling);

void
RadioGroup_AnchorSame(TRadioGroup AObj, TAnchorKind ASide, TControl ASibling);

void
RadioGroup_AnchorAsAlign(TRadioGroup AObj, TAlign ATheAlign, int32_t ASpace);

void
RadioGroup_AnchorClient(TRadioGroup AObj, int32_t ASpace);

int32_t
RadioGroup_ScaleDesignToForm(TRadioGroup AObj, int32_t ASize);

int32_t
RadioGroup_ScaleFormToDesign(TRadioGroup AObj, int32_t ASize);

int32_t
RadioGroup_Scale96ToForm(TRadioGroup AObj, int32_t ASize);

int32_t
RadioGroup_ScaleFormTo96(TRadioGroup AObj, int32_t ASize);

int32_t
RadioGroup_Scale96ToFont(TRadioGroup AObj, int32_t ASize);

int32_t
RadioGroup_ScaleFontTo96(TRadioGroup AObj, int32_t ASize);

int32_t
RadioGroup_ScaleScreenToFont(TRadioGroup AObj, int32_t ASize);

int32_t
RadioGroup_ScaleFontToScreen(TRadioGroup AObj, int32_t ASize);

int32_t
RadioGroup_Scale96ToScreen(TRadioGroup AObj, int32_t ASize);

int32_t
RadioGroup_ScaleScreenTo96(TRadioGroup AObj, int32_t ASize);

void
RadioGroup_AutoAdjustLayout(TRadioGroup AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
RadioGroup_FixDesignFontsPPI(TRadioGroup AObj, int32_t ADesignTimePPI);

void
RadioGroup_ScaleFontsPPI(TRadioGroup AObj, int32_t AToPPI, double AProportion);

void
RadioGroup_SetOnSelectionChanged(TRadioGroup AObj, TNotifyEvent AEventData);

TAlign
RadioGroup_GetAlign(TRadioGroup AObj);

void
RadioGroup_SetAlign(TRadioGroup AObj, TAlign AValue);

TAnchors
RadioGroup_GetAnchors(TRadioGroup AObj);

void
RadioGroup_SetAnchors(TRadioGroup AObj, TAnchors AValue);

TBiDiMode
RadioGroup_GetBiDiMode(TRadioGroup AObj);

void
RadioGroup_SetBiDiMode(TRadioGroup AObj, TBiDiMode AValue);

char*
RadioGroup_GetCaption(TRadioGroup AObj);

void
RadioGroup_SetCaption(TRadioGroup AObj, CChar char* AValue);

TColor
RadioGroup_GetColor(TRadioGroup AObj);

void
RadioGroup_SetColor(TRadioGroup AObj, TColor AValue);

int32_t
RadioGroup_GetColumns(TRadioGroup AObj);

void
RadioGroup_SetColumns(TRadioGroup AObj, int32_t AValue);

BOOL
RadioGroup_GetDoubleBuffered(TRadioGroup AObj);

void
RadioGroup_SetDoubleBuffered(TRadioGroup AObj, BOOL AValue);

TCursor
RadioGroup_GetDragCursor(TRadioGroup AObj);

void
RadioGroup_SetDragCursor(TRadioGroup AObj, TCursor AValue);

TDragMode
RadioGroup_GetDragMode(TRadioGroup AObj);

void
RadioGroup_SetDragMode(TRadioGroup AObj, TDragMode AValue);

BOOL
RadioGroup_GetEnabled(TRadioGroup AObj);

void
RadioGroup_SetEnabled(TRadioGroup AObj, BOOL AValue);

TFont
RadioGroup_GetFont(TRadioGroup AObj);

void
RadioGroup_SetFont(TRadioGroup AObj, TFont AValue);

int32_t
RadioGroup_GetItemIndex(TRadioGroup AObj);

void
RadioGroup_SetItemIndex(TRadioGroup AObj, int32_t AValue);

TStrings
RadioGroup_GetItems(TRadioGroup AObj);

void
RadioGroup_SetItems(TRadioGroup AObj, TStrings AValue);

TSizeConstraints
RadioGroup_GetConstraints(TRadioGroup AObj);

void
RadioGroup_SetConstraints(TRadioGroup AObj, TSizeConstraints AValue);

BOOL
RadioGroup_GetParentBackground(TRadioGroup AObj);

void
RadioGroup_SetParentBackground(TRadioGroup AObj, BOOL AValue);

BOOL
RadioGroup_GetParentColor(TRadioGroup AObj);

void
RadioGroup_SetParentColor(TRadioGroup AObj, BOOL AValue);

BOOL
RadioGroup_GetParentDoubleBuffered(TRadioGroup AObj);

void
RadioGroup_SetParentDoubleBuffered(TRadioGroup AObj, BOOL AValue);

BOOL
RadioGroup_GetParentFont(TRadioGroup AObj);

void
RadioGroup_SetParentFont(TRadioGroup AObj, BOOL AValue);

BOOL
RadioGroup_GetParentShowHint(TRadioGroup AObj);

void
RadioGroup_SetParentShowHint(TRadioGroup AObj, BOOL AValue);

TPopupMenu
RadioGroup_GetPopupMenu(TRadioGroup AObj);

void
RadioGroup_SetPopupMenu(TRadioGroup AObj, TPopupMenu AValue);

BOOL
RadioGroup_GetShowHint(TRadioGroup AObj);

void
RadioGroup_SetShowHint(TRadioGroup AObj, BOOL AValue);

TTabOrder
RadioGroup_GetTabOrder(TRadioGroup AObj);

void
RadioGroup_SetTabOrder(TRadioGroup AObj, TTabOrder AValue);

BOOL
RadioGroup_GetTabStop(TRadioGroup AObj);

void
RadioGroup_SetTabStop(TRadioGroup AObj, BOOL AValue);

BOOL
RadioGroup_GetVisible(TRadioGroup AObj);

void
RadioGroup_SetVisible(TRadioGroup AObj, BOOL AValue);

void
RadioGroup_SetOnClick(TRadioGroup AObj, TNotifyEvent AEventData);

void
RadioGroup_SetOnDragDrop(TRadioGroup AObj, TDragDropEvent AEventData);

void
RadioGroup_SetOnDragOver(TRadioGroup AObj, TDragOverEvent AEventData);

void
RadioGroup_SetOnEndDrag(TRadioGroup AObj, TEndDragEvent AEventData);

void
RadioGroup_SetOnEnter(TRadioGroup AObj, TNotifyEvent AEventData);

void
RadioGroup_SetOnExit(TRadioGroup AObj, TNotifyEvent AEventData);

int32_t
RadioGroup_GetDockClientCount(TRadioGroup AObj);

BOOL
RadioGroup_GetDockSite(TRadioGroup AObj);

void
RadioGroup_SetDockSite(TRadioGroup AObj, BOOL AValue);

BOOL
RadioGroup_GetMouseInClient(TRadioGroup AObj);

int32_t
RadioGroup_GetVisibleDockClientCount(TRadioGroup AObj);

TBrush
RadioGroup_GetBrush(TRadioGroup AObj);

int32_t
RadioGroup_GetControlCount(TRadioGroup AObj);

HWND
RadioGroup_GetHandle(TRadioGroup AObj);

HWND
RadioGroup_GetParentWindow(TRadioGroup AObj);

void
RadioGroup_SetParentWindow(TRadioGroup AObj, HWND AValue);

BOOL
RadioGroup_GetShowing(TRadioGroup AObj);

BOOL
RadioGroup_GetUseDockManager(TRadioGroup AObj);

void
RadioGroup_SetUseDockManager(TRadioGroup AObj, BOOL AValue);

TAction
RadioGroup_GetAction(TRadioGroup AObj);

void
RadioGroup_SetAction(TRadioGroup AObj, TAction AValue);

TRect
RadioGroup_GetBoundsRect(TRadioGroup AObj);

void
RadioGroup_SetBoundsRect(TRadioGroup AObj, TRect AValue);

int32_t
RadioGroup_GetClientHeight(TRadioGroup AObj);

void
RadioGroup_SetClientHeight(TRadioGroup AObj, int32_t AValue);

TPoint
RadioGroup_GetClientOrigin(TRadioGroup AObj);

TRect
RadioGroup_GetClientRect(TRadioGroup AObj);

int32_t
RadioGroup_GetClientWidth(TRadioGroup AObj);

void
RadioGroup_SetClientWidth(TRadioGroup AObj, int32_t AValue);

TControlState
RadioGroup_GetControlState(TRadioGroup AObj);

void
RadioGroup_SetControlState(TRadioGroup AObj, TControlState AValue);

TControlStyle
RadioGroup_GetControlStyle(TRadioGroup AObj);

void
RadioGroup_SetControlStyle(TRadioGroup AObj, TControlStyle AValue);

BOOL
RadioGroup_GetFloating(TRadioGroup AObj);

TWinControl
RadioGroup_GetParent(TRadioGroup AObj);

void
RadioGroup_SetParent(TRadioGroup AObj, TWinControl AValue);

int32_t
RadioGroup_GetLeft(TRadioGroup AObj);

void
RadioGroup_SetLeft(TRadioGroup AObj, int32_t AValue);

int32_t
RadioGroup_GetTop(TRadioGroup AObj);

void
RadioGroup_SetTop(TRadioGroup AObj, int32_t AValue);

int32_t
RadioGroup_GetWidth(TRadioGroup AObj);

void
RadioGroup_SetWidth(TRadioGroup AObj, int32_t AValue);

int32_t
RadioGroup_GetHeight(TRadioGroup AObj);

void
RadioGroup_SetHeight(TRadioGroup AObj, int32_t AValue);

TCursor
RadioGroup_GetCursor(TRadioGroup AObj);

void
RadioGroup_SetCursor(TRadioGroup AObj, TCursor AValue);

char*
RadioGroup_GetHint(TRadioGroup AObj);

void
RadioGroup_SetHint(TRadioGroup AObj, CChar char* AValue);

int32_t
RadioGroup_GetComponentCount(TRadioGroup AObj);

int32_t
RadioGroup_GetComponentIndex(TRadioGroup AObj);

void
RadioGroup_SetComponentIndex(TRadioGroup AObj, int32_t AValue);

TComponent
RadioGroup_GetOwner(TRadioGroup AObj);

char*
RadioGroup_GetName(TRadioGroup AObj);

void
RadioGroup_SetName(TRadioGroup AObj, CChar char* AValue);

intptr_t
RadioGroup_GetTag(TRadioGroup AObj);

void
RadioGroup_SetTag(TRadioGroup AObj, intptr_t AValue);

TAnchorSide
RadioGroup_GetAnchorSideLeft(TRadioGroup AObj);

void
RadioGroup_SetAnchorSideLeft(TRadioGroup AObj, TAnchorSide AValue);

TAnchorSide
RadioGroup_GetAnchorSideTop(TRadioGroup AObj);

void
RadioGroup_SetAnchorSideTop(TRadioGroup AObj, TAnchorSide AValue);

TAnchorSide
RadioGroup_GetAnchorSideRight(TRadioGroup AObj);

void
RadioGroup_SetAnchorSideRight(TRadioGroup AObj, TAnchorSide AValue);

TAnchorSide
RadioGroup_GetAnchorSideBottom(TRadioGroup AObj);

void
RadioGroup_SetAnchorSideBottom(TRadioGroup AObj, TAnchorSide AValue);

TControlChildSizing
RadioGroup_GetChildSizing(TRadioGroup AObj);

void
RadioGroup_SetChildSizing(TRadioGroup AObj, TControlChildSizing AValue);

TControlBorderSpacing
RadioGroup_GetBorderSpacing(TRadioGroup AObj);

void
RadioGroup_SetBorderSpacing(TRadioGroup AObj, TControlBorderSpacing AValue);

TControl
RadioGroup_GetDockClients(TRadioGroup AObj, int32_t Index);

TControl
RadioGroup_GetControls(TRadioGroup AObj, int32_t Index);

TComponent
RadioGroup_GetComponents(TRadioGroup AObj, int32_t AIndex);

TAnchorSide
RadioGroup_GetAnchorSide(TRadioGroup AObj, TAnchorKind AKind);

TClass
RadioGroup_StaticClassType();

// -------------------TStaticText-------------------

TStaticText
StaticText_Create(TComponent AOwner);

void
StaticText_Free(TStaticText AObj);

BOOL
StaticText_CanFocus(TStaticText AObj);

BOOL
StaticText_ContainsControl(TStaticText AObj, TControl Control);

TControl
StaticText_ControlAtPos(TStaticText AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
StaticText_DisableAlign(TStaticText AObj);

void
StaticText_EnableAlign(TStaticText AObj);

TControl
StaticText_FindChildControl(TStaticText AObj, CChar char* ControlName);

void
StaticText_FlipChildren(TStaticText AObj, BOOL AllLevels);

BOOL
StaticText_Focused(TStaticText AObj);

BOOL
StaticText_HandleAllocated(TStaticText AObj);

void
StaticText_InsertControl(TStaticText AObj, TControl AControl);

void
StaticText_Invalidate(TStaticText AObj);

void
StaticText_PaintTo(TStaticText AObj, HDC DC, int32_t X, int32_t Y);

void
StaticText_RemoveControl(TStaticText AObj, TControl AControl);

void
StaticText_Realign(TStaticText AObj);

void
StaticText_Repaint(TStaticText AObj);

void
StaticText_ScaleBy(TStaticText AObj, int32_t M, int32_t D);

void
StaticText_ScrollBy(TStaticText AObj, int32_t DeltaX, int32_t DeltaY);

void
StaticText_SetBounds(TStaticText AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
StaticText_SetFocus(TStaticText AObj);

void
StaticText_Update(TStaticText AObj);

void
StaticText_BringToFront(TStaticText AObj);

TPoint
StaticText_ClientToScreen(TStaticText AObj, TPoint Point);

TPoint
StaticText_ClientToParent(TStaticText AObj, TPoint Point, TWinControl AParent);

BOOL
StaticText_Dragging(TStaticText AObj);

BOOL
StaticText_HasParent(TStaticText AObj);

void
StaticText_Hide(TStaticText AObj);

intptr_t
StaticText_Perform(TStaticText AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
StaticText_Refresh(TStaticText AObj);

TPoint
StaticText_ScreenToClient(TStaticText AObj, TPoint Point);

TPoint
StaticText_ParentToClient(TStaticText AObj, TPoint Point, TWinControl AParent);

void
StaticText_SendToBack(TStaticText AObj);

void
StaticText_Show(TStaticText AObj);

int32_t
StaticText_GetTextBuf(TStaticText AObj, CChar char* Buffer, int32_t BufSize);

int32_t
StaticText_GetTextLen(TStaticText AObj);

void
StaticText_SetTextBuf(TStaticText AObj, CChar char* Buffer);

TComponent
StaticText_FindComponent(TStaticText AObj, CChar char* AName);

char*
StaticText_GetNamePath(TStaticText AObj);

void
StaticText_Assign(TStaticText AObj, TObject Source);

TClass
StaticText_ClassType(TStaticText AObj);

char*
StaticText_ClassName(TStaticText AObj);

int32_t
StaticText_InstanceSize(TStaticText AObj);

BOOL
StaticText_InheritsFrom(TStaticText AObj, TClass AClass);

BOOL
StaticText_Equals(TStaticText AObj, TObject Obj);

int32_t
StaticText_GetHashCode(TStaticText AObj);

char*
StaticText_ToString(TStaticText AObj);

void
StaticText_AnchorToNeighbour(TStaticText AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
StaticText_AnchorParallel(TStaticText AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
StaticText_AnchorHorizontalCenterTo(TStaticText AObj, TControl ASibling);

void
StaticText_AnchorVerticalCenterTo(TStaticText AObj, TControl ASibling);

void
StaticText_AnchorSame(TStaticText AObj, TAnchorKind ASide, TControl ASibling);

void
StaticText_AnchorAsAlign(TStaticText AObj, TAlign ATheAlign, int32_t ASpace);

void
StaticText_AnchorClient(TStaticText AObj, int32_t ASpace);

int32_t
StaticText_ScaleDesignToForm(TStaticText AObj, int32_t ASize);

int32_t
StaticText_ScaleFormToDesign(TStaticText AObj, int32_t ASize);

int32_t
StaticText_Scale96ToForm(TStaticText AObj, int32_t ASize);

int32_t
StaticText_ScaleFormTo96(TStaticText AObj, int32_t ASize);

int32_t
StaticText_Scale96ToFont(TStaticText AObj, int32_t ASize);

int32_t
StaticText_ScaleFontTo96(TStaticText AObj, int32_t ASize);

int32_t
StaticText_ScaleScreenToFont(TStaticText AObj, int32_t ASize);

int32_t
StaticText_ScaleFontToScreen(TStaticText AObj, int32_t ASize);

int32_t
StaticText_Scale96ToScreen(TStaticText AObj, int32_t ASize);

int32_t
StaticText_ScaleScreenTo96(TStaticText AObj, int32_t ASize);

void
StaticText_AutoAdjustLayout(TStaticText AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
StaticText_FixDesignFontsPPI(TStaticText AObj, int32_t ADesignTimePPI);

void
StaticText_ScaleFontsPPI(TStaticText AObj, int32_t AToPPI, double AProportion);

TAlign
StaticText_GetAlign(TStaticText AObj);

void
StaticText_SetAlign(TStaticText AObj, TAlign AValue);

TAlignment
StaticText_GetAlignment(TStaticText AObj);

void
StaticText_SetAlignment(TStaticText AObj, TAlignment AValue);

TAnchors
StaticText_GetAnchors(TStaticText AObj);

void
StaticText_SetAnchors(TStaticText AObj, TAnchors AValue);

BOOL
StaticText_GetAutoSize(TStaticText AObj);

void
StaticText_SetAutoSize(TStaticText AObj, BOOL AValue);

TBiDiMode
StaticText_GetBiDiMode(TStaticText AObj);

void
StaticText_SetBiDiMode(TStaticText AObj, TBiDiMode AValue);

TStaticBorderStyle
StaticText_GetBorderStyle(TStaticText AObj);

void
StaticText_SetBorderStyle(TStaticText AObj, TStaticBorderStyle AValue);

char*
StaticText_GetCaption(TStaticText AObj);

void
StaticText_SetCaption(TStaticText AObj, CChar char* AValue);

TColor
StaticText_GetColor(TStaticText AObj);

void
StaticText_SetColor(TStaticText AObj, TColor AValue);

TSizeConstraints
StaticText_GetConstraints(TStaticText AObj);

void
StaticText_SetConstraints(TStaticText AObj, TSizeConstraints AValue);

BOOL
StaticText_GetDoubleBuffered(TStaticText AObj);

void
StaticText_SetDoubleBuffered(TStaticText AObj, BOOL AValue);

TCursor
StaticText_GetDragCursor(TStaticText AObj);

void
StaticText_SetDragCursor(TStaticText AObj, TCursor AValue);

TDragKind
StaticText_GetDragKind(TStaticText AObj);

void
StaticText_SetDragKind(TStaticText AObj, TDragKind AValue);

TDragMode
StaticText_GetDragMode(TStaticText AObj);

void
StaticText_SetDragMode(TStaticText AObj, TDragMode AValue);

BOOL
StaticText_GetEnabled(TStaticText AObj);

void
StaticText_SetEnabled(TStaticText AObj, BOOL AValue);

TWinControl
StaticText_GetFocusControl(TStaticText AObj);

void
StaticText_SetFocusControl(TStaticText AObj, TWinControl AValue);

TFont
StaticText_GetFont(TStaticText AObj);

void
StaticText_SetFont(TStaticText AObj, TFont AValue);

BOOL
StaticText_GetParentColor(TStaticText AObj);

void
StaticText_SetParentColor(TStaticText AObj, BOOL AValue);

BOOL
StaticText_GetParentDoubleBuffered(TStaticText AObj);

void
StaticText_SetParentDoubleBuffered(TStaticText AObj, BOOL AValue);

BOOL
StaticText_GetParentFont(TStaticText AObj);

void
StaticText_SetParentFont(TStaticText AObj, BOOL AValue);

BOOL
StaticText_GetParentShowHint(TStaticText AObj);

void
StaticText_SetParentShowHint(TStaticText AObj, BOOL AValue);

TPopupMenu
StaticText_GetPopupMenu(TStaticText AObj);

void
StaticText_SetPopupMenu(TStaticText AObj, TPopupMenu AValue);

BOOL
StaticText_GetShowAccelChar(TStaticText AObj);

void
StaticText_SetShowAccelChar(TStaticText AObj, BOOL AValue);

BOOL
StaticText_GetShowHint(TStaticText AObj);

void
StaticText_SetShowHint(TStaticText AObj, BOOL AValue);

TTabOrder
StaticText_GetTabOrder(TStaticText AObj);

void
StaticText_SetTabOrder(TStaticText AObj, TTabOrder AValue);

BOOL
StaticText_GetTabStop(TStaticText AObj);

void
StaticText_SetTabStop(TStaticText AObj, BOOL AValue);

BOOL
StaticText_GetTransparent(TStaticText AObj);

void
StaticText_SetTransparent(TStaticText AObj, BOOL AValue);

BOOL
StaticText_GetVisible(TStaticText AObj);

void
StaticText_SetVisible(TStaticText AObj, BOOL AValue);

void
StaticText_SetOnClick(TStaticText AObj, TNotifyEvent AEventData);

void
StaticText_SetOnContextPopup(TStaticText AObj, TContextPopupEvent AEventData);

void
StaticText_SetOnDblClick(TStaticText AObj, TNotifyEvent AEventData);

void
StaticText_SetOnDragDrop(TStaticText AObj, TDragDropEvent AEventData);

void
StaticText_SetOnDragOver(TStaticText AObj, TDragOverEvent AEventData);

void
StaticText_SetOnEndDrag(TStaticText AObj, TEndDragEvent AEventData);

void
StaticText_SetOnMouseDown(TStaticText AObj, TMouseEvent AEventData);

void
StaticText_SetOnMouseEnter(TStaticText AObj, TNotifyEvent AEventData);

void
StaticText_SetOnMouseLeave(TStaticText AObj, TNotifyEvent AEventData);

void
StaticText_SetOnMouseMove(TStaticText AObj, TMouseMoveEvent AEventData);

void
StaticText_SetOnMouseUp(TStaticText AObj, TMouseEvent AEventData);

int32_t
StaticText_GetDockClientCount(TStaticText AObj);

BOOL
StaticText_GetDockSite(TStaticText AObj);

void
StaticText_SetDockSite(TStaticText AObj, BOOL AValue);

BOOL
StaticText_GetMouseInClient(TStaticText AObj);

int32_t
StaticText_GetVisibleDockClientCount(TStaticText AObj);

TBrush
StaticText_GetBrush(TStaticText AObj);

int32_t
StaticText_GetControlCount(TStaticText AObj);

HWND
StaticText_GetHandle(TStaticText AObj);

HWND
StaticText_GetParentWindow(TStaticText AObj);

void
StaticText_SetParentWindow(TStaticText AObj, HWND AValue);

BOOL
StaticText_GetShowing(TStaticText AObj);

BOOL
StaticText_GetUseDockManager(TStaticText AObj);

void
StaticText_SetUseDockManager(TStaticText AObj, BOOL AValue);

TAction
StaticText_GetAction(TStaticText AObj);

void
StaticText_SetAction(TStaticText AObj, TAction AValue);

TRect
StaticText_GetBoundsRect(TStaticText AObj);

void
StaticText_SetBoundsRect(TStaticText AObj, TRect AValue);

int32_t
StaticText_GetClientHeight(TStaticText AObj);

void
StaticText_SetClientHeight(TStaticText AObj, int32_t AValue);

TPoint
StaticText_GetClientOrigin(TStaticText AObj);

TRect
StaticText_GetClientRect(TStaticText AObj);

int32_t
StaticText_GetClientWidth(TStaticText AObj);

void
StaticText_SetClientWidth(TStaticText AObj, int32_t AValue);

TControlState
StaticText_GetControlState(TStaticText AObj);

void
StaticText_SetControlState(TStaticText AObj, TControlState AValue);

TControlStyle
StaticText_GetControlStyle(TStaticText AObj);

void
StaticText_SetControlStyle(TStaticText AObj, TControlStyle AValue);

BOOL
StaticText_GetFloating(TStaticText AObj);

TWinControl
StaticText_GetParent(TStaticText AObj);

void
StaticText_SetParent(TStaticText AObj, TWinControl AValue);

int32_t
StaticText_GetLeft(TStaticText AObj);

void
StaticText_SetLeft(TStaticText AObj, int32_t AValue);

int32_t
StaticText_GetTop(TStaticText AObj);

void
StaticText_SetTop(TStaticText AObj, int32_t AValue);

int32_t
StaticText_GetWidth(TStaticText AObj);

void
StaticText_SetWidth(TStaticText AObj, int32_t AValue);

int32_t
StaticText_GetHeight(TStaticText AObj);

void
StaticText_SetHeight(TStaticText AObj, int32_t AValue);

TCursor
StaticText_GetCursor(TStaticText AObj);

void
StaticText_SetCursor(TStaticText AObj, TCursor AValue);

char*
StaticText_GetHint(TStaticText AObj);

void
StaticText_SetHint(TStaticText AObj, CChar char* AValue);

int32_t
StaticText_GetComponentCount(TStaticText AObj);

int32_t
StaticText_GetComponentIndex(TStaticText AObj);

void
StaticText_SetComponentIndex(TStaticText AObj, int32_t AValue);

TComponent
StaticText_GetOwner(TStaticText AObj);

char*
StaticText_GetName(TStaticText AObj);

void
StaticText_SetName(TStaticText AObj, CChar char* AValue);

intptr_t
StaticText_GetTag(TStaticText AObj);

void
StaticText_SetTag(TStaticText AObj, intptr_t AValue);

TAnchorSide
StaticText_GetAnchorSideLeft(TStaticText AObj);

void
StaticText_SetAnchorSideLeft(TStaticText AObj, TAnchorSide AValue);

TAnchorSide
StaticText_GetAnchorSideTop(TStaticText AObj);

void
StaticText_SetAnchorSideTop(TStaticText AObj, TAnchorSide AValue);

TAnchorSide
StaticText_GetAnchorSideRight(TStaticText AObj);

void
StaticText_SetAnchorSideRight(TStaticText AObj, TAnchorSide AValue);

TAnchorSide
StaticText_GetAnchorSideBottom(TStaticText AObj);

void
StaticText_SetAnchorSideBottom(TStaticText AObj, TAnchorSide AValue);

TControlChildSizing
StaticText_GetChildSizing(TStaticText AObj);

void
StaticText_SetChildSizing(TStaticText AObj, TControlChildSizing AValue);

TControlBorderSpacing
StaticText_GetBorderSpacing(TStaticText AObj);

void
StaticText_SetBorderSpacing(TStaticText AObj, TControlBorderSpacing AValue);

TControl
StaticText_GetDockClients(TStaticText AObj, int32_t Index);

TControl
StaticText_GetControls(TStaticText AObj, int32_t Index);

TComponent
StaticText_GetComponents(TStaticText AObj, int32_t AIndex);

TAnchorSide
StaticText_GetAnchorSide(TStaticText AObj, TAnchorKind AKind);

TClass
StaticText_StaticClassType();

// -------------------TColorBox-------------------

TColorBox
ColorBox_Create(TComponent AOwner);

void
ColorBox_Free(TColorBox AObj);

void
ColorBox_AddItem(TColorBox AObj, CChar char* Item, TObject AObject);

void
ColorBox_Clear(TColorBox AObj);

void
ColorBox_ClearSelection(TColorBox AObj);

void
ColorBox_DeleteSelected(TColorBox AObj);

BOOL
ColorBox_Focused(TColorBox AObj);

void
ColorBox_SelectAll(TColorBox AObj);

BOOL
ColorBox_CanFocus(TColorBox AObj);

BOOL
ColorBox_ContainsControl(TColorBox AObj, TControl Control);

TControl
ColorBox_ControlAtPos(TColorBox AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
ColorBox_DisableAlign(TColorBox AObj);

void
ColorBox_EnableAlign(TColorBox AObj);

TControl
ColorBox_FindChildControl(TColorBox AObj, CChar char* ControlName);

void
ColorBox_FlipChildren(TColorBox AObj, BOOL AllLevels);

BOOL
ColorBox_HandleAllocated(TColorBox AObj);

void
ColorBox_InsertControl(TColorBox AObj, TControl AControl);

void
ColorBox_Invalidate(TColorBox AObj);

void
ColorBox_PaintTo(TColorBox AObj, HDC DC, int32_t X, int32_t Y);

void
ColorBox_RemoveControl(TColorBox AObj, TControl AControl);

void
ColorBox_Realign(TColorBox AObj);

void
ColorBox_Repaint(TColorBox AObj);

void
ColorBox_ScaleBy(TColorBox AObj, int32_t M, int32_t D);

void
ColorBox_ScrollBy(TColorBox AObj, int32_t DeltaX, int32_t DeltaY);

void
ColorBox_SetBounds(TColorBox AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ColorBox_SetFocus(TColorBox AObj);

void
ColorBox_Update(TColorBox AObj);

void
ColorBox_BringToFront(TColorBox AObj);

TPoint
ColorBox_ClientToScreen(TColorBox AObj, TPoint Point);

TPoint
ColorBox_ClientToParent(TColorBox AObj, TPoint Point, TWinControl AParent);

BOOL
ColorBox_Dragging(TColorBox AObj);

BOOL
ColorBox_HasParent(TColorBox AObj);

void
ColorBox_Hide(TColorBox AObj);

intptr_t
ColorBox_Perform(TColorBox AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ColorBox_Refresh(TColorBox AObj);

TPoint
ColorBox_ScreenToClient(TColorBox AObj, TPoint Point);

TPoint
ColorBox_ParentToClient(TColorBox AObj, TPoint Point, TWinControl AParent);

void
ColorBox_SendToBack(TColorBox AObj);

void
ColorBox_Show(TColorBox AObj);

int32_t
ColorBox_GetTextBuf(TColorBox AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ColorBox_GetTextLen(TColorBox AObj);

void
ColorBox_SetTextBuf(TColorBox AObj, CChar char* Buffer);

TComponent
ColorBox_FindComponent(TColorBox AObj, CChar char* AName);

char*
ColorBox_GetNamePath(TColorBox AObj);

void
ColorBox_Assign(TColorBox AObj, TObject Source);

TClass
ColorBox_ClassType(TColorBox AObj);

char*
ColorBox_ClassName(TColorBox AObj);

int32_t
ColorBox_InstanceSize(TColorBox AObj);

BOOL
ColorBox_InheritsFrom(TColorBox AObj, TClass AClass);

BOOL
ColorBox_Equals(TColorBox AObj, TObject Obj);

int32_t
ColorBox_GetHashCode(TColorBox AObj);

char*
ColorBox_ToString(TColorBox AObj);

void
ColorBox_AnchorToNeighbour(TColorBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ColorBox_AnchorParallel(TColorBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ColorBox_AnchorHorizontalCenterTo(TColorBox AObj, TControl ASibling);

void
ColorBox_AnchorVerticalCenterTo(TColorBox AObj, TControl ASibling);

void
ColorBox_AnchorSame(TColorBox AObj, TAnchorKind ASide, TControl ASibling);

void
ColorBox_AnchorAsAlign(TColorBox AObj, TAlign ATheAlign, int32_t ASpace);

void
ColorBox_AnchorClient(TColorBox AObj, int32_t ASpace);

int32_t
ColorBox_ScaleDesignToForm(TColorBox AObj, int32_t ASize);

int32_t
ColorBox_ScaleFormToDesign(TColorBox AObj, int32_t ASize);

int32_t
ColorBox_Scale96ToForm(TColorBox AObj, int32_t ASize);

int32_t
ColorBox_ScaleFormTo96(TColorBox AObj, int32_t ASize);

int32_t
ColorBox_Scale96ToFont(TColorBox AObj, int32_t ASize);

int32_t
ColorBox_ScaleFontTo96(TColorBox AObj, int32_t ASize);

int32_t
ColorBox_ScaleScreenToFont(TColorBox AObj, int32_t ASize);

int32_t
ColorBox_ScaleFontToScreen(TColorBox AObj, int32_t ASize);

int32_t
ColorBox_Scale96ToScreen(TColorBox AObj, int32_t ASize);

int32_t
ColorBox_ScaleScreenTo96(TColorBox AObj, int32_t ASize);

void
ColorBox_AutoAdjustLayout(TColorBox AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ColorBox_FixDesignFontsPPI(TColorBox AObj, int32_t ADesignTimePPI);

void
ColorBox_ScaleFontsPPI(TColorBox AObj, int32_t AToPPI, double AProportion);

TAlign
ColorBox_GetAlign(TColorBox AObj);

void
ColorBox_SetAlign(TColorBox AObj, TAlign AValue);

BOOL
ColorBox_GetAutoComplete(TColorBox AObj);

void
ColorBox_SetAutoComplete(TColorBox AObj, BOOL AValue);

BOOL
ColorBox_GetAutoDropDown(TColorBox AObj);

void
ColorBox_SetAutoDropDown(TColorBox AObj, BOOL AValue);

TColor
ColorBox_GetDefaultColorColor(TColorBox AObj);

void
ColorBox_SetDefaultColorColor(TColorBox AObj, TColor AValue);

TColor
ColorBox_GetNoneColorColor(TColorBox AObj);

void
ColorBox_SetNoneColorColor(TColorBox AObj, TColor AValue);

TColor
ColorBox_GetSelected(TColorBox AObj);

void
ColorBox_SetSelected(TColorBox AObj, TColor AValue);

TColorBoxStyle
ColorBox_GetStyle(TColorBox AObj);

void
ColorBox_SetStyle(TColorBox AObj, TColorBoxStyle AValue);

TAnchors
ColorBox_GetAnchors(TColorBox AObj);

void
ColorBox_SetAnchors(TColorBox AObj, TAnchors AValue);

TBiDiMode
ColorBox_GetBiDiMode(TColorBox AObj);

void
ColorBox_SetBiDiMode(TColorBox AObj, TBiDiMode AValue);

TColor
ColorBox_GetColor(TColorBox AObj);

void
ColorBox_SetColor(TColorBox AObj, TColor AValue);

TSizeConstraints
ColorBox_GetConstraints(TColorBox AObj);

void
ColorBox_SetConstraints(TColorBox AObj, TSizeConstraints AValue);

BOOL
ColorBox_GetDoubleBuffered(TColorBox AObj);

void
ColorBox_SetDoubleBuffered(TColorBox AObj, BOOL AValue);

int32_t
ColorBox_GetDropDownCount(TColorBox AObj);

void
ColorBox_SetDropDownCount(TColorBox AObj, int32_t AValue);

BOOL
ColorBox_GetEnabled(TColorBox AObj);

void
ColorBox_SetEnabled(TColorBox AObj, BOOL AValue);

TFont
ColorBox_GetFont(TColorBox AObj);

void
ColorBox_SetFont(TColorBox AObj, TFont AValue);

int32_t
ColorBox_GetItemHeight(TColorBox AObj);

void
ColorBox_SetItemHeight(TColorBox AObj, int32_t AValue);

BOOL
ColorBox_GetParentColor(TColorBox AObj);

void
ColorBox_SetParentColor(TColorBox AObj, BOOL AValue);

BOOL
ColorBox_GetParentDoubleBuffered(TColorBox AObj);

void
ColorBox_SetParentDoubleBuffered(TColorBox AObj, BOOL AValue);

BOOL
ColorBox_GetParentFont(TColorBox AObj);

void
ColorBox_SetParentFont(TColorBox AObj, BOOL AValue);

BOOL
ColorBox_GetParentShowHint(TColorBox AObj);

void
ColorBox_SetParentShowHint(TColorBox AObj, BOOL AValue);

TPopupMenu
ColorBox_GetPopupMenu(TColorBox AObj);

void
ColorBox_SetPopupMenu(TColorBox AObj, TPopupMenu AValue);

BOOL
ColorBox_GetShowHint(TColorBox AObj);

void
ColorBox_SetShowHint(TColorBox AObj, BOOL AValue);

TTabOrder
ColorBox_GetTabOrder(TColorBox AObj);

void
ColorBox_SetTabOrder(TColorBox AObj, TTabOrder AValue);

BOOL
ColorBox_GetTabStop(TColorBox AObj);

void
ColorBox_SetTabStop(TColorBox AObj, BOOL AValue);

BOOL
ColorBox_GetVisible(TColorBox AObj);

void
ColorBox_SetVisible(TColorBox AObj, BOOL AValue);

void
ColorBox_SetOnChange(TColorBox AObj, TNotifyEvent AEventData);

void
ColorBox_SetOnCloseUp(TColorBox AObj, TNotifyEvent AEventData);

void
ColorBox_SetOnClick(TColorBox AObj, TNotifyEvent AEventData);

void
ColorBox_SetOnContextPopup(TColorBox AObj, TContextPopupEvent AEventData);

void
ColorBox_SetOnDragDrop(TColorBox AObj, TDragDropEvent AEventData);

void
ColorBox_SetOnDragOver(TColorBox AObj, TDragOverEvent AEventData);

void
ColorBox_SetOnDropDown(TColorBox AObj, TNotifyEvent AEventData);

void
ColorBox_SetOnEndDrag(TColorBox AObj, TEndDragEvent AEventData);

void
ColorBox_SetOnEnter(TColorBox AObj, TNotifyEvent AEventData);

void
ColorBox_SetOnExit(TColorBox AObj, TNotifyEvent AEventData);

void
ColorBox_SetOnKeyDown(TColorBox AObj, TKeyEvent AEventData);

void
ColorBox_SetOnKeyPress(TColorBox AObj, TKeyPressEvent AEventData);

void
ColorBox_SetOnKeyUp(TColorBox AObj, TKeyEvent AEventData);

void
ColorBox_SetOnMouseEnter(TColorBox AObj, TNotifyEvent AEventData);

void
ColorBox_SetOnMouseLeave(TColorBox AObj, TNotifyEvent AEventData);

void
ColorBox_SetOnSelect(TColorBox AObj, TNotifyEvent AEventData);

TEditCharCase
ColorBox_GetCharCase(TColorBox AObj);

void
ColorBox_SetCharCase(TColorBox AObj, TEditCharCase AValue);

char*
ColorBox_GetSelText(TColorBox AObj);

void
ColorBox_SetSelText(TColorBox AObj, CChar char* AValue);

TCanvas
ColorBox_GetCanvas(TColorBox AObj);

BOOL
ColorBox_GetDroppedDown(TColorBox AObj);

void
ColorBox_SetDroppedDown(TColorBox AObj, BOOL AValue);

TStrings
ColorBox_GetItems(TColorBox AObj);

void
ColorBox_SetItems(TColorBox AObj, TStrings AValue);

int32_t
ColorBox_GetSelLength(TColorBox AObj);

void
ColorBox_SetSelLength(TColorBox AObj, int32_t AValue);

int32_t
ColorBox_GetSelStart(TColorBox AObj);

void
ColorBox_SetSelStart(TColorBox AObj, int32_t AValue);

int32_t
ColorBox_GetItemIndex(TColorBox AObj);

void
ColorBox_SetItemIndex(TColorBox AObj, int32_t AValue);

int32_t
ColorBox_GetDockClientCount(TColorBox AObj);

BOOL
ColorBox_GetDockSite(TColorBox AObj);

void
ColorBox_SetDockSite(TColorBox AObj, BOOL AValue);

BOOL
ColorBox_GetMouseInClient(TColorBox AObj);

int32_t
ColorBox_GetVisibleDockClientCount(TColorBox AObj);

TBrush
ColorBox_GetBrush(TColorBox AObj);

int32_t
ColorBox_GetControlCount(TColorBox AObj);

HWND
ColorBox_GetHandle(TColorBox AObj);

HWND
ColorBox_GetParentWindow(TColorBox AObj);

void
ColorBox_SetParentWindow(TColorBox AObj, HWND AValue);

BOOL
ColorBox_GetShowing(TColorBox AObj);

BOOL
ColorBox_GetUseDockManager(TColorBox AObj);

void
ColorBox_SetUseDockManager(TColorBox AObj, BOOL AValue);

TAction
ColorBox_GetAction(TColorBox AObj);

void
ColorBox_SetAction(TColorBox AObj, TAction AValue);

TRect
ColorBox_GetBoundsRect(TColorBox AObj);

void
ColorBox_SetBoundsRect(TColorBox AObj, TRect AValue);

int32_t
ColorBox_GetClientHeight(TColorBox AObj);

void
ColorBox_SetClientHeight(TColorBox AObj, int32_t AValue);

TPoint
ColorBox_GetClientOrigin(TColorBox AObj);

TRect
ColorBox_GetClientRect(TColorBox AObj);

int32_t
ColorBox_GetClientWidth(TColorBox AObj);

void
ColorBox_SetClientWidth(TColorBox AObj, int32_t AValue);

TControlState
ColorBox_GetControlState(TColorBox AObj);

void
ColorBox_SetControlState(TColorBox AObj, TControlState AValue);

TControlStyle
ColorBox_GetControlStyle(TColorBox AObj);

void
ColorBox_SetControlStyle(TColorBox AObj, TControlStyle AValue);

BOOL
ColorBox_GetFloating(TColorBox AObj);

TWinControl
ColorBox_GetParent(TColorBox AObj);

void
ColorBox_SetParent(TColorBox AObj, TWinControl AValue);

int32_t
ColorBox_GetLeft(TColorBox AObj);

void
ColorBox_SetLeft(TColorBox AObj, int32_t AValue);

int32_t
ColorBox_GetTop(TColorBox AObj);

void
ColorBox_SetTop(TColorBox AObj, int32_t AValue);

int32_t
ColorBox_GetWidth(TColorBox AObj);

void
ColorBox_SetWidth(TColorBox AObj, int32_t AValue);

int32_t
ColorBox_GetHeight(TColorBox AObj);

void
ColorBox_SetHeight(TColorBox AObj, int32_t AValue);

TCursor
ColorBox_GetCursor(TColorBox AObj);

void
ColorBox_SetCursor(TColorBox AObj, TCursor AValue);

char*
ColorBox_GetHint(TColorBox AObj);

void
ColorBox_SetHint(TColorBox AObj, CChar char* AValue);

int32_t
ColorBox_GetComponentCount(TColorBox AObj);

int32_t
ColorBox_GetComponentIndex(TColorBox AObj);

void
ColorBox_SetComponentIndex(TColorBox AObj, int32_t AValue);

TComponent
ColorBox_GetOwner(TColorBox AObj);

char*
ColorBox_GetName(TColorBox AObj);

void
ColorBox_SetName(TColorBox AObj, CChar char* AValue);

intptr_t
ColorBox_GetTag(TColorBox AObj);

void
ColorBox_SetTag(TColorBox AObj, intptr_t AValue);

TAnchorSide
ColorBox_GetAnchorSideLeft(TColorBox AObj);

void
ColorBox_SetAnchorSideLeft(TColorBox AObj, TAnchorSide AValue);

TAnchorSide
ColorBox_GetAnchorSideTop(TColorBox AObj);

void
ColorBox_SetAnchorSideTop(TColorBox AObj, TAnchorSide AValue);

TAnchorSide
ColorBox_GetAnchorSideRight(TColorBox AObj);

void
ColorBox_SetAnchorSideRight(TColorBox AObj, TAnchorSide AValue);

TAnchorSide
ColorBox_GetAnchorSideBottom(TColorBox AObj);

void
ColorBox_SetAnchorSideBottom(TColorBox AObj, TAnchorSide AValue);

TControlChildSizing
ColorBox_GetChildSizing(TColorBox AObj);

void
ColorBox_SetChildSizing(TColorBox AObj, TControlChildSizing AValue);

TControlBorderSpacing
ColorBox_GetBorderSpacing(TColorBox AObj);

void
ColorBox_SetBorderSpacing(TColorBox AObj, TControlBorderSpacing AValue);

TColor
ColorBox_GetColors(TColorBox AObj, int32_t Index);

char*
ColorBox_GetColorNames(TColorBox AObj, int32_t Index);

TControl
ColorBox_GetDockClients(TColorBox AObj, int32_t Index);

TControl
ColorBox_GetControls(TColorBox AObj, int32_t Index);

TComponent
ColorBox_GetComponents(TColorBox AObj, int32_t AIndex);

TAnchorSide
ColorBox_GetAnchorSide(TColorBox AObj, TAnchorKind AKind);

TClass
ColorBox_StaticClassType();

// -------------------TColorListBox-------------------

TColorListBox
ColorListBox_Create(TComponent AOwner);

void
ColorListBox_Free(TColorListBox AObj);

void
ColorListBox_AddItem(TColorListBox AObj, CChar char* Item, TObject AObject);

void
ColorListBox_Clear(TColorListBox AObj);

void
ColorListBox_ClearSelection(TColorListBox AObj);

void
ColorListBox_DeleteSelected(TColorListBox AObj);

int32_t
ColorListBox_ItemAtPos(TColorListBox AObj, TPoint Pos, BOOL Existing);

TRect
ColorListBox_ItemRect(TColorListBox AObj, int32_t Index);

void
ColorListBox_SelectAll(TColorListBox AObj);

BOOL
ColorListBox_CanFocus(TColorListBox AObj);

BOOL
ColorListBox_ContainsControl(TColorListBox AObj, TControl Control);

TControl
ColorListBox_ControlAtPos(TColorListBox AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
ColorListBox_DisableAlign(TColorListBox AObj);

void
ColorListBox_EnableAlign(TColorListBox AObj);

TControl
ColorListBox_FindChildControl(TColorListBox AObj, CChar char* ControlName);

void
ColorListBox_FlipChildren(TColorListBox AObj, BOOL AllLevels);

BOOL
ColorListBox_Focused(TColorListBox AObj);

BOOL
ColorListBox_HandleAllocated(TColorListBox AObj);

void
ColorListBox_InsertControl(TColorListBox AObj, TControl AControl);

void
ColorListBox_Invalidate(TColorListBox AObj);

void
ColorListBox_PaintTo(TColorListBox AObj, HDC DC, int32_t X, int32_t Y);

void
ColorListBox_RemoveControl(TColorListBox AObj, TControl AControl);

void
ColorListBox_Realign(TColorListBox AObj);

void
ColorListBox_Repaint(TColorListBox AObj);

void
ColorListBox_ScaleBy(TColorListBox AObj, int32_t M, int32_t D);

void
ColorListBox_ScrollBy(TColorListBox AObj, int32_t DeltaX, int32_t DeltaY);

void
ColorListBox_SetBounds(TColorListBox AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ColorListBox_SetFocus(TColorListBox AObj);

void
ColorListBox_Update(TColorListBox AObj);

void
ColorListBox_BringToFront(TColorListBox AObj);

TPoint
ColorListBox_ClientToScreen(TColorListBox AObj, TPoint Point);

TPoint
ColorListBox_ClientToParent(TColorListBox AObj, TPoint Point, TWinControl AParent);

BOOL
ColorListBox_Dragging(TColorListBox AObj);

BOOL
ColorListBox_HasParent(TColorListBox AObj);

void
ColorListBox_Hide(TColorListBox AObj);

intptr_t
ColorListBox_Perform(TColorListBox AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ColorListBox_Refresh(TColorListBox AObj);

TPoint
ColorListBox_ScreenToClient(TColorListBox AObj, TPoint Point);

TPoint
ColorListBox_ParentToClient(TColorListBox AObj, TPoint Point, TWinControl AParent);

void
ColorListBox_SendToBack(TColorListBox AObj);

void
ColorListBox_Show(TColorListBox AObj);

int32_t
ColorListBox_GetTextBuf(TColorListBox AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ColorListBox_GetTextLen(TColorListBox AObj);

void
ColorListBox_SetTextBuf(TColorListBox AObj, CChar char* Buffer);

TComponent
ColorListBox_FindComponent(TColorListBox AObj, CChar char* AName);

char*
ColorListBox_GetNamePath(TColorListBox AObj);

void
ColorListBox_Assign(TColorListBox AObj, TObject Source);

TClass
ColorListBox_ClassType(TColorListBox AObj);

char*
ColorListBox_ClassName(TColorListBox AObj);

int32_t
ColorListBox_InstanceSize(TColorListBox AObj);

BOOL
ColorListBox_InheritsFrom(TColorListBox AObj, TClass AClass);

BOOL
ColorListBox_Equals(TColorListBox AObj, TObject Obj);

int32_t
ColorListBox_GetHashCode(TColorListBox AObj);

char*
ColorListBox_ToString(TColorListBox AObj);

void
ColorListBox_AnchorToNeighbour(TColorListBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ColorListBox_AnchorParallel(TColorListBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ColorListBox_AnchorHorizontalCenterTo(TColorListBox AObj, TControl ASibling);

void
ColorListBox_AnchorVerticalCenterTo(TColorListBox AObj, TControl ASibling);

void
ColorListBox_AnchorSame(TColorListBox AObj, TAnchorKind ASide, TControl ASibling);

void
ColorListBox_AnchorAsAlign(TColorListBox AObj, TAlign ATheAlign, int32_t ASpace);

void
ColorListBox_AnchorClient(TColorListBox AObj, int32_t ASpace);

int32_t
ColorListBox_ScaleDesignToForm(TColorListBox AObj, int32_t ASize);

int32_t
ColorListBox_ScaleFormToDesign(TColorListBox AObj, int32_t ASize);

int32_t
ColorListBox_Scale96ToForm(TColorListBox AObj, int32_t ASize);

int32_t
ColorListBox_ScaleFormTo96(TColorListBox AObj, int32_t ASize);

int32_t
ColorListBox_Scale96ToFont(TColorListBox AObj, int32_t ASize);

int32_t
ColorListBox_ScaleFontTo96(TColorListBox AObj, int32_t ASize);

int32_t
ColorListBox_ScaleScreenToFont(TColorListBox AObj, int32_t ASize);

int32_t
ColorListBox_ScaleFontToScreen(TColorListBox AObj, int32_t ASize);

int32_t
ColorListBox_Scale96ToScreen(TColorListBox AObj, int32_t ASize);

int32_t
ColorListBox_ScaleScreenTo96(TColorListBox AObj, int32_t ASize);

void
ColorListBox_AutoAdjustLayout(TColorListBox AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ColorListBox_FixDesignFontsPPI(TColorListBox AObj, int32_t ADesignTimePPI);

void
ColorListBox_ScaleFontsPPI(TColorListBox AObj, int32_t AToPPI, double AProportion);

TAlign
ColorListBox_GetAlign(TColorListBox AObj);

void
ColorListBox_SetAlign(TColorListBox AObj, TAlign AValue);

TColor
ColorListBox_GetDefaultColorColor(TColorListBox AObj);

void
ColorListBox_SetDefaultColorColor(TColorListBox AObj, TColor AValue);

TColor
ColorListBox_GetNoneColorColor(TColorListBox AObj);

void
ColorListBox_SetNoneColorColor(TColorListBox AObj, TColor AValue);

TColor
ColorListBox_GetSelected(TColorListBox AObj);

void
ColorListBox_SetSelected(TColorListBox AObj, TColor AValue);

TColorBoxStyle
ColorListBox_GetStyle(TColorListBox AObj);

void
ColorListBox_SetStyle(TColorListBox AObj, TColorBoxStyle AValue);

TAnchors
ColorListBox_GetAnchors(TColorListBox AObj);

void
ColorListBox_SetAnchors(TColorListBox AObj, TAnchors AValue);

TBiDiMode
ColorListBox_GetBiDiMode(TColorListBox AObj);

void
ColorListBox_SetBiDiMode(TColorListBox AObj, TBiDiMode AValue);

TColor
ColorListBox_GetColor(TColorListBox AObj);

void
ColorListBox_SetColor(TColorListBox AObj, TColor AValue);

TSizeConstraints
ColorListBox_GetConstraints(TColorListBox AObj);

void
ColorListBox_SetConstraints(TColorListBox AObj, TSizeConstraints AValue);

BOOL
ColorListBox_GetDoubleBuffered(TColorListBox AObj);

void
ColorListBox_SetDoubleBuffered(TColorListBox AObj, BOOL AValue);

BOOL
ColorListBox_GetEnabled(TColorListBox AObj);

void
ColorListBox_SetEnabled(TColorListBox AObj, BOOL AValue);

TFont
ColorListBox_GetFont(TColorListBox AObj);

void
ColorListBox_SetFont(TColorListBox AObj, TFont AValue);

int32_t
ColorListBox_GetItemHeight(TColorListBox AObj);

void
ColorListBox_SetItemHeight(TColorListBox AObj, int32_t AValue);

BOOL
ColorListBox_GetParentColor(TColorListBox AObj);

void
ColorListBox_SetParentColor(TColorListBox AObj, BOOL AValue);

BOOL
ColorListBox_GetParentDoubleBuffered(TColorListBox AObj);

void
ColorListBox_SetParentDoubleBuffered(TColorListBox AObj, BOOL AValue);

BOOL
ColorListBox_GetParentFont(TColorListBox AObj);

void
ColorListBox_SetParentFont(TColorListBox AObj, BOOL AValue);

BOOL
ColorListBox_GetParentShowHint(TColorListBox AObj);

void
ColorListBox_SetParentShowHint(TColorListBox AObj, BOOL AValue);

TPopupMenu
ColorListBox_GetPopupMenu(TColorListBox AObj);

void
ColorListBox_SetPopupMenu(TColorListBox AObj, TPopupMenu AValue);

BOOL
ColorListBox_GetShowHint(TColorListBox AObj);

void
ColorListBox_SetShowHint(TColorListBox AObj, BOOL AValue);

TTabOrder
ColorListBox_GetTabOrder(TColorListBox AObj);

void
ColorListBox_SetTabOrder(TColorListBox AObj, TTabOrder AValue);

BOOL
ColorListBox_GetTabStop(TColorListBox AObj);

void
ColorListBox_SetTabStop(TColorListBox AObj, BOOL AValue);

BOOL
ColorListBox_GetVisible(TColorListBox AObj);

void
ColorListBox_SetVisible(TColorListBox AObj, BOOL AValue);

void
ColorListBox_SetOnClick(TColorListBox AObj, TNotifyEvent AEventData);

void
ColorListBox_SetOnContextPopup(TColorListBox AObj, TContextPopupEvent AEventData);

void
ColorListBox_SetOnDblClick(TColorListBox AObj, TNotifyEvent AEventData);

void
ColorListBox_SetOnDragDrop(TColorListBox AObj, TDragDropEvent AEventData);

void
ColorListBox_SetOnDragOver(TColorListBox AObj, TDragOverEvent AEventData);

void
ColorListBox_SetOnEndDrag(TColorListBox AObj, TEndDragEvent AEventData);

void
ColorListBox_SetOnEnter(TColorListBox AObj, TNotifyEvent AEventData);

void
ColorListBox_SetOnExit(TColorListBox AObj, TNotifyEvent AEventData);

void
ColorListBox_SetOnKeyDown(TColorListBox AObj, TKeyEvent AEventData);

void
ColorListBox_SetOnKeyPress(TColorListBox AObj, TKeyPressEvent AEventData);

void
ColorListBox_SetOnKeyUp(TColorListBox AObj, TKeyEvent AEventData);

void
ColorListBox_SetOnMouseDown(TColorListBox AObj, TMouseEvent AEventData);

void
ColorListBox_SetOnMouseEnter(TColorListBox AObj, TNotifyEvent AEventData);

void
ColorListBox_SetOnMouseLeave(TColorListBox AObj, TNotifyEvent AEventData);

void
ColorListBox_SetOnMouseMove(TColorListBox AObj, TMouseMoveEvent AEventData);

void
ColorListBox_SetOnMouseUp(TColorListBox AObj, TMouseEvent AEventData);

TCanvas
ColorListBox_GetCanvas(TColorListBox AObj);

int32_t
ColorListBox_GetCount(TColorListBox AObj);

TStrings
ColorListBox_GetItems(TColorListBox AObj);

void
ColorListBox_SetItems(TColorListBox AObj, TStrings AValue);

int32_t
ColorListBox_GetTopIndex(TColorListBox AObj);

void
ColorListBox_SetTopIndex(TColorListBox AObj, int32_t AValue);

BOOL
ColorListBox_GetMultiSelect(TColorListBox AObj);

void
ColorListBox_SetMultiSelect(TColorListBox AObj, BOOL AValue);

int32_t
ColorListBox_GetSelCount(TColorListBox AObj);

int32_t
ColorListBox_GetItemIndex(TColorListBox AObj);

void
ColorListBox_SetItemIndex(TColorListBox AObj, int32_t AValue);

int32_t
ColorListBox_GetDockClientCount(TColorListBox AObj);

BOOL
ColorListBox_GetDockSite(TColorListBox AObj);

void
ColorListBox_SetDockSite(TColorListBox AObj, BOOL AValue);

BOOL
ColorListBox_GetMouseInClient(TColorListBox AObj);

int32_t
ColorListBox_GetVisibleDockClientCount(TColorListBox AObj);

TBrush
ColorListBox_GetBrush(TColorListBox AObj);

int32_t
ColorListBox_GetControlCount(TColorListBox AObj);

HWND
ColorListBox_GetHandle(TColorListBox AObj);

HWND
ColorListBox_GetParentWindow(TColorListBox AObj);

void
ColorListBox_SetParentWindow(TColorListBox AObj, HWND AValue);

BOOL
ColorListBox_GetShowing(TColorListBox AObj);

BOOL
ColorListBox_GetUseDockManager(TColorListBox AObj);

void
ColorListBox_SetUseDockManager(TColorListBox AObj, BOOL AValue);

TAction
ColorListBox_GetAction(TColorListBox AObj);

void
ColorListBox_SetAction(TColorListBox AObj, TAction AValue);

TRect
ColorListBox_GetBoundsRect(TColorListBox AObj);

void
ColorListBox_SetBoundsRect(TColorListBox AObj, TRect AValue);

int32_t
ColorListBox_GetClientHeight(TColorListBox AObj);

void
ColorListBox_SetClientHeight(TColorListBox AObj, int32_t AValue);

TPoint
ColorListBox_GetClientOrigin(TColorListBox AObj);

TRect
ColorListBox_GetClientRect(TColorListBox AObj);

int32_t
ColorListBox_GetClientWidth(TColorListBox AObj);

void
ColorListBox_SetClientWidth(TColorListBox AObj, int32_t AValue);

TControlState
ColorListBox_GetControlState(TColorListBox AObj);

void
ColorListBox_SetControlState(TColorListBox AObj, TControlState AValue);

TControlStyle
ColorListBox_GetControlStyle(TColorListBox AObj);

void
ColorListBox_SetControlStyle(TColorListBox AObj, TControlStyle AValue);

BOOL
ColorListBox_GetFloating(TColorListBox AObj);

TWinControl
ColorListBox_GetParent(TColorListBox AObj);

void
ColorListBox_SetParent(TColorListBox AObj, TWinControl AValue);

int32_t
ColorListBox_GetLeft(TColorListBox AObj);

void
ColorListBox_SetLeft(TColorListBox AObj, int32_t AValue);

int32_t
ColorListBox_GetTop(TColorListBox AObj);

void
ColorListBox_SetTop(TColorListBox AObj, int32_t AValue);

int32_t
ColorListBox_GetWidth(TColorListBox AObj);

void
ColorListBox_SetWidth(TColorListBox AObj, int32_t AValue);

int32_t
ColorListBox_GetHeight(TColorListBox AObj);

void
ColorListBox_SetHeight(TColorListBox AObj, int32_t AValue);

TCursor
ColorListBox_GetCursor(TColorListBox AObj);

void
ColorListBox_SetCursor(TColorListBox AObj, TCursor AValue);

char*
ColorListBox_GetHint(TColorListBox AObj);

void
ColorListBox_SetHint(TColorListBox AObj, CChar char* AValue);

int32_t
ColorListBox_GetComponentCount(TColorListBox AObj);

int32_t
ColorListBox_GetComponentIndex(TColorListBox AObj);

void
ColorListBox_SetComponentIndex(TColorListBox AObj, int32_t AValue);

TComponent
ColorListBox_GetOwner(TColorListBox AObj);

char*
ColorListBox_GetName(TColorListBox AObj);

void
ColorListBox_SetName(TColorListBox AObj, CChar char* AValue);

intptr_t
ColorListBox_GetTag(TColorListBox AObj);

void
ColorListBox_SetTag(TColorListBox AObj, intptr_t AValue);

TAnchorSide
ColorListBox_GetAnchorSideLeft(TColorListBox AObj);

void
ColorListBox_SetAnchorSideLeft(TColorListBox AObj, TAnchorSide AValue);

TAnchorSide
ColorListBox_GetAnchorSideTop(TColorListBox AObj);

void
ColorListBox_SetAnchorSideTop(TColorListBox AObj, TAnchorSide AValue);

TAnchorSide
ColorListBox_GetAnchorSideRight(TColorListBox AObj);

void
ColorListBox_SetAnchorSideRight(TColorListBox AObj, TAnchorSide AValue);

TAnchorSide
ColorListBox_GetAnchorSideBottom(TColorListBox AObj);

void
ColorListBox_SetAnchorSideBottom(TColorListBox AObj, TAnchorSide AValue);

TControlChildSizing
ColorListBox_GetChildSizing(TColorListBox AObj);

void
ColorListBox_SetChildSizing(TColorListBox AObj, TControlChildSizing AValue);

TControlBorderSpacing
ColorListBox_GetBorderSpacing(TColorListBox AObj);

void
ColorListBox_SetBorderSpacing(TColorListBox AObj, TControlBorderSpacing AValue);

TColor
ColorListBox_GetColors(TColorListBox AObj, int32_t Index);

char*
ColorListBox_GetColorNames(TColorListBox AObj, int32_t Index);

TControl
ColorListBox_GetDockClients(TColorListBox AObj, int32_t Index);

TControl
ColorListBox_GetControls(TColorListBox AObj, int32_t Index);

TComponent
ColorListBox_GetComponents(TColorListBox AObj, int32_t AIndex);

TAnchorSide
ColorListBox_GetAnchorSide(TColorListBox AObj, TAnchorKind AKind);

TClass
ColorListBox_StaticClassType();

// -------------------TTrayIcon-------------------

TTrayIcon
TrayIcon_Create(TComponent AOwner);

void
TrayIcon_Free(TTrayIcon AObj);

void
TrayIcon_ShowBalloonHint(TTrayIcon AObj);

TComponent
TrayIcon_FindComponent(TTrayIcon AObj, CChar char* AName);

char*
TrayIcon_GetNamePath(TTrayIcon AObj);

BOOL
TrayIcon_HasParent(TTrayIcon AObj);

void
TrayIcon_Assign(TTrayIcon AObj, TObject Source);

TClass
TrayIcon_ClassType(TTrayIcon AObj);

char*
TrayIcon_ClassName(TTrayIcon AObj);

int32_t
TrayIcon_InstanceSize(TTrayIcon AObj);

BOOL
TrayIcon_InheritsFrom(TTrayIcon AObj, TClass AClass);

BOOL
TrayIcon_Equals(TTrayIcon AObj, TObject Obj);

int32_t
TrayIcon_GetHashCode(TTrayIcon AObj);

char*
TrayIcon_ToString(TTrayIcon AObj);

uint32_t
TrayIcon_GetAnimateInterval(TTrayIcon AObj);

void
TrayIcon_SetAnimateInterval(TTrayIcon AObj, uint32_t AValue);

char*
TrayIcon_GetHint(TTrayIcon AObj);

void
TrayIcon_SetHint(TTrayIcon AObj, CChar char* AValue);

char*
TrayIcon_GetBalloonHint(TTrayIcon AObj);

void
TrayIcon_SetBalloonHint(TTrayIcon AObj, CChar char* AValue);

char*
TrayIcon_GetBalloonTitle(TTrayIcon AObj);

void
TrayIcon_SetBalloonTitle(TTrayIcon AObj, CChar char* AValue);

int32_t
TrayIcon_GetBalloonTimeout(TTrayIcon AObj);

void
TrayIcon_SetBalloonTimeout(TTrayIcon AObj, int32_t AValue);

TBalloonFlags
TrayIcon_GetBalloonFlags(TTrayIcon AObj);

void
TrayIcon_SetBalloonFlags(TTrayIcon AObj, TBalloonFlags AValue);

TIcon
TrayIcon_GetIcon(TTrayIcon AObj);

void
TrayIcon_SetIcon(TTrayIcon AObj, TIcon AValue);

TPopupMenu
TrayIcon_GetPopupMenu(TTrayIcon AObj);

void
TrayIcon_SetPopupMenu(TTrayIcon AObj, TPopupMenu AValue);

BOOL
TrayIcon_GetVisible(TTrayIcon AObj);

void
TrayIcon_SetVisible(TTrayIcon AObj, BOOL AValue);

void
TrayIcon_SetOnClick(TTrayIcon AObj, TNotifyEvent AEventData);

void
TrayIcon_SetOnDblClick(TTrayIcon AObj, TNotifyEvent AEventData);

void
TrayIcon_SetOnMouseMove(TTrayIcon AObj, TMouseMoveEvent AEventData);

void
TrayIcon_SetOnMouseUp(TTrayIcon AObj, TMouseEvent AEventData);

void
TrayIcon_SetOnMouseDown(TTrayIcon AObj, TMouseEvent AEventData);

int32_t
TrayIcon_GetComponentCount(TTrayIcon AObj);

int32_t
TrayIcon_GetComponentIndex(TTrayIcon AObj);

void
TrayIcon_SetComponentIndex(TTrayIcon AObj, int32_t AValue);

TComponent
TrayIcon_GetOwner(TTrayIcon AObj);

char*
TrayIcon_GetName(TTrayIcon AObj);

void
TrayIcon_SetName(TTrayIcon AObj, CChar char* AValue);

intptr_t
TrayIcon_GetTag(TTrayIcon AObj);

void
TrayIcon_SetTag(TTrayIcon AObj, intptr_t AValue);

TComponent
TrayIcon_GetComponents(TTrayIcon AObj, int32_t AIndex);

TClass
TrayIcon_StaticClassType();

// -------------------TOpenDialog-------------------

TOpenDialog
OpenDialog_Create(TComponent AOwner);

void
OpenDialog_Free(TOpenDialog AObj);

BOOL
OpenDialog_Execute(TOpenDialog AObj);

TComponent
OpenDialog_FindComponent(TOpenDialog AObj, CChar char* AName);

char*
OpenDialog_GetNamePath(TOpenDialog AObj);

BOOL
OpenDialog_HasParent(TOpenDialog AObj);

void
OpenDialog_Assign(TOpenDialog AObj, TObject Source);

TClass
OpenDialog_ClassType(TOpenDialog AObj);

char*
OpenDialog_ClassName(TOpenDialog AObj);

int32_t
OpenDialog_InstanceSize(TOpenDialog AObj);

BOOL
OpenDialog_InheritsFrom(TOpenDialog AObj, TClass AClass);

BOOL
OpenDialog_Equals(TOpenDialog AObj, TObject Obj);

int32_t
OpenDialog_GetHashCode(TOpenDialog AObj);

char*
OpenDialog_ToString(TOpenDialog AObj);

TStrings
OpenDialog_GetFiles(TOpenDialog AObj);

char*
OpenDialog_GetDefaultExt(TOpenDialog AObj);

void
OpenDialog_SetDefaultExt(TOpenDialog AObj, CChar char* AValue);

char*
OpenDialog_GetFileName(TOpenDialog AObj);

void
OpenDialog_SetFileName(TOpenDialog AObj, CChar char* AValue);

char*
OpenDialog_GetFilter(TOpenDialog AObj);

void
OpenDialog_SetFilter(TOpenDialog AObj, CChar char* AValue);

int32_t
OpenDialog_GetFilterIndex(TOpenDialog AObj);

void
OpenDialog_SetFilterIndex(TOpenDialog AObj, int32_t AValue);

char*
OpenDialog_GetInitialDir(TOpenDialog AObj);

void
OpenDialog_SetInitialDir(TOpenDialog AObj, CChar char* AValue);

TOpenOptions
OpenDialog_GetOptions(TOpenDialog AObj);

void
OpenDialog_SetOptions(TOpenDialog AObj, TOpenOptions AValue);

char*
OpenDialog_GetTitle(TOpenDialog AObj);

void
OpenDialog_SetTitle(TOpenDialog AObj, CChar char* AValue);

HWND
OpenDialog_GetHandle(TOpenDialog AObj);

void
OpenDialog_SetOnClose(TOpenDialog AObj, TNotifyEvent AEventData);

void
OpenDialog_SetOnShow(TOpenDialog AObj, TNotifyEvent AEventData);

int32_t
OpenDialog_GetComponentCount(TOpenDialog AObj);

int32_t
OpenDialog_GetComponentIndex(TOpenDialog AObj);

void
OpenDialog_SetComponentIndex(TOpenDialog AObj, int32_t AValue);

TComponent
OpenDialog_GetOwner(TOpenDialog AObj);

char*
OpenDialog_GetName(TOpenDialog AObj);

void
OpenDialog_SetName(TOpenDialog AObj, CChar char* AValue);

intptr_t
OpenDialog_GetTag(TOpenDialog AObj);

void
OpenDialog_SetTag(TOpenDialog AObj, intptr_t AValue);

TComponent
OpenDialog_GetComponents(TOpenDialog AObj, int32_t AIndex);

TClass
OpenDialog_StaticClassType();

// -------------------TSaveDialog-------------------

TSaveDialog
SaveDialog_Create(TComponent AOwner);

void
SaveDialog_Free(TSaveDialog AObj);

BOOL
SaveDialog_Execute(TSaveDialog AObj);

TComponent
SaveDialog_FindComponent(TSaveDialog AObj, CChar char* AName);

char*
SaveDialog_GetNamePath(TSaveDialog AObj);

BOOL
SaveDialog_HasParent(TSaveDialog AObj);

void
SaveDialog_Assign(TSaveDialog AObj, TObject Source);

TClass
SaveDialog_ClassType(TSaveDialog AObj);

char*
SaveDialog_ClassName(TSaveDialog AObj);

int32_t
SaveDialog_InstanceSize(TSaveDialog AObj);

BOOL
SaveDialog_InheritsFrom(TSaveDialog AObj, TClass AClass);

BOOL
SaveDialog_Equals(TSaveDialog AObj, TObject Obj);

int32_t
SaveDialog_GetHashCode(TSaveDialog AObj);

char*
SaveDialog_ToString(TSaveDialog AObj);

TStrings
SaveDialog_GetFiles(TSaveDialog AObj);

char*
SaveDialog_GetDefaultExt(TSaveDialog AObj);

void
SaveDialog_SetDefaultExt(TSaveDialog AObj, CChar char* AValue);

char*
SaveDialog_GetFileName(TSaveDialog AObj);

void
SaveDialog_SetFileName(TSaveDialog AObj, CChar char* AValue);

char*
SaveDialog_GetFilter(TSaveDialog AObj);

void
SaveDialog_SetFilter(TSaveDialog AObj, CChar char* AValue);

int32_t
SaveDialog_GetFilterIndex(TSaveDialog AObj);

void
SaveDialog_SetFilterIndex(TSaveDialog AObj, int32_t AValue);

char*
SaveDialog_GetInitialDir(TSaveDialog AObj);

void
SaveDialog_SetInitialDir(TSaveDialog AObj, CChar char* AValue);

TOpenOptions
SaveDialog_GetOptions(TSaveDialog AObj);

void
SaveDialog_SetOptions(TSaveDialog AObj, TOpenOptions AValue);

char*
SaveDialog_GetTitle(TSaveDialog AObj);

void
SaveDialog_SetTitle(TSaveDialog AObj, CChar char* AValue);

HWND
SaveDialog_GetHandle(TSaveDialog AObj);

void
SaveDialog_SetOnClose(TSaveDialog AObj, TNotifyEvent AEventData);

void
SaveDialog_SetOnShow(TSaveDialog AObj, TNotifyEvent AEventData);

int32_t
SaveDialog_GetComponentCount(TSaveDialog AObj);

int32_t
SaveDialog_GetComponentIndex(TSaveDialog AObj);

void
SaveDialog_SetComponentIndex(TSaveDialog AObj, int32_t AValue);

TComponent
SaveDialog_GetOwner(TSaveDialog AObj);

char*
SaveDialog_GetName(TSaveDialog AObj);

void
SaveDialog_SetName(TSaveDialog AObj, CChar char* AValue);

intptr_t
SaveDialog_GetTag(TSaveDialog AObj);

void
SaveDialog_SetTag(TSaveDialog AObj, intptr_t AValue);

TComponent
SaveDialog_GetComponents(TSaveDialog AObj, int32_t AIndex);

TClass
SaveDialog_StaticClassType();

// -------------------TColorDialog-------------------

TColorDialog
ColorDialog_Create(TComponent AOwner);

void
ColorDialog_Free(TColorDialog AObj);

BOOL
ColorDialog_Execute(TColorDialog AObj);

TComponent
ColorDialog_FindComponent(TColorDialog AObj, CChar char* AName);

char*
ColorDialog_GetNamePath(TColorDialog AObj);

BOOL
ColorDialog_HasParent(TColorDialog AObj);

void
ColorDialog_Assign(TColorDialog AObj, TObject Source);

TClass
ColorDialog_ClassType(TColorDialog AObj);

char*
ColorDialog_ClassName(TColorDialog AObj);

int32_t
ColorDialog_InstanceSize(TColorDialog AObj);

BOOL
ColorDialog_InheritsFrom(TColorDialog AObj, TClass AClass);

BOOL
ColorDialog_Equals(TColorDialog AObj, TObject Obj);

int32_t
ColorDialog_GetHashCode(TColorDialog AObj);

char*
ColorDialog_ToString(TColorDialog AObj);

TColor
ColorDialog_GetColor(TColorDialog AObj);

void
ColorDialog_SetColor(TColorDialog AObj, TColor AValue);

TStrings
ColorDialog_GetCustomColors(TColorDialog AObj);

void
ColorDialog_SetCustomColors(TColorDialog AObj, TStrings AValue);

HWND
ColorDialog_GetHandle(TColorDialog AObj);

void
ColorDialog_SetOnClose(TColorDialog AObj, TNotifyEvent AEventData);

void
ColorDialog_SetOnShow(TColorDialog AObj, TNotifyEvent AEventData);

int32_t
ColorDialog_GetComponentCount(TColorDialog AObj);

int32_t
ColorDialog_GetComponentIndex(TColorDialog AObj);

void
ColorDialog_SetComponentIndex(TColorDialog AObj, int32_t AValue);

TComponent
ColorDialog_GetOwner(TColorDialog AObj);

char*
ColorDialog_GetName(TColorDialog AObj);

void
ColorDialog_SetName(TColorDialog AObj, CChar char* AValue);

intptr_t
ColorDialog_GetTag(TColorDialog AObj);

void
ColorDialog_SetTag(TColorDialog AObj, intptr_t AValue);

TComponent
ColorDialog_GetComponents(TColorDialog AObj, int32_t AIndex);

TClass
ColorDialog_StaticClassType();

// -------------------TFontDialog-------------------

TFontDialog
FontDialog_Create(TComponent AOwner);

void
FontDialog_Free(TFontDialog AObj);

BOOL
FontDialog_Execute(TFontDialog AObj);

TComponent
FontDialog_FindComponent(TFontDialog AObj, CChar char* AName);

char*
FontDialog_GetNamePath(TFontDialog AObj);

BOOL
FontDialog_HasParent(TFontDialog AObj);

void
FontDialog_Assign(TFontDialog AObj, TObject Source);

TClass
FontDialog_ClassType(TFontDialog AObj);

char*
FontDialog_ClassName(TFontDialog AObj);

int32_t
FontDialog_InstanceSize(TFontDialog AObj);

BOOL
FontDialog_InheritsFrom(TFontDialog AObj, TClass AClass);

BOOL
FontDialog_Equals(TFontDialog AObj, TObject Obj);

int32_t
FontDialog_GetHashCode(TFontDialog AObj);

char*
FontDialog_ToString(TFontDialog AObj);

TFont
FontDialog_GetFont(TFontDialog AObj);

void
FontDialog_SetFont(TFontDialog AObj, TFont AValue);

TFontDialogOptions
FontDialog_GetOptions(TFontDialog AObj);

void
FontDialog_SetOptions(TFontDialog AObj, TFontDialogOptions AValue);

HWND
FontDialog_GetHandle(TFontDialog AObj);

void
FontDialog_SetOnClose(TFontDialog AObj, TNotifyEvent AEventData);

void
FontDialog_SetOnShow(TFontDialog AObj, TNotifyEvent AEventData);

int32_t
FontDialog_GetComponentCount(TFontDialog AObj);

int32_t
FontDialog_GetComponentIndex(TFontDialog AObj);

void
FontDialog_SetComponentIndex(TFontDialog AObj, int32_t AValue);

TComponent
FontDialog_GetOwner(TFontDialog AObj);

char*
FontDialog_GetName(TFontDialog AObj);

void
FontDialog_SetName(TFontDialog AObj, CChar char* AValue);

intptr_t
FontDialog_GetTag(TFontDialog AObj);

void
FontDialog_SetTag(TFontDialog AObj, intptr_t AValue);

TComponent
FontDialog_GetComponents(TFontDialog AObj, int32_t AIndex);

TClass
FontDialog_StaticClassType();

// -------------------TPrintDialog-------------------

TPrintDialog
PrintDialog_Create(TComponent AOwner);

void
PrintDialog_Free(TPrintDialog AObj);

BOOL
PrintDialog_Execute(TPrintDialog AObj);

TComponent
PrintDialog_FindComponent(TPrintDialog AObj, CChar char* AName);

char*
PrintDialog_GetNamePath(TPrintDialog AObj);

BOOL
PrintDialog_HasParent(TPrintDialog AObj);

void
PrintDialog_Assign(TPrintDialog AObj, TObject Source);

TClass
PrintDialog_ClassType(TPrintDialog AObj);

char*
PrintDialog_ClassName(TPrintDialog AObj);

int32_t
PrintDialog_InstanceSize(TPrintDialog AObj);

BOOL
PrintDialog_InheritsFrom(TPrintDialog AObj, TClass AClass);

BOOL
PrintDialog_Equals(TPrintDialog AObj, TObject Obj);

int32_t
PrintDialog_GetHashCode(TPrintDialog AObj);

char*
PrintDialog_ToString(TPrintDialog AObj);

BOOL
PrintDialog_GetCollate(TPrintDialog AObj);

void
PrintDialog_SetCollate(TPrintDialog AObj, BOOL AValue);

int32_t
PrintDialog_GetCopies(TPrintDialog AObj);

void
PrintDialog_SetCopies(TPrintDialog AObj, int32_t AValue);

int32_t
PrintDialog_GetFromPage(TPrintDialog AObj);

void
PrintDialog_SetFromPage(TPrintDialog AObj, int32_t AValue);

int32_t
PrintDialog_GetMinPage(TPrintDialog AObj);

void
PrintDialog_SetMinPage(TPrintDialog AObj, int32_t AValue);

int32_t
PrintDialog_GetMaxPage(TPrintDialog AObj);

void
PrintDialog_SetMaxPage(TPrintDialog AObj, int32_t AValue);

TPrintDialogOptions
PrintDialog_GetOptions(TPrintDialog AObj);

void
PrintDialog_SetOptions(TPrintDialog AObj, TPrintDialogOptions AValue);

BOOL
PrintDialog_GetPrintToFile(TPrintDialog AObj);

void
PrintDialog_SetPrintToFile(TPrintDialog AObj, BOOL AValue);

TPrintRange
PrintDialog_GetPrintRange(TPrintDialog AObj);

void
PrintDialog_SetPrintRange(TPrintDialog AObj, TPrintRange AValue);

int32_t
PrintDialog_GetToPage(TPrintDialog AObj);

void
PrintDialog_SetToPage(TPrintDialog AObj, int32_t AValue);

HWND
PrintDialog_GetHandle(TPrintDialog AObj);

void
PrintDialog_SetOnClose(TPrintDialog AObj, TNotifyEvent AEventData);

void
PrintDialog_SetOnShow(TPrintDialog AObj, TNotifyEvent AEventData);

int32_t
PrintDialog_GetComponentCount(TPrintDialog AObj);

int32_t
PrintDialog_GetComponentIndex(TPrintDialog AObj);

void
PrintDialog_SetComponentIndex(TPrintDialog AObj, int32_t AValue);

TComponent
PrintDialog_GetOwner(TPrintDialog AObj);

char*
PrintDialog_GetName(TPrintDialog AObj);

void
PrintDialog_SetName(TPrintDialog AObj, CChar char* AValue);

intptr_t
PrintDialog_GetTag(TPrintDialog AObj);

void
PrintDialog_SetTag(TPrintDialog AObj, intptr_t AValue);

TComponent
PrintDialog_GetComponents(TPrintDialog AObj, int32_t AIndex);

TClass
PrintDialog_StaticClassType();

// -------------------TOpenPictureDialog-------------------

TOpenPictureDialog
OpenPictureDialog_Create(TComponent AOwner);

void
OpenPictureDialog_Free(TOpenPictureDialog AObj);

BOOL
OpenPictureDialog_Execute(TOpenPictureDialog AObj);

TComponent
OpenPictureDialog_FindComponent(TOpenPictureDialog AObj, CChar char* AName);

char*
OpenPictureDialog_GetNamePath(TOpenPictureDialog AObj);

BOOL
OpenPictureDialog_HasParent(TOpenPictureDialog AObj);

void
OpenPictureDialog_Assign(TOpenPictureDialog AObj, TObject Source);

TClass
OpenPictureDialog_ClassType(TOpenPictureDialog AObj);

char*
OpenPictureDialog_ClassName(TOpenPictureDialog AObj);

int32_t
OpenPictureDialog_InstanceSize(TOpenPictureDialog AObj);

BOOL
OpenPictureDialog_InheritsFrom(TOpenPictureDialog AObj, TClass AClass);

BOOL
OpenPictureDialog_Equals(TOpenPictureDialog AObj, TObject Obj);

int32_t
OpenPictureDialog_GetHashCode(TOpenPictureDialog AObj);

char*
OpenPictureDialog_ToString(TOpenPictureDialog AObj);

char*
OpenPictureDialog_GetFilter(TOpenPictureDialog AObj);

void
OpenPictureDialog_SetFilter(TOpenPictureDialog AObj, CChar char* AValue);

TStrings
OpenPictureDialog_GetFiles(TOpenPictureDialog AObj);

char*
OpenPictureDialog_GetDefaultExt(TOpenPictureDialog AObj);

void
OpenPictureDialog_SetDefaultExt(TOpenPictureDialog AObj, CChar char* AValue);

char*
OpenPictureDialog_GetFileName(TOpenPictureDialog AObj);

void
OpenPictureDialog_SetFileName(TOpenPictureDialog AObj, CChar char* AValue);

int32_t
OpenPictureDialog_GetFilterIndex(TOpenPictureDialog AObj);

void
OpenPictureDialog_SetFilterIndex(TOpenPictureDialog AObj, int32_t AValue);

char*
OpenPictureDialog_GetInitialDir(TOpenPictureDialog AObj);

void
OpenPictureDialog_SetInitialDir(TOpenPictureDialog AObj, CChar char* AValue);

TOpenOptions
OpenPictureDialog_GetOptions(TOpenPictureDialog AObj);

void
OpenPictureDialog_SetOptions(TOpenPictureDialog AObj, TOpenOptions AValue);

char*
OpenPictureDialog_GetTitle(TOpenPictureDialog AObj);

void
OpenPictureDialog_SetTitle(TOpenPictureDialog AObj, CChar char* AValue);

HWND
OpenPictureDialog_GetHandle(TOpenPictureDialog AObj);

void
OpenPictureDialog_SetOnClose(TOpenPictureDialog AObj, TNotifyEvent AEventData);

void
OpenPictureDialog_SetOnShow(TOpenPictureDialog AObj, TNotifyEvent AEventData);

int32_t
OpenPictureDialog_GetComponentCount(TOpenPictureDialog AObj);

int32_t
OpenPictureDialog_GetComponentIndex(TOpenPictureDialog AObj);

void
OpenPictureDialog_SetComponentIndex(TOpenPictureDialog AObj, int32_t AValue);

TComponent
OpenPictureDialog_GetOwner(TOpenPictureDialog AObj);

char*
OpenPictureDialog_GetName(TOpenPictureDialog AObj);

void
OpenPictureDialog_SetName(TOpenPictureDialog AObj, CChar char* AValue);

intptr_t
OpenPictureDialog_GetTag(TOpenPictureDialog AObj);

void
OpenPictureDialog_SetTag(TOpenPictureDialog AObj, intptr_t AValue);

TComponent
OpenPictureDialog_GetComponents(TOpenPictureDialog AObj, int32_t AIndex);

TClass
OpenPictureDialog_StaticClassType();

// -------------------TSavePictureDialog-------------------

TSavePictureDialog
SavePictureDialog_Create(TComponent AOwner);

void
SavePictureDialog_Free(TSavePictureDialog AObj);

BOOL
SavePictureDialog_Execute(TSavePictureDialog AObj);

TComponent
SavePictureDialog_FindComponent(TSavePictureDialog AObj, CChar char* AName);

char*
SavePictureDialog_GetNamePath(TSavePictureDialog AObj);

BOOL
SavePictureDialog_HasParent(TSavePictureDialog AObj);

void
SavePictureDialog_Assign(TSavePictureDialog AObj, TObject Source);

TClass
SavePictureDialog_ClassType(TSavePictureDialog AObj);

char*
SavePictureDialog_ClassName(TSavePictureDialog AObj);

int32_t
SavePictureDialog_InstanceSize(TSavePictureDialog AObj);

BOOL
SavePictureDialog_InheritsFrom(TSavePictureDialog AObj, TClass AClass);

BOOL
SavePictureDialog_Equals(TSavePictureDialog AObj, TObject Obj);

int32_t
SavePictureDialog_GetHashCode(TSavePictureDialog AObj);

char*
SavePictureDialog_ToString(TSavePictureDialog AObj);

char*
SavePictureDialog_GetFilter(TSavePictureDialog AObj);

void
SavePictureDialog_SetFilter(TSavePictureDialog AObj, CChar char* AValue);

TStrings
SavePictureDialog_GetFiles(TSavePictureDialog AObj);

char*
SavePictureDialog_GetDefaultExt(TSavePictureDialog AObj);

void
SavePictureDialog_SetDefaultExt(TSavePictureDialog AObj, CChar char* AValue);

char*
SavePictureDialog_GetFileName(TSavePictureDialog AObj);

void
SavePictureDialog_SetFileName(TSavePictureDialog AObj, CChar char* AValue);

int32_t
SavePictureDialog_GetFilterIndex(TSavePictureDialog AObj);

void
SavePictureDialog_SetFilterIndex(TSavePictureDialog AObj, int32_t AValue);

char*
SavePictureDialog_GetInitialDir(TSavePictureDialog AObj);

void
SavePictureDialog_SetInitialDir(TSavePictureDialog AObj, CChar char* AValue);

TOpenOptions
SavePictureDialog_GetOptions(TSavePictureDialog AObj);

void
SavePictureDialog_SetOptions(TSavePictureDialog AObj, TOpenOptions AValue);

char*
SavePictureDialog_GetTitle(TSavePictureDialog AObj);

void
SavePictureDialog_SetTitle(TSavePictureDialog AObj, CChar char* AValue);

HWND
SavePictureDialog_GetHandle(TSavePictureDialog AObj);

void
SavePictureDialog_SetOnClose(TSavePictureDialog AObj, TNotifyEvent AEventData);

void
SavePictureDialog_SetOnShow(TSavePictureDialog AObj, TNotifyEvent AEventData);

int32_t
SavePictureDialog_GetComponentCount(TSavePictureDialog AObj);

int32_t
SavePictureDialog_GetComponentIndex(TSavePictureDialog AObj);

void
SavePictureDialog_SetComponentIndex(TSavePictureDialog AObj, int32_t AValue);

TComponent
SavePictureDialog_GetOwner(TSavePictureDialog AObj);

char*
SavePictureDialog_GetName(TSavePictureDialog AObj);

void
SavePictureDialog_SetName(TSavePictureDialog AObj, CChar char* AValue);

intptr_t
SavePictureDialog_GetTag(TSavePictureDialog AObj);

void
SavePictureDialog_SetTag(TSavePictureDialog AObj, intptr_t AValue);

TComponent
SavePictureDialog_GetComponents(TSavePictureDialog AObj, int32_t AIndex);

TClass
SavePictureDialog_StaticClassType();

// -------------------TSelectDirectoryDialog-------------------

TSelectDirectoryDialog
SelectDirectoryDialog_Create(TComponent AOwner);

void
SelectDirectoryDialog_Free(TSelectDirectoryDialog AObj);

BOOL
SelectDirectoryDialog_Execute(TSelectDirectoryDialog AObj);

TComponent
SelectDirectoryDialog_FindComponent(TSelectDirectoryDialog AObj, CChar char* AName);

char*
SelectDirectoryDialog_GetNamePath(TSelectDirectoryDialog AObj);

BOOL
SelectDirectoryDialog_HasParent(TSelectDirectoryDialog AObj);

void
SelectDirectoryDialog_Assign(TSelectDirectoryDialog AObj, TObject Source);

TClass
SelectDirectoryDialog_ClassType(TSelectDirectoryDialog AObj);

char*
SelectDirectoryDialog_ClassName(TSelectDirectoryDialog AObj);

int32_t
SelectDirectoryDialog_InstanceSize(TSelectDirectoryDialog AObj);

BOOL
SelectDirectoryDialog_InheritsFrom(TSelectDirectoryDialog AObj, TClass AClass);

BOOL
SelectDirectoryDialog_Equals(TSelectDirectoryDialog AObj, TObject Obj);

int32_t
SelectDirectoryDialog_GetHashCode(TSelectDirectoryDialog AObj);

char*
SelectDirectoryDialog_ToString(TSelectDirectoryDialog AObj);

TStrings
SelectDirectoryDialog_GetFiles(TSelectDirectoryDialog AObj);

char*
SelectDirectoryDialog_GetDefaultExt(TSelectDirectoryDialog AObj);

void
SelectDirectoryDialog_SetDefaultExt(TSelectDirectoryDialog AObj, CChar char* AValue);

char*
SelectDirectoryDialog_GetFileName(TSelectDirectoryDialog AObj);

void
SelectDirectoryDialog_SetFileName(TSelectDirectoryDialog AObj, CChar char* AValue);

char*
SelectDirectoryDialog_GetFilter(TSelectDirectoryDialog AObj);

void
SelectDirectoryDialog_SetFilter(TSelectDirectoryDialog AObj, CChar char* AValue);

int32_t
SelectDirectoryDialog_GetFilterIndex(TSelectDirectoryDialog AObj);

void
SelectDirectoryDialog_SetFilterIndex(TSelectDirectoryDialog AObj, int32_t AValue);

char*
SelectDirectoryDialog_GetInitialDir(TSelectDirectoryDialog AObj);

void
SelectDirectoryDialog_SetInitialDir(TSelectDirectoryDialog AObj, CChar char* AValue);

TOpenOptions
SelectDirectoryDialog_GetOptions(TSelectDirectoryDialog AObj);

void
SelectDirectoryDialog_SetOptions(TSelectDirectoryDialog AObj, TOpenOptions AValue);

char*
SelectDirectoryDialog_GetTitle(TSelectDirectoryDialog AObj);

void
SelectDirectoryDialog_SetTitle(TSelectDirectoryDialog AObj, CChar char* AValue);

HWND
SelectDirectoryDialog_GetHandle(TSelectDirectoryDialog AObj);

void
SelectDirectoryDialog_SetOnClose(TSelectDirectoryDialog AObj, TNotifyEvent AEventData);

void
SelectDirectoryDialog_SetOnShow(TSelectDirectoryDialog AObj, TNotifyEvent AEventData);

int32_t
SelectDirectoryDialog_GetComponentCount(TSelectDirectoryDialog AObj);

int32_t
SelectDirectoryDialog_GetComponentIndex(TSelectDirectoryDialog AObj);

void
SelectDirectoryDialog_SetComponentIndex(TSelectDirectoryDialog AObj, int32_t AValue);

TComponent
SelectDirectoryDialog_GetOwner(TSelectDirectoryDialog AObj);

char*
SelectDirectoryDialog_GetName(TSelectDirectoryDialog AObj);

void
SelectDirectoryDialog_SetName(TSelectDirectoryDialog AObj, CChar char* AValue);

intptr_t
SelectDirectoryDialog_GetTag(TSelectDirectoryDialog AObj);

void
SelectDirectoryDialog_SetTag(TSelectDirectoryDialog AObj, intptr_t AValue);

TComponent
SelectDirectoryDialog_GetComponents(TSelectDirectoryDialog AObj, int32_t AIndex);

TClass
SelectDirectoryDialog_StaticClassType();

// -------------------TRichEdit-------------------

TRichEdit
RichEdit_Create(TComponent AOwner);

void
RichEdit_Free(TRichEdit AObj);

void
RichEdit_Clear(TRichEdit AObj);

int32_t
RichEdit_FindText(TRichEdit AObj, CChar char* SearchStr, int32_t StartPos, int32_t Length, TSearchTypes Options);

void
RichEdit_ClearSelection(TRichEdit AObj);

void
RichEdit_CopyToClipboard(TRichEdit AObj);

void
RichEdit_CutToClipboard(TRichEdit AObj);

void
RichEdit_PasteFromClipboard(TRichEdit AObj);

void
RichEdit_Undo(TRichEdit AObj);

void
RichEdit_SelectAll(TRichEdit AObj);

BOOL
RichEdit_CanFocus(TRichEdit AObj);

BOOL
RichEdit_ContainsControl(TRichEdit AObj, TControl Control);

TControl
RichEdit_ControlAtPos(TRichEdit AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
RichEdit_DisableAlign(TRichEdit AObj);

void
RichEdit_EnableAlign(TRichEdit AObj);

TControl
RichEdit_FindChildControl(TRichEdit AObj, CChar char* ControlName);

void
RichEdit_FlipChildren(TRichEdit AObj, BOOL AllLevels);

BOOL
RichEdit_Focused(TRichEdit AObj);

BOOL
RichEdit_HandleAllocated(TRichEdit AObj);

void
RichEdit_InsertControl(TRichEdit AObj, TControl AControl);

void
RichEdit_Invalidate(TRichEdit AObj);

void
RichEdit_PaintTo(TRichEdit AObj, HDC DC, int32_t X, int32_t Y);

void
RichEdit_RemoveControl(TRichEdit AObj, TControl AControl);

void
RichEdit_Realign(TRichEdit AObj);

void
RichEdit_Repaint(TRichEdit AObj);

void
RichEdit_ScaleBy(TRichEdit AObj, int32_t M, int32_t D);

void
RichEdit_ScrollBy(TRichEdit AObj, int32_t DeltaX, int32_t DeltaY);

void
RichEdit_SetBounds(TRichEdit AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
RichEdit_SetFocus(TRichEdit AObj);

void
RichEdit_Update(TRichEdit AObj);

void
RichEdit_BringToFront(TRichEdit AObj);

TPoint
RichEdit_ClientToScreen(TRichEdit AObj, TPoint Point);

TPoint
RichEdit_ClientToParent(TRichEdit AObj, TPoint Point, TWinControl AParent);

BOOL
RichEdit_Dragging(TRichEdit AObj);

BOOL
RichEdit_HasParent(TRichEdit AObj);

void
RichEdit_Hide(TRichEdit AObj);

intptr_t
RichEdit_Perform(TRichEdit AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
RichEdit_Refresh(TRichEdit AObj);

TPoint
RichEdit_ScreenToClient(TRichEdit AObj, TPoint Point);

TPoint
RichEdit_ParentToClient(TRichEdit AObj, TPoint Point, TWinControl AParent);

void
RichEdit_SendToBack(TRichEdit AObj);

void
RichEdit_Show(TRichEdit AObj);

int32_t
RichEdit_GetTextBuf(TRichEdit AObj, CChar char* Buffer, int32_t BufSize);

int32_t
RichEdit_GetTextLen(TRichEdit AObj);

void
RichEdit_SetTextBuf(TRichEdit AObj, CChar char* Buffer);

TComponent
RichEdit_FindComponent(TRichEdit AObj, CChar char* AName);

char*
RichEdit_GetNamePath(TRichEdit AObj);

void
RichEdit_Assign(TRichEdit AObj, TObject Source);

TClass
RichEdit_ClassType(TRichEdit AObj);

char*
RichEdit_ClassName(TRichEdit AObj);

int32_t
RichEdit_InstanceSize(TRichEdit AObj);

BOOL
RichEdit_InheritsFrom(TRichEdit AObj, TClass AClass);

BOOL
RichEdit_Equals(TRichEdit AObj, TObject Obj);

int32_t
RichEdit_GetHashCode(TRichEdit AObj);

char*
RichEdit_ToString(TRichEdit AObj);

void
RichEdit_AnchorToNeighbour(TRichEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
RichEdit_AnchorParallel(TRichEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
RichEdit_AnchorHorizontalCenterTo(TRichEdit AObj, TControl ASibling);

void
RichEdit_AnchorVerticalCenterTo(TRichEdit AObj, TControl ASibling);

void
RichEdit_AnchorSame(TRichEdit AObj, TAnchorKind ASide, TControl ASibling);

void
RichEdit_AnchorAsAlign(TRichEdit AObj, TAlign ATheAlign, int32_t ASpace);

void
RichEdit_AnchorClient(TRichEdit AObj, int32_t ASpace);

int32_t
RichEdit_ScaleDesignToForm(TRichEdit AObj, int32_t ASize);

int32_t
RichEdit_ScaleFormToDesign(TRichEdit AObj, int32_t ASize);

int32_t
RichEdit_Scale96ToForm(TRichEdit AObj, int32_t ASize);

int32_t
RichEdit_ScaleFormTo96(TRichEdit AObj, int32_t ASize);

int32_t
RichEdit_Scale96ToFont(TRichEdit AObj, int32_t ASize);

int32_t
RichEdit_ScaleFontTo96(TRichEdit AObj, int32_t ASize);

int32_t
RichEdit_ScaleScreenToFont(TRichEdit AObj, int32_t ASize);

int32_t
RichEdit_ScaleFontToScreen(TRichEdit AObj, int32_t ASize);

int32_t
RichEdit_Scale96ToScreen(TRichEdit AObj, int32_t ASize);

int32_t
RichEdit_ScaleScreenTo96(TRichEdit AObj, int32_t ASize);

void
RichEdit_AutoAdjustLayout(TRichEdit AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
RichEdit_FixDesignFontsPPI(TRichEdit AObj, int32_t ADesignTimePPI);

void
RichEdit_ScaleFontsPPI(TRichEdit AObj, int32_t AToPPI, double AProportion);

TAlign
RichEdit_GetAlign(TRichEdit AObj);

void
RichEdit_SetAlign(TRichEdit AObj, TAlign AValue);

TAlignment
RichEdit_GetAlignment(TRichEdit AObj);

void
RichEdit_SetAlignment(TRichEdit AObj, TAlignment AValue);

TAnchors
RichEdit_GetAnchors(TRichEdit AObj);

void
RichEdit_SetAnchors(TRichEdit AObj, TAnchors AValue);

TBiDiMode
RichEdit_GetBiDiMode(TRichEdit AObj);

void
RichEdit_SetBiDiMode(TRichEdit AObj, TBiDiMode AValue);

TBorderStyle
RichEdit_GetBorderStyle(TRichEdit AObj);

void
RichEdit_SetBorderStyle(TRichEdit AObj, TBorderStyle AValue);

int32_t
RichEdit_GetBorderWidth(TRichEdit AObj);

void
RichEdit_SetBorderWidth(TRichEdit AObj, int32_t AValue);

TColor
RichEdit_GetColor(TRichEdit AObj);

void
RichEdit_SetColor(TRichEdit AObj, TColor AValue);

TCursor
RichEdit_GetDragCursor(TRichEdit AObj);

void
RichEdit_SetDragCursor(TRichEdit AObj, TCursor AValue);

TDragKind
RichEdit_GetDragKind(TRichEdit AObj);

void
RichEdit_SetDragKind(TRichEdit AObj, TDragKind AValue);

TDragMode
RichEdit_GetDragMode(TRichEdit AObj);

void
RichEdit_SetDragMode(TRichEdit AObj, TDragMode AValue);

BOOL
RichEdit_GetEnabled(TRichEdit AObj);

void
RichEdit_SetEnabled(TRichEdit AObj, BOOL AValue);

TFont
RichEdit_GetFont(TRichEdit AObj);

void
RichEdit_SetFont(TRichEdit AObj, TFont AValue);

BOOL
RichEdit_GetHideSelection(TRichEdit AObj);

void
RichEdit_SetHideSelection(TRichEdit AObj, BOOL AValue);

TSizeConstraints
RichEdit_GetConstraints(TRichEdit AObj);

void
RichEdit_SetConstraints(TRichEdit AObj, TSizeConstraints AValue);

TStrings
RichEdit_GetLines(TRichEdit AObj);

void
RichEdit_SetLines(TRichEdit AObj, TStrings AValue);

int32_t
RichEdit_GetMaxLength(TRichEdit AObj);

void
RichEdit_SetMaxLength(TRichEdit AObj, int32_t AValue);

BOOL
RichEdit_GetParentColor(TRichEdit AObj);

void
RichEdit_SetParentColor(TRichEdit AObj, BOOL AValue);

BOOL
RichEdit_GetParentFont(TRichEdit AObj);

void
RichEdit_SetParentFont(TRichEdit AObj, BOOL AValue);

BOOL
RichEdit_GetParentShowHint(TRichEdit AObj);

void
RichEdit_SetParentShowHint(TRichEdit AObj, BOOL AValue);

TPopupMenu
RichEdit_GetPopupMenu(TRichEdit AObj);

void
RichEdit_SetPopupMenu(TRichEdit AObj, TPopupMenu AValue);

BOOL
RichEdit_GetReadOnly(TRichEdit AObj);

void
RichEdit_SetReadOnly(TRichEdit AObj, BOOL AValue);

TScrollStyle
RichEdit_GetScrollBars(TRichEdit AObj);

void
RichEdit_SetScrollBars(TRichEdit AObj, TScrollStyle AValue);

BOOL
RichEdit_GetShowHint(TRichEdit AObj);

void
RichEdit_SetShowHint(TRichEdit AObj, BOOL AValue);

TTabOrder
RichEdit_GetTabOrder(TRichEdit AObj);

void
RichEdit_SetTabOrder(TRichEdit AObj, TTabOrder AValue);

BOOL
RichEdit_GetTabStop(TRichEdit AObj);

void
RichEdit_SetTabStop(TRichEdit AObj, BOOL AValue);

BOOL
RichEdit_GetVisible(TRichEdit AObj);

void
RichEdit_SetVisible(TRichEdit AObj, BOOL AValue);

BOOL
RichEdit_GetWantTabs(TRichEdit AObj);

void
RichEdit_SetWantTabs(TRichEdit AObj, BOOL AValue);

BOOL
RichEdit_GetWantReturns(TRichEdit AObj);

void
RichEdit_SetWantReturns(TRichEdit AObj, BOOL AValue);

BOOL
RichEdit_GetWordWrap(TRichEdit AObj);

void
RichEdit_SetWordWrap(TRichEdit AObj, BOOL AValue);

int32_t
RichEdit_GetZoom(TRichEdit AObj);

void
RichEdit_SetZoom(TRichEdit AObj, int32_t AValue);

void
RichEdit_SetOnChange(TRichEdit AObj, TNotifyEvent AEventData);

void
RichEdit_SetOnClick(TRichEdit AObj, TNotifyEvent AEventData);

void
RichEdit_SetOnContextPopup(TRichEdit AObj, TContextPopupEvent AEventData);

void
RichEdit_SetOnDblClick(TRichEdit AObj, TNotifyEvent AEventData);

void
RichEdit_SetOnDragDrop(TRichEdit AObj, TDragDropEvent AEventData);

void
RichEdit_SetOnDragOver(TRichEdit AObj, TDragOverEvent AEventData);

void
RichEdit_SetOnEndDrag(TRichEdit AObj, TEndDragEvent AEventData);

void
RichEdit_SetOnEnter(TRichEdit AObj, TNotifyEvent AEventData);

void
RichEdit_SetOnExit(TRichEdit AObj, TNotifyEvent AEventData);

void
RichEdit_SetOnKeyDown(TRichEdit AObj, TKeyEvent AEventData);

void
RichEdit_SetOnKeyPress(TRichEdit AObj, TKeyPressEvent AEventData);

void
RichEdit_SetOnKeyUp(TRichEdit AObj, TKeyEvent AEventData);

void
RichEdit_SetOnMouseDown(TRichEdit AObj, TMouseEvent AEventData);

void
RichEdit_SetOnMouseEnter(TRichEdit AObj, TNotifyEvent AEventData);

void
RichEdit_SetOnMouseLeave(TRichEdit AObj, TNotifyEvent AEventData);

void
RichEdit_SetOnMouseMove(TRichEdit AObj, TMouseMoveEvent AEventData);

void
RichEdit_SetOnMouseUp(TRichEdit AObj, TMouseEvent AEventData);

void
RichEdit_SetOnMouseWheel(TRichEdit AObj, TMouseWheelEvent AEventData);

void
RichEdit_SetOnMouseWheelDown(TRichEdit AObj, TMouseWheelUpDownEvent AEventData);

void
RichEdit_SetOnMouseWheelUp(TRichEdit AObj, TMouseWheelUpDownEvent AEventData);

TTextAttributes
RichEdit_GetDefAttributes(TRichEdit AObj);

void
RichEdit_SetDefAttributes(TRichEdit AObj, TTextAttributes AValue);

TTextAttributes
RichEdit_GetSelAttributes(TRichEdit AObj);

void
RichEdit_SetSelAttributes(TRichEdit AObj, TTextAttributes AValue);

TParaAttributes
RichEdit_GetParagraph(TRichEdit AObj);

TPoint
RichEdit_GetCaretPos(TRichEdit AObj);

void
RichEdit_SetCaretPos(TRichEdit AObj, TPoint AValue);

BOOL
RichEdit_GetCanUndo(TRichEdit AObj);

BOOL
RichEdit_GetModified(TRichEdit AObj);

void
RichEdit_SetModified(TRichEdit AObj, BOOL AValue);

int32_t
RichEdit_GetSelLength(TRichEdit AObj);

void
RichEdit_SetSelLength(TRichEdit AObj, int32_t AValue);

int32_t
RichEdit_GetSelStart(TRichEdit AObj);

void
RichEdit_SetSelStart(TRichEdit AObj, int32_t AValue);

char*
RichEdit_GetSelText(TRichEdit AObj);

void
RichEdit_SetSelText(TRichEdit AObj, CChar char* AValue);

char*
RichEdit_GetText(TRichEdit AObj);

void
RichEdit_SetText(TRichEdit AObj, CChar char* AValue);

char*
RichEdit_GetTextHint(TRichEdit AObj);

void
RichEdit_SetTextHint(TRichEdit AObj, CChar char* AValue);

int32_t
RichEdit_GetDockClientCount(TRichEdit AObj);

BOOL
RichEdit_GetDockSite(TRichEdit AObj);

void
RichEdit_SetDockSite(TRichEdit AObj, BOOL AValue);

BOOL
RichEdit_GetDoubleBuffered(TRichEdit AObj);

void
RichEdit_SetDoubleBuffered(TRichEdit AObj, BOOL AValue);

BOOL
RichEdit_GetMouseInClient(TRichEdit AObj);

int32_t
RichEdit_GetVisibleDockClientCount(TRichEdit AObj);

TBrush
RichEdit_GetBrush(TRichEdit AObj);

int32_t
RichEdit_GetControlCount(TRichEdit AObj);

HWND
RichEdit_GetHandle(TRichEdit AObj);

BOOL
RichEdit_GetParentDoubleBuffered(TRichEdit AObj);

void
RichEdit_SetParentDoubleBuffered(TRichEdit AObj, BOOL AValue);

HWND
RichEdit_GetParentWindow(TRichEdit AObj);

void
RichEdit_SetParentWindow(TRichEdit AObj, HWND AValue);

BOOL
RichEdit_GetShowing(TRichEdit AObj);

BOOL
RichEdit_GetUseDockManager(TRichEdit AObj);

void
RichEdit_SetUseDockManager(TRichEdit AObj, BOOL AValue);

TAction
RichEdit_GetAction(TRichEdit AObj);

void
RichEdit_SetAction(TRichEdit AObj, TAction AValue);

TRect
RichEdit_GetBoundsRect(TRichEdit AObj);

void
RichEdit_SetBoundsRect(TRichEdit AObj, TRect AValue);

int32_t
RichEdit_GetClientHeight(TRichEdit AObj);

void
RichEdit_SetClientHeight(TRichEdit AObj, int32_t AValue);

TPoint
RichEdit_GetClientOrigin(TRichEdit AObj);

TRect
RichEdit_GetClientRect(TRichEdit AObj);

int32_t
RichEdit_GetClientWidth(TRichEdit AObj);

void
RichEdit_SetClientWidth(TRichEdit AObj, int32_t AValue);

TControlState
RichEdit_GetControlState(TRichEdit AObj);

void
RichEdit_SetControlState(TRichEdit AObj, TControlState AValue);

TControlStyle
RichEdit_GetControlStyle(TRichEdit AObj);

void
RichEdit_SetControlStyle(TRichEdit AObj, TControlStyle AValue);

BOOL
RichEdit_GetFloating(TRichEdit AObj);

TWinControl
RichEdit_GetParent(TRichEdit AObj);

void
RichEdit_SetParent(TRichEdit AObj, TWinControl AValue);

int32_t
RichEdit_GetLeft(TRichEdit AObj);

void
RichEdit_SetLeft(TRichEdit AObj, int32_t AValue);

int32_t
RichEdit_GetTop(TRichEdit AObj);

void
RichEdit_SetTop(TRichEdit AObj, int32_t AValue);

int32_t
RichEdit_GetWidth(TRichEdit AObj);

void
RichEdit_SetWidth(TRichEdit AObj, int32_t AValue);

int32_t
RichEdit_GetHeight(TRichEdit AObj);

void
RichEdit_SetHeight(TRichEdit AObj, int32_t AValue);

TCursor
RichEdit_GetCursor(TRichEdit AObj);

void
RichEdit_SetCursor(TRichEdit AObj, TCursor AValue);

char*
RichEdit_GetHint(TRichEdit AObj);

void
RichEdit_SetHint(TRichEdit AObj, CChar char* AValue);

int32_t
RichEdit_GetComponentCount(TRichEdit AObj);

int32_t
RichEdit_GetComponentIndex(TRichEdit AObj);

void
RichEdit_SetComponentIndex(TRichEdit AObj, int32_t AValue);

TComponent
RichEdit_GetOwner(TRichEdit AObj);

char*
RichEdit_GetName(TRichEdit AObj);

void
RichEdit_SetName(TRichEdit AObj, CChar char* AValue);

intptr_t
RichEdit_GetTag(TRichEdit AObj);

void
RichEdit_SetTag(TRichEdit AObj, intptr_t AValue);

TAnchorSide
RichEdit_GetAnchorSideLeft(TRichEdit AObj);

void
RichEdit_SetAnchorSideLeft(TRichEdit AObj, TAnchorSide AValue);

TAnchorSide
RichEdit_GetAnchorSideTop(TRichEdit AObj);

void
RichEdit_SetAnchorSideTop(TRichEdit AObj, TAnchorSide AValue);

TAnchorSide
RichEdit_GetAnchorSideRight(TRichEdit AObj);

void
RichEdit_SetAnchorSideRight(TRichEdit AObj, TAnchorSide AValue);

TAnchorSide
RichEdit_GetAnchorSideBottom(TRichEdit AObj);

void
RichEdit_SetAnchorSideBottom(TRichEdit AObj, TAnchorSide AValue);

TControlChildSizing
RichEdit_GetChildSizing(TRichEdit AObj);

void
RichEdit_SetChildSizing(TRichEdit AObj, TControlChildSizing AValue);

TControlBorderSpacing
RichEdit_GetBorderSpacing(TRichEdit AObj);

void
RichEdit_SetBorderSpacing(TRichEdit AObj, TControlBorderSpacing AValue);

TControl
RichEdit_GetDockClients(TRichEdit AObj, int32_t Index);

TControl
RichEdit_GetControls(TRichEdit AObj, int32_t Index);

TComponent
RichEdit_GetComponents(TRichEdit AObj, int32_t AIndex);

TAnchorSide
RichEdit_GetAnchorSide(TRichEdit AObj, TAnchorKind AKind);

TClass
RichEdit_StaticClassType();

// -------------------TTrackBar-------------------

TTrackBar
TrackBar_Create(TComponent AOwner);

void
TrackBar_Free(TTrackBar AObj);

void
TrackBar_SetTick(TTrackBar AObj, int32_t Value);

BOOL
TrackBar_CanFocus(TTrackBar AObj);

BOOL
TrackBar_ContainsControl(TTrackBar AObj, TControl Control);

TControl
TrackBar_ControlAtPos(TTrackBar AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
TrackBar_DisableAlign(TTrackBar AObj);

void
TrackBar_EnableAlign(TTrackBar AObj);

TControl
TrackBar_FindChildControl(TTrackBar AObj, CChar char* ControlName);

void
TrackBar_FlipChildren(TTrackBar AObj, BOOL AllLevels);

BOOL
TrackBar_Focused(TTrackBar AObj);

BOOL
TrackBar_HandleAllocated(TTrackBar AObj);

void
TrackBar_InsertControl(TTrackBar AObj, TControl AControl);

void
TrackBar_Invalidate(TTrackBar AObj);

void
TrackBar_PaintTo(TTrackBar AObj, HDC DC, int32_t X, int32_t Y);

void
TrackBar_RemoveControl(TTrackBar AObj, TControl AControl);

void
TrackBar_Realign(TTrackBar AObj);

void
TrackBar_Repaint(TTrackBar AObj);

void
TrackBar_ScaleBy(TTrackBar AObj, int32_t M, int32_t D);

void
TrackBar_ScrollBy(TTrackBar AObj, int32_t DeltaX, int32_t DeltaY);

void
TrackBar_SetBounds(TTrackBar AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
TrackBar_SetFocus(TTrackBar AObj);

void
TrackBar_Update(TTrackBar AObj);

void
TrackBar_BringToFront(TTrackBar AObj);

TPoint
TrackBar_ClientToScreen(TTrackBar AObj, TPoint Point);

TPoint
TrackBar_ClientToParent(TTrackBar AObj, TPoint Point, TWinControl AParent);

BOOL
TrackBar_Dragging(TTrackBar AObj);

BOOL
TrackBar_HasParent(TTrackBar AObj);

void
TrackBar_Hide(TTrackBar AObj);

intptr_t
TrackBar_Perform(TTrackBar AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
TrackBar_Refresh(TTrackBar AObj);

TPoint
TrackBar_ScreenToClient(TTrackBar AObj, TPoint Point);

TPoint
TrackBar_ParentToClient(TTrackBar AObj, TPoint Point, TWinControl AParent);

void
TrackBar_SendToBack(TTrackBar AObj);

void
TrackBar_Show(TTrackBar AObj);

int32_t
TrackBar_GetTextBuf(TTrackBar AObj, CChar char* Buffer, int32_t BufSize);

int32_t
TrackBar_GetTextLen(TTrackBar AObj);

void
TrackBar_SetTextBuf(TTrackBar AObj, CChar char* Buffer);

TComponent
TrackBar_FindComponent(TTrackBar AObj, CChar char* AName);

char*
TrackBar_GetNamePath(TTrackBar AObj);

void
TrackBar_Assign(TTrackBar AObj, TObject Source);

TClass
TrackBar_ClassType(TTrackBar AObj);

char*
TrackBar_ClassName(TTrackBar AObj);

int32_t
TrackBar_InstanceSize(TTrackBar AObj);

BOOL
TrackBar_InheritsFrom(TTrackBar AObj, TClass AClass);

BOOL
TrackBar_Equals(TTrackBar AObj, TObject Obj);

int32_t
TrackBar_GetHashCode(TTrackBar AObj);

char*
TrackBar_ToString(TTrackBar AObj);

void
TrackBar_AnchorToNeighbour(TTrackBar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
TrackBar_AnchorParallel(TTrackBar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
TrackBar_AnchorHorizontalCenterTo(TTrackBar AObj, TControl ASibling);

void
TrackBar_AnchorVerticalCenterTo(TTrackBar AObj, TControl ASibling);

void
TrackBar_AnchorSame(TTrackBar AObj, TAnchorKind ASide, TControl ASibling);

void
TrackBar_AnchorAsAlign(TTrackBar AObj, TAlign ATheAlign, int32_t ASpace);

void
TrackBar_AnchorClient(TTrackBar AObj, int32_t ASpace);

int32_t
TrackBar_ScaleDesignToForm(TTrackBar AObj, int32_t ASize);

int32_t
TrackBar_ScaleFormToDesign(TTrackBar AObj, int32_t ASize);

int32_t
TrackBar_Scale96ToForm(TTrackBar AObj, int32_t ASize);

int32_t
TrackBar_ScaleFormTo96(TTrackBar AObj, int32_t ASize);

int32_t
TrackBar_Scale96ToFont(TTrackBar AObj, int32_t ASize);

int32_t
TrackBar_ScaleFontTo96(TTrackBar AObj, int32_t ASize);

int32_t
TrackBar_ScaleScreenToFont(TTrackBar AObj, int32_t ASize);

int32_t
TrackBar_ScaleFontToScreen(TTrackBar AObj, int32_t ASize);

int32_t
TrackBar_Scale96ToScreen(TTrackBar AObj, int32_t ASize);

int32_t
TrackBar_ScaleScreenTo96(TTrackBar AObj, int32_t ASize);

void
TrackBar_AutoAdjustLayout(TTrackBar AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
TrackBar_FixDesignFontsPPI(TTrackBar AObj, int32_t ADesignTimePPI);

void
TrackBar_ScaleFontsPPI(TTrackBar AObj, int32_t AToPPI, double AProportion);

TAlign
TrackBar_GetAlign(TTrackBar AObj);

void
TrackBar_SetAlign(TTrackBar AObj, TAlign AValue);

TAnchors
TrackBar_GetAnchors(TTrackBar AObj);

void
TrackBar_SetAnchors(TTrackBar AObj, TAnchors AValue);

int32_t
TrackBar_GetBorderWidth(TTrackBar AObj);

void
TrackBar_SetBorderWidth(TTrackBar AObj, int32_t AValue);

BOOL
TrackBar_GetDoubleBuffered(TTrackBar AObj);

void
TrackBar_SetDoubleBuffered(TTrackBar AObj, BOOL AValue);

TCursor
TrackBar_GetDragCursor(TTrackBar AObj);

void
TrackBar_SetDragCursor(TTrackBar AObj, TCursor AValue);

TDragMode
TrackBar_GetDragMode(TTrackBar AObj);

void
TrackBar_SetDragMode(TTrackBar AObj, TDragMode AValue);

BOOL
TrackBar_GetEnabled(TTrackBar AObj);

void
TrackBar_SetEnabled(TTrackBar AObj, BOOL AValue);

TSizeConstraints
TrackBar_GetConstraints(TTrackBar AObj);

void
TrackBar_SetConstraints(TTrackBar AObj, TSizeConstraints AValue);

int32_t
TrackBar_GetLineSize(TTrackBar AObj);

void
TrackBar_SetLineSize(TTrackBar AObj, int32_t AValue);

int32_t
TrackBar_GetMax(TTrackBar AObj);

void
TrackBar_SetMax(TTrackBar AObj, int32_t AValue);

int32_t
TrackBar_GetMin(TTrackBar AObj);

void
TrackBar_SetMin(TTrackBar AObj, int32_t AValue);

TTrackBarOrientation
TrackBar_GetOrientation(TTrackBar AObj);

void
TrackBar_SetOrientation(TTrackBar AObj, TTrackBarOrientation AValue);

BOOL
TrackBar_GetParentDoubleBuffered(TTrackBar AObj);

void
TrackBar_SetParentDoubleBuffered(TTrackBar AObj, BOOL AValue);

BOOL
TrackBar_GetParentShowHint(TTrackBar AObj);

void
TrackBar_SetParentShowHint(TTrackBar AObj, BOOL AValue);

int32_t
TrackBar_GetPageSize(TTrackBar AObj);

void
TrackBar_SetPageSize(TTrackBar AObj, int32_t AValue);

TPopupMenu
TrackBar_GetPopupMenu(TTrackBar AObj);

void
TrackBar_SetPopupMenu(TTrackBar AObj, TPopupMenu AValue);

int32_t
TrackBar_GetFrequency(TTrackBar AObj);

void
TrackBar_SetFrequency(TTrackBar AObj, int32_t AValue);

int32_t
TrackBar_GetPosition(TTrackBar AObj);

void
TrackBar_SetPosition(TTrackBar AObj, int32_t AValue);

int32_t
TrackBar_GetSelEnd(TTrackBar AObj);

void
TrackBar_SetSelEnd(TTrackBar AObj, int32_t AValue);

int32_t
TrackBar_GetSelStart(TTrackBar AObj);

void
TrackBar_SetSelStart(TTrackBar AObj, int32_t AValue);

BOOL
TrackBar_GetShowHint(TTrackBar AObj);

void
TrackBar_SetShowHint(TTrackBar AObj, BOOL AValue);

BOOL
TrackBar_GetShowSelRange(TTrackBar AObj);

void
TrackBar_SetShowSelRange(TTrackBar AObj, BOOL AValue);

TTabOrder
TrackBar_GetTabOrder(TTrackBar AObj);

void
TrackBar_SetTabOrder(TTrackBar AObj, TTabOrder AValue);

BOOL
TrackBar_GetTabStop(TTrackBar AObj);

void
TrackBar_SetTabStop(TTrackBar AObj, BOOL AValue);

TTickMark
TrackBar_GetTickMarks(TTrackBar AObj);

void
TrackBar_SetTickMarks(TTrackBar AObj, TTickMark AValue);

TTickStyle
TrackBar_GetTickStyle(TTrackBar AObj);

void
TrackBar_SetTickStyle(TTrackBar AObj, TTickStyle AValue);

BOOL
TrackBar_GetVisible(TTrackBar AObj);

void
TrackBar_SetVisible(TTrackBar AObj, BOOL AValue);

void
TrackBar_SetOnContextPopup(TTrackBar AObj, TContextPopupEvent AEventData);

void
TrackBar_SetOnChange(TTrackBar AObj, TNotifyEvent AEventData);

void
TrackBar_SetOnDragDrop(TTrackBar AObj, TDragDropEvent AEventData);

void
TrackBar_SetOnDragOver(TTrackBar AObj, TDragOverEvent AEventData);

void
TrackBar_SetOnEndDrag(TTrackBar AObj, TEndDragEvent AEventData);

void
TrackBar_SetOnEnter(TTrackBar AObj, TNotifyEvent AEventData);

void
TrackBar_SetOnExit(TTrackBar AObj, TNotifyEvent AEventData);

void
TrackBar_SetOnKeyDown(TTrackBar AObj, TKeyEvent AEventData);

void
TrackBar_SetOnKeyPress(TTrackBar AObj, TKeyPressEvent AEventData);

void
TrackBar_SetOnKeyUp(TTrackBar AObj, TKeyEvent AEventData);

int32_t
TrackBar_GetDockClientCount(TTrackBar AObj);

BOOL
TrackBar_GetDockSite(TTrackBar AObj);

void
TrackBar_SetDockSite(TTrackBar AObj, BOOL AValue);

BOOL
TrackBar_GetMouseInClient(TTrackBar AObj);

int32_t
TrackBar_GetVisibleDockClientCount(TTrackBar AObj);

TBrush
TrackBar_GetBrush(TTrackBar AObj);

int32_t
TrackBar_GetControlCount(TTrackBar AObj);

HWND
TrackBar_GetHandle(TTrackBar AObj);

HWND
TrackBar_GetParentWindow(TTrackBar AObj);

void
TrackBar_SetParentWindow(TTrackBar AObj, HWND AValue);

BOOL
TrackBar_GetShowing(TTrackBar AObj);

BOOL
TrackBar_GetUseDockManager(TTrackBar AObj);

void
TrackBar_SetUseDockManager(TTrackBar AObj, BOOL AValue);

TAction
TrackBar_GetAction(TTrackBar AObj);

void
TrackBar_SetAction(TTrackBar AObj, TAction AValue);

TBiDiMode
TrackBar_GetBiDiMode(TTrackBar AObj);

void
TrackBar_SetBiDiMode(TTrackBar AObj, TBiDiMode AValue);

TRect
TrackBar_GetBoundsRect(TTrackBar AObj);

void
TrackBar_SetBoundsRect(TTrackBar AObj, TRect AValue);

int32_t
TrackBar_GetClientHeight(TTrackBar AObj);

void
TrackBar_SetClientHeight(TTrackBar AObj, int32_t AValue);

TPoint
TrackBar_GetClientOrigin(TTrackBar AObj);

TRect
TrackBar_GetClientRect(TTrackBar AObj);

int32_t
TrackBar_GetClientWidth(TTrackBar AObj);

void
TrackBar_SetClientWidth(TTrackBar AObj, int32_t AValue);

TControlState
TrackBar_GetControlState(TTrackBar AObj);

void
TrackBar_SetControlState(TTrackBar AObj, TControlState AValue);

TControlStyle
TrackBar_GetControlStyle(TTrackBar AObj);

void
TrackBar_SetControlStyle(TTrackBar AObj, TControlStyle AValue);

BOOL
TrackBar_GetFloating(TTrackBar AObj);

TWinControl
TrackBar_GetParent(TTrackBar AObj);

void
TrackBar_SetParent(TTrackBar AObj, TWinControl AValue);

int32_t
TrackBar_GetLeft(TTrackBar AObj);

void
TrackBar_SetLeft(TTrackBar AObj, int32_t AValue);

int32_t
TrackBar_GetTop(TTrackBar AObj);

void
TrackBar_SetTop(TTrackBar AObj, int32_t AValue);

int32_t
TrackBar_GetWidth(TTrackBar AObj);

void
TrackBar_SetWidth(TTrackBar AObj, int32_t AValue);

int32_t
TrackBar_GetHeight(TTrackBar AObj);

void
TrackBar_SetHeight(TTrackBar AObj, int32_t AValue);

TCursor
TrackBar_GetCursor(TTrackBar AObj);

void
TrackBar_SetCursor(TTrackBar AObj, TCursor AValue);

char*
TrackBar_GetHint(TTrackBar AObj);

void
TrackBar_SetHint(TTrackBar AObj, CChar char* AValue);

int32_t
TrackBar_GetComponentCount(TTrackBar AObj);

int32_t
TrackBar_GetComponentIndex(TTrackBar AObj);

void
TrackBar_SetComponentIndex(TTrackBar AObj, int32_t AValue);

TComponent
TrackBar_GetOwner(TTrackBar AObj);

char*
TrackBar_GetName(TTrackBar AObj);

void
TrackBar_SetName(TTrackBar AObj, CChar char* AValue);

intptr_t
TrackBar_GetTag(TTrackBar AObj);

void
TrackBar_SetTag(TTrackBar AObj, intptr_t AValue);

TAnchorSide
TrackBar_GetAnchorSideLeft(TTrackBar AObj);

void
TrackBar_SetAnchorSideLeft(TTrackBar AObj, TAnchorSide AValue);

TAnchorSide
TrackBar_GetAnchorSideTop(TTrackBar AObj);

void
TrackBar_SetAnchorSideTop(TTrackBar AObj, TAnchorSide AValue);

TAnchorSide
TrackBar_GetAnchorSideRight(TTrackBar AObj);

void
TrackBar_SetAnchorSideRight(TTrackBar AObj, TAnchorSide AValue);

TAnchorSide
TrackBar_GetAnchorSideBottom(TTrackBar AObj);

void
TrackBar_SetAnchorSideBottom(TTrackBar AObj, TAnchorSide AValue);

TControlChildSizing
TrackBar_GetChildSizing(TTrackBar AObj);

void
TrackBar_SetChildSizing(TTrackBar AObj, TControlChildSizing AValue);

TControlBorderSpacing
TrackBar_GetBorderSpacing(TTrackBar AObj);

void
TrackBar_SetBorderSpacing(TTrackBar AObj, TControlBorderSpacing AValue);

TControl
TrackBar_GetDockClients(TTrackBar AObj, int32_t Index);

TControl
TrackBar_GetControls(TTrackBar AObj, int32_t Index);

TComponent
TrackBar_GetComponents(TTrackBar AObj, int32_t AIndex);

TAnchorSide
TrackBar_GetAnchorSide(TTrackBar AObj, TAnchorKind AKind);

TClass
TrackBar_StaticClassType();

// -------------------TImageList-------------------

TImageList
ImageList_Create(TComponent AOwner);

void
ImageList_Free(TImageList AObj);

void
ImageList_StretchDraw(TImageList AObj, TCanvas ACanvas, int32_t AIndex, TRect ARect, BOOL AEnabled);

int32_t
ImageList_AddSliced(TImageList AObj, TBitmap Image, int32_t AHorizontalCount, int32_t AVerticalCount);

int32_t
ImageList_Add(TImageList AObj, TBitmap Image, TBitmap Mask);

void
ImageList_Insert(TImageList AObj, int32_t AIndex, TBitmap AImage, TBitmap AMask);

void
ImageList_InsertMasked(TImageList AObj, int32_t Index, TBitmap AImage, TColor MaskColor);

void
ImageList_Replace(TImageList AObj, int32_t AIndex, TBitmap AImage, TBitmap AMask, BOOL AllResolutions);

void
ImageList_ReplaceMasked(TImageList AObj, int32_t Index, TBitmap NewImage, TColor MaskColor, BOOL AllResolutions);

void
ImageList_ReplaceIcon(TImageList AObj, int32_t AIndex, TIcon AIcon);

void
ImageList_GetBitmap(TImageList AObj, int32_t Index, TBitmap Image, TGraphicsDrawEffect AEffect);

void
ImageList_GetFullBitmap(TImageList AObj, TBitmap Image, TGraphicsDrawEffect AEffect);

TPoint
ImageList_GetHotSpot(TImageList AObj);

void
ImageList_HideDragImage(TImageList AObj);

void
ImageList_ShowDragImage(TImageList AObj);

void
ImageList_Assign(TImageList AObj, TObject Source);

int32_t
ImageList_AddIcon(TImageList AObj, TIcon Image);

void
ImageList_AddImages(TImageList AObj, TImageList Value);

int32_t
ImageList_AddMasked(TImageList AObj, TBitmap Image, TColor MaskColor);

void
ImageList_Clear(TImageList AObj);

void
ImageList_Delete(TImageList AObj, int32_t Index);

void
ImageList_InsertIcon(TImageList AObj, int32_t Index, TIcon Image);

void
ImageList_Move(TImageList AObj, int32_t CurIndex, int32_t NewIndex);

void
ImageList_BeginUpdate(TImageList AObj);

void
ImageList_EndUpdate(TImageList AObj);

TComponent
ImageList_FindComponent(TImageList AObj, CChar char* AName);

char*
ImageList_GetNamePath(TImageList AObj);

BOOL
ImageList_HasParent(TImageList AObj);

TClass
ImageList_ClassType(TImageList AObj);

char*
ImageList_ClassName(TImageList AObj);

int32_t
ImageList_InstanceSize(TImageList AObj);

BOOL
ImageList_InheritsFrom(TImageList AObj, TClass AClass);

BOOL
ImageList_Equals(TImageList AObj, TObject Obj);

int32_t
ImageList_GetHashCode(TImageList AObj);

char*
ImageList_ToString(TImageList AObj);

BOOL
ImageList_GetScaled(TImageList AObj);

void
ImageList_SetScaled(TImageList AObj, BOOL AValue);

BOOL
ImageList_GetShareImages(TImageList AObj);

void
ImageList_SetShareImages(TImageList AObj, BOOL AValue);

int32_t
ImageList_GetCount(TImageList AObj);

TColor
ImageList_GetBlendColor(TImageList AObj);

void
ImageList_SetBlendColor(TImageList AObj, TColor AValue);

TColor
ImageList_GetBkColor(TImageList AObj);

void
ImageList_SetBkColor(TImageList AObj, TColor AValue);

int32_t
ImageList_GetAllocBy(TImageList AObj);

void
ImageList_SetAllocBy(TImageList AObj, int32_t AValue);

TDrawingStyle
ImageList_GetDrawingStyle(TImageList AObj);

void
ImageList_SetDrawingStyle(TImageList AObj, TDrawingStyle AValue);

int32_t
ImageList_GetHeight(TImageList AObj);

void
ImageList_SetHeight(TImageList AObj, int32_t AValue);

TImageType
ImageList_GetImageType(TImageList AObj);

void
ImageList_SetImageType(TImageList AObj, TImageType AValue);

BOOL
ImageList_GetMasked(TImageList AObj);

void
ImageList_SetMasked(TImageList AObj, BOOL AValue);

void
ImageList_SetOnChange(TImageList AObj, TNotifyEvent AEventData);

int32_t
ImageList_GetWidth(TImageList AObj);

void
ImageList_SetWidth(TImageList AObj, int32_t AValue);

TCursor
ImageList_GetDragCursor(TImageList AObj);

void
ImageList_SetDragCursor(TImageList AObj, TCursor AValue);

BOOL
ImageList_GetDragging(TImageList AObj);

int32_t
ImageList_GetComponentCount(TImageList AObj);

int32_t
ImageList_GetComponentIndex(TImageList AObj);

void
ImageList_SetComponentIndex(TImageList AObj, int32_t AValue);

TComponent
ImageList_GetOwner(TImageList AObj);

char*
ImageList_GetName(TImageList AObj);

void
ImageList_SetName(TImageList AObj, CChar char* AValue);

intptr_t
ImageList_GetTag(TImageList AObj);

void
ImageList_SetTag(TImageList AObj, intptr_t AValue);

TComponent
ImageList_GetComponents(TImageList AObj, int32_t AIndex);

TClass
ImageList_StaticClassType();

void
ImageList_Draw1(TImageList AObj, TCanvas Canvas, int32_t X, int32_t Y, int32_t Index, BOOL Enabled);

void
ImageList_DrawOverlay1(TImageList AObj, TCanvas Canvas, int32_t X, int32_t Y, int32_t ImageIndex, uint8_t Overlay, BOOL Enabled);

void
ImageList_GetIcon1(TImageList AObj, int32_t Index, TIcon Image);

// -------------------TUpDown-------------------

TUpDown
UpDown_Create(TComponent AOwner);

void
UpDown_Free(TUpDown AObj);

BOOL
UpDown_CanFocus(TUpDown AObj);

BOOL
UpDown_ContainsControl(TUpDown AObj, TControl Control);

TControl
UpDown_ControlAtPos(TUpDown AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
UpDown_DisableAlign(TUpDown AObj);

void
UpDown_EnableAlign(TUpDown AObj);

TControl
UpDown_FindChildControl(TUpDown AObj, CChar char* ControlName);

void
UpDown_FlipChildren(TUpDown AObj, BOOL AllLevels);

BOOL
UpDown_Focused(TUpDown AObj);

BOOL
UpDown_HandleAllocated(TUpDown AObj);

void
UpDown_InsertControl(TUpDown AObj, TControl AControl);

void
UpDown_Invalidate(TUpDown AObj);

void
UpDown_PaintTo(TUpDown AObj, HDC DC, int32_t X, int32_t Y);

void
UpDown_RemoveControl(TUpDown AObj, TControl AControl);

void
UpDown_Realign(TUpDown AObj);

void
UpDown_Repaint(TUpDown AObj);

void
UpDown_ScaleBy(TUpDown AObj, int32_t M, int32_t D);

void
UpDown_ScrollBy(TUpDown AObj, int32_t DeltaX, int32_t DeltaY);

void
UpDown_SetBounds(TUpDown AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
UpDown_SetFocus(TUpDown AObj);

void
UpDown_Update(TUpDown AObj);

void
UpDown_BringToFront(TUpDown AObj);

TPoint
UpDown_ClientToScreen(TUpDown AObj, TPoint Point);

TPoint
UpDown_ClientToParent(TUpDown AObj, TPoint Point, TWinControl AParent);

BOOL
UpDown_Dragging(TUpDown AObj);

BOOL
UpDown_HasParent(TUpDown AObj);

void
UpDown_Hide(TUpDown AObj);

intptr_t
UpDown_Perform(TUpDown AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
UpDown_Refresh(TUpDown AObj);

TPoint
UpDown_ScreenToClient(TUpDown AObj, TPoint Point);

TPoint
UpDown_ParentToClient(TUpDown AObj, TPoint Point, TWinControl AParent);

void
UpDown_SendToBack(TUpDown AObj);

void
UpDown_Show(TUpDown AObj);

int32_t
UpDown_GetTextBuf(TUpDown AObj, CChar char* Buffer, int32_t BufSize);

int32_t
UpDown_GetTextLen(TUpDown AObj);

void
UpDown_SetTextBuf(TUpDown AObj, CChar char* Buffer);

TComponent
UpDown_FindComponent(TUpDown AObj, CChar char* AName);

char*
UpDown_GetNamePath(TUpDown AObj);

void
UpDown_Assign(TUpDown AObj, TObject Source);

TClass
UpDown_ClassType(TUpDown AObj);

char*
UpDown_ClassName(TUpDown AObj);

int32_t
UpDown_InstanceSize(TUpDown AObj);

BOOL
UpDown_InheritsFrom(TUpDown AObj, TClass AClass);

BOOL
UpDown_Equals(TUpDown AObj, TObject Obj);

int32_t
UpDown_GetHashCode(TUpDown AObj);

char*
UpDown_ToString(TUpDown AObj);

void
UpDown_AnchorToNeighbour(TUpDown AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
UpDown_AnchorParallel(TUpDown AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
UpDown_AnchorHorizontalCenterTo(TUpDown AObj, TControl ASibling);

void
UpDown_AnchorVerticalCenterTo(TUpDown AObj, TControl ASibling);

void
UpDown_AnchorSame(TUpDown AObj, TAnchorKind ASide, TControl ASibling);

void
UpDown_AnchorAsAlign(TUpDown AObj, TAlign ATheAlign, int32_t ASpace);

void
UpDown_AnchorClient(TUpDown AObj, int32_t ASpace);

int32_t
UpDown_ScaleDesignToForm(TUpDown AObj, int32_t ASize);

int32_t
UpDown_ScaleFormToDesign(TUpDown AObj, int32_t ASize);

int32_t
UpDown_Scale96ToForm(TUpDown AObj, int32_t ASize);

int32_t
UpDown_ScaleFormTo96(TUpDown AObj, int32_t ASize);

int32_t
UpDown_Scale96ToFont(TUpDown AObj, int32_t ASize);

int32_t
UpDown_ScaleFontTo96(TUpDown AObj, int32_t ASize);

int32_t
UpDown_ScaleScreenToFont(TUpDown AObj, int32_t ASize);

int32_t
UpDown_ScaleFontToScreen(TUpDown AObj, int32_t ASize);

int32_t
UpDown_Scale96ToScreen(TUpDown AObj, int32_t ASize);

int32_t
UpDown_ScaleScreenTo96(TUpDown AObj, int32_t ASize);

void
UpDown_AutoAdjustLayout(TUpDown AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
UpDown_FixDesignFontsPPI(TUpDown AObj, int32_t ADesignTimePPI);

void
UpDown_ScaleFontsPPI(TUpDown AObj, int32_t AToPPI, double AProportion);

TAnchors
UpDown_GetAnchors(TUpDown AObj);

void
UpDown_SetAnchors(TUpDown AObj, TAnchors AValue);

BOOL
UpDown_GetDoubleBuffered(TUpDown AObj);

void
UpDown_SetDoubleBuffered(TUpDown AObj, BOOL AValue);

BOOL
UpDown_GetEnabled(TUpDown AObj);

void
UpDown_SetEnabled(TUpDown AObj, BOOL AValue);

char*
UpDown_GetHint(TUpDown AObj);

void
UpDown_SetHint(TUpDown AObj, CChar char* AValue);

int32_t
UpDown_GetMin(TUpDown AObj);

void
UpDown_SetMin(TUpDown AObj, int32_t AValue);

int32_t
UpDown_GetMax(TUpDown AObj);

void
UpDown_SetMax(TUpDown AObj, int32_t AValue);

int32_t
UpDown_GetIncrement(TUpDown AObj);

void
UpDown_SetIncrement(TUpDown AObj, int32_t AValue);

TSizeConstraints
UpDown_GetConstraints(TUpDown AObj);

void
UpDown_SetConstraints(TUpDown AObj, TSizeConstraints AValue);

TUDOrientation
UpDown_GetOrientation(TUpDown AObj);

void
UpDown_SetOrientation(TUpDown AObj, TUDOrientation AValue);

BOOL
UpDown_GetParentDoubleBuffered(TUpDown AObj);

void
UpDown_SetParentDoubleBuffered(TUpDown AObj, BOOL AValue);

BOOL
UpDown_GetParentShowHint(TUpDown AObj);

void
UpDown_SetParentShowHint(TUpDown AObj, BOOL AValue);

TPopupMenu
UpDown_GetPopupMenu(TUpDown AObj);

void
UpDown_SetPopupMenu(TUpDown AObj, TPopupMenu AValue);

int32_t
UpDown_GetPosition(TUpDown AObj);

void
UpDown_SetPosition(TUpDown AObj, int32_t AValue);

BOOL
UpDown_GetShowHint(TUpDown AObj);

void
UpDown_SetShowHint(TUpDown AObj, BOOL AValue);

TTabOrder
UpDown_GetTabOrder(TUpDown AObj);

void
UpDown_SetTabOrder(TUpDown AObj, TTabOrder AValue);

BOOL
UpDown_GetTabStop(TUpDown AObj);

void
UpDown_SetTabStop(TUpDown AObj, BOOL AValue);

BOOL
UpDown_GetVisible(TUpDown AObj);

void
UpDown_SetVisible(TUpDown AObj, BOOL AValue);

BOOL
UpDown_GetWrap(TUpDown AObj);

void
UpDown_SetWrap(TUpDown AObj, BOOL AValue);

void
UpDown_SetOnChanging(TUpDown AObj, TUDChangingEvent AEventData);

void
UpDown_SetOnContextPopup(TUpDown AObj, TContextPopupEvent AEventData);

void
UpDown_SetOnClick(TUpDown AObj, TUDClickEvent AEventData);

void
UpDown_SetOnEnter(TUpDown AObj, TNotifyEvent AEventData);

void
UpDown_SetOnExit(TUpDown AObj, TNotifyEvent AEventData);

void
UpDown_SetOnMouseDown(TUpDown AObj, TMouseEvent AEventData);

void
UpDown_SetOnMouseEnter(TUpDown AObj, TNotifyEvent AEventData);

void
UpDown_SetOnMouseLeave(TUpDown AObj, TNotifyEvent AEventData);

void
UpDown_SetOnMouseMove(TUpDown AObj, TMouseMoveEvent AEventData);

void
UpDown_SetOnMouseUp(TUpDown AObj, TMouseEvent AEventData);

int32_t
UpDown_GetDockClientCount(TUpDown AObj);

BOOL
UpDown_GetDockSite(TUpDown AObj);

void
UpDown_SetDockSite(TUpDown AObj, BOOL AValue);

BOOL
UpDown_GetMouseInClient(TUpDown AObj);

int32_t
UpDown_GetVisibleDockClientCount(TUpDown AObj);

TBrush
UpDown_GetBrush(TUpDown AObj);

int32_t
UpDown_GetControlCount(TUpDown AObj);

HWND
UpDown_GetHandle(TUpDown AObj);

HWND
UpDown_GetParentWindow(TUpDown AObj);

void
UpDown_SetParentWindow(TUpDown AObj, HWND AValue);

BOOL
UpDown_GetShowing(TUpDown AObj);

BOOL
UpDown_GetUseDockManager(TUpDown AObj);

void
UpDown_SetUseDockManager(TUpDown AObj, BOOL AValue);

TAction
UpDown_GetAction(TUpDown AObj);

void
UpDown_SetAction(TUpDown AObj, TAction AValue);

TAlign
UpDown_GetAlign(TUpDown AObj);

void
UpDown_SetAlign(TUpDown AObj, TAlign AValue);

TBiDiMode
UpDown_GetBiDiMode(TUpDown AObj);

void
UpDown_SetBiDiMode(TUpDown AObj, TBiDiMode AValue);

TRect
UpDown_GetBoundsRect(TUpDown AObj);

void
UpDown_SetBoundsRect(TUpDown AObj, TRect AValue);

int32_t
UpDown_GetClientHeight(TUpDown AObj);

void
UpDown_SetClientHeight(TUpDown AObj, int32_t AValue);

TPoint
UpDown_GetClientOrigin(TUpDown AObj);

TRect
UpDown_GetClientRect(TUpDown AObj);

int32_t
UpDown_GetClientWidth(TUpDown AObj);

void
UpDown_SetClientWidth(TUpDown AObj, int32_t AValue);

TControlState
UpDown_GetControlState(TUpDown AObj);

void
UpDown_SetControlState(TUpDown AObj, TControlState AValue);

TControlStyle
UpDown_GetControlStyle(TUpDown AObj);

void
UpDown_SetControlStyle(TUpDown AObj, TControlStyle AValue);

BOOL
UpDown_GetFloating(TUpDown AObj);

TWinControl
UpDown_GetParent(TUpDown AObj);

void
UpDown_SetParent(TUpDown AObj, TWinControl AValue);

int32_t
UpDown_GetLeft(TUpDown AObj);

void
UpDown_SetLeft(TUpDown AObj, int32_t AValue);

int32_t
UpDown_GetTop(TUpDown AObj);

void
UpDown_SetTop(TUpDown AObj, int32_t AValue);

int32_t
UpDown_GetWidth(TUpDown AObj);

void
UpDown_SetWidth(TUpDown AObj, int32_t AValue);

int32_t
UpDown_GetHeight(TUpDown AObj);

void
UpDown_SetHeight(TUpDown AObj, int32_t AValue);

TCursor
UpDown_GetCursor(TUpDown AObj);

void
UpDown_SetCursor(TUpDown AObj, TCursor AValue);

int32_t
UpDown_GetComponentCount(TUpDown AObj);

int32_t
UpDown_GetComponentIndex(TUpDown AObj);

void
UpDown_SetComponentIndex(TUpDown AObj, int32_t AValue);

TComponent
UpDown_GetOwner(TUpDown AObj);

char*
UpDown_GetName(TUpDown AObj);

void
UpDown_SetName(TUpDown AObj, CChar char* AValue);

intptr_t
UpDown_GetTag(TUpDown AObj);

void
UpDown_SetTag(TUpDown AObj, intptr_t AValue);

TAnchorSide
UpDown_GetAnchorSideLeft(TUpDown AObj);

void
UpDown_SetAnchorSideLeft(TUpDown AObj, TAnchorSide AValue);

TAnchorSide
UpDown_GetAnchorSideTop(TUpDown AObj);

void
UpDown_SetAnchorSideTop(TUpDown AObj, TAnchorSide AValue);

TAnchorSide
UpDown_GetAnchorSideRight(TUpDown AObj);

void
UpDown_SetAnchorSideRight(TUpDown AObj, TAnchorSide AValue);

TAnchorSide
UpDown_GetAnchorSideBottom(TUpDown AObj);

void
UpDown_SetAnchorSideBottom(TUpDown AObj, TAnchorSide AValue);

TControlChildSizing
UpDown_GetChildSizing(TUpDown AObj);

void
UpDown_SetChildSizing(TUpDown AObj, TControlChildSizing AValue);

TControlBorderSpacing
UpDown_GetBorderSpacing(TUpDown AObj);

void
UpDown_SetBorderSpacing(TUpDown AObj, TControlBorderSpacing AValue);

TControl
UpDown_GetDockClients(TUpDown AObj, int32_t Index);

TControl
UpDown_GetControls(TUpDown AObj, int32_t Index);

TComponent
UpDown_GetComponents(TUpDown AObj, int32_t AIndex);

TAnchorSide
UpDown_GetAnchorSide(TUpDown AObj, TAnchorKind AKind);

TClass
UpDown_StaticClassType();

// -------------------TProgressBar-------------------

TProgressBar
ProgressBar_Create(TComponent AOwner);

void
ProgressBar_Free(TProgressBar AObj);

void
ProgressBar_StepIt(TProgressBar AObj);

void
ProgressBar_StepBy(TProgressBar AObj, int32_t Delta);

BOOL
ProgressBar_CanFocus(TProgressBar AObj);

BOOL
ProgressBar_ContainsControl(TProgressBar AObj, TControl Control);

TControl
ProgressBar_ControlAtPos(TProgressBar AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
ProgressBar_DisableAlign(TProgressBar AObj);

void
ProgressBar_EnableAlign(TProgressBar AObj);

TControl
ProgressBar_FindChildControl(TProgressBar AObj, CChar char* ControlName);

void
ProgressBar_FlipChildren(TProgressBar AObj, BOOL AllLevels);

BOOL
ProgressBar_Focused(TProgressBar AObj);

BOOL
ProgressBar_HandleAllocated(TProgressBar AObj);

void
ProgressBar_InsertControl(TProgressBar AObj, TControl AControl);

void
ProgressBar_Invalidate(TProgressBar AObj);

void
ProgressBar_PaintTo(TProgressBar AObj, HDC DC, int32_t X, int32_t Y);

void
ProgressBar_RemoveControl(TProgressBar AObj, TControl AControl);

void
ProgressBar_Realign(TProgressBar AObj);

void
ProgressBar_Repaint(TProgressBar AObj);

void
ProgressBar_ScaleBy(TProgressBar AObj, int32_t M, int32_t D);

void
ProgressBar_ScrollBy(TProgressBar AObj, int32_t DeltaX, int32_t DeltaY);

void
ProgressBar_SetBounds(TProgressBar AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ProgressBar_SetFocus(TProgressBar AObj);

void
ProgressBar_Update(TProgressBar AObj);

void
ProgressBar_BringToFront(TProgressBar AObj);

TPoint
ProgressBar_ClientToScreen(TProgressBar AObj, TPoint Point);

TPoint
ProgressBar_ClientToParent(TProgressBar AObj, TPoint Point, TWinControl AParent);

BOOL
ProgressBar_Dragging(TProgressBar AObj);

BOOL
ProgressBar_HasParent(TProgressBar AObj);

void
ProgressBar_Hide(TProgressBar AObj);

intptr_t
ProgressBar_Perform(TProgressBar AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ProgressBar_Refresh(TProgressBar AObj);

TPoint
ProgressBar_ScreenToClient(TProgressBar AObj, TPoint Point);

TPoint
ProgressBar_ParentToClient(TProgressBar AObj, TPoint Point, TWinControl AParent);

void
ProgressBar_SendToBack(TProgressBar AObj);

void
ProgressBar_Show(TProgressBar AObj);

int32_t
ProgressBar_GetTextBuf(TProgressBar AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ProgressBar_GetTextLen(TProgressBar AObj);

void
ProgressBar_SetTextBuf(TProgressBar AObj, CChar char* Buffer);

TComponent
ProgressBar_FindComponent(TProgressBar AObj, CChar char* AName);

char*
ProgressBar_GetNamePath(TProgressBar AObj);

void
ProgressBar_Assign(TProgressBar AObj, TObject Source);

TClass
ProgressBar_ClassType(TProgressBar AObj);

char*
ProgressBar_ClassName(TProgressBar AObj);

int32_t
ProgressBar_InstanceSize(TProgressBar AObj);

BOOL
ProgressBar_InheritsFrom(TProgressBar AObj, TClass AClass);

BOOL
ProgressBar_Equals(TProgressBar AObj, TObject Obj);

int32_t
ProgressBar_GetHashCode(TProgressBar AObj);

char*
ProgressBar_ToString(TProgressBar AObj);

void
ProgressBar_AnchorToNeighbour(TProgressBar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ProgressBar_AnchorParallel(TProgressBar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ProgressBar_AnchorHorizontalCenterTo(TProgressBar AObj, TControl ASibling);

void
ProgressBar_AnchorVerticalCenterTo(TProgressBar AObj, TControl ASibling);

void
ProgressBar_AnchorSame(TProgressBar AObj, TAnchorKind ASide, TControl ASibling);

void
ProgressBar_AnchorAsAlign(TProgressBar AObj, TAlign ATheAlign, int32_t ASpace);

void
ProgressBar_AnchorClient(TProgressBar AObj, int32_t ASpace);

int32_t
ProgressBar_ScaleDesignToForm(TProgressBar AObj, int32_t ASize);

int32_t
ProgressBar_ScaleFormToDesign(TProgressBar AObj, int32_t ASize);

int32_t
ProgressBar_Scale96ToForm(TProgressBar AObj, int32_t ASize);

int32_t
ProgressBar_ScaleFormTo96(TProgressBar AObj, int32_t ASize);

int32_t
ProgressBar_Scale96ToFont(TProgressBar AObj, int32_t ASize);

int32_t
ProgressBar_ScaleFontTo96(TProgressBar AObj, int32_t ASize);

int32_t
ProgressBar_ScaleScreenToFont(TProgressBar AObj, int32_t ASize);

int32_t
ProgressBar_ScaleFontToScreen(TProgressBar AObj, int32_t ASize);

int32_t
ProgressBar_Scale96ToScreen(TProgressBar AObj, int32_t ASize);

int32_t
ProgressBar_ScaleScreenTo96(TProgressBar AObj, int32_t ASize);

void
ProgressBar_AutoAdjustLayout(TProgressBar AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ProgressBar_FixDesignFontsPPI(TProgressBar AObj, int32_t ADesignTimePPI);

void
ProgressBar_ScaleFontsPPI(TProgressBar AObj, int32_t AToPPI, double AProportion);

TAlign
ProgressBar_GetAlign(TProgressBar AObj);

void
ProgressBar_SetAlign(TProgressBar AObj, TAlign AValue);

TAnchors
ProgressBar_GetAnchors(TProgressBar AObj);

void
ProgressBar_SetAnchors(TProgressBar AObj, TAnchors AValue);

int32_t
ProgressBar_GetBorderWidth(TProgressBar AObj);

void
ProgressBar_SetBorderWidth(TProgressBar AObj, int32_t AValue);

BOOL
ProgressBar_GetDoubleBuffered(TProgressBar AObj);

void
ProgressBar_SetDoubleBuffered(TProgressBar AObj, BOOL AValue);

TCursor
ProgressBar_GetDragCursor(TProgressBar AObj);

void
ProgressBar_SetDragCursor(TProgressBar AObj, TCursor AValue);

TDragKind
ProgressBar_GetDragKind(TProgressBar AObj);

void
ProgressBar_SetDragKind(TProgressBar AObj, TDragKind AValue);

TDragMode
ProgressBar_GetDragMode(TProgressBar AObj);

void
ProgressBar_SetDragMode(TProgressBar AObj, TDragMode AValue);

BOOL
ProgressBar_GetEnabled(TProgressBar AObj);

void
ProgressBar_SetEnabled(TProgressBar AObj, BOOL AValue);

char*
ProgressBar_GetHint(TProgressBar AObj);

void
ProgressBar_SetHint(TProgressBar AObj, CChar char* AValue);

TSizeConstraints
ProgressBar_GetConstraints(TProgressBar AObj);

void
ProgressBar_SetConstraints(TProgressBar AObj, TSizeConstraints AValue);

int32_t
ProgressBar_GetMin(TProgressBar AObj);

void
ProgressBar_SetMin(TProgressBar AObj, int32_t AValue);

int32_t
ProgressBar_GetMax(TProgressBar AObj);

void
ProgressBar_SetMax(TProgressBar AObj, int32_t AValue);

TProgressBarOrientation
ProgressBar_GetOrientation(TProgressBar AObj);

void
ProgressBar_SetOrientation(TProgressBar AObj, TProgressBarOrientation AValue);

BOOL
ProgressBar_GetParentDoubleBuffered(TProgressBar AObj);

void
ProgressBar_SetParentDoubleBuffered(TProgressBar AObj, BOOL AValue);

BOOL
ProgressBar_GetParentShowHint(TProgressBar AObj);

void
ProgressBar_SetParentShowHint(TProgressBar AObj, BOOL AValue);

TPopupMenu
ProgressBar_GetPopupMenu(TProgressBar AObj);

void
ProgressBar_SetPopupMenu(TProgressBar AObj, TPopupMenu AValue);

int32_t
ProgressBar_GetPosition(TProgressBar AObj);

void
ProgressBar_SetPosition(TProgressBar AObj, int32_t AValue);

BOOL
ProgressBar_GetSmooth(TProgressBar AObj);

void
ProgressBar_SetSmooth(TProgressBar AObj, BOOL AValue);

TProgressBarStyle
ProgressBar_GetStyle(TProgressBar AObj);

void
ProgressBar_SetStyle(TProgressBar AObj, TProgressBarStyle AValue);

int32_t
ProgressBar_GetStep(TProgressBar AObj);

void
ProgressBar_SetStep(TProgressBar AObj, int32_t AValue);

BOOL
ProgressBar_GetShowHint(TProgressBar AObj);

void
ProgressBar_SetShowHint(TProgressBar AObj, BOOL AValue);

TTabOrder
ProgressBar_GetTabOrder(TProgressBar AObj);

void
ProgressBar_SetTabOrder(TProgressBar AObj, TTabOrder AValue);

BOOL
ProgressBar_GetTabStop(TProgressBar AObj);

void
ProgressBar_SetTabStop(TProgressBar AObj, BOOL AValue);

BOOL
ProgressBar_GetVisible(TProgressBar AObj);

void
ProgressBar_SetVisible(TProgressBar AObj, BOOL AValue);

void
ProgressBar_SetOnContextPopup(TProgressBar AObj, TContextPopupEvent AEventData);

void
ProgressBar_SetOnDragDrop(TProgressBar AObj, TDragDropEvent AEventData);

void
ProgressBar_SetOnDragOver(TProgressBar AObj, TDragOverEvent AEventData);

void
ProgressBar_SetOnEndDrag(TProgressBar AObj, TEndDragEvent AEventData);

void
ProgressBar_SetOnEnter(TProgressBar AObj, TNotifyEvent AEventData);

void
ProgressBar_SetOnExit(TProgressBar AObj, TNotifyEvent AEventData);

void
ProgressBar_SetOnMouseDown(TProgressBar AObj, TMouseEvent AEventData);

void
ProgressBar_SetOnMouseEnter(TProgressBar AObj, TNotifyEvent AEventData);

void
ProgressBar_SetOnMouseLeave(TProgressBar AObj, TNotifyEvent AEventData);

void
ProgressBar_SetOnMouseMove(TProgressBar AObj, TMouseMoveEvent AEventData);

void
ProgressBar_SetOnMouseUp(TProgressBar AObj, TMouseEvent AEventData);

int32_t
ProgressBar_GetDockClientCount(TProgressBar AObj);

BOOL
ProgressBar_GetDockSite(TProgressBar AObj);

void
ProgressBar_SetDockSite(TProgressBar AObj, BOOL AValue);

BOOL
ProgressBar_GetMouseInClient(TProgressBar AObj);

int32_t
ProgressBar_GetVisibleDockClientCount(TProgressBar AObj);

TBrush
ProgressBar_GetBrush(TProgressBar AObj);

int32_t
ProgressBar_GetControlCount(TProgressBar AObj);

HWND
ProgressBar_GetHandle(TProgressBar AObj);

HWND
ProgressBar_GetParentWindow(TProgressBar AObj);

void
ProgressBar_SetParentWindow(TProgressBar AObj, HWND AValue);

BOOL
ProgressBar_GetShowing(TProgressBar AObj);

BOOL
ProgressBar_GetUseDockManager(TProgressBar AObj);

void
ProgressBar_SetUseDockManager(TProgressBar AObj, BOOL AValue);

TAction
ProgressBar_GetAction(TProgressBar AObj);

void
ProgressBar_SetAction(TProgressBar AObj, TAction AValue);

TBiDiMode
ProgressBar_GetBiDiMode(TProgressBar AObj);

void
ProgressBar_SetBiDiMode(TProgressBar AObj, TBiDiMode AValue);

TRect
ProgressBar_GetBoundsRect(TProgressBar AObj);

void
ProgressBar_SetBoundsRect(TProgressBar AObj, TRect AValue);

int32_t
ProgressBar_GetClientHeight(TProgressBar AObj);

void
ProgressBar_SetClientHeight(TProgressBar AObj, int32_t AValue);

TPoint
ProgressBar_GetClientOrigin(TProgressBar AObj);

TRect
ProgressBar_GetClientRect(TProgressBar AObj);

int32_t
ProgressBar_GetClientWidth(TProgressBar AObj);

void
ProgressBar_SetClientWidth(TProgressBar AObj, int32_t AValue);

TControlState
ProgressBar_GetControlState(TProgressBar AObj);

void
ProgressBar_SetControlState(TProgressBar AObj, TControlState AValue);

TControlStyle
ProgressBar_GetControlStyle(TProgressBar AObj);

void
ProgressBar_SetControlStyle(TProgressBar AObj, TControlStyle AValue);

BOOL
ProgressBar_GetFloating(TProgressBar AObj);

TWinControl
ProgressBar_GetParent(TProgressBar AObj);

void
ProgressBar_SetParent(TProgressBar AObj, TWinControl AValue);

int32_t
ProgressBar_GetLeft(TProgressBar AObj);

void
ProgressBar_SetLeft(TProgressBar AObj, int32_t AValue);

int32_t
ProgressBar_GetTop(TProgressBar AObj);

void
ProgressBar_SetTop(TProgressBar AObj, int32_t AValue);

int32_t
ProgressBar_GetWidth(TProgressBar AObj);

void
ProgressBar_SetWidth(TProgressBar AObj, int32_t AValue);

int32_t
ProgressBar_GetHeight(TProgressBar AObj);

void
ProgressBar_SetHeight(TProgressBar AObj, int32_t AValue);

TCursor
ProgressBar_GetCursor(TProgressBar AObj);

void
ProgressBar_SetCursor(TProgressBar AObj, TCursor AValue);

int32_t
ProgressBar_GetComponentCount(TProgressBar AObj);

int32_t
ProgressBar_GetComponentIndex(TProgressBar AObj);

void
ProgressBar_SetComponentIndex(TProgressBar AObj, int32_t AValue);

TComponent
ProgressBar_GetOwner(TProgressBar AObj);

char*
ProgressBar_GetName(TProgressBar AObj);

void
ProgressBar_SetName(TProgressBar AObj, CChar char* AValue);

intptr_t
ProgressBar_GetTag(TProgressBar AObj);

void
ProgressBar_SetTag(TProgressBar AObj, intptr_t AValue);

TAnchorSide
ProgressBar_GetAnchorSideLeft(TProgressBar AObj);

void
ProgressBar_SetAnchorSideLeft(TProgressBar AObj, TAnchorSide AValue);

TAnchorSide
ProgressBar_GetAnchorSideTop(TProgressBar AObj);

void
ProgressBar_SetAnchorSideTop(TProgressBar AObj, TAnchorSide AValue);

TAnchorSide
ProgressBar_GetAnchorSideRight(TProgressBar AObj);

void
ProgressBar_SetAnchorSideRight(TProgressBar AObj, TAnchorSide AValue);

TAnchorSide
ProgressBar_GetAnchorSideBottom(TProgressBar AObj);

void
ProgressBar_SetAnchorSideBottom(TProgressBar AObj, TAnchorSide AValue);

TControlChildSizing
ProgressBar_GetChildSizing(TProgressBar AObj);

void
ProgressBar_SetChildSizing(TProgressBar AObj, TControlChildSizing AValue);

TControlBorderSpacing
ProgressBar_GetBorderSpacing(TProgressBar AObj);

void
ProgressBar_SetBorderSpacing(TProgressBar AObj, TControlBorderSpacing AValue);

TControl
ProgressBar_GetDockClients(TProgressBar AObj, int32_t Index);

TControl
ProgressBar_GetControls(TProgressBar AObj, int32_t Index);

TComponent
ProgressBar_GetComponents(TProgressBar AObj, int32_t AIndex);

TAnchorSide
ProgressBar_GetAnchorSide(TProgressBar AObj, TAnchorKind AKind);

TClass
ProgressBar_StaticClassType();

// -------------------TDateTimePicker-------------------

TDateTimePicker
ateTimePicker_Create(TComponent AOwner);

void
ateTimePicker_Free(TDateTimePicker AObj);

BOOL
ateTimePicker_DateIsNull(TDateTimePicker AObj);

void
ateTimePicker_SelectDate(TDateTimePicker AObj);

void
ateTimePicker_SelectTime(TDateTimePicker AObj);

BOOL
ateTimePicker_CanFocus(TDateTimePicker AObj);

BOOL
ateTimePicker_ContainsControl(TDateTimePicker AObj, TControl Control);

TControl
ateTimePicker_ControlAtPos(TDateTimePicker AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
ateTimePicker_DisableAlign(TDateTimePicker AObj);

void
ateTimePicker_EnableAlign(TDateTimePicker AObj);

TControl
ateTimePicker_FindChildControl(TDateTimePicker AObj, CChar char* ControlName);

void
ateTimePicker_FlipChildren(TDateTimePicker AObj, BOOL AllLevels);

BOOL
ateTimePicker_Focused(TDateTimePicker AObj);

BOOL
ateTimePicker_HandleAllocated(TDateTimePicker AObj);

void
ateTimePicker_InsertControl(TDateTimePicker AObj, TControl AControl);

void
ateTimePicker_Invalidate(TDateTimePicker AObj);

void
ateTimePicker_PaintTo(TDateTimePicker AObj, HDC DC, int32_t X, int32_t Y);

void
ateTimePicker_RemoveControl(TDateTimePicker AObj, TControl AControl);

void
ateTimePicker_Realign(TDateTimePicker AObj);

void
ateTimePicker_Repaint(TDateTimePicker AObj);

void
ateTimePicker_ScaleBy(TDateTimePicker AObj, int32_t M, int32_t D);

void
ateTimePicker_ScrollBy(TDateTimePicker AObj, int32_t DeltaX, int32_t DeltaY);

void
ateTimePicker_SetBounds(TDateTimePicker AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ateTimePicker_SetFocus(TDateTimePicker AObj);

void
ateTimePicker_Update(TDateTimePicker AObj);

void
ateTimePicker_BringToFront(TDateTimePicker AObj);

TPoint
ateTimePicker_ClientToScreen(TDateTimePicker AObj, TPoint Point);

TPoint
ateTimePicker_ClientToParent(TDateTimePicker AObj, TPoint Point, TWinControl AParent);

BOOL
ateTimePicker_Dragging(TDateTimePicker AObj);

BOOL
ateTimePicker_HasParent(TDateTimePicker AObj);

void
ateTimePicker_Hide(TDateTimePicker AObj);

intptr_t
ateTimePicker_Perform(TDateTimePicker AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ateTimePicker_Refresh(TDateTimePicker AObj);

TPoint
ateTimePicker_ScreenToClient(TDateTimePicker AObj, TPoint Point);

TPoint
ateTimePicker_ParentToClient(TDateTimePicker AObj, TPoint Point, TWinControl AParent);

void
ateTimePicker_SendToBack(TDateTimePicker AObj);

void
ateTimePicker_Show(TDateTimePicker AObj);

int32_t
ateTimePicker_GetTextBuf(TDateTimePicker AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ateTimePicker_GetTextLen(TDateTimePicker AObj);

void
ateTimePicker_SetTextBuf(TDateTimePicker AObj, CChar char* Buffer);

TComponent
ateTimePicker_FindComponent(TDateTimePicker AObj, CChar char* AName);

char*
ateTimePicker_GetNamePath(TDateTimePicker AObj);

void
ateTimePicker_Assign(TDateTimePicker AObj, TObject Source);

TClass
ateTimePicker_ClassType(TDateTimePicker AObj);

char*
ateTimePicker_ClassName(TDateTimePicker AObj);

int32_t
DateTimePicker_InstanceSize(TDateTimePicker AObj);

BOOL
ateTimePicker_InheritsFrom(TDateTimePicker AObj, TClass AClass);

BOOL
ateTimePicker_Equals(TDateTimePicker AObj, TObject Obj);

int32_t
ateTimePicker_GetHashCode(TDateTimePicker AObj);

char*
ateTimePicker_ToString(TDateTimePicker AObj);

void
ateTimePicker_AnchorToNeighbour(TDateTimePicker AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ateTimePicker_AnchorParallel(TDateTimePicker AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ateTimePicker_AnchorHorizontalCenterTo(TDateTimePicker AObj, TControl ASibling);

void
ateTimePicker_AnchorVerticalCenterTo(TDateTimePicker AObj, TControl ASibling);

void
ateTimePicker_AnchorSame(TDateTimePicker AObj, TAnchorKind ASide, TControl ASibling);

void
ateTimePicker_AnchorAsAlign(TDateTimePicker AObj, TAlign ATheAlign, int32_t ASpace);

void
ateTimePicker_AnchorClient(TDateTimePicker AObj, int32_t ASpace);

int32_t
ateTimePicker_ScaleDesignToForm(TDateTimePicker AObj, int32_t ASize);

int32_t
ateTimePicker_ScaleFormToDesign(TDateTimePicker AObj, int32_t ASize);

int32_t
ateTimePicker_Scale96ToForm(TDateTimePicker AObj, int32_t ASize);

int32_t
ateTimePicker_ScaleFormTo96(TDateTimePicker AObj, int32_t ASize);

int32_t
ateTimePicker_Scale96ToFont(TDateTimePicker AObj, int32_t ASize);

int32_t
ateTimePicker_ScaleFontTo96(TDateTimePicker AObj, int32_t ASize);

int32_t
ateTimePicker_ScaleScreenToFont(TDateTimePicker AObj, int32_t ASize);

int32_t
ateTimePicker_ScaleFontToScreen(TDateTimePicker AObj, int32_t ASize);

int32_t
ateTimePicker_Scale96ToScreen(TDateTimePicker AObj, int32_t ASize);

int32_t
ateTimePicker_ScaleScreenTo96(TDateTimePicker AObj, int32_t ASize);

void
ateTimePicker_AutoAdjustLayout(TDateTimePicker AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ateTimePicker_FixDesignFontsPPI(TDateTimePicker AObj, int32_t ADesignTimePPI);

void
ateTimePicker_ScaleFontsPPI(TDateTimePicker AObj, int32_t AToPPI, double AProportion);

TArrowShape
ateTimePicker_GetArrowShape(TDateTimePicker AObj);

void
ateTimePicker_SetArrowShape(TDateTimePicker AObj, TArrowShape AValue);

BOOL
ateTimePicker_GetAutoAdvance(TDateTimePicker AObj);

void
ateTimePicker_SetAutoAdvance(TDateTimePicker AObj, BOOL AValue);

BOOL
ateTimePicker_GetAutoButtonSize(TDateTimePicker AObj);

void
ateTimePicker_SetAutoButtonSize(TDateTimePicker AObj, BOOL AValue);

BOOL
ateTimePicker_GetCascade(TDateTimePicker AObj);

void
ateTimePicker_SetCascade(TDateTimePicker AObj, BOOL AValue);

uint16_t
ateTimePicker_GetCenturyFrom(TDateTimePicker AObj);

void
ateTimePicker_SetCenturyFrom(TDateTimePicker AObj, uint16_t AValue);

TDateDisplayOrder
ateTimePicker_GetDateDisplayOrder(TDateTimePicker AObj);

void
ateTimePicker_SetDateDisplayOrder(TDateTimePicker AObj, TDateDisplayOrder AValue);

char*
ateTimePicker_GetDateSeparator(TDateTimePicker AObj);

void
ateTimePicker_SetDateSeparator(TDateTimePicker AObj, CChar char* AValue);

TDateTimeParts
ateTimePicker_GetHideDateTimeParts(TDateTimePicker AObj);

void
ateTimePicker_SetHideDateTimeParts(TDateTimePicker AObj, TDateTimeParts AValue);

BOOL
ateTimePicker_GetLeadingZeros(TDateTimePicker AObj);

void
ateTimePicker_SetLeadingZeros(TDateTimePicker AObj, BOOL AValue);

char*
ateTimePicker_GetMonthNames(TDateTimePicker AObj);

void
ateTimePicker_SetMonthNames(TDateTimePicker AObj, CChar char* AValue);

BOOL
ateTimePicker_GetShowMonthNames(TDateTimePicker AObj);

void
ateTimePicker_SetShowMonthNames(TDateTimePicker AObj, BOOL AValue);

BOOL
ateTimePicker_GetNullInputAllowed(TDateTimePicker AObj);

void
ateTimePicker_SetNullInputAllowed(TDateTimePicker AObj, BOOL AValue);

TDateTimePickerOptions
ateTimePicker_GetOptions(TDateTimePicker AObj);

void
ateTimePicker_SetOptions(TDateTimePicker AObj, TDateTimePickerOptions AValue);

BOOL
ateTimePicker_GetShowCheckBox(TDateTimePicker AObj);

void
ateTimePicker_SetShowCheckBox(TDateTimePicker AObj, BOOL AValue);

BOOL
ateTimePicker_GetReadOnly(TDateTimePicker AObj);

void
ateTimePicker_SetReadOnly(TDateTimePicker AObj, BOOL AValue);

char*
ateTimePicker_GetTextForNullDate(TDateTimePicker AObj);

void
ateTimePicker_SetTextForNullDate(TDateTimePicker AObj, CChar char* AValue);

TTimeDisplay
ateTimePicker_GetTimeDisplay(TDateTimePicker AObj);

void
ateTimePicker_SetTimeDisplay(TDateTimePicker AObj, TTimeDisplay AValue);

TTimeFormat
ateTimePicker_GetTimeFormat(TDateTimePicker AObj);

void
ateTimePicker_SetTimeFormat(TDateTimePicker AObj, TTimeFormat AValue);

char*
ateTimePicker_GetTimeSeparator(TDateTimePicker AObj);

void
ateTimePicker_SetTimeSeparator(TDateTimePicker AObj, CChar char* AValue);

BOOL
ateTimePicker_GetTrailingSeparator(TDateTimePicker AObj);

void
ateTimePicker_SetTrailingSeparator(TDateTimePicker AObj, BOOL AValue);

BOOL
ateTimePicker_GetUseDefaultSeparators(TDateTimePicker AObj);

void
ateTimePicker_SetUseDefaultSeparators(TDateTimePicker AObj, BOOL AValue);

BOOL
ateTimePicker_GetDroppedDown(TDateTimePicker AObj);

uint32_t
ateTimePicker_GetDateTime(TDateTimePicker AObj);

void
ateTimePicker_SetDateTime(TDateTimePicker AObj, uint32_t AValue);

TAlign
ateTimePicker_GetAlign(TDateTimePicker AObj);

void
ateTimePicker_SetAlign(TDateTimePicker AObj, TAlign AValue);

TAnchors
ateTimePicker_GetAnchors(TDateTimePicker AObj);

void
ateTimePicker_SetAnchors(TDateTimePicker AObj, TAnchors AValue);

TBiDiMode
ateTimePicker_GetBiDiMode(TDateTimePicker AObj);

void
ateTimePicker_SetBiDiMode(TDateTimePicker AObj, TBiDiMode AValue);

TDTCalAlignment
ateTimePicker_GetCalAlignment(TDateTimePicker AObj);

void
ateTimePicker_SetCalAlignment(TDateTimePicker AObj, TDTCalAlignment AValue);

TSizeConstraints
ateTimePicker_GetConstraints(TDateTimePicker AObj);

void
ateTimePicker_SetConstraints(TDateTimePicker AObj, TSizeConstraints AValue);

uint32_t
ateTimePicker_GetDate(TDateTimePicker AObj);

void
ateTimePicker_SetDate(TDateTimePicker AObj, uint32_t AValue);

uint32_t
ateTimePicker_GetTime(TDateTimePicker AObj);

void
ateTimePicker_SetTime(TDateTimePicker AObj, uint32_t AValue);

BOOL
ateTimePicker_GetChecked(TDateTimePicker AObj);

void
ateTimePicker_SetChecked(TDateTimePicker AObj, BOOL AValue);

TColor
ateTimePicker_GetColor(TDateTimePicker AObj);

void
ateTimePicker_SetColor(TDateTimePicker AObj, TColor AValue);

TDTDateMode
ateTimePicker_GetDateMode(TDateTimePicker AObj);

void
ateTimePicker_SetDateMode(TDateTimePicker AObj, TDTDateMode AValue);

BOOL
ateTimePicker_GetDoubleBuffered(TDateTimePicker AObj);

void
ateTimePicker_SetDoubleBuffered(TDateTimePicker AObj, BOOL AValue);

BOOL
ateTimePicker_GetEnabled(TDateTimePicker AObj);

void
ateTimePicker_SetEnabled(TDateTimePicker AObj, BOOL AValue);

TFont
ateTimePicker_GetFont(TDateTimePicker AObj);

void
ateTimePicker_SetFont(TDateTimePicker AObj, TFont AValue);

TDateTimeKind
ateTimePicker_GetKind(TDateTimePicker AObj);

void
ateTimePicker_SetKind(TDateTimePicker AObj, TDateTimeKind AValue);

uint32_t
ateTimePicker_GetMaxDate(TDateTimePicker AObj);

void
ateTimePicker_SetMaxDate(TDateTimePicker AObj, uint32_t AValue);

uint32_t
ateTimePicker_GetMinDate(TDateTimePicker AObj);

void
ateTimePicker_SetMinDate(TDateTimePicker AObj, uint32_t AValue);

BOOL
ateTimePicker_GetParentColor(TDateTimePicker AObj);

void
ateTimePicker_SetParentColor(TDateTimePicker AObj, BOOL AValue);

BOOL
ateTimePicker_GetParentDoubleBuffered(TDateTimePicker AObj);

void
ateTimePicker_SetParentDoubleBuffered(TDateTimePicker AObj, BOOL AValue);

BOOL
ateTimePicker_GetParentFont(TDateTimePicker AObj);

void
ateTimePicker_SetParentFont(TDateTimePicker AObj, BOOL AValue);

BOOL
ateTimePicker_GetParentShowHint(TDateTimePicker AObj);

void
ateTimePicker_SetParentShowHint(TDateTimePicker AObj, BOOL AValue);

TPopupMenu
ateTimePicker_GetPopupMenu(TDateTimePicker AObj);

void
ateTimePicker_SetPopupMenu(TDateTimePicker AObj, TPopupMenu AValue);

BOOL
ateTimePicker_GetShowHint(TDateTimePicker AObj);

void
ateTimePicker_SetShowHint(TDateTimePicker AObj, BOOL AValue);

TTabOrder
ateTimePicker_GetTabOrder(TDateTimePicker AObj);

void
ateTimePicker_SetTabOrder(TDateTimePicker AObj, TTabOrder AValue);

BOOL
ateTimePicker_GetTabStop(TDateTimePicker AObj);

void
ateTimePicker_SetTabStop(TDateTimePicker AObj, BOOL AValue);

BOOL
ateTimePicker_GetVisible(TDateTimePicker AObj);

void
ateTimePicker_SetVisible(TDateTimePicker AObj, BOOL AValue);

void
ateTimePicker_SetOnClick(TDateTimePicker AObj, TNotifyEvent AEventData);

void
ateTimePicker_SetOnCloseUp(TDateTimePicker AObj, TNotifyEvent AEventData);

void
ateTimePicker_SetOnChange(TDateTimePicker AObj, TNotifyEvent AEventData);

void
ateTimePicker_SetOnContextPopup(TDateTimePicker AObj, TContextPopupEvent AEventData);

void
ateTimePicker_SetOnDropDown(TDateTimePicker AObj, TNotifyEvent AEventData);

void
ateTimePicker_SetOnEnter(TDateTimePicker AObj, TNotifyEvent AEventData);

void
ateTimePicker_SetOnExit(TDateTimePicker AObj, TNotifyEvent AEventData);

void
ateTimePicker_SetOnKeyDown(TDateTimePicker AObj, TKeyEvent AEventData);

void
ateTimePicker_SetOnKeyPress(TDateTimePicker AObj, TKeyPressEvent AEventData);

void
ateTimePicker_SetOnKeyUp(TDateTimePicker AObj, TKeyEvent AEventData);

void
ateTimePicker_SetOnMouseEnter(TDateTimePicker AObj, TNotifyEvent AEventData);

void
ateTimePicker_SetOnMouseLeave(TDateTimePicker AObj, TNotifyEvent AEventData);

int32_t
ateTimePicker_GetDockClientCount(TDateTimePicker AObj);

BOOL
ateTimePicker_GetDockSite(TDateTimePicker AObj);

void
ateTimePicker_SetDockSite(TDateTimePicker AObj, BOOL AValue);

BOOL
ateTimePicker_GetMouseInClient(TDateTimePicker AObj);

int32_t
ateTimePicker_GetVisibleDockClientCount(TDateTimePicker AObj);

TBrush
ateTimePicker_GetBrush(TDateTimePicker AObj);

int32_t
ateTimePicker_GetControlCount(TDateTimePicker AObj);

HWND
ateTimePicker_GetHandle(TDateTimePicker AObj);

HWND
ateTimePicker_GetParentWindow(TDateTimePicker AObj);

void
ateTimePicker_SetParentWindow(TDateTimePicker AObj, HWND AValue);

BOOL
ateTimePicker_GetShowing(TDateTimePicker AObj);

BOOL
ateTimePicker_GetUseDockManager(TDateTimePicker AObj);

void
ateTimePicker_SetUseDockManager(TDateTimePicker AObj, BOOL AValue);

TAction
ateTimePicker_GetAction(TDateTimePicker AObj);

void
ateTimePicker_SetAction(TDateTimePicker AObj, TAction AValue);

TRect
ateTimePicker_GetBoundsRect(TDateTimePicker AObj);

void
ateTimePicker_SetBoundsRect(TDateTimePicker AObj, TRect AValue);

int32_t
ateTimePicker_GetClientHeight(TDateTimePicker AObj);

void
ateTimePicker_SetClientHeight(TDateTimePicker AObj, int32_t AValue);

TPoint
ateTimePicker_GetClientOrigin(TDateTimePicker AObj);

TRect
ateTimePicker_GetClientRect(TDateTimePicker AObj);

int32_t
ateTimePicker_GetClientWidth(TDateTimePicker AObj);

void
ateTimePicker_SetClientWidth(TDateTimePicker AObj, int32_t AValue);

TControlState
ateTimePicker_GetControlState(TDateTimePicker AObj);

void
ateTimePicker_SetControlState(TDateTimePicker AObj, TControlState AValue);

TControlStyle
ateTimePicker_GetControlStyle(TDateTimePicker AObj);

void
ateTimePicker_SetControlStyle(TDateTimePicker AObj, TControlStyle AValue);

BOOL
ateTimePicker_GetFloating(TDateTimePicker AObj);

TWinControl
ateTimePicker_GetParent(TDateTimePicker AObj);

void
ateTimePicker_SetParent(TDateTimePicker AObj, TWinControl AValue);

int32_t
ateTimePicker_GetLeft(TDateTimePicker AObj);

void
ateTimePicker_SetLeft(TDateTimePicker AObj, int32_t AValue);

int32_t
ateTimePicker_GetTop(TDateTimePicker AObj);

void
ateTimePicker_SetTop(TDateTimePicker AObj, int32_t AValue);

int32_t
ateTimePicker_GetWidth(TDateTimePicker AObj);

void
ateTimePicker_SetWidth(TDateTimePicker AObj, int32_t AValue);

int32_t
ateTimePicker_GetHeight(TDateTimePicker AObj);

void
ateTimePicker_SetHeight(TDateTimePicker AObj, int32_t AValue);

TCursor
ateTimePicker_GetCursor(TDateTimePicker AObj);

void
ateTimePicker_SetCursor(TDateTimePicker AObj, TCursor AValue);

char*
ateTimePicker_GetHint(TDateTimePicker AObj);

void
ateTimePicker_SetHint(TDateTimePicker AObj, CChar char* AValue);

int32_t
ateTimePicker_GetComponentCount(TDateTimePicker AObj);

int32_t
ateTimePicker_GetComponentIndex(TDateTimePicker AObj);

void
ateTimePicker_SetComponentIndex(TDateTimePicker AObj, int32_t AValue);

TComponent
ateTimePicker_GetOwner(TDateTimePicker AObj);

char*
ateTimePicker_GetName(TDateTimePicker AObj);

void
ateTimePicker_SetName(TDateTimePicker AObj, CChar char* AValue);

intptr_t
ateTimePicker_GetTag(TDateTimePicker AObj);

void
ateTimePicker_SetTag(TDateTimePicker AObj, intptr_t AValue);

TAnchorSide
ateTimePicker_GetAnchorSideLeft(TDateTimePicker AObj);

void
ateTimePicker_SetAnchorSideLeft(TDateTimePicker AObj, TAnchorSide AValue);

TAnchorSide
ateTimePicker_GetAnchorSideTop(TDateTimePicker AObj);

void
ateTimePicker_SetAnchorSideTop(TDateTimePicker AObj, TAnchorSide AValue);

TAnchorSide
ateTimePicker_GetAnchorSideRight(TDateTimePicker AObj);

void
ateTimePicker_SetAnchorSideRight(TDateTimePicker AObj, TAnchorSide AValue);

TAnchorSide
ateTimePicker_GetAnchorSideBottom(TDateTimePicker AObj);

void
ateTimePicker_SetAnchorSideBottom(TDateTimePicker AObj, TAnchorSide AValue);

TControlChildSizing
ateTimePicker_GetChildSizing(TDateTimePicker AObj);

void
ateTimePicker_SetChildSizing(TDateTimePicker AObj, TControlChildSizing AValue);

TControlBorderSpacing
ateTimePicker_GetBorderSpacing(TDateTimePicker AObj);

void
ateTimePicker_SetBorderSpacing(TDateTimePicker AObj, TControlBorderSpacing AValue);

TControl
ateTimePicker_GetDockClients(TDateTimePicker AObj, int32_t Index);

TControl
ateTimePicker_GetControls(TDateTimePicker AObj, int32_t Index);

TComponent
ateTimePicker_GetComponents(TDateTimePicker AObj, int32_t AIndex);

TAnchorSide
ateTimePicker_GetAnchorSide(TDateTimePicker AObj, TAnchorKind AKind);

TClass
ateTimePicker_StaticClassType();

// -------------------TMonthCalendar-------------------

TMonthCalendar
MonthCalendar_Create(TComponent AOwner);

void
MonthCalendar_Free(TMonthCalendar AObj);

BOOL
MonthCalendar_CanFocus(TMonthCalendar AObj);

BOOL
MonthCalendar_ContainsControl(TMonthCalendar AObj, TControl Control);

TControl
MonthCalendar_ControlAtPos(TMonthCalendar AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
MonthCalendar_DisableAlign(TMonthCalendar AObj);

void
MonthCalendar_EnableAlign(TMonthCalendar AObj);

TControl
MonthCalendar_FindChildControl(TMonthCalendar AObj, CChar char* ControlName);

void
MonthCalendar_FlipChildren(TMonthCalendar AObj, BOOL AllLevels);

BOOL
MonthCalendar_Focused(TMonthCalendar AObj);

BOOL
MonthCalendar_HandleAllocated(TMonthCalendar AObj);

void
MonthCalendar_InsertControl(TMonthCalendar AObj, TControl AControl);

void
MonthCalendar_Invalidate(TMonthCalendar AObj);

void
MonthCalendar_PaintTo(TMonthCalendar AObj, HDC DC, int32_t X, int32_t Y);

void
MonthCalendar_RemoveControl(TMonthCalendar AObj, TControl AControl);

void
MonthCalendar_Realign(TMonthCalendar AObj);

void
MonthCalendar_Repaint(TMonthCalendar AObj);

void
MonthCalendar_ScaleBy(TMonthCalendar AObj, int32_t M, int32_t D);

void
MonthCalendar_ScrollBy(TMonthCalendar AObj, int32_t DeltaX, int32_t DeltaY);

void
MonthCalendar_SetBounds(TMonthCalendar AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
MonthCalendar_SetFocus(TMonthCalendar AObj);

void
MonthCalendar_Update(TMonthCalendar AObj);

void
MonthCalendar_BringToFront(TMonthCalendar AObj);

TPoint
MonthCalendar_ClientToScreen(TMonthCalendar AObj, TPoint Point);

TPoint
MonthCalendar_ClientToParent(TMonthCalendar AObj, TPoint Point, TWinControl AParent);

BOOL
MonthCalendar_Dragging(TMonthCalendar AObj);

BOOL
MonthCalendar_HasParent(TMonthCalendar AObj);

void
MonthCalendar_Hide(TMonthCalendar AObj);

intptr_t
MonthCalendar_Perform(TMonthCalendar AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
MonthCalendar_Refresh(TMonthCalendar AObj);

TPoint
MonthCalendar_ScreenToClient(TMonthCalendar AObj, TPoint Point);

TPoint
MonthCalendar_ParentToClient(TMonthCalendar AObj, TPoint Point, TWinControl AParent);

void
MonthCalendar_SendToBack(TMonthCalendar AObj);

void
MonthCalendar_Show(TMonthCalendar AObj);

int32_t
MonthCalendar_GetTextBuf(TMonthCalendar AObj, CChar char* Buffer, int32_t BufSize);

int32_t
MonthCalendar_GetTextLen(TMonthCalendar AObj);

void
MonthCalendar_SetTextBuf(TMonthCalendar AObj, CChar char* Buffer);

TComponent
MonthCalendar_FindComponent(TMonthCalendar AObj, CChar char* AName);

char*
MonthCalendar_GetNamePath(TMonthCalendar AObj);

void
MonthCalendar_Assign(TMonthCalendar AObj, TObject Source);

TClass
MonthCalendar_ClassType(TMonthCalendar AObj);

char*
MonthCalendar_ClassName(TMonthCalendar AObj);

int32_t
MonthCalendar_InstanceSize(TMonthCalendar AObj);

BOOL
MonthCalendar_InheritsFrom(TMonthCalendar AObj, TClass AClass);

BOOL
MonthCalendar_Equals(TMonthCalendar AObj, TObject Obj);

int32_t
MonthCalendar_GetHashCode(TMonthCalendar AObj);

char*
MonthCalendar_ToString(TMonthCalendar AObj);

void
MonthCalendar_AnchorToNeighbour(TMonthCalendar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
MonthCalendar_AnchorParallel(TMonthCalendar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
MonthCalendar_AnchorHorizontalCenterTo(TMonthCalendar AObj, TControl ASibling);

void
MonthCalendar_AnchorVerticalCenterTo(TMonthCalendar AObj, TControl ASibling);

void
MonthCalendar_AnchorSame(TMonthCalendar AObj, TAnchorKind ASide, TControl ASibling);

void
MonthCalendar_AnchorAsAlign(TMonthCalendar AObj, TAlign ATheAlign, int32_t ASpace);

void
MonthCalendar_AnchorClient(TMonthCalendar AObj, int32_t ASpace);

int32_t
MonthCalendar_ScaleDesignToForm(TMonthCalendar AObj, int32_t ASize);

int32_t
MonthCalendar_ScaleFormToDesign(TMonthCalendar AObj, int32_t ASize);

int32_t
MonthCalendar_Scale96ToForm(TMonthCalendar AObj, int32_t ASize);

int32_t
MonthCalendar_ScaleFormTo96(TMonthCalendar AObj, int32_t ASize);

int32_t
MonthCalendar_Scale96ToFont(TMonthCalendar AObj, int32_t ASize);

int32_t
MonthCalendar_ScaleFontTo96(TMonthCalendar AObj, int32_t ASize);

int32_t
MonthCalendar_ScaleScreenToFont(TMonthCalendar AObj, int32_t ASize);

int32_t
MonthCalendar_ScaleFontToScreen(TMonthCalendar AObj, int32_t ASize);

int32_t
MonthCalendar_Scale96ToScreen(TMonthCalendar AObj, int32_t ASize);

int32_t
MonthCalendar_ScaleScreenTo96(TMonthCalendar AObj, int32_t ASize);

void
MonthCalendar_AutoAdjustLayout(TMonthCalendar AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
MonthCalendar_FixDesignFontsPPI(TMonthCalendar AObj, int32_t ADesignTimePPI);

void
MonthCalendar_ScaleFontsPPI(TMonthCalendar AObj, int32_t AToPPI, double AProportion);

uint32_t
MonthCalendar_GetDateTime(TMonthCalendar AObj);

void
MonthCalendar_SetDateTime(TMonthCalendar AObj, uint32_t AValue);

TAlign
MonthCalendar_GetAlign(TMonthCalendar AObj);

void
MonthCalendar_SetAlign(TMonthCalendar AObj, TAlign AValue);

TAnchors
MonthCalendar_GetAnchors(TMonthCalendar AObj);

void
MonthCalendar_SetAnchors(TMonthCalendar AObj, TAnchors AValue);

BOOL
MonthCalendar_GetAutoSize(TMonthCalendar AObj);

void
MonthCalendar_SetAutoSize(TMonthCalendar AObj, BOOL AValue);

int32_t
MonthCalendar_GetBorderWidth(TMonthCalendar AObj);

void
MonthCalendar_SetBorderWidth(TMonthCalendar AObj, int32_t AValue);

TBiDiMode
MonthCalendar_GetBiDiMode(TMonthCalendar AObj);

void
MonthCalendar_SetBiDiMode(TMonthCalendar AObj, TBiDiMode AValue);

TSizeConstraints
MonthCalendar_GetConstraints(TMonthCalendar AObj);

void
MonthCalendar_SetConstraints(TMonthCalendar AObj, TSizeConstraints AValue);

uint32_t
MonthCalendar_GetDate(TMonthCalendar AObj);

void
MonthCalendar_SetDate(TMonthCalendar AObj, uint32_t AValue);

BOOL
MonthCalendar_GetDoubleBuffered(TMonthCalendar AObj);

void
MonthCalendar_SetDoubleBuffered(TMonthCalendar AObj, BOOL AValue);

TCursor
MonthCalendar_GetDragCursor(TMonthCalendar AObj);

void
MonthCalendar_SetDragCursor(TMonthCalendar AObj, TCursor AValue);

TDragKind
MonthCalendar_GetDragKind(TMonthCalendar AObj);

void
MonthCalendar_SetDragKind(TMonthCalendar AObj, TDragKind AValue);

TDragMode
MonthCalendar_GetDragMode(TMonthCalendar AObj);

void
MonthCalendar_SetDragMode(TMonthCalendar AObj, TDragMode AValue);

BOOL
MonthCalendar_GetEnabled(TMonthCalendar AObj);

void
MonthCalendar_SetEnabled(TMonthCalendar AObj, BOOL AValue);

TFont
MonthCalendar_GetFont(TMonthCalendar AObj);

void
MonthCalendar_SetFont(TMonthCalendar AObj, TFont AValue);

BOOL
MonthCalendar_GetParentDoubleBuffered(TMonthCalendar AObj);

void
MonthCalendar_SetParentDoubleBuffered(TMonthCalendar AObj, BOOL AValue);

TPopupMenu
MonthCalendar_GetPopupMenu(TMonthCalendar AObj);

void
MonthCalendar_SetPopupMenu(TMonthCalendar AObj, TPopupMenu AValue);

BOOL
MonthCalendar_GetShowHint(TMonthCalendar AObj);

void
MonthCalendar_SetShowHint(TMonthCalendar AObj, BOOL AValue);

TTabOrder
MonthCalendar_GetTabOrder(TMonthCalendar AObj);

void
MonthCalendar_SetTabOrder(TMonthCalendar AObj, TTabOrder AValue);

BOOL
MonthCalendar_GetTabStop(TMonthCalendar AObj);

void
MonthCalendar_SetTabStop(TMonthCalendar AObj, BOOL AValue);

BOOL
MonthCalendar_GetVisible(TMonthCalendar AObj);

void
MonthCalendar_SetVisible(TMonthCalendar AObj, BOOL AValue);

void
MonthCalendar_SetOnClick(TMonthCalendar AObj, TNotifyEvent AEventData);

void
MonthCalendar_SetOnContextPopup(TMonthCalendar AObj, TContextPopupEvent AEventData);

void
MonthCalendar_SetOnDblClick(TMonthCalendar AObj, TNotifyEvent AEventData);

void
MonthCalendar_SetOnDragDrop(TMonthCalendar AObj, TDragDropEvent AEventData);

void
MonthCalendar_SetOnDragOver(TMonthCalendar AObj, TDragOverEvent AEventData);

void
MonthCalendar_SetOnEndDock(TMonthCalendar AObj, TEndDragEvent AEventData);

void
MonthCalendar_SetOnEndDrag(TMonthCalendar AObj, TEndDragEvent AEventData);

void
MonthCalendar_SetOnEnter(TMonthCalendar AObj, TNotifyEvent AEventData);

void
MonthCalendar_SetOnExit(TMonthCalendar AObj, TNotifyEvent AEventData);

void
MonthCalendar_SetOnKeyDown(TMonthCalendar AObj, TKeyEvent AEventData);

void
MonthCalendar_SetOnKeyPress(TMonthCalendar AObj, TKeyPressEvent AEventData);

void
MonthCalendar_SetOnKeyUp(TMonthCalendar AObj, TKeyEvent AEventData);

void
MonthCalendar_SetOnMouseEnter(TMonthCalendar AObj, TNotifyEvent AEventData);

void
MonthCalendar_SetOnMouseLeave(TMonthCalendar AObj, TNotifyEvent AEventData);

void
MonthCalendar_SetOnStartDock(TMonthCalendar AObj, TStartDockEvent AEventData);

int32_t
MonthCalendar_GetDockClientCount(TMonthCalendar AObj);

BOOL
MonthCalendar_GetDockSite(TMonthCalendar AObj);

void
MonthCalendar_SetDockSite(TMonthCalendar AObj, BOOL AValue);

BOOL
MonthCalendar_GetMouseInClient(TMonthCalendar AObj);

int32_t
MonthCalendar_GetVisibleDockClientCount(TMonthCalendar AObj);

TBrush
MonthCalendar_GetBrush(TMonthCalendar AObj);

int32_t
MonthCalendar_GetControlCount(TMonthCalendar AObj);

HWND
MonthCalendar_GetHandle(TMonthCalendar AObj);

HWND
MonthCalendar_GetParentWindow(TMonthCalendar AObj);

void
MonthCalendar_SetParentWindow(TMonthCalendar AObj, HWND AValue);

BOOL
MonthCalendar_GetShowing(TMonthCalendar AObj);

BOOL
MonthCalendar_GetUseDockManager(TMonthCalendar AObj);

void
MonthCalendar_SetUseDockManager(TMonthCalendar AObj, BOOL AValue);

TAction
MonthCalendar_GetAction(TMonthCalendar AObj);

void
MonthCalendar_SetAction(TMonthCalendar AObj, TAction AValue);

TRect
MonthCalendar_GetBoundsRect(TMonthCalendar AObj);

void
MonthCalendar_SetBoundsRect(TMonthCalendar AObj, TRect AValue);

int32_t
MonthCalendar_GetClientHeight(TMonthCalendar AObj);

void
MonthCalendar_SetClientHeight(TMonthCalendar AObj, int32_t AValue);

TPoint
MonthCalendar_GetClientOrigin(TMonthCalendar AObj);

TRect
MonthCalendar_GetClientRect(TMonthCalendar AObj);

int32_t
MonthCalendar_GetClientWidth(TMonthCalendar AObj);

void
MonthCalendar_SetClientWidth(TMonthCalendar AObj, int32_t AValue);

TControlState
MonthCalendar_GetControlState(TMonthCalendar AObj);

void
MonthCalendar_SetControlState(TMonthCalendar AObj, TControlState AValue);

TControlStyle
MonthCalendar_GetControlStyle(TMonthCalendar AObj);

void
MonthCalendar_SetControlStyle(TMonthCalendar AObj, TControlStyle AValue);

BOOL
MonthCalendar_GetFloating(TMonthCalendar AObj);

TWinControl
MonthCalendar_GetParent(TMonthCalendar AObj);

void
MonthCalendar_SetParent(TMonthCalendar AObj, TWinControl AValue);

int32_t
MonthCalendar_GetLeft(TMonthCalendar AObj);

void
MonthCalendar_SetLeft(TMonthCalendar AObj, int32_t AValue);

int32_t
MonthCalendar_GetTop(TMonthCalendar AObj);

void
MonthCalendar_SetTop(TMonthCalendar AObj, int32_t AValue);

int32_t
MonthCalendar_GetWidth(TMonthCalendar AObj);

void
MonthCalendar_SetWidth(TMonthCalendar AObj, int32_t AValue);

int32_t
MonthCalendar_GetHeight(TMonthCalendar AObj);

void
MonthCalendar_SetHeight(TMonthCalendar AObj, int32_t AValue);

TCursor
MonthCalendar_GetCursor(TMonthCalendar AObj);

void
MonthCalendar_SetCursor(TMonthCalendar AObj, TCursor AValue);

char*
MonthCalendar_GetHint(TMonthCalendar AObj);

void
MonthCalendar_SetHint(TMonthCalendar AObj, CChar char* AValue);

int32_t
MonthCalendar_GetComponentCount(TMonthCalendar AObj);

int32_t
MonthCalendar_GetComponentIndex(TMonthCalendar AObj);

void
MonthCalendar_SetComponentIndex(TMonthCalendar AObj, int32_t AValue);

TComponent
MonthCalendar_GetOwner(TMonthCalendar AObj);

char*
MonthCalendar_GetName(TMonthCalendar AObj);

void
MonthCalendar_SetName(TMonthCalendar AObj, CChar char* AValue);

intptr_t
MonthCalendar_GetTag(TMonthCalendar AObj);

void
MonthCalendar_SetTag(TMonthCalendar AObj, intptr_t AValue);

TAnchorSide
MonthCalendar_GetAnchorSideLeft(TMonthCalendar AObj);

void
MonthCalendar_SetAnchorSideLeft(TMonthCalendar AObj, TAnchorSide AValue);

TAnchorSide
MonthCalendar_GetAnchorSideTop(TMonthCalendar AObj);

void
MonthCalendar_SetAnchorSideTop(TMonthCalendar AObj, TAnchorSide AValue);

TAnchorSide
MonthCalendar_GetAnchorSideRight(TMonthCalendar AObj);

void
MonthCalendar_SetAnchorSideRight(TMonthCalendar AObj, TAnchorSide AValue);

TAnchorSide
MonthCalendar_GetAnchorSideBottom(TMonthCalendar AObj);

void
MonthCalendar_SetAnchorSideBottom(TMonthCalendar AObj, TAnchorSide AValue);

TControlChildSizing
MonthCalendar_GetChildSizing(TMonthCalendar AObj);

void
MonthCalendar_SetChildSizing(TMonthCalendar AObj, TControlChildSizing AValue);

TControlBorderSpacing
MonthCalendar_GetBorderSpacing(TMonthCalendar AObj);

void
MonthCalendar_SetBorderSpacing(TMonthCalendar AObj, TControlBorderSpacing AValue);

TControl
MonthCalendar_GetDockClients(TMonthCalendar AObj, int32_t Index);

TControl
MonthCalendar_GetControls(TMonthCalendar AObj, int32_t Index);

TComponent
MonthCalendar_GetComponents(TMonthCalendar AObj, int32_t AIndex);

TAnchorSide
MonthCalendar_GetAnchorSide(TMonthCalendar AObj, TAnchorKind AKind);

TClass
MonthCalendar_StaticClassType();

// -------------------TListView-------------------

TListView
ListView_Create(TComponent AOwner);

void
ListView_Free(TListView AObj);

void
ListView_AddItem(TListView AObj, CChar char* Item, TObject AObject);

BOOL
ListView_AlphaSort(TListView AObj);

void
ListView_Clear(TListView AObj);

void
ListView_ClearSelection(TListView AObj);

void
ListView_DeleteSelected(TListView AObj);

THitTests
ListView_GetHitTestInfoAt(TListView AObj, int32_t X, int32_t Y);

TListItem
ListView_GetItemAt(TListView AObj, int32_t X, int32_t Y);

TListItem
ListView_GetNearestItem(TListView AObj, TPoint Point, TSearchDirection Direction);

TListItem
ListView_GetNextItem(TListView AObj, TListItem StartItem, TSearchDirection Direction, TListItemStates States);

BOOL
ListView_IsEditing(TListView AObj);

void
ListView_SelectAll(TListView AObj);

BOOL
ListView_CustomSort(TListView AObj, PFNLVCOMPARE SortProc, intptr_t lParam);

BOOL
ListView_CanFocus(TListView AObj);

BOOL
ListView_ContainsControl(TListView AObj, TControl Control);

TControl
ListView_ControlAtPos(TListView AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
ListView_DisableAlign(TListView AObj);

void
ListView_EnableAlign(TListView AObj);

TControl
ListView_FindChildControl(TListView AObj, CChar char* ControlName);

void
ListView_FlipChildren(TListView AObj, BOOL AllLevels);

BOOL
ListView_Focused(TListView AObj);

BOOL
ListView_HandleAllocated(TListView AObj);

void
ListView_InsertControl(TListView AObj, TControl AControl);

void
ListView_Invalidate(TListView AObj);

void
ListView_PaintTo(TListView AObj, HDC DC, int32_t X, int32_t Y);

void
ListView_RemoveControl(TListView AObj, TControl AControl);

void
ListView_Realign(TListView AObj);

void
ListView_Repaint(TListView AObj);

void
ListView_ScaleBy(TListView AObj, int32_t M, int32_t D);

void
ListView_ScrollBy(TListView AObj, int32_t DeltaX, int32_t DeltaY);

void
ListView_SetBounds(TListView AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ListView_SetFocus(TListView AObj);

void
ListView_Update(TListView AObj);

void
ListView_BringToFront(TListView AObj);

TPoint
ListView_ClientToScreen(TListView AObj, TPoint Point);

TPoint
ListView_ClientToParent(TListView AObj, TPoint Point, TWinControl AParent);

BOOL
ListView_Dragging(TListView AObj);

BOOL
ListView_HasParent(TListView AObj);

void
ListView_Hide(TListView AObj);

intptr_t
ListView_Perform(TListView AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ListView_Refresh(TListView AObj);

TPoint
ListView_ScreenToClient(TListView AObj, TPoint Point);

TPoint
ListView_ParentToClient(TListView AObj, TPoint Point, TWinControl AParent);

void
ListView_SendToBack(TListView AObj);

void
ListView_Show(TListView AObj);

int32_t
ListView_GetTextBuf(TListView AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ListView_GetTextLen(TListView AObj);

void
ListView_SetTextBuf(TListView AObj, CChar char* Buffer);

TComponent
ListView_FindComponent(TListView AObj, CChar char* AName);

char*
ListView_GetNamePath(TListView AObj);

void
ListView_Assign(TListView AObj, TObject Source);

TClass
ListView_ClassType(TListView AObj);

char*
ListView_ClassName(TListView AObj);

int32_t
ListView_InstanceSize(TListView AObj);

BOOL
ListView_InheritsFrom(TListView AObj, TClass AClass);

BOOL
ListView_Equals(TListView AObj, TObject Obj);

int32_t
ListView_GetHashCode(TListView AObj);

char*
ListView_ToString(TListView AObj);

void
ListView_AnchorToNeighbour(TListView AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ListView_AnchorParallel(TListView AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ListView_AnchorHorizontalCenterTo(TListView AObj, TControl ASibling);

void
ListView_AnchorVerticalCenterTo(TListView AObj, TControl ASibling);

void
ListView_AnchorSame(TListView AObj, TAnchorKind ASide, TControl ASibling);

void
ListView_AnchorAsAlign(TListView AObj, TAlign ATheAlign, int32_t ASpace);

void
ListView_AnchorClient(TListView AObj, int32_t ASpace);

int32_t
ListView_ScaleDesignToForm(TListView AObj, int32_t ASize);

int32_t
ListView_ScaleFormToDesign(TListView AObj, int32_t ASize);

int32_t
ListView_Scale96ToForm(TListView AObj, int32_t ASize);

int32_t
ListView_ScaleFormTo96(TListView AObj, int32_t ASize);

int32_t
ListView_Scale96ToFont(TListView AObj, int32_t ASize);

int32_t
ListView_ScaleFontTo96(TListView AObj, int32_t ASize);

int32_t
ListView_ScaleScreenToFont(TListView AObj, int32_t ASize);

int32_t
ListView_ScaleFontToScreen(TListView AObj, int32_t ASize);

int32_t
ListView_Scale96ToScreen(TListView AObj, int32_t ASize);

int32_t
ListView_ScaleScreenTo96(TListView AObj, int32_t ASize);

void
ListView_AutoAdjustLayout(TListView AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ListView_FixDesignFontsPPI(TListView AObj, int32_t ADesignTimePPI);

void
ListView_ScaleFontsPPI(TListView AObj, int32_t AToPPI, double AProportion);

BOOL
ListView_GetAutoSort(TListView AObj);

void
ListView_SetAutoSort(TListView AObj, BOOL AValue);

BOOL
ListView_GetAutoSortIndicator(TListView AObj);

void
ListView_SetAutoSortIndicator(TListView AObj, BOOL AValue);

BOOL
ListView_GetAutoWidthLastColumn(TListView AObj);

void
ListView_SetAutoWidthLastColumn(TListView AObj, BOOL AValue);

int32_t
ListView_GetSmallImagesWidth(TListView AObj);

void
ListView_SetSmallImagesWidth(TListView AObj, int32_t AValue);

int32_t
ListView_GetSortColumn(TListView AObj);

void
ListView_SetSortColumn(TListView AObj, int32_t AValue);

TSortDirection
ListView_GetSortDirection(TListView AObj);

void
ListView_SetSortDirection(TListView AObj, TSortDirection AValue);

int32_t
ListView_GetLargeImagesWidth(TListView AObj);

void
ListView_SetLargeImagesWidth(TListView AObj, int32_t AValue);

int32_t
ListView_GetStateImagesWidth(TListView AObj);

void
ListView_SetStateImagesWidth(TListView AObj, int32_t AValue);

BOOL
ListView_GetToolTips(TListView AObj);

void
ListView_SetToolTips(TListView AObj, BOOL AValue);

TScrollStyle
ListView_GetScrollBars(TListView AObj);

void
ListView_SetScrollBars(TListView AObj, TScrollStyle AValue);

int32_t
ListView_GetColumnCount(TListView AObj);

TAction
ListView_GetAction(TListView AObj);

void
ListView_SetAction(TListView AObj, TAction AValue);

TAlign
ListView_GetAlign(TListView AObj);

void
ListView_SetAlign(TListView AObj, TAlign AValue);

int32_t
ListView_GetAllocBy(TListView AObj);

void
ListView_SetAllocBy(TListView AObj, int32_t AValue);

TAnchors
ListView_GetAnchors(TListView AObj);

void
ListView_SetAnchors(TListView AObj, TAnchors AValue);

TBiDiMode
ListView_GetBiDiMode(TListView AObj);

void
ListView_SetBiDiMode(TListView AObj, TBiDiMode AValue);

TBorderStyle
ListView_GetBorderStyle(TListView AObj);

void
ListView_SetBorderStyle(TListView AObj, TBorderStyle AValue);

int32_t
ListView_GetBorderWidth(TListView AObj);

void
ListView_SetBorderWidth(TListView AObj, int32_t AValue);

BOOL
ListView_GetCheckboxes(TListView AObj);

void
ListView_SetCheckboxes(TListView AObj, BOOL AValue);

TColor
ListView_GetColor(TListView AObj);

void
ListView_SetColor(TListView AObj, TColor AValue);

TListColumns
ListView_GetColumns(TListView AObj);

void
ListView_SetColumns(TListView AObj, TListColumns AValue);

BOOL
ListView_GetColumnClick(TListView AObj);

void
ListView_SetColumnClick(TListView AObj, BOOL AValue);

TSizeConstraints
ListView_GetConstraints(TListView AObj);

void
ListView_SetConstraints(TListView AObj, TSizeConstraints AValue);

BOOL
ListView_GetDoubleBuffered(TListView AObj);

void
ListView_SetDoubleBuffered(TListView AObj, BOOL AValue);

TCursor
ListView_GetDragCursor(TListView AObj);

void
ListView_SetDragCursor(TListView AObj, TCursor AValue);

TDragKind
ListView_GetDragKind(TListView AObj);

void
ListView_SetDragKind(TListView AObj, TDragKind AValue);

TDragMode
ListView_GetDragMode(TListView AObj);

void
ListView_SetDragMode(TListView AObj, TDragMode AValue);

BOOL
ListView_GetEnabled(TListView AObj);

void
ListView_SetEnabled(TListView AObj, BOOL AValue);

TFont
ListView_GetFont(TListView AObj);

void
ListView_SetFont(TListView AObj, TFont AValue);

BOOL
ListView_GetFlatScrollBars(TListView AObj);

void
ListView_SetFlatScrollBars(TListView AObj, BOOL AValue);

BOOL
ListView_GetFullDrag(TListView AObj);

void
ListView_SetFullDrag(TListView AObj, BOOL AValue);

BOOL
ListView_GetGridLines(TListView AObj);

void
ListView_SetGridLines(TListView AObj, BOOL AValue);

BOOL
ListView_GetHideSelection(TListView AObj);

void
ListView_SetHideSelection(TListView AObj, BOOL AValue);

BOOL
ListView_GetHotTrack(TListView AObj);

void
ListView_SetHotTrack(TListView AObj, BOOL AValue);

TIconOptions
ListView_GetIconOptions(TListView AObj);

void
ListView_SetIconOptions(TListView AObj, TIconOptions AValue);

TListItems
ListView_GetItems(TListView AObj);

void
ListView_SetItems(TListView AObj, TListItems AValue);

TImageList
ListView_GetLargeImages(TListView AObj);

void
ListView_SetLargeImages(TListView AObj, TImageList AValue);

BOOL
ListView_GetMultiSelect(TListView AObj);

void
ListView_SetMultiSelect(TListView AObj, BOOL AValue);

BOOL
ListView_GetOwnerData(TListView AObj);

void
ListView_SetOwnerData(TListView AObj, BOOL AValue);

BOOL
ListView_GetOwnerDraw(TListView AObj);

void
ListView_SetOwnerDraw(TListView AObj, BOOL AValue);

BOOL
ListView_GetReadOnly(TListView AObj);

void
ListView_SetReadOnly(TListView AObj, BOOL AValue);

BOOL
ListView_GetRowSelect(TListView AObj);

void
ListView_SetRowSelect(TListView AObj, BOOL AValue);

BOOL
ListView_GetParentColor(TListView AObj);

void
ListView_SetParentColor(TListView AObj, BOOL AValue);

BOOL
ListView_GetParentDoubleBuffered(TListView AObj);

void
ListView_SetParentDoubleBuffered(TListView AObj, BOOL AValue);

BOOL
ListView_GetParentFont(TListView AObj);

void
ListView_SetParentFont(TListView AObj, BOOL AValue);

BOOL
ListView_GetParentShowHint(TListView AObj);

void
ListView_SetParentShowHint(TListView AObj, BOOL AValue);

TPopupMenu
ListView_GetPopupMenu(TListView AObj);

void
ListView_SetPopupMenu(TListView AObj, TPopupMenu AValue);

BOOL
ListView_GetShowColumnHeaders(TListView AObj);

void
ListView_SetShowColumnHeaders(TListView AObj, BOOL AValue);

BOOL
ListView_GetShowHint(TListView AObj);

void
ListView_SetShowHint(TListView AObj, BOOL AValue);

TImageList
ListView_GetSmallImages(TListView AObj);

void
ListView_SetSmallImages(TListView AObj, TImageList AValue);

TSortType
ListView_GetSortType(TListView AObj);

void
ListView_SetSortType(TListView AObj, TSortType AValue);

TImageList
ListView_GetStateImages(TListView AObj);

void
ListView_SetStateImages(TListView AObj, TImageList AValue);

TTabOrder
ListView_GetTabOrder(TListView AObj);

void
ListView_SetTabOrder(TListView AObj, TTabOrder AValue);

BOOL
ListView_GetTabStop(TListView AObj);

void
ListView_SetTabStop(TListView AObj, BOOL AValue);

TViewStyle
ListView_GetViewStyle(TListView AObj);

void
ListView_SetViewStyle(TListView AObj, TViewStyle AValue);

BOOL
ListView_GetVisible(TListView AObj);

void
ListView_SetVisible(TListView AObj, BOOL AValue);

void
ListView_SetOnAdvancedCustomDraw(TListView AObj, TLVAdvancedCustomDrawEvent AEventData);

void
ListView_SetOnAdvancedCustomDrawItem(TListView AObj, TLVAdvancedCustomDrawItemEvent AEventData);

void
ListView_SetOnAdvancedCustomDrawSubItem(TListView AObj, TLVAdvancedCustomDrawSubItemEvent AEventData);

void
ListView_SetOnChange(TListView AObj, TLVChangeEvent AEventData);

void
ListView_SetOnClick(TListView AObj, TNotifyEvent AEventData);

void
ListView_SetOnColumnClick(TListView AObj, TLVColumnClickEvent AEventData);

void
ListView_SetOnCompare(TListView AObj, TLVCompareEvent AEventData);

void
ListView_SetOnContextPopup(TListView AObj, TContextPopupEvent AEventData);

void
ListView_SetOnCustomDraw(TListView AObj, TLVCustomDrawEvent AEventData);

void
ListView_SetOnCustomDrawItem(TListView AObj, TLVCustomDrawItemEvent AEventData);

void
ListView_SetOnCustomDrawSubItem(TListView AObj, TLVCustomDrawSubItemEvent AEventData);

void
ListView_SetOnData(TListView AObj, TLVDataEvent AEventData);

void
ListView_SetOnDataFind(TListView AObj, TLVDataFindEvent AEventData);

void
ListView_SetOnDataHint(TListView AObj, TLVDataHintEvent AEventData);

void
ListView_SetOnDblClick(TListView AObj, TNotifyEvent AEventData);

void
ListView_SetOnDeletion(TListView AObj, TLVDeletedEvent AEventData);

void
ListView_SetOnDrawItem(TListView AObj, TLVDrawItemEvent AEventData);

void
ListView_SetOnEdited(TListView AObj, TLVEditedEvent AEventData);

void
ListView_SetOnEditing(TListView AObj, TLVEditingEvent AEventData);

void
ListView_SetOnEndDock(TListView AObj, TEndDragEvent AEventData);

void
ListView_SetOnEndDrag(TListView AObj, TEndDragEvent AEventData);

void
ListView_SetOnEnter(TListView AObj, TNotifyEvent AEventData);

void
ListView_SetOnExit(TListView AObj, TNotifyEvent AEventData);

void
ListView_SetOnDragDrop(TListView AObj, TDragDropEvent AEventData);

void
ListView_SetOnDragOver(TListView AObj, TDragOverEvent AEventData);

void
ListView_SetOnInsert(TListView AObj, TLVDeletedEvent AEventData);

void
ListView_SetOnKeyDown(TListView AObj, TKeyEvent AEventData);

void
ListView_SetOnKeyPress(TListView AObj, TKeyPressEvent AEventData);

void
ListView_SetOnKeyUp(TListView AObj, TKeyEvent AEventData);

void
ListView_SetOnMouseDown(TListView AObj, TMouseEvent AEventData);

void
ListView_SetOnMouseEnter(TListView AObj, TNotifyEvent AEventData);

void
ListView_SetOnMouseLeave(TListView AObj, TNotifyEvent AEventData);

void
ListView_SetOnMouseMove(TListView AObj, TMouseMoveEvent AEventData);

void
ListView_SetOnMouseUp(TListView AObj, TMouseEvent AEventData);

void
ListView_SetOnResize(TListView AObj, TNotifyEvent AEventData);

void
ListView_SetOnSelectItem(TListView AObj, TLVSelectItemEvent AEventData);

void
ListView_SetOnItemChecked(TListView AObj, TLVCheckedItemEvent AEventData);

void
ListView_SetOnStartDock(TListView AObj, TStartDockEvent AEventData);

TCanvas
ListView_GetCanvas(TListView AObj);

TListItem
ListView_GetDropTarget(TListView AObj);

void
ListView_SetDropTarget(TListView AObj, TListItem AValue);

TListItem
ListView_GetItemFocused(TListView AObj);

void
ListView_SetItemFocused(TListView AObj, TListItem AValue);

int32_t
ListView_GetSelCount(TListView AObj);

TListItem
ListView_GetSelected(TListView AObj);

void
ListView_SetSelected(TListView AObj, TListItem AValue);

TListItem
ListView_GetTopItem(TListView AObj);

int32_t
ListView_GetVisibleRowCount(TListView AObj);

int32_t
ListView_GetItemIndex(TListView AObj);

void
ListView_SetItemIndex(TListView AObj, int32_t AValue);

int32_t
ListView_GetDockClientCount(TListView AObj);

BOOL
ListView_GetDockSite(TListView AObj);

void
ListView_SetDockSite(TListView AObj, BOOL AValue);

BOOL
ListView_GetMouseInClient(TListView AObj);

int32_t
ListView_GetVisibleDockClientCount(TListView AObj);

TBrush
ListView_GetBrush(TListView AObj);

int32_t
ListView_GetControlCount(TListView AObj);

HWND
ListView_GetHandle(TListView AObj);

HWND
ListView_GetParentWindow(TListView AObj);

void
ListView_SetParentWindow(TListView AObj, HWND AValue);

BOOL
ListView_GetShowing(TListView AObj);

BOOL
ListView_GetUseDockManager(TListView AObj);

void
ListView_SetUseDockManager(TListView AObj, BOOL AValue);

TRect
ListView_GetBoundsRect(TListView AObj);

void
ListView_SetBoundsRect(TListView AObj, TRect AValue);

int32_t
ListView_GetClientHeight(TListView AObj);

void
ListView_SetClientHeight(TListView AObj, int32_t AValue);

TPoint
ListView_GetClientOrigin(TListView AObj);

TRect
ListView_GetClientRect(TListView AObj);

int32_t
ListView_GetClientWidth(TListView AObj);

void
ListView_SetClientWidth(TListView AObj, int32_t AValue);

TControlState
ListView_GetControlState(TListView AObj);

void
ListView_SetControlState(TListView AObj, TControlState AValue);

TControlStyle
ListView_GetControlStyle(TListView AObj);

void
ListView_SetControlStyle(TListView AObj, TControlStyle AValue);

BOOL
ListView_GetFloating(TListView AObj);

TWinControl
ListView_GetParent(TListView AObj);

void
ListView_SetParent(TListView AObj, TWinControl AValue);

int32_t
ListView_GetLeft(TListView AObj);

void
ListView_SetLeft(TListView AObj, int32_t AValue);

int32_t
ListView_GetTop(TListView AObj);

void
ListView_SetTop(TListView AObj, int32_t AValue);

int32_t
ListView_GetWidth(TListView AObj);

void
ListView_SetWidth(TListView AObj, int32_t AValue);

int32_t
ListView_GetHeight(TListView AObj);

void
ListView_SetHeight(TListView AObj, int32_t AValue);

TCursor
ListView_GetCursor(TListView AObj);

void
ListView_SetCursor(TListView AObj, TCursor AValue);

char*
ListView_GetHint(TListView AObj);

void
ListView_SetHint(TListView AObj, CChar char* AValue);

int32_t
ListView_GetComponentCount(TListView AObj);

int32_t
ListView_GetComponentIndex(TListView AObj);

void
ListView_SetComponentIndex(TListView AObj, int32_t AValue);

TComponent
ListView_GetOwner(TListView AObj);

char*
ListView_GetName(TListView AObj);

void
ListView_SetName(TListView AObj, CChar char* AValue);

intptr_t
ListView_GetTag(TListView AObj);

void
ListView_SetTag(TListView AObj, intptr_t AValue);

TAnchorSide
ListView_GetAnchorSideLeft(TListView AObj);

void
ListView_SetAnchorSideLeft(TListView AObj, TAnchorSide AValue);

TAnchorSide
ListView_GetAnchorSideTop(TListView AObj);

void
ListView_SetAnchorSideTop(TListView AObj, TAnchorSide AValue);

TAnchorSide
ListView_GetAnchorSideRight(TListView AObj);

void
ListView_SetAnchorSideRight(TListView AObj, TAnchorSide AValue);

TAnchorSide
ListView_GetAnchorSideBottom(TListView AObj);

void
ListView_SetAnchorSideBottom(TListView AObj, TAnchorSide AValue);

TControlChildSizing
ListView_GetChildSizing(TListView AObj);

void
ListView_SetChildSizing(TListView AObj, TControlChildSizing AValue);

TControlBorderSpacing
ListView_GetBorderSpacing(TListView AObj);

void
ListView_SetBorderSpacing(TListView AObj, TControlBorderSpacing AValue);

TListColumn
ListView_GetColumn(TListView AObj, int32_t Index);

TControl
ListView_GetDockClients(TListView AObj, int32_t Index);

TControl
ListView_GetControls(TListView AObj, int32_t Index);

TComponent
ListView_GetComponents(TListView AObj, int32_t AIndex);

TAnchorSide
ListView_GetAnchorSide(TListView AObj, TAnchorKind AKind);

TClass
ListView_StaticClassType();

// -------------------TTreeView-------------------

TTreeView
TreeView_Create(TComponent AOwner);

void
TreeView_Free(TTreeView AObj);

BOOL
TreeView_AlphaSort(TTreeView AObj, BOOL ARecurse);

void
TreeView_FullCollapse(TTreeView AObj);

void
TreeView_FullExpand(TTreeView AObj);

THitTests
TreeView_GetHitTestInfoAt(TTreeView AObj, int32_t X, int32_t Y);

TTreeNode
TreeView_GetNodeAt(TTreeView AObj, int32_t X, int32_t Y);

BOOL
TreeView_IsEditing(TTreeView AObj);

void
TreeView_LoadFromFile(TTreeView AObj, CChar char* FileName);

void
TreeView_LoadFromStream(TTreeView AObj, TStream Stream);

void
TreeView_SaveToFile(TTreeView AObj, CChar char* FileName);

void
TreeView_SaveToStream(TTreeView AObj, TStream Stream);

void
TreeView_ClearSelection(TTreeView AObj, BOOL KeepPrimary);

BOOL
TreeView_CustomSort(TTreeView AObj, PFNTVCOMPARE SortProc, intptr_t Data, BOOL ARecurse);

BOOL
TreeView_CanFocus(TTreeView AObj);

BOOL
TreeView_ContainsControl(TTreeView AObj, TControl Control);

TControl
TreeView_ControlAtPos(TTreeView AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
TreeView_DisableAlign(TTreeView AObj);

void
TreeView_EnableAlign(TTreeView AObj);

TControl
TreeView_FindChildControl(TTreeView AObj, CChar char* ControlName);

void
TreeView_FlipChildren(TTreeView AObj, BOOL AllLevels);

BOOL
TreeView_Focused(TTreeView AObj);

BOOL
TreeView_HandleAllocated(TTreeView AObj);

void
TreeView_InsertControl(TTreeView AObj, TControl AControl);

void
TreeView_Invalidate(TTreeView AObj);

void
TreeView_PaintTo(TTreeView AObj, HDC DC, int32_t X, int32_t Y);

void
TreeView_RemoveControl(TTreeView AObj, TControl AControl);

void
TreeView_Realign(TTreeView AObj);

void
TreeView_Repaint(TTreeView AObj);

void
TreeView_ScaleBy(TTreeView AObj, int32_t M, int32_t D);

void
TreeView_ScrollBy(TTreeView AObj, int32_t DeltaX, int32_t DeltaY);

void
TreeView_SetBounds(TTreeView AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
TreeView_SetFocus(TTreeView AObj);

void
TreeView_Update(TTreeView AObj);

void
TreeView_BringToFront(TTreeView AObj);

TPoint
TreeView_ClientToScreen(TTreeView AObj, TPoint Point);

TPoint
TreeView_ClientToParent(TTreeView AObj, TPoint Point, TWinControl AParent);

BOOL
TreeView_Dragging(TTreeView AObj);

BOOL
TreeView_HasParent(TTreeView AObj);

void
TreeView_Hide(TTreeView AObj);

intptr_t
TreeView_Perform(TTreeView AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
TreeView_Refresh(TTreeView AObj);

TPoint
TreeView_ScreenToClient(TTreeView AObj, TPoint Point);

TPoint
TreeView_ParentToClient(TTreeView AObj, TPoint Point, TWinControl AParent);

void
TreeView_SendToBack(TTreeView AObj);

void
TreeView_Show(TTreeView AObj);

int32_t
TreeView_GetTextBuf(TTreeView AObj, CChar char* Buffer, int32_t BufSize);

int32_t
TreeView_GetTextLen(TTreeView AObj);

void
TreeView_SetTextBuf(TTreeView AObj, CChar char* Buffer);

TComponent
TreeView_FindComponent(TTreeView AObj, CChar char* AName);

char*
TreeView_GetNamePath(TTreeView AObj);

void
TreeView_Assign(TTreeView AObj, TObject Source);

TClass
TreeView_ClassType(TTreeView AObj);

char*
TreeView_ClassName(TTreeView AObj);

int32_t
TreeView_InstanceSize(TTreeView AObj);

BOOL
TreeView_InheritsFrom(TTreeView AObj, TClass AClass);

BOOL
TreeView_Equals(TTreeView AObj, TObject Obj);

int32_t
TreeView_GetHashCode(TTreeView AObj);

char*
TreeView_ToString(TTreeView AObj);

void
TreeView_AnchorToNeighbour(TTreeView AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
TreeView_AnchorParallel(TTreeView AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
TreeView_AnchorHorizontalCenterTo(TTreeView AObj, TControl ASibling);

void
TreeView_AnchorVerticalCenterTo(TTreeView AObj, TControl ASibling);

void
TreeView_AnchorSame(TTreeView AObj, TAnchorKind ASide, TControl ASibling);

void
TreeView_AnchorAsAlign(TTreeView AObj, TAlign ATheAlign, int32_t ASpace);

void
TreeView_AnchorClient(TTreeView AObj, int32_t ASpace);

int32_t
TreeView_ScaleDesignToForm(TTreeView AObj, int32_t ASize);

int32_t
TreeView_ScaleFormToDesign(TTreeView AObj, int32_t ASize);

int32_t
TreeView_Scale96ToForm(TTreeView AObj, int32_t ASize);

int32_t
TreeView_ScaleFormTo96(TTreeView AObj, int32_t ASize);

int32_t
TreeView_Scale96ToFont(TTreeView AObj, int32_t ASize);

int32_t
TreeView_ScaleFontTo96(TTreeView AObj, int32_t ASize);

int32_t
TreeView_ScaleScreenToFont(TTreeView AObj, int32_t ASize);

int32_t
TreeView_ScaleFontToScreen(TTreeView AObj, int32_t ASize);

int32_t
TreeView_Scale96ToScreen(TTreeView AObj, int32_t ASize);

int32_t
TreeView_ScaleScreenTo96(TTreeView AObj, int32_t ASize);

void
TreeView_AutoAdjustLayout(TTreeView AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
TreeView_FixDesignFontsPPI(TTreeView AObj, int32_t ADesignTimePPI);

void
TreeView_ScaleFontsPPI(TTreeView AObj, int32_t AToPPI, double AProportion);

int32_t
TreeView_GetDefaultItemHeight(TTreeView AObj);

void
TreeView_SetDefaultItemHeight(TTreeView AObj, int32_t AValue);

TColor
TreeView_GetExpandSignColor(TTreeView AObj);

void
TreeView_SetExpandSignColor(TTreeView AObj, TColor AValue);

int32_t
TreeView_GetExpandSignSize(TTreeView AObj);

void
TreeView_SetExpandSignSize(TTreeView AObj, int32_t AValue);

TTreeViewExpandSignType
TreeView_GetExpandSignType(TTreeView AObj);

void
TreeView_SetExpandSignType(TTreeView AObj, TTreeViewExpandSignType AValue);

TColor
TreeView_GetHotTrackColor(TTreeView AObj);

void
TreeView_SetHotTrackColor(TTreeView AObj, TColor AValue);

int32_t
TreeView_GetImagesWidth(TTreeView AObj);

void
TreeView_SetImagesWidth(TTreeView AObj, int32_t AValue);

TTreeViewOptions
TreeView_GetOptions(TTreeView AObj);

void
TreeView_SetOptions(TTreeView AObj, TTreeViewOptions AValue);

TScrollStyle
TreeView_GetScrollBars(TTreeView AObj);

void
TreeView_SetScrollBars(TTreeView AObj, TScrollStyle AValue);

TColor
TreeView_GetSelectionColor(TTreeView AObj);

void
TreeView_SetSelectionColor(TTreeView AObj, TColor AValue);

TColor
TreeView_GetSelectionFontColor(TTreeView AObj);

void
TreeView_SetSelectionFontColor(TTreeView AObj, TColor AValue);

BOOL
TreeView_GetSelectionFontColorUsed(TTreeView AObj);

void
TreeView_SetSelectionFontColorUsed(TTreeView AObj, BOOL AValue);

TColor
TreeView_GetSeparatorColor(TTreeView AObj);

void
TreeView_SetSeparatorColor(TTreeView AObj, TColor AValue);

int32_t
TreeView_GetStateImagesWidth(TTreeView AObj);

void
TreeView_SetStateImagesWidth(TTreeView AObj, int32_t AValue);

BOOL
TreeView_GetToolTips(TTreeView AObj);

void
TreeView_SetToolTips(TTreeView AObj, BOOL AValue);

TColor
TreeView_GetTreeLineColor(TTreeView AObj);

void
TreeView_SetTreeLineColor(TTreeView AObj, TColor AValue);

TPenStyle
TreeView_GetTreeLinePenStyle(TTreeView AObj);

void
TreeView_SetTreeLinePenStyle(TTreeView AObj, TPenStyle AValue);

TAlign
TreeView_GetAlign(TTreeView AObj);

void
TreeView_SetAlign(TTreeView AObj, TAlign AValue);

TAnchors
TreeView_GetAnchors(TTreeView AObj);

void
TreeView_SetAnchors(TTreeView AObj, TAnchors AValue);

BOOL
TreeView_GetAutoExpand(TTreeView AObj);

void
TreeView_SetAutoExpand(TTreeView AObj, BOOL AValue);

TBiDiMode
TreeView_GetBiDiMode(TTreeView AObj);

void
TreeView_SetBiDiMode(TTreeView AObj, TBiDiMode AValue);

TBorderStyle
TreeView_GetBorderStyle(TTreeView AObj);

void
TreeView_SetBorderStyle(TTreeView AObj, TBorderStyle AValue);

int32_t
TreeView_GetBorderWidth(TTreeView AObj);

void
TreeView_SetBorderWidth(TTreeView AObj, int32_t AValue);

TColor
TreeView_GetColor(TTreeView AObj);

void
TreeView_SetColor(TTreeView AObj, TColor AValue);

TSizeConstraints
TreeView_GetConstraints(TTreeView AObj);

void
TreeView_SetConstraints(TTreeView AObj, TSizeConstraints AValue);

BOOL
TreeView_GetDoubleBuffered(TTreeView AObj);

void
TreeView_SetDoubleBuffered(TTreeView AObj, BOOL AValue);

TDragKind
TreeView_GetDragKind(TTreeView AObj);

void
TreeView_SetDragKind(TTreeView AObj, TDragKind AValue);

TCursor
TreeView_GetDragCursor(TTreeView AObj);

void
TreeView_SetDragCursor(TTreeView AObj, TCursor AValue);

TDragMode
TreeView_GetDragMode(TTreeView AObj);

void
TreeView_SetDragMode(TTreeView AObj, TDragMode AValue);

BOOL
TreeView_GetEnabled(TTreeView AObj);

void
TreeView_SetEnabled(TTreeView AObj, BOOL AValue);

TFont
TreeView_GetFont(TTreeView AObj);

void
TreeView_SetFont(TTreeView AObj, TFont AValue);

BOOL
TreeView_GetHideSelection(TTreeView AObj);

void
TreeView_SetHideSelection(TTreeView AObj, BOOL AValue);

BOOL
TreeView_GetHotTrack(TTreeView AObj);

void
TreeView_SetHotTrack(TTreeView AObj, BOOL AValue);

TImageList
TreeView_GetImages(TTreeView AObj);

void
TreeView_SetImages(TTreeView AObj, TImageList AValue);

int32_t
TreeView_GetIndent(TTreeView AObj);

void
TreeView_SetIndent(TTreeView AObj, int32_t AValue);

BOOL
TreeView_GetMultiSelect(TTreeView AObj);

void
TreeView_SetMultiSelect(TTreeView AObj, BOOL AValue);

TMultiSelectStyle
TreeView_GetMultiSelectStyle(TTreeView AObj);

void
TreeView_SetMultiSelectStyle(TTreeView AObj, TMultiSelectStyle AValue);

BOOL
TreeView_GetParentColor(TTreeView AObj);

void
TreeView_SetParentColor(TTreeView AObj, BOOL AValue);

BOOL
TreeView_GetParentDoubleBuffered(TTreeView AObj);

void
TreeView_SetParentDoubleBuffered(TTreeView AObj, BOOL AValue);

BOOL
TreeView_GetParentFont(TTreeView AObj);

void
TreeView_SetParentFont(TTreeView AObj, BOOL AValue);

BOOL
TreeView_GetParentShowHint(TTreeView AObj);

void
TreeView_SetParentShowHint(TTreeView AObj, BOOL AValue);

TPopupMenu
TreeView_GetPopupMenu(TTreeView AObj);

void
TreeView_SetPopupMenu(TTreeView AObj, TPopupMenu AValue);

BOOL
TreeView_GetReadOnly(TTreeView AObj);

void
TreeView_SetReadOnly(TTreeView AObj, BOOL AValue);

BOOL
TreeView_GetRightClickSelect(TTreeView AObj);

void
TreeView_SetRightClickSelect(TTreeView AObj, BOOL AValue);

BOOL
TreeView_GetRowSelect(TTreeView AObj);

void
TreeView_SetRowSelect(TTreeView AObj, BOOL AValue);

BOOL
TreeView_GetShowButtons(TTreeView AObj);

void
TreeView_SetShowButtons(TTreeView AObj, BOOL AValue);

BOOL
TreeView_GetShowHint(TTreeView AObj);

void
TreeView_SetShowHint(TTreeView AObj, BOOL AValue);

BOOL
TreeView_GetShowLines(TTreeView AObj);

void
TreeView_SetShowLines(TTreeView AObj, BOOL AValue);

BOOL
TreeView_GetShowRoot(TTreeView AObj);

void
TreeView_SetShowRoot(TTreeView AObj, BOOL AValue);

TSortType
TreeView_GetSortType(TTreeView AObj);

void
TreeView_SetSortType(TTreeView AObj, TSortType AValue);

TImageList
TreeView_GetStateImages(TTreeView AObj);

void
TreeView_SetStateImages(TTreeView AObj, TImageList AValue);

TTabOrder
TreeView_GetTabOrder(TTreeView AObj);

void
TreeView_SetTabOrder(TTreeView AObj, TTabOrder AValue);

BOOL
TreeView_GetTabStop(TTreeView AObj);

void
TreeView_SetTabStop(TTreeView AObj, BOOL AValue);

BOOL
TreeView_GetVisible(TTreeView AObj);

void
TreeView_SetVisible(TTreeView AObj, BOOL AValue);

void
TreeView_SetOnAddition(TTreeView AObj, TTVExpandedEvent AEventData);

void
TreeView_SetOnAdvancedCustomDraw(TTreeView AObj, TTVAdvancedCustomDrawEvent AEventData);

void
TreeView_SetOnAdvancedCustomDrawItem(TTreeView AObj, TTVAdvancedCustomDrawItemEvent AEventData);

void
TreeView_SetOnChange(TTreeView AObj, TTVChangedEvent AEventData);

void
TreeView_SetOnChanging(TTreeView AObj, TTVChangingEvent AEventData);

void
TreeView_SetOnClick(TTreeView AObj, TNotifyEvent AEventData);

void
TreeView_SetOnCollapsed(TTreeView AObj, TTVExpandedEvent AEventData);

void
TreeView_SetOnCollapsing(TTreeView AObj, TTVCollapsingEvent AEventData);

void
TreeView_SetOnCompare(TTreeView AObj, TTVCompareEvent AEventData);

void
TreeView_SetOnContextPopup(TTreeView AObj, TContextPopupEvent AEventData);

void
TreeView_SetOnCustomDraw(TTreeView AObj, TTVCustomDrawEvent AEventData);

void
TreeView_SetOnCustomDrawItem(TTreeView AObj, TTVCustomDrawItemEvent AEventData);

void
TreeView_SetOnDblClick(TTreeView AObj, TNotifyEvent AEventData);

void
TreeView_SetOnDeletion(TTreeView AObj, TTVExpandedEvent AEventData);

void
TreeView_SetOnDragDrop(TTreeView AObj, TDragDropEvent AEventData);

void
TreeView_SetOnDragOver(TTreeView AObj, TDragOverEvent AEventData);

void
TreeView_SetOnEdited(TTreeView AObj, TTVEditedEvent AEventData);

void
TreeView_SetOnEditing(TTreeView AObj, TTVEditingEvent AEventData);

void
TreeView_SetOnEndDrag(TTreeView AObj, TEndDragEvent AEventData);

void
TreeView_SetOnEnter(TTreeView AObj, TNotifyEvent AEventData);

void
TreeView_SetOnExit(TTreeView AObj, TNotifyEvent AEventData);

void
TreeView_SetOnExpanding(TTreeView AObj, TTVExpandingEvent AEventData);

void
TreeView_SetOnExpanded(TTreeView AObj, TTVExpandedEvent AEventData);

void
TreeView_SetOnGetSelectedIndex(TTreeView AObj, TTVExpandedEvent AEventData);

void
TreeView_SetOnKeyDown(TTreeView AObj, TKeyEvent AEventData);

void
TreeView_SetOnKeyPress(TTreeView AObj, TKeyPressEvent AEventData);

void
TreeView_SetOnKeyUp(TTreeView AObj, TKeyEvent AEventData);

void
TreeView_SetOnMouseDown(TTreeView AObj, TMouseEvent AEventData);

void
TreeView_SetOnMouseEnter(TTreeView AObj, TNotifyEvent AEventData);

void
TreeView_SetOnMouseLeave(TTreeView AObj, TNotifyEvent AEventData);

void
TreeView_SetOnMouseMove(TTreeView AObj, TMouseMoveEvent AEventData);

void
TreeView_SetOnMouseUp(TTreeView AObj, TMouseEvent AEventData);

TTreeNodes
TreeView_GetItems(TTreeView AObj);

void
TreeView_SetItems(TTreeView AObj, TTreeNodes AValue);

TCanvas
TreeView_GetCanvas(TTreeView AObj);

TTreeNode
TreeView_GetDropTarget(TTreeView AObj);

void
TreeView_SetDropTarget(TTreeView AObj, TTreeNode AValue);

TTreeNode
TreeView_GetSelected(TTreeView AObj);

void
TreeView_SetSelected(TTreeView AObj, TTreeNode AValue);

TTreeNode
TreeView_GetTopItem(TTreeView AObj);

void
TreeView_SetTopItem(TTreeView AObj, TTreeNode AValue);

uint32_t
TreeView_GetSelectionCount(TTreeView AObj);

int32_t
TreeView_GetDockClientCount(TTreeView AObj);

BOOL
TreeView_GetDockSite(TTreeView AObj);

void
TreeView_SetDockSite(TTreeView AObj, BOOL AValue);

BOOL
TreeView_GetMouseInClient(TTreeView AObj);

int32_t
TreeView_GetVisibleDockClientCount(TTreeView AObj);

TBrush
TreeView_GetBrush(TTreeView AObj);

int32_t
TreeView_GetControlCount(TTreeView AObj);

HWND
TreeView_GetHandle(TTreeView AObj);

HWND
TreeView_GetParentWindow(TTreeView AObj);

void
TreeView_SetParentWindow(TTreeView AObj, HWND AValue);

BOOL
TreeView_GetShowing(TTreeView AObj);

BOOL
TreeView_GetUseDockManager(TTreeView AObj);

void
TreeView_SetUseDockManager(TTreeView AObj, BOOL AValue);

TAction
TreeView_GetAction(TTreeView AObj);

void
TreeView_SetAction(TTreeView AObj, TAction AValue);

TRect
TreeView_GetBoundsRect(TTreeView AObj);

void
TreeView_SetBoundsRect(TTreeView AObj, TRect AValue);

int32_t
TreeView_GetClientHeight(TTreeView AObj);

void
TreeView_SetClientHeight(TTreeView AObj, int32_t AValue);

TPoint
TreeView_GetClientOrigin(TTreeView AObj);

TRect
TreeView_GetClientRect(TTreeView AObj);

int32_t
TreeView_GetClientWidth(TTreeView AObj);

void
TreeView_SetClientWidth(TTreeView AObj, int32_t AValue);

TControlState
TreeView_GetControlState(TTreeView AObj);

void
TreeView_SetControlState(TTreeView AObj, TControlState AValue);

TControlStyle
TreeView_GetControlStyle(TTreeView AObj);

void
TreeView_SetControlStyle(TTreeView AObj, TControlStyle AValue);

BOOL
TreeView_GetFloating(TTreeView AObj);

TWinControl
TreeView_GetParent(TTreeView AObj);

void
TreeView_SetParent(TTreeView AObj, TWinControl AValue);

int32_t
TreeView_GetLeft(TTreeView AObj);

void
TreeView_SetLeft(TTreeView AObj, int32_t AValue);

int32_t
TreeView_GetTop(TTreeView AObj);

void
TreeView_SetTop(TTreeView AObj, int32_t AValue);

int32_t
TreeView_GetWidth(TTreeView AObj);

void
TreeView_SetWidth(TTreeView AObj, int32_t AValue);

int32_t
TreeView_GetHeight(TTreeView AObj);

void
TreeView_SetHeight(TTreeView AObj, int32_t AValue);

TCursor
TreeView_GetCursor(TTreeView AObj);

void
TreeView_SetCursor(TTreeView AObj, TCursor AValue);

char*
TreeView_GetHint(TTreeView AObj);

void
TreeView_SetHint(TTreeView AObj, CChar char* AValue);

int32_t
TreeView_GetComponentCount(TTreeView AObj);

int32_t
TreeView_GetComponentIndex(TTreeView AObj);

void
TreeView_SetComponentIndex(TTreeView AObj, int32_t AValue);

TComponent
TreeView_GetOwner(TTreeView AObj);

char*
TreeView_GetName(TTreeView AObj);

void
TreeView_SetName(TTreeView AObj, CChar char* AValue);

intptr_t
TreeView_GetTag(TTreeView AObj);

void
TreeView_SetTag(TTreeView AObj, intptr_t AValue);

TAnchorSide
TreeView_GetAnchorSideLeft(TTreeView AObj);

void
TreeView_SetAnchorSideLeft(TTreeView AObj, TAnchorSide AValue);

TAnchorSide
TreeView_GetAnchorSideTop(TTreeView AObj);

void
TreeView_SetAnchorSideTop(TTreeView AObj, TAnchorSide AValue);

TAnchorSide
TreeView_GetAnchorSideRight(TTreeView AObj);

void
TreeView_SetAnchorSideRight(TTreeView AObj, TAnchorSide AValue);

TAnchorSide
TreeView_GetAnchorSideBottom(TTreeView AObj);

void
TreeView_SetAnchorSideBottom(TTreeView AObj, TAnchorSide AValue);

TControlChildSizing
TreeView_GetChildSizing(TTreeView AObj);

void
TreeView_SetChildSizing(TTreeView AObj, TControlChildSizing AValue);

TControlBorderSpacing
TreeView_GetBorderSpacing(TTreeView AObj);

void
TreeView_SetBorderSpacing(TTreeView AObj, TControlBorderSpacing AValue);

TTreeNode
TreeView_GetSelections(TTreeView AObj, int32_t Index);

TControl
TreeView_GetDockClients(TTreeView AObj, int32_t Index);

TControl
TreeView_GetControls(TTreeView AObj, int32_t Index);

TComponent
TreeView_GetComponents(TTreeView AObj, int32_t AIndex);

TAnchorSide
TreeView_GetAnchorSide(TTreeView AObj, TAnchorKind AKind);

TClass
TreeView_StaticClassType();

// -------------------TStatusBar-------------------

TStatusBar
StatusBar_Create(TComponent AOwner);

void
StatusBar_Free(TStatusBar AObj);

void
StatusBar_FlipChildren(TStatusBar AObj, BOOL AllLevels);

void
StatusBar_SetBounds(TStatusBar AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

BOOL
StatusBar_CanFocus(TStatusBar AObj);

BOOL
StatusBar_ContainsControl(TStatusBar AObj, TControl Control);

TControl
StatusBar_ControlAtPos(TStatusBar AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
StatusBar_DisableAlign(TStatusBar AObj);

void
StatusBar_EnableAlign(TStatusBar AObj);

TControl
StatusBar_FindChildControl(TStatusBar AObj, CChar char* ControlName);

BOOL
StatusBar_Focused(TStatusBar AObj);

BOOL
StatusBar_HandleAllocated(TStatusBar AObj);

void
StatusBar_InsertControl(TStatusBar AObj, TControl AControl);

void
StatusBar_Invalidate(TStatusBar AObj);

void
StatusBar_PaintTo(TStatusBar AObj, HDC DC, int32_t X, int32_t Y);

void
StatusBar_RemoveControl(TStatusBar AObj, TControl AControl);

void
StatusBar_Realign(TStatusBar AObj);

void
StatusBar_Repaint(TStatusBar AObj);

void
StatusBar_ScaleBy(TStatusBar AObj, int32_t M, int32_t D);

void
StatusBar_ScrollBy(TStatusBar AObj, int32_t DeltaX, int32_t DeltaY);

void
StatusBar_SetFocus(TStatusBar AObj);

void
StatusBar_Update(TStatusBar AObj);

void
StatusBar_BringToFront(TStatusBar AObj);

TPoint
StatusBar_ClientToScreen(TStatusBar AObj, TPoint Point);

TPoint
StatusBar_ClientToParent(TStatusBar AObj, TPoint Point, TWinControl AParent);

BOOL
StatusBar_Dragging(TStatusBar AObj);

BOOL
StatusBar_HasParent(TStatusBar AObj);

void
StatusBar_Hide(TStatusBar AObj);

intptr_t
StatusBar_Perform(TStatusBar AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
StatusBar_Refresh(TStatusBar AObj);

TPoint
StatusBar_ScreenToClient(TStatusBar AObj, TPoint Point);

TPoint
StatusBar_ParentToClient(TStatusBar AObj, TPoint Point, TWinControl AParent);

void
StatusBar_SendToBack(TStatusBar AObj);

void
StatusBar_Show(TStatusBar AObj);

int32_t
StatusBar_GetTextBuf(TStatusBar AObj, CChar char* Buffer, int32_t BufSize);

int32_t
StatusBar_GetTextLen(TStatusBar AObj);

void
StatusBar_SetTextBuf(TStatusBar AObj, CChar char* Buffer);

TComponent
StatusBar_FindComponent(TStatusBar AObj, CChar char* AName);

char*
StatusBar_GetNamePath(TStatusBar AObj);

void
StatusBar_Assign(TStatusBar AObj, TObject Source);

TClass
StatusBar_ClassType(TStatusBar AObj);

char*
StatusBar_ClassName(TStatusBar AObj);

int32_t
StatusBar_InstanceSize(TStatusBar AObj);

BOOL
StatusBar_InheritsFrom(TStatusBar AObj, TClass AClass);

BOOL
StatusBar_Equals(TStatusBar AObj, TObject Obj);

int32_t
StatusBar_GetHashCode(TStatusBar AObj);

char*
StatusBar_ToString(TStatusBar AObj);

void
StatusBar_AnchorToNeighbour(TStatusBar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
StatusBar_AnchorParallel(TStatusBar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
StatusBar_AnchorHorizontalCenterTo(TStatusBar AObj, TControl ASibling);

void
StatusBar_AnchorVerticalCenterTo(TStatusBar AObj, TControl ASibling);

void
StatusBar_AnchorSame(TStatusBar AObj, TAnchorKind ASide, TControl ASibling);

void
StatusBar_AnchorAsAlign(TStatusBar AObj, TAlign ATheAlign, int32_t ASpace);

void
StatusBar_AnchorClient(TStatusBar AObj, int32_t ASpace);

int32_t
StatusBar_ScaleDesignToForm(TStatusBar AObj, int32_t ASize);

int32_t
StatusBar_ScaleFormToDesign(TStatusBar AObj, int32_t ASize);

int32_t
StatusBar_Scale96ToForm(TStatusBar AObj, int32_t ASize);

int32_t
StatusBar_ScaleFormTo96(TStatusBar AObj, int32_t ASize);

int32_t
StatusBar_Scale96ToFont(TStatusBar AObj, int32_t ASize);

int32_t
StatusBar_ScaleFontTo96(TStatusBar AObj, int32_t ASize);

int32_t
StatusBar_ScaleScreenToFont(TStatusBar AObj, int32_t ASize);

int32_t
StatusBar_ScaleFontToScreen(TStatusBar AObj, int32_t ASize);

int32_t
StatusBar_Scale96ToScreen(TStatusBar AObj, int32_t ASize);

int32_t
StatusBar_ScaleScreenTo96(TStatusBar AObj, int32_t ASize);

void
StatusBar_AutoAdjustLayout(TStatusBar AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
StatusBar_FixDesignFontsPPI(TStatusBar AObj, int32_t ADesignTimePPI);

void
StatusBar_ScaleFontsPPI(TStatusBar AObj, int32_t AToPPI, double AProportion);

TAction
StatusBar_GetAction(TStatusBar AObj);

void
StatusBar_SetAction(TStatusBar AObj, TAction AValue);

BOOL
StatusBar_GetAutoHint(TStatusBar AObj);

void
StatusBar_SetAutoHint(TStatusBar AObj, BOOL AValue);

TAlign
StatusBar_GetAlign(TStatusBar AObj);

void
StatusBar_SetAlign(TStatusBar AObj, TAlign AValue);

TAnchors
StatusBar_GetAnchors(TStatusBar AObj);

void
StatusBar_SetAnchors(TStatusBar AObj, TAnchors AValue);

TBiDiMode
StatusBar_GetBiDiMode(TStatusBar AObj);

void
StatusBar_SetBiDiMode(TStatusBar AObj, TBiDiMode AValue);

int32_t
StatusBar_GetBorderWidth(TStatusBar AObj);

void
StatusBar_SetBorderWidth(TStatusBar AObj, int32_t AValue);

TColor
StatusBar_GetColor(TStatusBar AObj);

void
StatusBar_SetColor(TStatusBar AObj, TColor AValue);

BOOL
StatusBar_GetDoubleBuffered(TStatusBar AObj);

void
StatusBar_SetDoubleBuffered(TStatusBar AObj, BOOL AValue);

TCursor
StatusBar_GetDragCursor(TStatusBar AObj);

void
StatusBar_SetDragCursor(TStatusBar AObj, TCursor AValue);

TDragKind
StatusBar_GetDragKind(TStatusBar AObj);

void
StatusBar_SetDragKind(TStatusBar AObj, TDragKind AValue);

TDragMode
StatusBar_GetDragMode(TStatusBar AObj);

void
StatusBar_SetDragMode(TStatusBar AObj, TDragMode AValue);

BOOL
StatusBar_GetEnabled(TStatusBar AObj);

void
StatusBar_SetEnabled(TStatusBar AObj, BOOL AValue);

TFont
StatusBar_GetFont(TStatusBar AObj);

void
StatusBar_SetFont(TStatusBar AObj, TFont AValue);

TSizeConstraints
StatusBar_GetConstraints(TStatusBar AObj);

void
StatusBar_SetConstraints(TStatusBar AObj, TSizeConstraints AValue);

TStatusPanels
StatusBar_GetPanels(TStatusBar AObj);

void
StatusBar_SetPanels(TStatusBar AObj, TStatusPanels AValue);

BOOL
StatusBar_GetParentColor(TStatusBar AObj);

void
StatusBar_SetParentColor(TStatusBar AObj, BOOL AValue);

BOOL
StatusBar_GetParentDoubleBuffered(TStatusBar AObj);

void
StatusBar_SetParentDoubleBuffered(TStatusBar AObj, BOOL AValue);

BOOL
StatusBar_GetParentFont(TStatusBar AObj);

void
StatusBar_SetParentFont(TStatusBar AObj, BOOL AValue);

BOOL
StatusBar_GetParentShowHint(TStatusBar AObj);

void
StatusBar_SetParentShowHint(TStatusBar AObj, BOOL AValue);

TPopupMenu
StatusBar_GetPopupMenu(TStatusBar AObj);

void
StatusBar_SetPopupMenu(TStatusBar AObj, TPopupMenu AValue);

BOOL
StatusBar_GetShowHint(TStatusBar AObj);

void
StatusBar_SetShowHint(TStatusBar AObj, BOOL AValue);

BOOL
StatusBar_GetSimplePanel(TStatusBar AObj);

void
StatusBar_SetSimplePanel(TStatusBar AObj, BOOL AValue);

char*
StatusBar_GetSimpleText(TStatusBar AObj);

void
StatusBar_SetSimpleText(TStatusBar AObj, CChar char* AValue);

BOOL
StatusBar_GetSizeGrip(TStatusBar AObj);

void
StatusBar_SetSizeGrip(TStatusBar AObj, BOOL AValue);

BOOL
StatusBar_GetUseSystemFont(TStatusBar AObj);

void
StatusBar_SetUseSystemFont(TStatusBar AObj, BOOL AValue);

BOOL
StatusBar_GetVisible(TStatusBar AObj);

void
StatusBar_SetVisible(TStatusBar AObj, BOOL AValue);

void
StatusBar_SetOnClick(TStatusBar AObj, TNotifyEvent AEventData);

void
StatusBar_SetOnContextPopup(TStatusBar AObj, TContextPopupEvent AEventData);

void
StatusBar_SetOnDblClick(TStatusBar AObj, TNotifyEvent AEventData);

void
StatusBar_SetOnDragDrop(TStatusBar AObj, TDragDropEvent AEventData);

void
StatusBar_SetOnDragOver(TStatusBar AObj, TDragOverEvent AEventData);

void
StatusBar_SetOnEndDock(TStatusBar AObj, TEndDragEvent AEventData);

void
StatusBar_SetOnEndDrag(TStatusBar AObj, TEndDragEvent AEventData);

void
StatusBar_SetOnHint(TStatusBar AObj, TNotifyEvent AEventData);

void
StatusBar_SetOnMouseDown(TStatusBar AObj, TMouseEvent AEventData);

void
StatusBar_SetOnMouseEnter(TStatusBar AObj, TNotifyEvent AEventData);

void
StatusBar_SetOnMouseLeave(TStatusBar AObj, TNotifyEvent AEventData);

void
StatusBar_SetOnMouseMove(TStatusBar AObj, TMouseMoveEvent AEventData);

void
StatusBar_SetOnMouseUp(TStatusBar AObj, TMouseEvent AEventData);

void
StatusBar_SetOnResize(TStatusBar AObj, TNotifyEvent AEventData);

void
StatusBar_SetOnStartDock(TStatusBar AObj, TStartDockEvent AEventData);

TCanvas
StatusBar_GetCanvas(TStatusBar AObj);

int32_t
StatusBar_GetDockClientCount(TStatusBar AObj);

BOOL
StatusBar_GetDockSite(TStatusBar AObj);

void
StatusBar_SetDockSite(TStatusBar AObj, BOOL AValue);

BOOL
StatusBar_GetMouseInClient(TStatusBar AObj);

int32_t
StatusBar_GetVisibleDockClientCount(TStatusBar AObj);

TBrush
StatusBar_GetBrush(TStatusBar AObj);

int32_t
StatusBar_GetControlCount(TStatusBar AObj);

HWND
StatusBar_GetHandle(TStatusBar AObj);

HWND
StatusBar_GetParentWindow(TStatusBar AObj);

void
StatusBar_SetParentWindow(TStatusBar AObj, HWND AValue);

BOOL
StatusBar_GetShowing(TStatusBar AObj);

TTabOrder
StatusBar_GetTabOrder(TStatusBar AObj);

void
StatusBar_SetTabOrder(TStatusBar AObj, TTabOrder AValue);

BOOL
StatusBar_GetTabStop(TStatusBar AObj);

void
StatusBar_SetTabStop(TStatusBar AObj, BOOL AValue);

BOOL
StatusBar_GetUseDockManager(TStatusBar AObj);

void
StatusBar_SetUseDockManager(TStatusBar AObj, BOOL AValue);

TRect
StatusBar_GetBoundsRect(TStatusBar AObj);

void
StatusBar_SetBoundsRect(TStatusBar AObj, TRect AValue);

int32_t
StatusBar_GetClientHeight(TStatusBar AObj);

void
StatusBar_SetClientHeight(TStatusBar AObj, int32_t AValue);

TPoint
StatusBar_GetClientOrigin(TStatusBar AObj);

TRect
StatusBar_GetClientRect(TStatusBar AObj);

int32_t
StatusBar_GetClientWidth(TStatusBar AObj);

void
StatusBar_SetClientWidth(TStatusBar AObj, int32_t AValue);

TControlState
StatusBar_GetControlState(TStatusBar AObj);

void
StatusBar_SetControlState(TStatusBar AObj, TControlState AValue);

TControlStyle
StatusBar_GetControlStyle(TStatusBar AObj);

void
StatusBar_SetControlStyle(TStatusBar AObj, TControlStyle AValue);

BOOL
StatusBar_GetFloating(TStatusBar AObj);

TWinControl
StatusBar_GetParent(TStatusBar AObj);

void
StatusBar_SetParent(TStatusBar AObj, TWinControl AValue);

int32_t
StatusBar_GetLeft(TStatusBar AObj);

void
StatusBar_SetLeft(TStatusBar AObj, int32_t AValue);

int32_t
StatusBar_GetTop(TStatusBar AObj);

void
StatusBar_SetTop(TStatusBar AObj, int32_t AValue);

int32_t
StatusBar_GetWidth(TStatusBar AObj);

void
StatusBar_SetWidth(TStatusBar AObj, int32_t AValue);

int32_t
StatusBar_GetHeight(TStatusBar AObj);

void
StatusBar_SetHeight(TStatusBar AObj, int32_t AValue);

TCursor
StatusBar_GetCursor(TStatusBar AObj);

void
StatusBar_SetCursor(TStatusBar AObj, TCursor AValue);

char*
StatusBar_GetHint(TStatusBar AObj);

void
StatusBar_SetHint(TStatusBar AObj, CChar char* AValue);

int32_t
StatusBar_GetComponentCount(TStatusBar AObj);

int32_t
StatusBar_GetComponentIndex(TStatusBar AObj);

void
StatusBar_SetComponentIndex(TStatusBar AObj, int32_t AValue);

TComponent
StatusBar_GetOwner(TStatusBar AObj);

char*
StatusBar_GetName(TStatusBar AObj);

void
StatusBar_SetName(TStatusBar AObj, CChar char* AValue);

intptr_t
StatusBar_GetTag(TStatusBar AObj);

void
StatusBar_SetTag(TStatusBar AObj, intptr_t AValue);

TAnchorSide
StatusBar_GetAnchorSideLeft(TStatusBar AObj);

void
StatusBar_SetAnchorSideLeft(TStatusBar AObj, TAnchorSide AValue);

TAnchorSide
StatusBar_GetAnchorSideTop(TStatusBar AObj);

void
StatusBar_SetAnchorSideTop(TStatusBar AObj, TAnchorSide AValue);

TAnchorSide
StatusBar_GetAnchorSideRight(TStatusBar AObj);

void
StatusBar_SetAnchorSideRight(TStatusBar AObj, TAnchorSide AValue);

TAnchorSide
StatusBar_GetAnchorSideBottom(TStatusBar AObj);

void
StatusBar_SetAnchorSideBottom(TStatusBar AObj, TAnchorSide AValue);

TControlChildSizing
StatusBar_GetChildSizing(TStatusBar AObj);

void
StatusBar_SetChildSizing(TStatusBar AObj, TControlChildSizing AValue);

TControlBorderSpacing
StatusBar_GetBorderSpacing(TStatusBar AObj);

void
StatusBar_SetBorderSpacing(TStatusBar AObj, TControlBorderSpacing AValue);

TControl
StatusBar_GetDockClients(TStatusBar AObj, int32_t Index);

TControl
StatusBar_GetControls(TStatusBar AObj, int32_t Index);

TComponent
StatusBar_GetComponents(TStatusBar AObj, int32_t AIndex);

TAnchorSide
StatusBar_GetAnchorSide(TStatusBar AObj, TAnchorKind AKind);

TClass
StatusBar_StaticClassType();

// -------------------TToolBar-------------------

TToolBar
ToolBar_Create(TComponent AOwner);

void
ToolBar_Free(TToolBar AObj);

void
ToolBar_FlipChildren(TToolBar AObj, BOOL AllLevels);

BOOL
ToolBar_CanFocus(TToolBar AObj);

BOOL
ToolBar_ContainsControl(TToolBar AObj, TControl Control);

TControl
ToolBar_ControlAtPos(TToolBar AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
ToolBar_DisableAlign(TToolBar AObj);

void
ToolBar_EnableAlign(TToolBar AObj);

TControl
ToolBar_FindChildControl(TToolBar AObj, CChar char* ControlName);

BOOL
ToolBar_Focused(TToolBar AObj);

BOOL
ToolBar_HandleAllocated(TToolBar AObj);

void
ToolBar_InsertControl(TToolBar AObj, TControl AControl);

void
ToolBar_Invalidate(TToolBar AObj);

void
ToolBar_PaintTo(TToolBar AObj, HDC DC, int32_t X, int32_t Y);

void
ToolBar_RemoveControl(TToolBar AObj, TControl AControl);

void
ToolBar_Realign(TToolBar AObj);

void
ToolBar_Repaint(TToolBar AObj);

void
ToolBar_ScaleBy(TToolBar AObj, int32_t M, int32_t D);

void
ToolBar_ScrollBy(TToolBar AObj, int32_t DeltaX, int32_t DeltaY);

void
ToolBar_SetBounds(TToolBar AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ToolBar_SetFocus(TToolBar AObj);

void
ToolBar_Update(TToolBar AObj);

void
ToolBar_BringToFront(TToolBar AObj);

TPoint
ToolBar_ClientToScreen(TToolBar AObj, TPoint Point);

TPoint
ToolBar_ClientToParent(TToolBar AObj, TPoint Point, TWinControl AParent);

BOOL
ToolBar_Dragging(TToolBar AObj);

BOOL
ToolBar_HasParent(TToolBar AObj);

void
ToolBar_Hide(TToolBar AObj);

intptr_t
ToolBar_Perform(TToolBar AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ToolBar_Refresh(TToolBar AObj);

TPoint
ToolBar_ScreenToClient(TToolBar AObj, TPoint Point);

TPoint
ToolBar_ParentToClient(TToolBar AObj, TPoint Point, TWinControl AParent);

void
ToolBar_SendToBack(TToolBar AObj);

void
ToolBar_Show(TToolBar AObj);

int32_t
ToolBar_GetTextBuf(TToolBar AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ToolBar_GetTextLen(TToolBar AObj);

void
ToolBar_SetTextBuf(TToolBar AObj, CChar char* Buffer);

TComponent
ToolBar_FindComponent(TToolBar AObj, CChar char* AName);

char*
ToolBar_GetNamePath(TToolBar AObj);

void
ToolBar_Assign(TToolBar AObj, TObject Source);

TClass
ToolBar_ClassType(TToolBar AObj);

char*
ToolBar_ClassName(TToolBar AObj);

int32_t
ToolBar_InstanceSize(TToolBar AObj);

BOOL
ToolBar_InheritsFrom(TToolBar AObj, TClass AClass);

BOOL
ToolBar_Equals(TToolBar AObj, TObject Obj);

int32_t
ToolBar_GetHashCode(TToolBar AObj);

char*
ToolBar_ToString(TToolBar AObj);

void
ToolBar_AnchorToNeighbour(TToolBar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ToolBar_AnchorParallel(TToolBar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ToolBar_AnchorHorizontalCenterTo(TToolBar AObj, TControl ASibling);

void
ToolBar_AnchorVerticalCenterTo(TToolBar AObj, TControl ASibling);

void
ToolBar_AnchorSame(TToolBar AObj, TAnchorKind ASide, TControl ASibling);

void
ToolBar_AnchorAsAlign(TToolBar AObj, TAlign ATheAlign, int32_t ASpace);

void
ToolBar_AnchorClient(TToolBar AObj, int32_t ASpace);

int32_t
ToolBar_ScaleDesignToForm(TToolBar AObj, int32_t ASize);

int32_t
ToolBar_ScaleFormToDesign(TToolBar AObj, int32_t ASize);

int32_t
ToolBar_Scale96ToForm(TToolBar AObj, int32_t ASize);

int32_t
ToolBar_ScaleFormTo96(TToolBar AObj, int32_t ASize);

int32_t
ToolBar_Scale96ToFont(TToolBar AObj, int32_t ASize);

int32_t
ToolBar_ScaleFontTo96(TToolBar AObj, int32_t ASize);

int32_t
ToolBar_ScaleScreenToFont(TToolBar AObj, int32_t ASize);

int32_t
ToolBar_ScaleFontToScreen(TToolBar AObj, int32_t ASize);

int32_t
ToolBar_Scale96ToScreen(TToolBar AObj, int32_t ASize);

int32_t
ToolBar_ScaleScreenTo96(TToolBar AObj, int32_t ASize);

void
ToolBar_AutoAdjustLayout(TToolBar AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ToolBar_FixDesignFontsPPI(TToolBar AObj, int32_t ADesignTimePPI);

void
ToolBar_ScaleFontsPPI(TToolBar AObj, int32_t AToPPI, double AProportion);

int32_t
ToolBar_GetButtonCount(TToolBar AObj);

TCanvas
ToolBar_GetCanvas(TToolBar AObj);

int32_t
ToolBar_GetRowCount(TToolBar AObj);

TAlign
ToolBar_GetAlign(TToolBar AObj);

void
ToolBar_SetAlign(TToolBar AObj, TAlign AValue);

TAnchors
ToolBar_GetAnchors(TToolBar AObj);

void
ToolBar_SetAnchors(TToolBar AObj, TAnchors AValue);

BOOL
ToolBar_GetAutoSize(TToolBar AObj);

void
ToolBar_SetAutoSize(TToolBar AObj, BOOL AValue);

int32_t
ToolBar_GetBorderWidth(TToolBar AObj);

void
ToolBar_SetBorderWidth(TToolBar AObj, int32_t AValue);

int32_t
ToolBar_GetButtonHeight(TToolBar AObj);

void
ToolBar_SetButtonHeight(TToolBar AObj, int32_t AValue);

int32_t
ToolBar_GetButtonWidth(TToolBar AObj);

void
ToolBar_SetButtonWidth(TToolBar AObj, int32_t AValue);

char*
ToolBar_GetCaption(TToolBar AObj);

void
ToolBar_SetCaption(TToolBar AObj, CChar char* AValue);

TColor
ToolBar_GetColor(TToolBar AObj);

void
ToolBar_SetColor(TToolBar AObj, TColor AValue);

TSizeConstraints
ToolBar_GetConstraints(TToolBar AObj);

void
ToolBar_SetConstraints(TToolBar AObj, TSizeConstraints AValue);

BOOL
ToolBar_GetDoubleBuffered(TToolBar AObj);

void
ToolBar_SetDoubleBuffered(TToolBar AObj, BOOL AValue);

BOOL
ToolBar_GetDockSite(TToolBar AObj);

void
ToolBar_SetDockSite(TToolBar AObj, BOOL AValue);

TCursor
ToolBar_GetDragCursor(TToolBar AObj);

void
ToolBar_SetDragCursor(TToolBar AObj, TCursor AValue);

TDragKind
ToolBar_GetDragKind(TToolBar AObj);

void
ToolBar_SetDragKind(TToolBar AObj, TDragKind AValue);

TDragMode
ToolBar_GetDragMode(TToolBar AObj);

void
ToolBar_SetDragMode(TToolBar AObj, TDragMode AValue);

TEdgeBorders
ToolBar_GetEdgeBorders(TToolBar AObj);

void
ToolBar_SetEdgeBorders(TToolBar AObj, TEdgeBorders AValue);

TEdgeStyle
ToolBar_GetEdgeInner(TToolBar AObj);

void
ToolBar_SetEdgeInner(TToolBar AObj, TEdgeStyle AValue);

TEdgeStyle
ToolBar_GetEdgeOuter(TToolBar AObj);

void
ToolBar_SetEdgeOuter(TToolBar AObj, TEdgeStyle AValue);

BOOL
ToolBar_GetEnabled(TToolBar AObj);

void
ToolBar_SetEnabled(TToolBar AObj, BOOL AValue);

BOOL
ToolBar_GetFlat(TToolBar AObj);

void
ToolBar_SetFlat(TToolBar AObj, BOOL AValue);

TFont
ToolBar_GetFont(TToolBar AObj);

void
ToolBar_SetFont(TToolBar AObj, TFont AValue);

int32_t
ToolBar_GetHeight(TToolBar AObj);

void
ToolBar_SetHeight(TToolBar AObj, int32_t AValue);

TImageList
ToolBar_GetHotImages(TToolBar AObj);

void
ToolBar_SetHotImages(TToolBar AObj, TImageList AValue);

TImageList
ToolBar_GetImages(TToolBar AObj);

void
ToolBar_SetImages(TToolBar AObj, TImageList AValue);

int32_t
ToolBar_GetIndent(TToolBar AObj);

void
ToolBar_SetIndent(TToolBar AObj, int32_t AValue);

BOOL
ToolBar_GetList(TToolBar AObj);

void
ToolBar_SetList(TToolBar AObj, BOOL AValue);

BOOL
ToolBar_GetParentColor(TToolBar AObj);

void
ToolBar_SetParentColor(TToolBar AObj, BOOL AValue);

BOOL
ToolBar_GetParentDoubleBuffered(TToolBar AObj);

void
ToolBar_SetParentDoubleBuffered(TToolBar AObj, BOOL AValue);

BOOL
ToolBar_GetParentFont(TToolBar AObj);

void
ToolBar_SetParentFont(TToolBar AObj, BOOL AValue);

BOOL
ToolBar_GetParentShowHint(TToolBar AObj);

void
ToolBar_SetParentShowHint(TToolBar AObj, BOOL AValue);

TPopupMenu
ToolBar_GetPopupMenu(TToolBar AObj);

void
ToolBar_SetPopupMenu(TToolBar AObj, TPopupMenu AValue);

BOOL
ToolBar_GetShowCaptions(TToolBar AObj);

void
ToolBar_SetShowCaptions(TToolBar AObj, BOOL AValue);

BOOL
ToolBar_GetShowHint(TToolBar AObj);

void
ToolBar_SetShowHint(TToolBar AObj, BOOL AValue);

TTabOrder
ToolBar_GetTabOrder(TToolBar AObj);

void
ToolBar_SetTabOrder(TToolBar AObj, TTabOrder AValue);

BOOL
ToolBar_GetTabStop(TToolBar AObj);

void
ToolBar_SetTabStop(TToolBar AObj, BOOL AValue);

BOOL
ToolBar_GetTransparent(TToolBar AObj);

void
ToolBar_SetTransparent(TToolBar AObj, BOOL AValue);

BOOL
ToolBar_GetVisible(TToolBar AObj);

void
ToolBar_SetVisible(TToolBar AObj, BOOL AValue);

BOOL
ToolBar_GetWrapable(TToolBar AObj);

void
ToolBar_SetWrapable(TToolBar AObj, BOOL AValue);

void
ToolBar_SetOnClick(TToolBar AObj, TNotifyEvent AEventData);

void
ToolBar_SetOnContextPopup(TToolBar AObj, TContextPopupEvent AEventData);

void
ToolBar_SetOnDblClick(TToolBar AObj, TNotifyEvent AEventData);

void
ToolBar_SetOnDockDrop(TToolBar AObj, TDockDropEvent AEventData);

void
ToolBar_SetOnDragDrop(TToolBar AObj, TDragDropEvent AEventData);

void
ToolBar_SetOnDragOver(TToolBar AObj, TDragOverEvent AEventData);

void
ToolBar_SetOnEndDrag(TToolBar AObj, TEndDragEvent AEventData);

void
ToolBar_SetOnEnter(TToolBar AObj, TNotifyEvent AEventData);

void
ToolBar_SetOnExit(TToolBar AObj, TNotifyEvent AEventData);

void
ToolBar_SetOnMouseDown(TToolBar AObj, TMouseEvent AEventData);

void
ToolBar_SetOnMouseEnter(TToolBar AObj, TNotifyEvent AEventData);

void
ToolBar_SetOnMouseLeave(TToolBar AObj, TNotifyEvent AEventData);

void
ToolBar_SetOnMouseMove(TToolBar AObj, TMouseMoveEvent AEventData);

void
ToolBar_SetOnMouseUp(TToolBar AObj, TMouseEvent AEventData);

void
ToolBar_SetOnResize(TToolBar AObj, TNotifyEvent AEventData);

void
ToolBar_SetOnUnDock(TToolBar AObj, TUnDockEvent AEventData);

int32_t
ToolBar_GetDockClientCount(TToolBar AObj);

BOOL
ToolBar_GetMouseInClient(TToolBar AObj);

int32_t
ToolBar_GetVisibleDockClientCount(TToolBar AObj);

TBrush
ToolBar_GetBrush(TToolBar AObj);

int32_t
ToolBar_GetControlCount(TToolBar AObj);

HWND
ToolBar_GetHandle(TToolBar AObj);

HWND
ToolBar_GetParentWindow(TToolBar AObj);

void
ToolBar_SetParentWindow(TToolBar AObj, HWND AValue);

BOOL
ToolBar_GetShowing(TToolBar AObj);

BOOL
ToolBar_GetUseDockManager(TToolBar AObj);

void
ToolBar_SetUseDockManager(TToolBar AObj, BOOL AValue);

TAction
ToolBar_GetAction(TToolBar AObj);

void
ToolBar_SetAction(TToolBar AObj, TAction AValue);

TBiDiMode
ToolBar_GetBiDiMode(TToolBar AObj);

void
ToolBar_SetBiDiMode(TToolBar AObj, TBiDiMode AValue);

TRect
ToolBar_GetBoundsRect(TToolBar AObj);

void
ToolBar_SetBoundsRect(TToolBar AObj, TRect AValue);

int32_t
ToolBar_GetClientHeight(TToolBar AObj);

void
ToolBar_SetClientHeight(TToolBar AObj, int32_t AValue);

TPoint
ToolBar_GetClientOrigin(TToolBar AObj);

TRect
ToolBar_GetClientRect(TToolBar AObj);

int32_t
ToolBar_GetClientWidth(TToolBar AObj);

void
ToolBar_SetClientWidth(TToolBar AObj, int32_t AValue);

TControlState
ToolBar_GetControlState(TToolBar AObj);

void
ToolBar_SetControlState(TToolBar AObj, TControlState AValue);

TControlStyle
ToolBar_GetControlStyle(TToolBar AObj);

void
ToolBar_SetControlStyle(TToolBar AObj, TControlStyle AValue);

BOOL
ToolBar_GetFloating(TToolBar AObj);

TWinControl
ToolBar_GetParent(TToolBar AObj);

void
ToolBar_SetParent(TToolBar AObj, TWinControl AValue);

int32_t
ToolBar_GetLeft(TToolBar AObj);

void
ToolBar_SetLeft(TToolBar AObj, int32_t AValue);

int32_t
ToolBar_GetTop(TToolBar AObj);

void
ToolBar_SetTop(TToolBar AObj, int32_t AValue);

int32_t
ToolBar_GetWidth(TToolBar AObj);

void
ToolBar_SetWidth(TToolBar AObj, int32_t AValue);

TCursor
ToolBar_GetCursor(TToolBar AObj);

void
ToolBar_SetCursor(TToolBar AObj, TCursor AValue);

char*
ToolBar_GetHint(TToolBar AObj);

void
ToolBar_SetHint(TToolBar AObj, CChar char* AValue);

int32_t
ToolBar_GetComponentCount(TToolBar AObj);

int32_t
ToolBar_GetComponentIndex(TToolBar AObj);

void
ToolBar_SetComponentIndex(TToolBar AObj, int32_t AValue);

TComponent
ToolBar_GetOwner(TToolBar AObj);

char*
ToolBar_GetName(TToolBar AObj);

void
ToolBar_SetName(TToolBar AObj, CChar char* AValue);

intptr_t
ToolBar_GetTag(TToolBar AObj);

void
ToolBar_SetTag(TToolBar AObj, intptr_t AValue);

TAnchorSide
ToolBar_GetAnchorSideLeft(TToolBar AObj);

void
ToolBar_SetAnchorSideLeft(TToolBar AObj, TAnchorSide AValue);

TAnchorSide
ToolBar_GetAnchorSideTop(TToolBar AObj);

void
ToolBar_SetAnchorSideTop(TToolBar AObj, TAnchorSide AValue);

TAnchorSide
ToolBar_GetAnchorSideRight(TToolBar AObj);

void
ToolBar_SetAnchorSideRight(TToolBar AObj, TAnchorSide AValue);

TAnchorSide
ToolBar_GetAnchorSideBottom(TToolBar AObj);

void
ToolBar_SetAnchorSideBottom(TToolBar AObj, TAnchorSide AValue);

TControlChildSizing
ToolBar_GetChildSizing(TToolBar AObj);

void
ToolBar_SetChildSizing(TToolBar AObj, TControlChildSizing AValue);

TControlBorderSpacing
ToolBar_GetBorderSpacing(TToolBar AObj);

void
ToolBar_SetBorderSpacing(TToolBar AObj, TControlBorderSpacing AValue);

TToolButton
ToolBar_GetButtons(TToolBar AObj, int32_t Index);

TControl
ToolBar_GetDockClients(TToolBar AObj, int32_t Index);

TControl
ToolBar_GetControls(TToolBar AObj, int32_t Index);

TComponent
ToolBar_GetComponents(TToolBar AObj, int32_t AIndex);

TAnchorSide
ToolBar_GetAnchorSide(TToolBar AObj, TAnchorKind AKind);

TClass
ToolBar_StaticClassType();

// -------------------TBitBtn-------------------

TBitBtn
BitBtn_Create(TComponent AOwner);

void
BitBtn_Free(TBitBtn AObj);

void
BitBtn_Click(TBitBtn AObj);

BOOL
BitBtn_CanFocus(TBitBtn AObj);

BOOL
BitBtn_ContainsControl(TBitBtn AObj, TControl Control);

TControl
BitBtn_ControlAtPos(TBitBtn AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
BitBtn_DisableAlign(TBitBtn AObj);

void
BitBtn_EnableAlign(TBitBtn AObj);

TControl
BitBtn_FindChildControl(TBitBtn AObj, CChar char* ControlName);

void
BitBtn_FlipChildren(TBitBtn AObj, BOOL AllLevels);

BOOL
BitBtn_Focused(TBitBtn AObj);

BOOL
BitBtn_HandleAllocated(TBitBtn AObj);

void
BitBtn_InsertControl(TBitBtn AObj, TControl AControl);

void
BitBtn_Invalidate(TBitBtn AObj);

void
BitBtn_PaintTo(TBitBtn AObj, HDC DC, int32_t X, int32_t Y);

void
BitBtn_RemoveControl(TBitBtn AObj, TControl AControl);

void
BitBtn_Realign(TBitBtn AObj);

void
BitBtn_Repaint(TBitBtn AObj);

void
BitBtn_ScaleBy(TBitBtn AObj, int32_t M, int32_t D);

void
BitBtn_ScrollBy(TBitBtn AObj, int32_t DeltaX, int32_t DeltaY);

void
BitBtn_SetBounds(TBitBtn AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
BitBtn_SetFocus(TBitBtn AObj);

void
BitBtn_Update(TBitBtn AObj);

void
BitBtn_BringToFront(TBitBtn AObj);

TPoint
BitBtn_ClientToScreen(TBitBtn AObj, TPoint Point);

TPoint
BitBtn_ClientToParent(TBitBtn AObj, TPoint Point, TWinControl AParent);

BOOL
BitBtn_Dragging(TBitBtn AObj);

BOOL
BitBtn_HasParent(TBitBtn AObj);

void
BitBtn_Hide(TBitBtn AObj);

intptr_t
BitBtn_Perform(TBitBtn AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
BitBtn_Refresh(TBitBtn AObj);

TPoint
BitBtn_ScreenToClient(TBitBtn AObj, TPoint Point);

TPoint
BitBtn_ParentToClient(TBitBtn AObj, TPoint Point, TWinControl AParent);

void
BitBtn_SendToBack(TBitBtn AObj);

void
BitBtn_Show(TBitBtn AObj);

int32_t
BitBtn_GetTextBuf(TBitBtn AObj, CChar char* Buffer, int32_t BufSize);

int32_t
BitBtn_GetTextLen(TBitBtn AObj);

void
BitBtn_SetTextBuf(TBitBtn AObj, CChar char* Buffer);

TComponent
BitBtn_FindComponent(TBitBtn AObj, CChar char* AName);

char*
BitBtn_GetNamePath(TBitBtn AObj);

void
BitBtn_Assign(TBitBtn AObj, TObject Source);

TClass
BitBtn_ClassType(TBitBtn AObj);

char*
BitBtn_ClassName(TBitBtn AObj);

int32_t
BitBtn_InstanceSize(TBitBtn AObj);

BOOL
BitBtn_InheritsFrom(TBitBtn AObj, TClass AClass);

BOOL
BitBtn_Equals(TBitBtn AObj, TObject Obj);

int32_t
BitBtn_GetHashCode(TBitBtn AObj);

char*
BitBtn_ToString(TBitBtn AObj);

void
BitBtn_AnchorToNeighbour(TBitBtn AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
BitBtn_AnchorParallel(TBitBtn AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
BitBtn_AnchorHorizontalCenterTo(TBitBtn AObj, TControl ASibling);

void
BitBtn_AnchorVerticalCenterTo(TBitBtn AObj, TControl ASibling);

void
BitBtn_AnchorSame(TBitBtn AObj, TAnchorKind ASide, TControl ASibling);

void
BitBtn_AnchorAsAlign(TBitBtn AObj, TAlign ATheAlign, int32_t ASpace);

void
BitBtn_AnchorClient(TBitBtn AObj, int32_t ASpace);

int32_t
BitBtn_ScaleDesignToForm(TBitBtn AObj, int32_t ASize);

int32_t
BitBtn_ScaleFormToDesign(TBitBtn AObj, int32_t ASize);

int32_t
BitBtn_Scale96ToForm(TBitBtn AObj, int32_t ASize);

int32_t
BitBtn_ScaleFormTo96(TBitBtn AObj, int32_t ASize);

int32_t
BitBtn_Scale96ToFont(TBitBtn AObj, int32_t ASize);

int32_t
BitBtn_ScaleFontTo96(TBitBtn AObj, int32_t ASize);

int32_t
BitBtn_ScaleScreenToFont(TBitBtn AObj, int32_t ASize);

int32_t
BitBtn_ScaleFontToScreen(TBitBtn AObj, int32_t ASize);

int32_t
BitBtn_Scale96ToScreen(TBitBtn AObj, int32_t ASize);

int32_t
BitBtn_ScaleScreenTo96(TBitBtn AObj, int32_t ASize);

void
BitBtn_AutoAdjustLayout(TBitBtn AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
BitBtn_FixDesignFontsPPI(TBitBtn AObj, int32_t ADesignTimePPI);

void
BitBtn_ScaleFontsPPI(TBitBtn AObj, int32_t AToPPI, double AProportion);

BOOL
BitBtn_GetDefaultCaption(TBitBtn AObj);

void
BitBtn_SetDefaultCaption(TBitBtn AObj, BOOL AValue);

TGlyphShowMode
BitBtn_GetGlyphShowMode(TBitBtn AObj);

void
BitBtn_SetGlyphShowMode(TBitBtn AObj, TGlyphShowMode AValue);

int32_t
BitBtn_GetImageIndex(TBitBtn AObj);

void
BitBtn_SetImageIndex(TBitBtn AObj, int32_t AValue);

TImageList
BitBtn_GetImages(TBitBtn AObj);

void
BitBtn_SetImages(TBitBtn AObj, TImageList AValue);

int32_t
BitBtn_GetImageWidth(TBitBtn AObj);

void
BitBtn_SetImageWidth(TBitBtn AObj, int32_t AValue);

TAction
BitBtn_GetAction(TBitBtn AObj);

void
BitBtn_SetAction(TBitBtn AObj, TAction AValue);

TAlign
BitBtn_GetAlign(TBitBtn AObj);

void
BitBtn_SetAlign(TBitBtn AObj, TAlign AValue);

TAnchors
BitBtn_GetAnchors(TBitBtn AObj);

void
BitBtn_SetAnchors(TBitBtn AObj, TAnchors AValue);

TBiDiMode
BitBtn_GetBiDiMode(TBitBtn AObj);

void
BitBtn_SetBiDiMode(TBitBtn AObj, TBiDiMode AValue);

BOOL
BitBtn_GetCancel(TBitBtn AObj);

void
BitBtn_SetCancel(TBitBtn AObj, BOOL AValue);

char*
BitBtn_GetCaption(TBitBtn AObj);

void
BitBtn_SetCaption(TBitBtn AObj, CChar char* AValue);

TSizeConstraints
BitBtn_GetConstraints(TBitBtn AObj);

void
BitBtn_SetConstraints(TBitBtn AObj, TSizeConstraints AValue);

BOOL
BitBtn_GetDefault(TBitBtn AObj);

void
BitBtn_SetDefault(TBitBtn AObj, BOOL AValue);

BOOL
BitBtn_GetDoubleBuffered(TBitBtn AObj);

void
BitBtn_SetDoubleBuffered(TBitBtn AObj, BOOL AValue);

BOOL
BitBtn_GetEnabled(TBitBtn AObj);

void
BitBtn_SetEnabled(TBitBtn AObj, BOOL AValue);

TFont
BitBtn_GetFont(TBitBtn AObj);

void
BitBtn_SetFont(TBitBtn AObj, TFont AValue);

TBitmap
BitBtn_GetGlyph(TBitBtn AObj);

void
BitBtn_SetGlyph(TBitBtn AObj, TBitmap AValue);

TBitBtnKind
BitBtn_GetKind(TBitBtn AObj);

void
BitBtn_SetKind(TBitBtn AObj, TBitBtnKind AValue);

TButtonLayout
BitBtn_GetLayout(TBitBtn AObj);

void
BitBtn_SetLayout(TBitBtn AObj, TButtonLayout AValue);

TModalResult
BitBtn_GetModalResult(TBitBtn AObj);

void
BitBtn_SetModalResult(TBitBtn AObj, TModalResult AValue);

TNumGlyphs
BitBtn_GetNumGlyphs(TBitBtn AObj);

void
BitBtn_SetNumGlyphs(TBitBtn AObj, TNumGlyphs AValue);

BOOL
BitBtn_GetParentDoubleBuffered(TBitBtn AObj);

void
BitBtn_SetParentDoubleBuffered(TBitBtn AObj, BOOL AValue);

BOOL
BitBtn_GetParentFont(TBitBtn AObj);

void
BitBtn_SetParentFont(TBitBtn AObj, BOOL AValue);

BOOL
BitBtn_GetParentShowHint(TBitBtn AObj);

void
BitBtn_SetParentShowHint(TBitBtn AObj, BOOL AValue);

TPopupMenu
BitBtn_GetPopupMenu(TBitBtn AObj);

void
BitBtn_SetPopupMenu(TBitBtn AObj, TPopupMenu AValue);

BOOL
BitBtn_GetShowHint(TBitBtn AObj);

void
BitBtn_SetShowHint(TBitBtn AObj, BOOL AValue);

int32_t
BitBtn_GetSpacing(TBitBtn AObj);

void
BitBtn_SetSpacing(TBitBtn AObj, int32_t AValue);

TTabOrder
BitBtn_GetTabOrder(TBitBtn AObj);

void
BitBtn_SetTabOrder(TBitBtn AObj, TTabOrder AValue);

BOOL
BitBtn_GetTabStop(TBitBtn AObj);

void
BitBtn_SetTabStop(TBitBtn AObj, BOOL AValue);

BOOL
BitBtn_GetVisible(TBitBtn AObj);

void
BitBtn_SetVisible(TBitBtn AObj, BOOL AValue);

void
BitBtn_SetOnClick(TBitBtn AObj, TNotifyEvent AEventData);

void
BitBtn_SetOnContextPopup(TBitBtn AObj, TContextPopupEvent AEventData);

void
BitBtn_SetOnDragDrop(TBitBtn AObj, TDragDropEvent AEventData);

void
BitBtn_SetOnDragOver(TBitBtn AObj, TDragOverEvent AEventData);

void
BitBtn_SetOnEndDrag(TBitBtn AObj, TEndDragEvent AEventData);

void
BitBtn_SetOnEnter(TBitBtn AObj, TNotifyEvent AEventData);

void
BitBtn_SetOnExit(TBitBtn AObj, TNotifyEvent AEventData);

void
BitBtn_SetOnKeyDown(TBitBtn AObj, TKeyEvent AEventData);

void
BitBtn_SetOnKeyPress(TBitBtn AObj, TKeyPressEvent AEventData);

void
BitBtn_SetOnKeyUp(TBitBtn AObj, TKeyEvent AEventData);

void
BitBtn_SetOnMouseDown(TBitBtn AObj, TMouseEvent AEventData);

void
BitBtn_SetOnMouseEnter(TBitBtn AObj, TNotifyEvent AEventData);

void
BitBtn_SetOnMouseLeave(TBitBtn AObj, TNotifyEvent AEventData);

void
BitBtn_SetOnMouseMove(TBitBtn AObj, TMouseMoveEvent AEventData);

void
BitBtn_SetOnMouseUp(TBitBtn AObj, TMouseEvent AEventData);

int32_t
BitBtn_GetDockClientCount(TBitBtn AObj);

BOOL
BitBtn_GetDockSite(TBitBtn AObj);

void
BitBtn_SetDockSite(TBitBtn AObj, BOOL AValue);

BOOL
BitBtn_GetMouseInClient(TBitBtn AObj);

int32_t
BitBtn_GetVisibleDockClientCount(TBitBtn AObj);

TBrush
BitBtn_GetBrush(TBitBtn AObj);

int32_t
BitBtn_GetControlCount(TBitBtn AObj);

HWND
BitBtn_GetHandle(TBitBtn AObj);

HWND
BitBtn_GetParentWindow(TBitBtn AObj);

void
BitBtn_SetParentWindow(TBitBtn AObj, HWND AValue);

BOOL
BitBtn_GetShowing(TBitBtn AObj);

BOOL
BitBtn_GetUseDockManager(TBitBtn AObj);

void
BitBtn_SetUseDockManager(TBitBtn AObj, BOOL AValue);

TRect
BitBtn_GetBoundsRect(TBitBtn AObj);

void
BitBtn_SetBoundsRect(TBitBtn AObj, TRect AValue);

int32_t
BitBtn_GetClientHeight(TBitBtn AObj);

void
BitBtn_SetClientHeight(TBitBtn AObj, int32_t AValue);

TPoint
BitBtn_GetClientOrigin(TBitBtn AObj);

TRect
BitBtn_GetClientRect(TBitBtn AObj);

int32_t
BitBtn_GetClientWidth(TBitBtn AObj);

void
BitBtn_SetClientWidth(TBitBtn AObj, int32_t AValue);

TControlState
BitBtn_GetControlState(TBitBtn AObj);

void
BitBtn_SetControlState(TBitBtn AObj, TControlState AValue);

TControlStyle
BitBtn_GetControlStyle(TBitBtn AObj);

void
BitBtn_SetControlStyle(TBitBtn AObj, TControlStyle AValue);

BOOL
BitBtn_GetFloating(TBitBtn AObj);

TWinControl
BitBtn_GetParent(TBitBtn AObj);

void
BitBtn_SetParent(TBitBtn AObj, TWinControl AValue);

int32_t
BitBtn_GetLeft(TBitBtn AObj);

void
BitBtn_SetLeft(TBitBtn AObj, int32_t AValue);

int32_t
BitBtn_GetTop(TBitBtn AObj);

void
BitBtn_SetTop(TBitBtn AObj, int32_t AValue);

int32_t
BitBtn_GetWidth(TBitBtn AObj);

void
BitBtn_SetWidth(TBitBtn AObj, int32_t AValue);

int32_t
BitBtn_GetHeight(TBitBtn AObj);

void
BitBtn_SetHeight(TBitBtn AObj, int32_t AValue);

TCursor
BitBtn_GetCursor(TBitBtn AObj);

void
BitBtn_SetCursor(TBitBtn AObj, TCursor AValue);

char*
BitBtn_GetHint(TBitBtn AObj);

void
BitBtn_SetHint(TBitBtn AObj, CChar char* AValue);

int32_t
BitBtn_GetComponentCount(TBitBtn AObj);

int32_t
BitBtn_GetComponentIndex(TBitBtn AObj);

void
BitBtn_SetComponentIndex(TBitBtn AObj, int32_t AValue);

TComponent
BitBtn_GetOwner(TBitBtn AObj);

char*
BitBtn_GetName(TBitBtn AObj);

void
BitBtn_SetName(TBitBtn AObj, CChar char* AValue);

intptr_t
BitBtn_GetTag(TBitBtn AObj);

void
BitBtn_SetTag(TBitBtn AObj, intptr_t AValue);

TAnchorSide
BitBtn_GetAnchorSideLeft(TBitBtn AObj);

void
BitBtn_SetAnchorSideLeft(TBitBtn AObj, TAnchorSide AValue);

TAnchorSide
BitBtn_GetAnchorSideTop(TBitBtn AObj);

void
BitBtn_SetAnchorSideTop(TBitBtn AObj, TAnchorSide AValue);

TAnchorSide
BitBtn_GetAnchorSideRight(TBitBtn AObj);

void
BitBtn_SetAnchorSideRight(TBitBtn AObj, TAnchorSide AValue);

TAnchorSide
BitBtn_GetAnchorSideBottom(TBitBtn AObj);

void
BitBtn_SetAnchorSideBottom(TBitBtn AObj, TAnchorSide AValue);

TControlChildSizing
BitBtn_GetChildSizing(TBitBtn AObj);

void
BitBtn_SetChildSizing(TBitBtn AObj, TControlChildSizing AValue);

TControlBorderSpacing
BitBtn_GetBorderSpacing(TBitBtn AObj);

void
BitBtn_SetBorderSpacing(TBitBtn AObj, TControlBorderSpacing AValue);

TControl
BitBtn_GetDockClients(TBitBtn AObj, int32_t Index);

TControl
BitBtn_GetControls(TBitBtn AObj, int32_t Index);

TComponent
BitBtn_GetComponents(TBitBtn AObj, int32_t AIndex);

TAnchorSide
BitBtn_GetAnchorSide(TBitBtn AObj, TAnchorKind AKind);

TClass
BitBtn_StaticClassType();

// -------------------TIcon-------------------

TIcon
Icon_Create();

void
Icon_Free(TIcon AObj);

void
Icon_Assign(TIcon AObj, TObject Source);

BOOL
Icon_HandleAllocated(TIcon AObj);

void
Icon_LoadFromStream(TIcon AObj, TStream Stream);

void
Icon_SaveToStream(TIcon AObj, TStream Stream);

void
Icon_SetSize(TIcon AObj, int32_t AWidth, int32_t AHeight);

void
Icon_LoadFromResourceName(TIcon AObj, uintptr_t Instance, CChar char* ResName);

void
Icon_LoadFromResourceID(TIcon AObj, uintptr_t Instance, int32_t ResID);

BOOL
Icon_Equals(TIcon AObj, TObject Obj);

void
Icon_LoadFromFile(TIcon AObj, CChar char* Filename);

void
Icon_SaveToFile(TIcon AObj, CChar char* Filename);

char*
Icon_GetNamePath(TIcon AObj);

TClass
Icon_ClassType(TIcon AObj);

char*
Icon_ClassName(TIcon AObj);

int32_t
Icon_InstanceSize(TIcon AObj);

BOOL
Icon_InheritsFrom(TIcon AObj, TClass AClass);

int32_t
Icon_GetHashCode(TIcon AObj);

char*
Icon_ToString(TIcon AObj);

HICON
Icon_GetHandle(TIcon AObj);

void
Icon_SetHandle(TIcon AObj, HICON AValue);

BOOL
Icon_GetEmpty(TIcon AObj);

int32_t
Icon_GetHeight(TIcon AObj);

void
Icon_SetHeight(TIcon AObj, int32_t AValue);

BOOL
Icon_GetModified(TIcon AObj);

void
Icon_SetModified(TIcon AObj, BOOL AValue);

HPALETTE
Icon_GetPalette(TIcon AObj);

void
Icon_SetPalette(TIcon AObj, HPALETTE AValue);

BOOL
Icon_GetPaletteModified(TIcon AObj);

void
Icon_SetPaletteModified(TIcon AObj, BOOL AValue);

BOOL
Icon_GetTransparent(TIcon AObj);

void
Icon_SetTransparent(TIcon AObj, BOOL AValue);

int32_t
Icon_GetWidth(TIcon AObj);

void
Icon_SetWidth(TIcon AObj, int32_t AValue);

void
Icon_SetOnChange(TIcon AObj, TNotifyEvent AEventData);

TClass
Icon_StaticClassType();

// -------------------TBitmap-------------------

TBitmap
Bitmap_Create();

void
Bitmap_Free(TBitmap AObj);

void
Bitmap_LoadFromDevice(TBitmap AObj, HDC ADc);

void
Bitmap_EndUpdate(TBitmap AObj, BOOL AStreamIsValid);

void
Bitmap_BeginUpdate(TBitmap AObj, BOOL ACanvasOnly);

void
Bitmap_Clear(TBitmap AObj);

void
Bitmap_Assign(TBitmap AObj, TObject Source);

void
Bitmap_FreeImage(TBitmap AObj);

BOOL
Bitmap_HandleAllocated(TBitmap AObj);

void
Bitmap_LoadFromStream(TBitmap AObj, TStream Stream);

void
Bitmap_SaveToStream(TBitmap AObj, TStream Stream);

void
Bitmap_SetSize(TBitmap AObj, int32_t AWidth, int32_t AHeight);

void
Bitmap_LoadFromResourceName(TBitmap AObj, uintptr_t Instance, CChar char* ResName);

void
Bitmap_LoadFromResourceID(TBitmap AObj, uintptr_t Instance, int32_t ResID);

BOOL
Bitmap_Equals(TBitmap AObj, TObject Obj);

void
Bitmap_LoadFromFile(TBitmap AObj, CChar char* Filename);

void
Bitmap_SaveToFile(TBitmap AObj, CChar char* Filename);

char*
Bitmap_GetNamePath(TBitmap AObj);

TClass
Bitmap_ClassType(TBitmap AObj);

char*
Bitmap_ClassName(TBitmap AObj);

int32_t
Bitmap_InstanceSize(TBitmap AObj);

BOOL
Bitmap_InheritsFrom(TBitmap AObj, TClass AClass);

int32_t
Bitmap_GetHashCode(TBitmap AObj);

char*
Bitmap_ToString(TBitmap AObj);

TCanvas
Bitmap_GetCanvas(TBitmap AObj);

HBITMAP
Bitmap_GetHandle(TBitmap AObj);

void
Bitmap_SetHandle(TBitmap AObj, HBITMAP AValue);

TBitmapHandleType
Bitmap_GetHandleType(TBitmap AObj);

void
Bitmap_SetHandleType(TBitmap AObj, TBitmapHandleType AValue);

HBITMAP
Bitmap_GetMaskHandle(TBitmap AObj);

void
Bitmap_SetMaskHandle(TBitmap AObj, HBITMAP AValue);

TPixelFormat
Bitmap_GetPixelFormat(TBitmap AObj);

void
Bitmap_SetPixelFormat(TBitmap AObj, TPixelFormat AValue);

TTransparentMode
Bitmap_GetTransparentMode(TBitmap AObj);

void
Bitmap_SetTransparentMode(TBitmap AObj, TTransparentMode AValue);

BOOL
Bitmap_GetEmpty(TBitmap AObj);

int32_t
Bitmap_GetHeight(TBitmap AObj);

void
Bitmap_SetHeight(TBitmap AObj, int32_t AValue);

BOOL
Bitmap_GetModified(TBitmap AObj);

void
Bitmap_SetModified(TBitmap AObj, BOOL AValue);

HPALETTE
Bitmap_GetPalette(TBitmap AObj);

void
Bitmap_SetPalette(TBitmap AObj, HPALETTE AValue);

BOOL
Bitmap_GetPaletteModified(TBitmap AObj);

void
Bitmap_SetPaletteModified(TBitmap AObj, BOOL AValue);

BOOL
Bitmap_GetTransparent(TBitmap AObj);

void
Bitmap_SetTransparent(TBitmap AObj, BOOL AValue);

int32_t
Bitmap_GetWidth(TBitmap AObj);

void
Bitmap_SetWidth(TBitmap AObj, int32_t AValue);

void
Bitmap_SetOnChange(TBitmap AObj, TNotifyEvent AEventData);

void*
Bitmap_GetScanLine(TBitmap AObj, int32_t Row);

TClass
Bitmap_StaticClassType();

// -------------------TMemo-------------------

TMemo
Memo_Create(TComponent AOwner);

void
Memo_Free(TMemo AObj);

void
Memo_Append(TMemo AObj, CChar char* Value);

void
Memo_Clear(TMemo AObj);

void
Memo_ClearSelection(TMemo AObj);

void
Memo_CopyToClipboard(TMemo AObj);

void
Memo_CutToClipboard(TMemo AObj);

void
Memo_PasteFromClipboard(TMemo AObj);

void
Memo_Undo(TMemo AObj);

void
Memo_SelectAll(TMemo AObj);

BOOL
Memo_CanFocus(TMemo AObj);

BOOL
Memo_ContainsControl(TMemo AObj, TControl Control);

TControl
Memo_ControlAtPos(TMemo AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
Memo_DisableAlign(TMemo AObj);

void
Memo_EnableAlign(TMemo AObj);

TControl
Memo_FindChildControl(TMemo AObj, CChar char* ControlName);

void
Memo_FlipChildren(TMemo AObj, BOOL AllLevels);

BOOL
Memo_Focused(TMemo AObj);

BOOL
Memo_HandleAllocated(TMemo AObj);

void
Memo_InsertControl(TMemo AObj, TControl AControl);

void
Memo_Invalidate(TMemo AObj);

void
Memo_PaintTo(TMemo AObj, HDC DC, int32_t X, int32_t Y);

void
Memo_RemoveControl(TMemo AObj, TControl AControl);

void
Memo_Realign(TMemo AObj);

void
Memo_Repaint(TMemo AObj);

void
Memo_ScaleBy(TMemo AObj, int32_t M, int32_t D);

void
Memo_ScrollBy(TMemo AObj, int32_t DeltaX, int32_t DeltaY);

void
Memo_SetBounds(TMemo AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
Memo_SetFocus(TMemo AObj);

void
Memo_Update(TMemo AObj);

void
Memo_BringToFront(TMemo AObj);

TPoint
Memo_ClientToScreen(TMemo AObj, TPoint Point);

TPoint
Memo_ClientToParent(TMemo AObj, TPoint Point, TWinControl AParent);

BOOL
Memo_Dragging(TMemo AObj);

BOOL
Memo_HasParent(TMemo AObj);

void
Memo_Hide(TMemo AObj);

intptr_t
Memo_Perform(TMemo AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
Memo_Refresh(TMemo AObj);

TPoint
Memo_ScreenToClient(TMemo AObj, TPoint Point);

TPoint
Memo_ParentToClient(TMemo AObj, TPoint Point, TWinControl AParent);

void
Memo_SendToBack(TMemo AObj);

void
Memo_Show(TMemo AObj);

int32_t
Memo_GetTextBuf(TMemo AObj, CChar char* Buffer, int32_t BufSize);

int32_t
Memo_GetTextLen(TMemo AObj);

void
Memo_SetTextBuf(TMemo AObj, CChar char* Buffer);

TComponent
Memo_FindComponent(TMemo AObj, CChar char* AName);

char*
Memo_GetNamePath(TMemo AObj);

void
Memo_Assign(TMemo AObj, TObject Source);

TClass
Memo_ClassType(TMemo AObj);

char*
Memo_ClassName(TMemo AObj);

int32_t
Memo_InstanceSize(TMemo AObj);

BOOL
Memo_InheritsFrom(TMemo AObj, TClass AClass);

BOOL
Memo_Equals(TMemo AObj, TObject Obj);

int32_t
Memo_GetHashCode(TMemo AObj);

char*
Memo_ToString(TMemo AObj);

void
Memo_AnchorToNeighbour(TMemo AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Memo_AnchorParallel(TMemo AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Memo_AnchorHorizontalCenterTo(TMemo AObj, TControl ASibling);

void
Memo_AnchorVerticalCenterTo(TMemo AObj, TControl ASibling);

void
Memo_AnchorSame(TMemo AObj, TAnchorKind ASide, TControl ASibling);

void
Memo_AnchorAsAlign(TMemo AObj, TAlign ATheAlign, int32_t ASpace);

void
Memo_AnchorClient(TMemo AObj, int32_t ASpace);

int32_t
Memo_ScaleDesignToForm(TMemo AObj, int32_t ASize);

int32_t
Memo_ScaleFormToDesign(TMemo AObj, int32_t ASize);

int32_t
Memo_Scale96ToForm(TMemo AObj, int32_t ASize);

int32_t
Memo_ScaleFormTo96(TMemo AObj, int32_t ASize);

int32_t
Memo_Scale96ToFont(TMemo AObj, int32_t ASize);

int32_t
Memo_ScaleFontTo96(TMemo AObj, int32_t ASize);

int32_t
Memo_ScaleScreenToFont(TMemo AObj, int32_t ASize);

int32_t
Memo_ScaleFontToScreen(TMemo AObj, int32_t ASize);

int32_t
Memo_Scale96ToScreen(TMemo AObj, int32_t ASize);

int32_t
Memo_ScaleScreenTo96(TMemo AObj, int32_t ASize);

void
Memo_AutoAdjustLayout(TMemo AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
Memo_FixDesignFontsPPI(TMemo AObj, int32_t ADesignTimePPI);

void
Memo_ScaleFontsPPI(TMemo AObj, int32_t AToPPI, double AProportion);

TAlign
Memo_GetAlign(TMemo AObj);

void
Memo_SetAlign(TMemo AObj, TAlign AValue);

TAlignment
Memo_GetAlignment(TMemo AObj);

void
Memo_SetAlignment(TMemo AObj, TAlignment AValue);

TAnchors
Memo_GetAnchors(TMemo AObj);

void
Memo_SetAnchors(TMemo AObj, TAnchors AValue);

TBiDiMode
Memo_GetBiDiMode(TMemo AObj);

void
Memo_SetBiDiMode(TMemo AObj, TBiDiMode AValue);

TBorderStyle
Memo_GetBorderStyle(TMemo AObj);

void
Memo_SetBorderStyle(TMemo AObj, TBorderStyle AValue);

TEditCharCase
Memo_GetCharCase(TMemo AObj);

void
Memo_SetCharCase(TMemo AObj, TEditCharCase AValue);

TColor
Memo_GetColor(TMemo AObj);

void
Memo_SetColor(TMemo AObj, TColor AValue);

TSizeConstraints
Memo_GetConstraints(TMemo AObj);

void
Memo_SetConstraints(TMemo AObj, TSizeConstraints AValue);

BOOL
Memo_GetDoubleBuffered(TMemo AObj);

void
Memo_SetDoubleBuffered(TMemo AObj, BOOL AValue);

TCursor
Memo_GetDragCursor(TMemo AObj);

void
Memo_SetDragCursor(TMemo AObj, TCursor AValue);

TDragKind
Memo_GetDragKind(TMemo AObj);

void
Memo_SetDragKind(TMemo AObj, TDragKind AValue);

TDragMode
Memo_GetDragMode(TMemo AObj);

void
Memo_SetDragMode(TMemo AObj, TDragMode AValue);

BOOL
Memo_GetEnabled(TMemo AObj);

void
Memo_SetEnabled(TMemo AObj, BOOL AValue);

TFont
Memo_GetFont(TMemo AObj);

void
Memo_SetFont(TMemo AObj, TFont AValue);

BOOL
Memo_GetHideSelection(TMemo AObj);

void
Memo_SetHideSelection(TMemo AObj, BOOL AValue);

TStrings
Memo_GetLines(TMemo AObj);

void
Memo_SetLines(TMemo AObj, TStrings AValue);

int32_t
Memo_GetMaxLength(TMemo AObj);

void
Memo_SetMaxLength(TMemo AObj, int32_t AValue);

BOOL
Memo_GetParentColor(TMemo AObj);

void
Memo_SetParentColor(TMemo AObj, BOOL AValue);

BOOL
Memo_GetParentDoubleBuffered(TMemo AObj);

void
Memo_SetParentDoubleBuffered(TMemo AObj, BOOL AValue);

BOOL
Memo_GetParentFont(TMemo AObj);

void
Memo_SetParentFont(TMemo AObj, BOOL AValue);

BOOL
Memo_GetParentShowHint(TMemo AObj);

void
Memo_SetParentShowHint(TMemo AObj, BOOL AValue);

TPopupMenu
Memo_GetPopupMenu(TMemo AObj);

void
Memo_SetPopupMenu(TMemo AObj, TPopupMenu AValue);

BOOL
Memo_GetReadOnly(TMemo AObj);

void
Memo_SetReadOnly(TMemo AObj, BOOL AValue);

TScrollStyle
Memo_GetScrollBars(TMemo AObj);

void
Memo_SetScrollBars(TMemo AObj, TScrollStyle AValue);

BOOL
Memo_GetShowHint(TMemo AObj);

void
Memo_SetShowHint(TMemo AObj, BOOL AValue);

TTabOrder
Memo_GetTabOrder(TMemo AObj);

void
Memo_SetTabOrder(TMemo AObj, TTabOrder AValue);

BOOL
Memo_GetTabStop(TMemo AObj);

void
Memo_SetTabStop(TMemo AObj, BOOL AValue);

BOOL
Memo_GetVisible(TMemo AObj);

void
Memo_SetVisible(TMemo AObj, BOOL AValue);

BOOL
Memo_GetWantReturns(TMemo AObj);

void
Memo_SetWantReturns(TMemo AObj, BOOL AValue);

BOOL
Memo_GetWantTabs(TMemo AObj);

void
Memo_SetWantTabs(TMemo AObj, BOOL AValue);

BOOL
Memo_GetWordWrap(TMemo AObj);

void
Memo_SetWordWrap(TMemo AObj, BOOL AValue);

void
Memo_SetOnChange(TMemo AObj, TNotifyEvent AEventData);

void
Memo_SetOnClick(TMemo AObj, TNotifyEvent AEventData);

void
Memo_SetOnContextPopup(TMemo AObj, TContextPopupEvent AEventData);

void
Memo_SetOnDblClick(TMemo AObj, TNotifyEvent AEventData);

void
Memo_SetOnDragDrop(TMemo AObj, TDragDropEvent AEventData);

void
Memo_SetOnDragOver(TMemo AObj, TDragOverEvent AEventData);

void
Memo_SetOnEndDrag(TMemo AObj, TEndDragEvent AEventData);

void
Memo_SetOnEnter(TMemo AObj, TNotifyEvent AEventData);

void
Memo_SetOnExit(TMemo AObj, TNotifyEvent AEventData);

void
Memo_SetOnKeyDown(TMemo AObj, TKeyEvent AEventData);

void
Memo_SetOnKeyPress(TMemo AObj, TKeyPressEvent AEventData);

void
Memo_SetOnKeyUp(TMemo AObj, TKeyEvent AEventData);

void
Memo_SetOnMouseDown(TMemo AObj, TMouseEvent AEventData);

void
Memo_SetOnMouseEnter(TMemo AObj, TNotifyEvent AEventData);

void
Memo_SetOnMouseLeave(TMemo AObj, TNotifyEvent AEventData);

void
Memo_SetOnMouseMove(TMemo AObj, TMouseMoveEvent AEventData);

void
Memo_SetOnMouseUp(TMemo AObj, TMouseEvent AEventData);

TPoint
Memo_GetCaretPos(TMemo AObj);

void
Memo_SetCaretPos(TMemo AObj, TPoint AValue);

BOOL
Memo_GetCanUndo(TMemo AObj);

BOOL
Memo_GetModified(TMemo AObj);

void
Memo_SetModified(TMemo AObj, BOOL AValue);

int32_t
Memo_GetSelLength(TMemo AObj);

void
Memo_SetSelLength(TMemo AObj, int32_t AValue);

int32_t
Memo_GetSelStart(TMemo AObj);

void
Memo_SetSelStart(TMemo AObj, int32_t AValue);

char*
Memo_GetSelText(TMemo AObj);

void
Memo_SetSelText(TMemo AObj, CChar char* AValue);

char*
Memo_GetText(TMemo AObj);

void
Memo_SetText(TMemo AObj, CChar char* AValue);

char*
Memo_GetTextHint(TMemo AObj);

void
Memo_SetTextHint(TMemo AObj, CChar char* AValue);

int32_t
Memo_GetDockClientCount(TMemo AObj);

BOOL
Memo_GetDockSite(TMemo AObj);

void
Memo_SetDockSite(TMemo AObj, BOOL AValue);

BOOL
Memo_GetMouseInClient(TMemo AObj);

int32_t
Memo_GetVisibleDockClientCount(TMemo AObj);

TBrush
Memo_GetBrush(TMemo AObj);

int32_t
Memo_GetControlCount(TMemo AObj);

HWND
Memo_GetHandle(TMemo AObj);

HWND
Memo_GetParentWindow(TMemo AObj);

void
Memo_SetParentWindow(TMemo AObj, HWND AValue);

BOOL
Memo_GetShowing(TMemo AObj);

BOOL
Memo_GetUseDockManager(TMemo AObj);

void
Memo_SetUseDockManager(TMemo AObj, BOOL AValue);

TAction
Memo_GetAction(TMemo AObj);

void
Memo_SetAction(TMemo AObj, TAction AValue);

TRect
Memo_GetBoundsRect(TMemo AObj);

void
Memo_SetBoundsRect(TMemo AObj, TRect AValue);

int32_t
Memo_GetClientHeight(TMemo AObj);

void
Memo_SetClientHeight(TMemo AObj, int32_t AValue);

TPoint
Memo_GetClientOrigin(TMemo AObj);

TRect
Memo_GetClientRect(TMemo AObj);

int32_t
Memo_GetClientWidth(TMemo AObj);

void
Memo_SetClientWidth(TMemo AObj, int32_t AValue);

TControlState
Memo_GetControlState(TMemo AObj);

void
Memo_SetControlState(TMemo AObj, TControlState AValue);

TControlStyle
Memo_GetControlStyle(TMemo AObj);

void
Memo_SetControlStyle(TMemo AObj, TControlStyle AValue);

BOOL
Memo_GetFloating(TMemo AObj);

TWinControl
Memo_GetParent(TMemo AObj);

void
Memo_SetParent(TMemo AObj, TWinControl AValue);

int32_t
Memo_GetLeft(TMemo AObj);

void
Memo_SetLeft(TMemo AObj, int32_t AValue);

int32_t
Memo_GetTop(TMemo AObj);

void
Memo_SetTop(TMemo AObj, int32_t AValue);

int32_t
Memo_GetWidth(TMemo AObj);

void
Memo_SetWidth(TMemo AObj, int32_t AValue);

int32_t
Memo_GetHeight(TMemo AObj);

void
Memo_SetHeight(TMemo AObj, int32_t AValue);

TCursor
Memo_GetCursor(TMemo AObj);

void
Memo_SetCursor(TMemo AObj, TCursor AValue);

char*
Memo_GetHint(TMemo AObj);

void
Memo_SetHint(TMemo AObj, CChar char* AValue);

int32_t
Memo_GetComponentCount(TMemo AObj);

int32_t
Memo_GetComponentIndex(TMemo AObj);

void
Memo_SetComponentIndex(TMemo AObj, int32_t AValue);

TComponent
Memo_GetOwner(TMemo AObj);

char*
Memo_GetName(TMemo AObj);

void
Memo_SetName(TMemo AObj, CChar char* AValue);

intptr_t
Memo_GetTag(TMemo AObj);

void
Memo_SetTag(TMemo AObj, intptr_t AValue);

TAnchorSide
Memo_GetAnchorSideLeft(TMemo AObj);

void
Memo_SetAnchorSideLeft(TMemo AObj, TAnchorSide AValue);

TAnchorSide
Memo_GetAnchorSideTop(TMemo AObj);

void
Memo_SetAnchorSideTop(TMemo AObj, TAnchorSide AValue);

TAnchorSide
Memo_GetAnchorSideRight(TMemo AObj);

void
Memo_SetAnchorSideRight(TMemo AObj, TAnchorSide AValue);

TAnchorSide
Memo_GetAnchorSideBottom(TMemo AObj);

void
Memo_SetAnchorSideBottom(TMemo AObj, TAnchorSide AValue);

TControlChildSizing
Memo_GetChildSizing(TMemo AObj);

void
Memo_SetChildSizing(TMemo AObj, TControlChildSizing AValue);

TControlBorderSpacing
Memo_GetBorderSpacing(TMemo AObj);

void
Memo_SetBorderSpacing(TMemo AObj, TControlBorderSpacing AValue);

TControl
Memo_GetDockClients(TMemo AObj, int32_t Index);

TControl
Memo_GetControls(TMemo AObj, int32_t Index);

TComponent
Memo_GetComponents(TMemo AObj, int32_t AIndex);

TAnchorSide
Memo_GetAnchorSide(TMemo AObj, TAnchorKind AKind);

TClass
Memo_StaticClassType();

// -------------------TMemoryStream-------------------

TMemoryStream
MemoryStream_Create();

void
MemoryStream_Free(TMemoryStream AObj);

void
MemoryStream_Clear(TMemoryStream AObj);

void
MemoryStream_LoadFromStream(TMemoryStream AObj, TStream Stream);

void
MemoryStream_LoadFromFile(TMemoryStream AObj, CChar char* FileName);

int64_t
MemoryStream_Seek(TMemoryStream AObj, int64_t Offset, TSeekOrigin Origin);

void
MemoryStream_SaveToStream(TMemoryStream AObj, TStream Stream);

void
MemoryStream_SaveToFile(TMemoryStream AObj, CChar char* FileName);

int64_t
MemoryStream_CopyFrom(TMemoryStream AObj, TStream Source, int64_t Count);

TClass
MemoryStream_ClassType(TMemoryStream AObj);

char*
MemoryStream_ClassName(TMemoryStream AObj);

int32_t
MemoryStream_InstanceSize(TMemoryStream AObj);

BOOL
MemoryStream_InheritsFrom(TMemoryStream AObj, TClass AClass);

BOOL
MemoryStream_Equals(TMemoryStream AObj, TObject Obj);

int32_t
MemoryStream_GetHashCode(TMemoryStream AObj);

char*
MemoryStream_ToString(TMemoryStream AObj);

void*
MemoryStream_GetMemory(TMemoryStream AObj);

int64_t
MemoryStream_GetPosition(TMemoryStream AObj);

void
MemoryStream_SetPosition(TMemoryStream AObj, int64_t AValue);

int64_t
MemoryStream_GetSize(TMemoryStream AObj);

void
MemoryStream_SetSize(TMemoryStream AObj, int64_t AValue);

TClass
MemoryStream_StaticClassType();

int32_t
MemoryStream_Write(TMemoryStream AObj, void* Buffer, int32_t Count);

int32_t
MemoryStream_Read(TMemoryStream AObj, void* Buffer, int32_t Count);

// -------------------TFont-------------------

TFont
Font_Create();

void
Font_Free(TFont AObj);

void
Font_Assign(TFont AObj, TObject Source);

BOOL
Font_HandleAllocated(TFont AObj);

char*
Font_GetNamePath(TFont AObj);

TClass
Font_ClassType(TFont AObj);

char*
Font_ClassName(TFont AObj);

int32_t
Font_InstanceSize(TFont AObj);

BOOL
Font_InheritsFrom(TFont AObj, TClass AClass);

BOOL
Font_Equals(TFont AObj, TObject Obj);

int32_t
Font_GetHashCode(TFont AObj);

char*
Font_ToString(TFont AObj);

HFONT
Font_GetHandle(TFont AObj);

void
Font_SetHandle(TFont AObj, HFONT AValue);

int32_t
Font_GetPixelsPerInch(TFont AObj);

void
Font_SetPixelsPerInch(TFont AObj, int32_t AValue);

TFontCharset
Font_GetCharset(TFont AObj);

void
Font_SetCharset(TFont AObj, TFontCharset AValue);

TColor
Font_GetColor(TFont AObj);

void
Font_SetColor(TFont AObj, TColor AValue);

int32_t
Font_GetHeight(TFont AObj);

void
Font_SetHeight(TFont AObj, int32_t AValue);

char*
Font_GetName(TFont AObj);

void
Font_SetName(TFont AObj, CChar char* AValue);

int32_t
Font_GetOrientation(TFont AObj);

void
Font_SetOrientation(TFont AObj, int32_t AValue);

TFontPitch
Font_GetPitch(TFont AObj);

void
Font_SetPitch(TFont AObj, TFontPitch AValue);

int32_t
Font_GetSize(TFont AObj);

void
Font_SetSize(TFont AObj, int32_t AValue);

TFontStyles
Font_GetStyle(TFont AObj);

void
Font_SetStyle(TFont AObj, TFontStyles AValue);

TFontQuality
Font_GetQuality(TFont AObj);

void
Font_SetQuality(TFont AObj, TFontQuality AValue);

void
Font_SetOnChange(TFont AObj, TNotifyEvent AEventData);

TClass
Font_StaticClassType();

// -------------------TPopupMenu-------------------

TPopupMenu
PopupMenu_Create(TComponent AOwner);

void
PopupMenu_Free(TPopupMenu AObj);

void
PopupMenu_CloseMenu(TPopupMenu AObj);

void
PopupMenu_Popup(TPopupMenu AObj, int32_t X, int32_t Y);

TComponent
PopupMenu_FindComponent(TPopupMenu AObj, CChar char* AName);

char*
PopupMenu_GetNamePath(TPopupMenu AObj);

BOOL
PopupMenu_HasParent(TPopupMenu AObj);

void
PopupMenu_Assign(TPopupMenu AObj, TObject Source);

TClass
PopupMenu_ClassType(TPopupMenu AObj);

char*
PopupMenu_ClassName(TPopupMenu AObj);

int32_t
PopupMenu_InstanceSize(TPopupMenu AObj);

BOOL
PopupMenu_InheritsFrom(TPopupMenu AObj, TClass AClass);

BOOL
PopupMenu_Equals(TPopupMenu AObj, TObject Obj);

int32_t
PopupMenu_GetHashCode(TPopupMenu AObj);

char*
PopupMenu_ToString(TPopupMenu AObj);

int32_t
PopupMenu_GetImagesWidth(TPopupMenu AObj);

void
PopupMenu_SetImagesWidth(TPopupMenu AObj, int32_t AValue);

void
PopupMenu_SetOnDrawItem(TPopupMenu AObj, TMenuDrawItemEvent AEventData);

void
PopupMenu_SetOnMeasureItem(TPopupMenu AObj, TMenuMeasureItemEvent AEventData);

TComponent
PopupMenu_GetPopupComponent(TPopupMenu AObj);

void
PopupMenu_SetPopupComponent(TPopupMenu AObj, TComponent AValue);

TPoint
PopupMenu_GetPopupPoint(TPopupMenu AObj);

TPopupAlignment
PopupMenu_GetAlignment(TPopupMenu AObj);

void
PopupMenu_SetAlignment(TPopupMenu AObj, TPopupAlignment AValue);

TBiDiMode
PopupMenu_GetBiDiMode(TPopupMenu AObj);

void
PopupMenu_SetBiDiMode(TPopupMenu AObj, TBiDiMode AValue);

TImageList
PopupMenu_GetImages(TPopupMenu AObj);

void
PopupMenu_SetImages(TPopupMenu AObj, TImageList AValue);

BOOL
PopupMenu_GetOwnerDraw(TPopupMenu AObj);

void
PopupMenu_SetOwnerDraw(TPopupMenu AObj, BOOL AValue);

void
PopupMenu_SetOnPopup(TPopupMenu AObj, TNotifyEvent AEventData);

HMENU
PopupMenu_GetHandle(TPopupMenu AObj);

TMenuItem
PopupMenu_GetItems(TPopupMenu AObj);

int32_t
PopupMenu_GetComponentCount(TPopupMenu AObj);

int32_t
PopupMenu_GetComponentIndex(TPopupMenu AObj);

void
PopupMenu_SetComponentIndex(TPopupMenu AObj, int32_t AValue);

TComponent
PopupMenu_GetOwner(TPopupMenu AObj);

char*
PopupMenu_GetName(TPopupMenu AObj);

void
PopupMenu_SetName(TPopupMenu AObj, CChar char* AValue);

intptr_t
PopupMenu_GetTag(TPopupMenu AObj);

void
PopupMenu_SetTag(TPopupMenu AObj, intptr_t AValue);

TComponent
PopupMenu_GetComponents(TPopupMenu AObj, int32_t AIndex);

TClass
PopupMenu_StaticClassType();

// -------------------TStringList-------------------

TStringList
StringList_Create();

void
StringList_Free(TStringList AObj);

int32_t
StringList_Add(TStringList AObj, CChar char* S);

int32_t
StringList_AddObject(TStringList AObj, CChar char* S, TObject AObject);

void
StringList_Assign(TStringList AObj, TObject Source);

void
StringList_Clear(TStringList AObj);

void
StringList_Delete(TStringList AObj, int32_t Index);

void
StringList_Exchange(TStringList AObj, int32_t Index1, int32_t Index2);

int32_t
StringList_IndexOf(TStringList AObj, CChar char* S);

void
StringList_Insert(TStringList AObj, int32_t Index, CChar char* S);

void
StringList_InsertObject(TStringList AObj, int32_t Index, CChar char* S, TObject AObject);

void
StringList_Append(TStringList AObj, CChar char* S);

void
StringList_BeginUpdate(TStringList AObj);

void
StringList_EndUpdate(TStringList AObj);

BOOL
StringList_Equals(TStringList AObj, TStrings Strings);

int32_t
StringList_IndexOfName(TStringList AObj, CChar char* Name);

int32_t
StringList_IndexOfObject(TStringList AObj, TObject AObject);

void
StringList_LoadFromFile(TStringList AObj, CChar char* FileName);

void
StringList_LoadFromStream(TStringList AObj, TStream Stream);

void
StringList_Move(TStringList AObj, int32_t CurIndex, int32_t NewIndex);

void
StringList_SaveToFile(TStringList AObj, CChar char* FileName);

void
StringList_SaveToStream(TStringList AObj, TStream Stream);

char*
StringList_GetNamePath(TStringList AObj);

TClass
StringList_ClassType(TStringList AObj);

char*
StringList_ClassName(TStringList AObj);

int32_t
StringList_InstanceSize(TStringList AObj);

BOOL
StringList_InheritsFrom(TStringList AObj, TClass AClass);

int32_t
StringList_GetHashCode(TStringList AObj);

char*
StringList_ToString(TStringList AObj);

BOOL
StringList_GetSorted(TStringList AObj);

void
StringList_SetSorted(TStringList AObj, BOOL AValue);

void
StringList_SetOnChange(TStringList AObj, TNotifyEvent AEventData);

void
StringList_SetOnChanging(TStringList AObj, TNotifyEvent AEventData);

int32_t
StringList_GetCapacity(TStringList AObj);

void
StringList_SetCapacity(TStringList AObj, int32_t AValue);

char*
StringList_GetCommaText(TStringList AObj);

void
StringList_SetCommaText(TStringList AObj, CChar char* AValue);

int32_t
StringList_GetCount(TStringList AObj);

Char
StringList_GetDelimiter(TStringList AObj);

void
StringList_SetDelimiter(TStringList AObj, Char AValue);

Char
StringList_GetNameValueSeparator(TStringList AObj);

void
StringList_SetNameValueSeparator(TStringList AObj, Char AValue);

char*
StringList_GetText(TStringList AObj);

void
StringList_SetText(TStringList AObj, CChar char* AValue);

TObject
StringList_GetObjects(TStringList AObj, int32_t Index);

void
StringList_SetObjects(TStringList AObj, int32_t Index, TObject AValue);

char*
StringList_GetValues(TStringList AObj, CChar char* Name);

void
StringList_SetValues(TStringList AObj, CChar char* Name, CChar char* AValue);

char*
StringList_GetValueFromIndex(TStringList AObj, int32_t Index);

void
StringList_SetValueFromIndex(TStringList AObj, int32_t Index, CChar char* AValue);

char*
StringList_GetStrings(TStringList AObj, int32_t Index);

void
StringList_SetStrings(TStringList AObj, int32_t Index, CChar char* AValue);

TClass
StringList_StaticClassType();

// -------------------TBrush-------------------

TBrush
Brush_Create();

void
Brush_Free(TBrush AObj);

void
Brush_Assign(TBrush AObj, TObject Source);

char*
Brush_GetNamePath(TBrush AObj);

TClass
Brush_ClassType(TBrush AObj);

char*
Brush_ClassName(TBrush AObj);

int32_t
Brush_InstanceSize(TBrush AObj);

BOOL
Brush_InheritsFrom(TBrush AObj, TClass AClass);

BOOL
Brush_Equals(TBrush AObj, TObject Obj);

int32_t
Brush_GetHashCode(TBrush AObj);

char*
Brush_ToString(TBrush AObj);

TBitmap
Brush_GetBitmap(TBrush AObj);

void
Brush_SetBitmap(TBrush AObj, TBitmap AValue);

HBRUSH
Brush_GetHandle(TBrush AObj);

void
Brush_SetHandle(TBrush AObj, HBRUSH AValue);

TColor
Brush_GetColor(TBrush AObj);

void
Brush_SetColor(TBrush AObj, TColor AValue);

TBrushStyle
Brush_GetStyle(TBrush AObj);

void
Brush_SetStyle(TBrush AObj, TBrushStyle AValue);

void
Brush_SetOnChange(TBrush AObj, TNotifyEvent AEventData);

TClass
Brush_StaticClassType();

// -------------------TPen-------------------

TPen
Pen_Create();

void
Pen_Free(TPen AObj);

void
Pen_Assign(TPen AObj, TObject Source);

char*
Pen_GetNamePath(TPen AObj);

TClass
Pen_ClassType(TPen AObj);

char*
Pen_ClassName(TPen AObj);

int32_t
Pen_InstanceSize(TPen AObj);

BOOL
Pen_InheritsFrom(TPen AObj, TClass AClass);

BOOL
Pen_Equals(TPen AObj, TObject Obj);

int32_t
Pen_GetHashCode(TPen AObj);

char*
Pen_ToString(TPen AObj);

HPEN
Pen_GetHandle(TPen AObj);

void
Pen_SetHandle(TPen AObj, HPEN AValue);

TColor
Pen_GetColor(TPen AObj);

void
Pen_SetColor(TPen AObj, TColor AValue);

TPenMode
Pen_GetMode(TPen AObj);

void
Pen_SetMode(TPen AObj, TPenMode AValue);

TPenStyle
Pen_GetStyle(TPen AObj);

void
Pen_SetStyle(TPen AObj, TPenStyle AValue);

int32_t
Pen_GetWidth(TPen AObj);

void
Pen_SetWidth(TPen AObj, int32_t AValue);

void
Pen_SetOnChange(TPen AObj, TNotifyEvent AEventData);

TClass
Pen_StaticClassType();

// -------------------TMenuItem-------------------

TMenuItem
MenuItem_Create(TComponent AOwner);

void
MenuItem_Free(TMenuItem AObj);

void
MenuItem_Insert(TMenuItem AObj, int32_t Index, TMenuItem Item);

void
MenuItem_Delete(TMenuItem AObj, int32_t Index);

void
MenuItem_Clear(TMenuItem AObj);

void
MenuItem_Click(TMenuItem AObj);

int32_t
MenuItem_IndexOf(TMenuItem AObj, TMenuItem Item);

BOOL
MenuItem_HasParent(TMenuItem AObj);

void
MenuItem_Add(TMenuItem AObj, TMenuItem Item);

TComponent
MenuItem_FindComponent(TMenuItem AObj, CChar char* AName);

char*
MenuItem_GetNamePath(TMenuItem AObj);

void
MenuItem_Assign(TMenuItem AObj, TObject Source);

TClass
MenuItem_ClassType(TMenuItem AObj);

char*
MenuItem_ClassName(TMenuItem AObj);

int32_t
MenuItem_InstanceSize(TMenuItem AObj);

BOOL
MenuItem_InheritsFrom(TMenuItem AObj, TClass AClass);

BOOL
MenuItem_Equals(TMenuItem AObj, TObject Obj);

int32_t
MenuItem_GetHashCode(TMenuItem AObj);

char*
MenuItem_ToString(TMenuItem AObj);

HMENU
MenuItem_GetHandle(TMenuItem AObj);

int32_t
MenuItem_GetCount(TMenuItem AObj);

TMenuItem
MenuItem_GetParent(TMenuItem AObj);

TAction
MenuItem_GetAction(TMenuItem AObj);

void
MenuItem_SetAction(TMenuItem AObj, TAction AValue);

BOOL
MenuItem_GetAutoCheck(TMenuItem AObj);

void
MenuItem_SetAutoCheck(TMenuItem AObj, BOOL AValue);

TBitmap
MenuItem_GetBitmap(TMenuItem AObj);

void
MenuItem_SetBitmap(TMenuItem AObj, TBitmap AValue);

char*
MenuItem_GetCaption(TMenuItem AObj);

void
MenuItem_SetCaption(TMenuItem AObj, CChar char* AValue);

BOOL
MenuItem_GetChecked(TMenuItem AObj);

void
MenuItem_SetChecked(TMenuItem AObj, BOOL AValue);

BOOL
MenuItem_GetDefault(TMenuItem AObj);

void
MenuItem_SetDefault(TMenuItem AObj, BOOL AValue);

BOOL
MenuItem_GetEnabled(TMenuItem AObj);

void
MenuItem_SetEnabled(TMenuItem AObj, BOOL AValue);

int8_t
MenuItem_GetGroupIndex(TMenuItem AObj);

void
MenuItem_SetGroupIndex(TMenuItem AObj, int8_t AValue);

char*
MenuItem_GetHint(TMenuItem AObj);

void
MenuItem_SetHint(TMenuItem AObj, CChar char* AValue);

int32_t
MenuItem_GetImageIndex(TMenuItem AObj);

void
MenuItem_SetImageIndex(TMenuItem AObj, int32_t AValue);

BOOL
MenuItem_GetRadioItem(TMenuItem AObj);

void
MenuItem_SetRadioItem(TMenuItem AObj, BOOL AValue);

TShortCut
MenuItem_GetShortCut(TMenuItem AObj);

void
MenuItem_SetShortCut(TMenuItem AObj, TShortCut AValue);

BOOL
MenuItem_GetVisible(TMenuItem AObj);

void
MenuItem_SetVisible(TMenuItem AObj, BOOL AValue);

void
MenuItem_SetOnClick(TMenuItem AObj, TNotifyEvent AEventData);

void
MenuItem_SetOnMeasureItem(TMenuItem AObj, TMenuMeasureItemEvent AEventData);

int32_t
MenuItem_GetComponentCount(TMenuItem AObj);

int32_t
MenuItem_GetComponentIndex(TMenuItem AObj);

void
MenuItem_SetComponentIndex(TMenuItem AObj, int32_t AValue);

TComponent
MenuItem_GetOwner(TMenuItem AObj);

char*
MenuItem_GetName(TMenuItem AObj);

void
MenuItem_SetName(TMenuItem AObj, CChar char* AValue);

intptr_t
MenuItem_GetTag(TMenuItem AObj);

void
MenuItem_SetTag(TMenuItem AObj, intptr_t AValue);

TMenuItem
MenuItem_GetItems(TMenuItem AObj, int32_t Index);

TComponent
MenuItem_GetComponents(TMenuItem AObj, int32_t AIndex);

TClass
MenuItem_StaticClassType();

char*
MenuItem_GetShortCutText(TMenuItem AObj);

void
MenuItem_SetShortCutText(TMenuItem AObj, CChar char* Value);

// -------------------TPicture-------------------

TPicture
Picture_Create();

void
Picture_Free(TPicture AObj);

void
Picture_LoadFromFile(TPicture AObj, CChar char* Filename);

void
Picture_SaveToFile(TPicture AObj, CChar char* Filename);

void
Picture_LoadFromStream(TPicture AObj, TStream Stream);

void
Picture_SaveToStream(TPicture AObj, TStream Stream);

void
Picture_Assign(TPicture AObj, TObject Source);

char*
Picture_GetNamePath(TPicture AObj);

TClass
Picture_ClassType(TPicture AObj);

char*
Picture_ClassName(TPicture AObj);

int32_t
Picture_InstanceSize(TPicture AObj);

BOOL
Picture_InheritsFrom(TPicture AObj, TClass AClass);

BOOL
Picture_Equals(TPicture AObj, TObject Obj);

int32_t
Picture_GetHashCode(TPicture AObj);

char*
Picture_ToString(TPicture AObj);

TBitmap
Picture_GetBitmap(TPicture AObj);

void
Picture_SetBitmap(TPicture AObj, TBitmap AValue);

TGraphic
Picture_GetGraphic(TPicture AObj);

void
Picture_SetGraphic(TPicture AObj, TGraphic AValue);

int32_t
Picture_GetHeight(TPicture AObj);

TIcon
Picture_GetIcon(TPicture AObj);

void
Picture_SetIcon(TPicture AObj, TIcon AValue);

int32_t
Picture_GetWidth(TPicture AObj);

void
Picture_SetOnChange(TPicture AObj, TNotifyEvent AEventData);

TClass
Picture_StaticClassType();

// -------------------TListColumns-------------------

TListColumns
ListColumns_Create(TListView AOwner);

void
ListColumns_Free(TListColumns AObj);

TListColumn
ListColumns_Add(TListColumns AObj);

TListView
ListColumns_Owner(TListColumns AObj);

void
ListColumns_Assign(TListColumns AObj, TObject Source);

void
ListColumns_BeginUpdate(TListColumns AObj);

void
ListColumns_Clear(TListColumns AObj);

void
ListColumns_Delete(TListColumns AObj, int32_t Index);

void
ListColumns_EndUpdate(TListColumns AObj);

TCollectionItem
ListColumns_FindItemID(TListColumns AObj, int32_t ID);

char*
ListColumns_GetNamePath(TListColumns AObj);

TCollectionItem
ListColumns_Insert(TListColumns AObj, int32_t Index);

TClass
ListColumns_ClassType(TListColumns AObj);

char*
ListColumns_ClassName(TListColumns AObj);

int32_t
ListColumns_InstanceSize(TListColumns AObj);

BOOL
ListColumns_InheritsFrom(TListColumns AObj, TClass AClass);

BOOL
ListColumns_Equals(TListColumns AObj, TObject Obj);

int32_t
ListColumns_GetHashCode(TListColumns AObj);

char*
ListColumns_ToString(TListColumns AObj);

int32_t
ListColumns_GetCount(TListColumns AObj);

TListColumn
ListColumns_GetItems(TListColumns AObj, int32_t Index);

void
ListColumns_SetItems(TListColumns AObj, int32_t Index, TListColumn AValue);

TClass
ListColumns_StaticClassType();

// -------------------TListItems-------------------

TListItems
ListItems_Create(TListView AOwner);

void
ListItems_Free(TListItems AObj);

TListItem
ListItems_Add(TListItems AObj);

void
ListItems_Assign(TListItems AObj, TObject Source);

void
ListItems_BeginUpdate(TListItems AObj);

void
ListItems_Clear(TListItems AObj);

void
ListItems_Delete(TListItems AObj, int32_t Index);

void
ListItems_EndUpdate(TListItems AObj);

int32_t
ListItems_IndexOf(TListItems AObj, TListItem Value);

TListItem
ListItems_Insert(TListItems AObj, int32_t Index);

char*
ListItems_GetNamePath(TListItems AObj);

TClass
ListItems_ClassType(TListItems AObj);

char*
ListItems_ClassName(TListItems AObj);

int32_t
ListItems_InstanceSize(TListItems AObj);

BOOL
ListItems_InheritsFrom(TListItems AObj, TClass AClass);

BOOL
ListItems_Equals(TListItems AObj, TObject Obj);

int32_t
ListItems_GetHashCode(TListItems AObj);

char*
ListItems_ToString(TListItems AObj);

int32_t
ListItems_GetCount(TListItems AObj);

void
ListItems_SetCount(TListItems AObj, int32_t AValue);

TListView
ListItems_GetOwner(TListItems AObj);

TListItem
ListItems_GetItem(TListItems AObj, int32_t Index);

void
ListItems_SetItem(TListItems AObj, int32_t Index, TListItem AValue);

TClass
ListItems_StaticClassType();

// -------------------TTreeNodes-------------------

TTreeNodes
TreeNodes_Create(TTreeView AOwner);

void
TreeNodes_Free(TTreeNodes AObj);

TTreeNode
TreeNodes_AddChildFirst(TTreeNodes AObj, TTreeNode Parent, CChar char* S);

TTreeNode
TreeNodes_AddChild(TTreeNodes AObj, TTreeNode Parent, CChar char* S);

TTreeNode
TreeNodes_AddChildObjectFirst(TTreeNodes AObj, TTreeNode Parent, CChar char* S, void* Ptr);

TTreeNode
TreeNodes_AddChildObject(TTreeNodes AObj, TTreeNode Parent, CChar char* S, void* Ptr);

TTreeNode
TreeNodes_AddObjectFirst(TTreeNodes AObj, TTreeNode Sibling, CChar char* S, void* Ptr);

TTreeNode
TreeNodes_AddObject(TTreeNodes AObj, TTreeNode Sibling, CChar char* S, void* Ptr);

TTreeNode
TreeNodes_AddNode(TTreeNodes AObj, TTreeNode Node, TTreeNode Relative, CChar char* S, void* Ptr, TNodeAttachMode Method);

TTreeNode
TreeNodes_AddFirst(TTreeNodes AObj, TTreeNode Sibling, CChar char* S);

TTreeNode
TreeNodes_Add(TTreeNodes AObj, TTreeNode Sibling, CChar char* S);

void
TreeNodes_Assign(TTreeNodes AObj, TObject Source);

void
TreeNodes_BeginUpdate(TTreeNodes AObj);

void
TreeNodes_Clear(TTreeNodes AObj);

void
TreeNodes_Delete(TTreeNodes AObj, TTreeNode Node);

void
TreeNodes_EndUpdate(TTreeNodes AObj);

TTreeNode
TreeNodes_GetFirstNode(TTreeNodes AObj);

TTreeNode
TreeNodes_Insert(TTreeNodes AObj, TTreeNode Sibling, CChar char* S);

TTreeNode
TreeNodes_InsertObject(TTreeNodes AObj, TTreeNode Sibling, CChar char* S, void* Ptr);

BOOL
TreeNodes_CustomSort(TTreeNodes AObj, PFNTVCOMPARE SortProc, intptr_t Data, BOOL ARecurse);

char*
TreeNodes_GetNamePath(TTreeNodes AObj);

TClass
TreeNodes_ClassType(TTreeNodes AObj);

char*
TreeNodes_ClassName(TTreeNodes AObj);

int32_t
TreeNodes_InstanceSize(TTreeNodes AObj);

BOOL
TreeNodes_InheritsFrom(TTreeNodes AObj, TClass AClass);

BOOL
TreeNodes_Equals(TTreeNodes AObj, TObject Obj);

int32_t
TreeNodes_GetHashCode(TTreeNodes AObj);

char*
TreeNodes_ToString(TTreeNodes AObj);

int32_t
TreeNodes_GetCount(TTreeNodes AObj);

TTreeView
TreeNodes_GetOwner(TTreeNodes AObj);

TTreeNode
TreeNodes_GetItem(TTreeNodes AObj, int32_t Index);

TClass
TreeNodes_StaticClassType();

// -------------------TListItem-------------------

TListItem
ListItem_Create(TListItems AOwner);

void
ListItem_Free(TListItem AObj);

TRect
ListItem_DisplayRectSubItem(TListItem AObj, int32_t subItem, TDisplayCode Code);

void
ListItem_Assign(TListItem AObj, TObject Source);

void
ListItem_Delete(TListItem AObj);

TRect
ListItem_DisplayRect(TListItem AObj, TDisplayCode Code);

BOOL
ListItem_EditCaption(TListItem AObj);

void
ListItem_MakeVisible(TListItem AObj, BOOL PartialOK);

char*
ListItem_GetNamePath(TListItem AObj);

TClass
ListItem_ClassType(TListItem AObj);

char*
ListItem_ClassName(TListItem AObj);

int32_t
ListItem_InstanceSize(TListItem AObj);

BOOL
ListItem_InheritsFrom(TListItem AObj, TClass AClass);

BOOL
ListItem_Equals(TListItem AObj, TObject Obj);

int32_t
ListItem_GetHashCode(TListItem AObj);

char*
ListItem_ToString(TListItem AObj);

BOOL
ListItem_GetDropTarget(TListItem AObj);

void
ListItem_SetDropTarget(TListItem AObj, BOOL AValue);

char*
ListItem_GetCaption(TListItem AObj);

void
ListItem_SetCaption(TListItem AObj, CChar char* AValue);

BOOL
ListItem_GetChecked(TListItem AObj);

void
ListItem_SetChecked(TListItem AObj, BOOL AValue);

BOOL
ListItem_GetCut(TListItem AObj);

void
ListItem_SetCut(TListItem AObj, BOOL AValue);

void*
ListItem_GetData(TListItem AObj);

void
ListItem_SetData(TListItem AObj, void* AValue);

BOOL
ListItem_GetFocused(TListItem AObj);

void
ListItem_SetFocused(TListItem AObj, BOOL AValue);

int32_t
ListItem_GetImageIndex(TListItem AObj);

void
ListItem_SetImageIndex(TListItem AObj, int32_t AValue);

int32_t
ListItem_GetIndex(TListItem AObj);

int32_t
ListItem_GetLeft(TListItem AObj);

void
ListItem_SetLeft(TListItem AObj, int32_t AValue);

TListView
ListItem_GetListView(TListItem AObj);

TListItems
ListItem_GetOwner(TListItem AObj);

TPoint
ListItem_GetPosition(TListItem AObj);

void
ListItem_SetPosition(TListItem AObj, TPoint AValue);

BOOL
ListItem_GetSelected(TListItem AObj);

void
ListItem_SetSelected(TListItem AObj, BOOL AValue);

int32_t
ListItem_GetStateIndex(TListItem AObj);

void
ListItem_SetStateIndex(TListItem AObj, int32_t AValue);

TStrings
ListItem_GetSubItems(TListItem AObj);

void
ListItem_SetSubItems(TListItem AObj, TStrings AValue);

int32_t
ListItem_GetTop(TListItem AObj);

void
ListItem_SetTop(TListItem AObj, int32_t AValue);

int32_t
ListItem_GetSubItemImages(TListItem AObj, int32_t Index);

void
ListItem_SetSubItemImages(TListItem AObj, int32_t Index, int32_t AValue);

TClass
ListItem_StaticClassType();

// -------------------TTreeNode-------------------

TTreeNode
TreeNode_Create(TTreeNodes AOwner);

void
TreeNode_Free(TTreeNode AObj);

int32_t
TreeNode_Bottom(TTreeNode AObj);

int32_t
TreeNode_BottomExpanded(TTreeNode AObj);

int32_t
TreeNode_DefaultTreeViewSort(TTreeNode AObj, TTreeNode Node1, TTreeNode Node2);

int32_t
TreeNode_DisplayExpandSignLeft(TTreeNode AObj);

TRect
TreeNode_DisplayExpandSignRect(TTreeNode AObj);

int32_t
TreeNode_DisplayExpandSignRight(TTreeNode AObj);

int32_t
TreeNode_DisplayIconLeft(TTreeNode AObj);

TRect
TreeNode_DisplayRect(TTreeNode AObj, BOOL TextOnly);

int32_t
TreeNode_DisplayStateIconLeft(TTreeNode AObj);

int32_t
TreeNode_DisplayTextLeft(TTreeNode AObj);

int32_t
TreeNode_DisplayTextRight(TTreeNode AObj);

BOOL
TreeNode_EditText(TTreeNode AObj);

TTreeNode
TreeNode_FindNode(TTreeNode AObj, CChar char* NodeText);

TTreeNode
TreeNode_GetFirstChild(TTreeNode AObj);

TTreeNode
TreeNode_GetFirstVisibleChild(TTreeNode AObj);

TTreeNode
TreeNode_GetLastChild(TTreeNode AObj);

TTreeNode
TreeNode_GetLastSibling(TTreeNode AObj);

TTreeNode
TreeNode_GetLastSubChild(TTreeNode AObj);

TTreeNode
TreeNode_GetLastVisibleChild(TTreeNode AObj);

TTreeNode
TreeNode_GetNext(TTreeNode AObj);

TTreeNode
TreeNode_GetNextChild(TTreeNode AObj, TTreeNode AValue);

TTreeNode
TreeNode_GetNextExpanded(TTreeNode AObj);

TTreeNode
TreeNode_GetNextMultiSelected(TTreeNode AObj);

TTreeNode
TreeNode_GetNextSibling(TTreeNode AObj);

TTreeNode
TreeNode_GetNextSkipChildren(TTreeNode AObj);

TTreeNode
TreeNode_GetNextVisible(TTreeNode AObj);

TTreeNode
TreeNode_GetNextVisibleSibling(TTreeNode AObj);

TTreeNode
TreeNode_GetParentNodeOfAbsoluteLevel(TTreeNode AObj, int32_t TheAbsoluteLevel);

TTreeNode
TreeNode_GetPrev(TTreeNode AObj);

TTreeNode
TreeNode_GetPrevChild(TTreeNode AObj, TTreeNode AValue);

TTreeNode
TreeNode_GetPrevExpanded(TTreeNode AObj);

TTreeNode
TreeNode_GetPrevMultiSelected(TTreeNode AObj);

TTreeNode
TreeNode_GetPrevSibling(TTreeNode AObj);

TTreeNode
TreeNode_GetPrevVisible(TTreeNode AObj);

TTreeNode
TreeNode_GetPrevVisibleSibling(TTreeNode AObj);

char*
TreeNode_GetTextPath(TTreeNode AObj);

BOOL
TreeNode_HasAsParent(TTreeNode AObj, TTreeNode AValue);

int32_t
TreeNode_IndexOf(TTreeNode AObj, TTreeNode AValue);

int32_t
TreeNode_IndexOfText(TTreeNode AObj, CChar char* NodeText);

void
TreeNode_Assign(TTreeNode AObj, TObject Source);

void
TreeNode_Collapse(TTreeNode AObj, BOOL Recurse);

void
TreeNode_ConsistencyCheck(TTreeNode AObj);

void
TreeNode_Delete(TTreeNode AObj);

void
TreeNode_DeleteChildren(TTreeNode AObj);

void
TreeNode_EndEdit(TTreeNode AObj, BOOL Cancel);

void
TreeNode_Expand(TTreeNode AObj, BOOL Recurse);

void
TreeNode_ExpandParents(TTreeNode AObj);

void
TreeNode_FreeAllNodeData(TTreeNode AObj);

void
TreeNode_MakeVisible(TTreeNode AObj);

void
TreeNode_MoveTo(TTreeNode AObj, TTreeNode Destination, TNodeAttachMode Mode);

void
TreeNode_MultiSelectGroup(TTreeNode AObj);

void
TreeNode_Update(TTreeNode AObj);

void
TreeNode_WriteDebugReport(TTreeNode AObj, CChar char* Prefix, BOOL Recurse);

BOOL
TreeNode_CustomSort(TTreeNode AObj, PFNTVCOMPARE SortProc, intptr_t Data, BOOL ARecurse);

char*
TreeNode_GetNamePath(TTreeNode AObj);

TClass
TreeNode_ClassType(TTreeNode AObj);

char*
TreeNode_ClassName(TTreeNode AObj);

int32_t
TreeNode_InstanceSize(TTreeNode AObj);

BOOL
TreeNode_InheritsFrom(TTreeNode AObj, TClass AClass);

BOOL
TreeNode_Equals(TTreeNode AObj, TObject Obj);

int32_t
TreeNode_GetHashCode(TTreeNode AObj);

char*
TreeNode_ToString(TTreeNode AObj);

int32_t
TreeNode_GetAbsoluteIndex(TTreeNode AObj);

int32_t
TreeNode_GetCount(TTreeNode AObj);

BOOL
TreeNode_GetCut(TTreeNode AObj);

void
TreeNode_SetCut(TTreeNode AObj, BOOL AValue);

void*
TreeNode_GetData(TTreeNode AObj);

void
TreeNode_SetData(TTreeNode AObj, void* AValue);

BOOL
TreeNode_GetDeleting(TTreeNode AObj);

BOOL
TreeNode_GetDropTarget(TTreeNode AObj);

void
TreeNode_SetDropTarget(TTreeNode AObj, BOOL AValue);

BOOL
TreeNode_GetExpanded(TTreeNode AObj);

void
TreeNode_SetExpanded(TTreeNode AObj, BOOL AValue);

BOOL
TreeNode_GetFocused(TTreeNode AObj);

void
TreeNode_SetFocused(TTreeNode AObj, BOOL AValue);

uintptr_t
TreeNode_GetHandle(TTreeNode AObj);

BOOL
TreeNode_GetHasChildren(TTreeNode AObj);

void
TreeNode_SetHasChildren(TTreeNode AObj, BOOL AValue);

int32_t
TreeNode_GetHeight(TTreeNode AObj);

void
TreeNode_SetHeight(TTreeNode AObj, int32_t AValue);

int32_t
TreeNode_GetImageIndex(TTreeNode AObj);

void
TreeNode_SetImageIndex(TTreeNode AObj, int32_t AValue);

int32_t
TreeNode_GetIndex(TTreeNode AObj);

void
TreeNode_SetIndex(TTreeNode AObj, int32_t AValue);

BOOL
TreeNode_GetIsFullHeightVisible(TTreeNode AObj);

BOOL
TreeNode_GetIsVisible(TTreeNode AObj);

int32_t
TreeNode_GetLevel(TTreeNode AObj);

BOOL
TreeNode_GetMultiSelected(TTreeNode AObj);

void
TreeNode_SetMultiSelected(TTreeNode AObj, BOOL AValue);

int32_t
TreeNode_GetOverlayIndex(TTreeNode AObj);

void
TreeNode_SetOverlayIndex(TTreeNode AObj, int32_t AValue);

TTreeNodes
TreeNode_GetOwner(TTreeNode AObj);

TTreeNode
TreeNode_GetParent(TTreeNode AObj);

BOOL
TreeNode_GetSelected(TTreeNode AObj);

void
TreeNode_SetSelected(TTreeNode AObj, BOOL AValue);

int32_t
TreeNode_GetSelectedIndex(TTreeNode AObj);

void
TreeNode_SetSelectedIndex(TTreeNode AObj, int32_t AValue);

int32_t
TreeNode_GetStateIndex(TTreeNode AObj);

void
TreeNode_SetStateIndex(TTreeNode AObj, int32_t AValue);

int32_t
TreeNode_GetSubTreeCount(TTreeNode AObj);

char*
TreeNode_GetText(TTreeNode AObj);

void
TreeNode_SetText(TTreeNode AObj, CChar char* AValue);

int32_t
TreeNode_GetTop(TTreeNode AObj);

TTreeNodes
TreeNode_GetTreeNodes(TTreeNode AObj);

TTreeView
TreeNode_GetTreeView(TTreeNode AObj);

BOOL
TreeNode_GetVisible(TTreeNode AObj);

void
TreeNode_SetVisible(TTreeNode AObj, BOOL AValue);

TTreeNode
TreeNode_GetItems(TTreeNode AObj, int32_t ItemIndex);

void
TreeNode_SetItems(TTreeNode AObj, int32_t ItemIndex, TTreeNode AValue);

TTreeNode
TreeNode_GetItem(TTreeNode AObj, int32_t Index);

void
TreeNode_SetItem(TTreeNode AObj, int32_t Index, TTreeNode AValue);

TClass
TreeNode_StaticClassType();

// -------------------TPageControl-------------------

TPageControl
PageControl_Create(TComponent AOwner);

void
PageControl_Free(TPageControl AObj);

void
PageControl_Clear(TPageControl AObj);

TTabSheet
PageControl_FindNextPage(TPageControl AObj, TTabSheet CurPage, BOOL GoForward, BOOL CheckTabVisible);

void
PageControl_SelectNextPage(TPageControl AObj, BOOL GoForward);

TTabSheet
PageControl_AddTabSheet(TPageControl AObj);

int32_t
PageControl_IndexOfTabAt(TPageControl AObj, int32_t X, int32_t Y);

int32_t
PageControl_IndexOfPageAt(TPageControl AObj, int32_t X, int32_t Y);

TRect
PageControl_TabRect(TPageControl AObj, int32_t Index);

BOOL
PageControl_CanFocus(TPageControl AObj);

BOOL
PageControl_ContainsControl(TPageControl AObj, TControl Control);

TControl
PageControl_ControlAtPos(TPageControl AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
PageControl_DisableAlign(TPageControl AObj);

void
PageControl_EnableAlign(TPageControl AObj);

TControl
PageControl_FindChildControl(TPageControl AObj, CChar char* ControlName);

void
PageControl_FlipChildren(TPageControl AObj, BOOL AllLevels);

BOOL
PageControl_Focused(TPageControl AObj);

BOOL
PageControl_HandleAllocated(TPageControl AObj);

void
PageControl_InsertControl(TPageControl AObj, TControl AControl);

void
PageControl_Invalidate(TPageControl AObj);

void
PageControl_PaintTo(TPageControl AObj, HDC DC, int32_t X, int32_t Y);

void
PageControl_RemoveControl(TPageControl AObj, TControl AControl);

void
PageControl_Realign(TPageControl AObj);

void
PageControl_Repaint(TPageControl AObj);

void
PageControl_ScaleBy(TPageControl AObj, int32_t M, int32_t D);

void
PageControl_ScrollBy(TPageControl AObj, int32_t DeltaX, int32_t DeltaY);

void
PageControl_SetBounds(TPageControl AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
PageControl_SetFocus(TPageControl AObj);

void
PageControl_Update(TPageControl AObj);

void
PageControl_BringToFront(TPageControl AObj);

TPoint
PageControl_ClientToScreen(TPageControl AObj, TPoint Point);

TPoint
PageControl_ClientToParent(TPageControl AObj, TPoint Point, TWinControl AParent);

BOOL
PageControl_Dragging(TPageControl AObj);

BOOL
PageControl_HasParent(TPageControl AObj);

void
PageControl_Hide(TPageControl AObj);

intptr_t
PageControl_Perform(TPageControl AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
PageControl_Refresh(TPageControl AObj);

TPoint
PageControl_ScreenToClient(TPageControl AObj, TPoint Point);

TPoint
PageControl_ParentToClient(TPageControl AObj, TPoint Point, TWinControl AParent);

void
PageControl_SendToBack(TPageControl AObj);

void
PageControl_Show(TPageControl AObj);

int32_t
PageControl_GetTextBuf(TPageControl AObj, CChar char* Buffer, int32_t BufSize);

int32_t
PageControl_GetTextLen(TPageControl AObj);

void
PageControl_SetTextBuf(TPageControl AObj, CChar char* Buffer);

TComponent
PageControl_FindComponent(TPageControl AObj, CChar char* AName);

char*
PageControl_GetNamePath(TPageControl AObj);

void
PageControl_Assign(TPageControl AObj, TObject Source);

TClass
PageControl_ClassType(TPageControl AObj);

char*
PageControl_ClassName(TPageControl AObj);

int32_t
PageControl_InstanceSize(TPageControl AObj);

BOOL
PageControl_InheritsFrom(TPageControl AObj, TClass AClass);

BOOL
PageControl_Equals(TPageControl AObj, TObject Obj);

int32_t
PageControl_GetHashCode(TPageControl AObj);

char*
PageControl_ToString(TPageControl AObj);

void
PageControl_AnchorToNeighbour(TPageControl AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
PageControl_AnchorParallel(TPageControl AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
PageControl_AnchorHorizontalCenterTo(TPageControl AObj, TControl ASibling);

void
PageControl_AnchorVerticalCenterTo(TPageControl AObj, TControl ASibling);

void
PageControl_AnchorSame(TPageControl AObj, TAnchorKind ASide, TControl ASibling);

void
PageControl_AnchorAsAlign(TPageControl AObj, TAlign ATheAlign, int32_t ASpace);

void
PageControl_AnchorClient(TPageControl AObj, int32_t ASpace);

int32_t
PageControl_ScaleDesignToForm(TPageControl AObj, int32_t ASize);

int32_t
PageControl_ScaleFormToDesign(TPageControl AObj, int32_t ASize);

int32_t
PageControl_Scale96ToForm(TPageControl AObj, int32_t ASize);

int32_t
PageControl_ScaleFormTo96(TPageControl AObj, int32_t ASize);

int32_t
PageControl_Scale96ToFont(TPageControl AObj, int32_t ASize);

int32_t
PageControl_ScaleFontTo96(TPageControl AObj, int32_t ASize);

int32_t
PageControl_ScaleScreenToFont(TPageControl AObj, int32_t ASize);

int32_t
PageControl_ScaleFontToScreen(TPageControl AObj, int32_t ASize);

int32_t
PageControl_Scale96ToScreen(TPageControl AObj, int32_t ASize);

int32_t
PageControl_ScaleScreenTo96(TPageControl AObj, int32_t ASize);

void
PageControl_AutoAdjustLayout(TPageControl AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
PageControl_FixDesignFontsPPI(TPageControl AObj, int32_t ADesignTimePPI);

void
PageControl_ScaleFontsPPI(TPageControl AObj, int32_t AToPPI, double AProportion);

BOOL
PageControl_GetRaggedRight(TPageControl AObj);

void
PageControl_SetRaggedRight(TPageControl AObj, BOOL AValue);

BOOL
PageControl_GetScrollOpposite(TPageControl AObj);

void
PageControl_SetScrollOpposite(TPageControl AObj, BOOL AValue);

int32_t
PageControl_GetPageIndex(TPageControl AObj);

void
PageControl_SetPageIndex(TPageControl AObj, int32_t AValue);

TCTabControlOptions
PageControl_GetOptions(TPageControl AObj);

void
PageControl_SetOptions(TPageControl AObj, TCTabControlOptions AValue);

void
PageControl_SetOnCloseTabClicked(TPageControl AObj, TNotifyEvent AEventData);

BOOL
PageControl_GetMultiSelect(TPageControl AObj);

void
PageControl_SetMultiSelect(TPageControl AObj, BOOL AValue);

int32_t
PageControl_GetActivePageIndex(TPageControl AObj);

void
PageControl_SetActivePageIndex(TPageControl AObj, int32_t AValue);

int32_t
PageControl_GetPageCount(TPageControl AObj);

TTabSheet
PageControl_GetActivePage(TPageControl AObj);

void
PageControl_SetActivePage(TPageControl AObj, TTabSheet AValue);

TAlign
PageControl_GetAlign(TPageControl AObj);

void
PageControl_SetAlign(TPageControl AObj, TAlign AValue);

TAnchors
PageControl_GetAnchors(TPageControl AObj);

void
PageControl_SetAnchors(TPageControl AObj, TAnchors AValue);

TBiDiMode
PageControl_GetBiDiMode(TPageControl AObj);

void
PageControl_SetBiDiMode(TPageControl AObj, TBiDiMode AValue);

TSizeConstraints
PageControl_GetConstraints(TPageControl AObj);

void
PageControl_SetConstraints(TPageControl AObj, TSizeConstraints AValue);

BOOL
PageControl_GetDockSite(TPageControl AObj);

void
PageControl_SetDockSite(TPageControl AObj, BOOL AValue);

BOOL
PageControl_GetDoubleBuffered(TPageControl AObj);

void
PageControl_SetDoubleBuffered(TPageControl AObj, BOOL AValue);

TCursor
PageControl_GetDragCursor(TPageControl AObj);

void
PageControl_SetDragCursor(TPageControl AObj, TCursor AValue);

TDragKind
PageControl_GetDragKind(TPageControl AObj);

void
PageControl_SetDragKind(TPageControl AObj, TDragKind AValue);

TDragMode
PageControl_GetDragMode(TPageControl AObj);

void
PageControl_SetDragMode(TPageControl AObj, TDragMode AValue);

BOOL
PageControl_GetEnabled(TPageControl AObj);

void
PageControl_SetEnabled(TPageControl AObj, BOOL AValue);

TFont
PageControl_GetFont(TPageControl AObj);

void
PageControl_SetFont(TPageControl AObj, TFont AValue);

TImageList
PageControl_GetImages(TPageControl AObj);

void
PageControl_SetImages(TPageControl AObj, TImageList AValue);

BOOL
PageControl_GetMultiLine(TPageControl AObj);

void
PageControl_SetMultiLine(TPageControl AObj, BOOL AValue);

BOOL
PageControl_GetParentDoubleBuffered(TPageControl AObj);

void
PageControl_SetParentDoubleBuffered(TPageControl AObj, BOOL AValue);

BOOL
PageControl_GetParentFont(TPageControl AObj);

void
PageControl_SetParentFont(TPageControl AObj, BOOL AValue);

BOOL
PageControl_GetParentShowHint(TPageControl AObj);

void
PageControl_SetParentShowHint(TPageControl AObj, BOOL AValue);

TPopupMenu
PageControl_GetPopupMenu(TPageControl AObj);

void
PageControl_SetPopupMenu(TPageControl AObj, TPopupMenu AValue);

BOOL
PageControl_GetShowHint(TPageControl AObj);

void
PageControl_SetShowHint(TPageControl AObj, BOOL AValue);

int16_t
PageControl_GetTabHeight(TPageControl AObj);

void
PageControl_SetTabHeight(TPageControl AObj, int16_t AValue);

int32_t
PageControl_GetTabIndex(TPageControl AObj);

void
PageControl_SetTabIndex(TPageControl AObj, int32_t AValue);

TTabOrder
PageControl_GetTabOrder(TPageControl AObj);

void
PageControl_SetTabOrder(TPageControl AObj, TTabOrder AValue);

TTabPosition
PageControl_GetTabPosition(TPageControl AObj);

void
PageControl_SetTabPosition(TPageControl AObj, TTabPosition AValue);

BOOL
PageControl_GetTabStop(TPageControl AObj);

void
PageControl_SetTabStop(TPageControl AObj, BOOL AValue);

int16_t
PageControl_GetTabWidth(TPageControl AObj);

void
PageControl_SetTabWidth(TPageControl AObj, int16_t AValue);

BOOL
PageControl_GetVisible(TPageControl AObj);

void
PageControl_SetVisible(TPageControl AObj, BOOL AValue);

void
PageControl_SetOnChange(TPageControl AObj, TNotifyEvent AEventData);

void
PageControl_SetOnChanging(TPageControl AObj, TTabChangingEvent AEventData);

void
PageControl_SetOnContextPopup(TPageControl AObj, TContextPopupEvent AEventData);

void
PageControl_SetOnDockDrop(TPageControl AObj, TDockDropEvent AEventData);

void
PageControl_SetOnDragDrop(TPageControl AObj, TDragDropEvent AEventData);

void
PageControl_SetOnDragOver(TPageControl AObj, TDragOverEvent AEventData);

void
PageControl_SetOnEndDock(TPageControl AObj, TEndDragEvent AEventData);

void
PageControl_SetOnEndDrag(TPageControl AObj, TEndDragEvent AEventData);

void
PageControl_SetOnEnter(TPageControl AObj, TNotifyEvent AEventData);

void
PageControl_SetOnExit(TPageControl AObj, TNotifyEvent AEventData);

void
PageControl_SetOnGetSiteInfo(TPageControl AObj, TGetSiteInfoEvent AEventData);

void
PageControl_SetOnMouseDown(TPageControl AObj, TMouseEvent AEventData);

void
PageControl_SetOnMouseEnter(TPageControl AObj, TNotifyEvent AEventData);

void
PageControl_SetOnMouseLeave(TPageControl AObj, TNotifyEvent AEventData);

void
PageControl_SetOnMouseMove(TPageControl AObj, TMouseMoveEvent AEventData);

void
PageControl_SetOnMouseUp(TPageControl AObj, TMouseEvent AEventData);

void
PageControl_SetOnResize(TPageControl AObj, TNotifyEvent AEventData);

void
PageControl_SetOnStartDock(TPageControl AObj, TStartDockEvent AEventData);

void
PageControl_SetOnUnDock(TPageControl AObj, TUnDockEvent AEventData);

int32_t
PageControl_GetDockClientCount(TPageControl AObj);

BOOL
PageControl_GetMouseInClient(TPageControl AObj);

int32_t
PageControl_GetVisibleDockClientCount(TPageControl AObj);

TBrush
PageControl_GetBrush(TPageControl AObj);

int32_t
PageControl_GetControlCount(TPageControl AObj);

HWND
PageControl_GetHandle(TPageControl AObj);

HWND
PageControl_GetParentWindow(TPageControl AObj);

void
PageControl_SetParentWindow(TPageControl AObj, HWND AValue);

BOOL
PageControl_GetShowing(TPageControl AObj);

BOOL
PageControl_GetUseDockManager(TPageControl AObj);

void
PageControl_SetUseDockManager(TPageControl AObj, BOOL AValue);

TAction
PageControl_GetAction(TPageControl AObj);

void
PageControl_SetAction(TPageControl AObj, TAction AValue);

TRect
PageControl_GetBoundsRect(TPageControl AObj);

void
PageControl_SetBoundsRect(TPageControl AObj, TRect AValue);

int32_t
PageControl_GetClientHeight(TPageControl AObj);

void
PageControl_SetClientHeight(TPageControl AObj, int32_t AValue);

TPoint
PageControl_GetClientOrigin(TPageControl AObj);

TRect
PageControl_GetClientRect(TPageControl AObj);

int32_t
PageControl_GetClientWidth(TPageControl AObj);

void
PageControl_SetClientWidth(TPageControl AObj, int32_t AValue);

TControlState
PageControl_GetControlState(TPageControl AObj);

void
PageControl_SetControlState(TPageControl AObj, TControlState AValue);

TControlStyle
PageControl_GetControlStyle(TPageControl AObj);

void
PageControl_SetControlStyle(TPageControl AObj, TControlStyle AValue);

BOOL
PageControl_GetFloating(TPageControl AObj);

TWinControl
PageControl_GetParent(TPageControl AObj);

void
PageControl_SetParent(TPageControl AObj, TWinControl AValue);

int32_t
PageControl_GetLeft(TPageControl AObj);

void
PageControl_SetLeft(TPageControl AObj, int32_t AValue);

int32_t
PageControl_GetTop(TPageControl AObj);

void
PageControl_SetTop(TPageControl AObj, int32_t AValue);

int32_t
PageControl_GetWidth(TPageControl AObj);

void
PageControl_SetWidth(TPageControl AObj, int32_t AValue);

int32_t
PageControl_GetHeight(TPageControl AObj);

void
PageControl_SetHeight(TPageControl AObj, int32_t AValue);

TCursor
PageControl_GetCursor(TPageControl AObj);

void
PageControl_SetCursor(TPageControl AObj, TCursor AValue);

char*
PageControl_GetHint(TPageControl AObj);

void
PageControl_SetHint(TPageControl AObj, CChar char* AValue);

int32_t
PageControl_GetComponentCount(TPageControl AObj);

int32_t
PageControl_GetComponentIndex(TPageControl AObj);

void
PageControl_SetComponentIndex(TPageControl AObj, int32_t AValue);

TComponent
PageControl_GetOwner(TPageControl AObj);

char*
PageControl_GetName(TPageControl AObj);

void
PageControl_SetName(TPageControl AObj, CChar char* AValue);

intptr_t
PageControl_GetTag(TPageControl AObj);

void
PageControl_SetTag(TPageControl AObj, intptr_t AValue);

TAnchorSide
PageControl_GetAnchorSideLeft(TPageControl AObj);

void
PageControl_SetAnchorSideLeft(TPageControl AObj, TAnchorSide AValue);

TAnchorSide
PageControl_GetAnchorSideTop(TPageControl AObj);

void
PageControl_SetAnchorSideTop(TPageControl AObj, TAnchorSide AValue);

TAnchorSide
PageControl_GetAnchorSideRight(TPageControl AObj);

void
PageControl_SetAnchorSideRight(TPageControl AObj, TAnchorSide AValue);

TAnchorSide
PageControl_GetAnchorSideBottom(TPageControl AObj);

void
PageControl_SetAnchorSideBottom(TPageControl AObj, TAnchorSide AValue);

TControlChildSizing
PageControl_GetChildSizing(TPageControl AObj);

void
PageControl_SetChildSizing(TPageControl AObj, TControlChildSizing AValue);

TControlBorderSpacing
PageControl_GetBorderSpacing(TPageControl AObj);

void
PageControl_SetBorderSpacing(TPageControl AObj, TControlBorderSpacing AValue);

TTabSheet
PageControl_GetPages(TPageControl AObj, int32_t Index);

TControl
PageControl_GetDockClients(TPageControl AObj, int32_t Index);

TControl
PageControl_GetControls(TPageControl AObj, int32_t Index);

TComponent
PageControl_GetComponents(TPageControl AObj, int32_t AIndex);

TAnchorSide
PageControl_GetAnchorSide(TPageControl AObj, TAnchorKind AKind);

TClass
PageControl_StaticClassType();

// -------------------TTabSheet-------------------

TTabSheet
TabSheet_Create(TComponent AOwner);

void
TabSheet_Free(TTabSheet AObj);

BOOL
TabSheet_CanFocus(TTabSheet AObj);

BOOL
TabSheet_ContainsControl(TTabSheet AObj, TControl Control);

TControl
TabSheet_ControlAtPos(TTabSheet AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
TabSheet_DisableAlign(TTabSheet AObj);

void
TabSheet_EnableAlign(TTabSheet AObj);

TControl
TabSheet_FindChildControl(TTabSheet AObj, CChar char* ControlName);

void
TabSheet_FlipChildren(TTabSheet AObj, BOOL AllLevels);

BOOL
TabSheet_Focused(TTabSheet AObj);

BOOL
TabSheet_HandleAllocated(TTabSheet AObj);

void
TabSheet_InsertControl(TTabSheet AObj, TControl AControl);

void
TabSheet_Invalidate(TTabSheet AObj);

void
TabSheet_PaintTo(TTabSheet AObj, HDC DC, int32_t X, int32_t Y);

void
TabSheet_RemoveControl(TTabSheet AObj, TControl AControl);

void
TabSheet_Realign(TTabSheet AObj);

void
TabSheet_Repaint(TTabSheet AObj);

void
TabSheet_ScaleBy(TTabSheet AObj, int32_t M, int32_t D);

void
TabSheet_ScrollBy(TTabSheet AObj, int32_t DeltaX, int32_t DeltaY);

void
TabSheet_SetBounds(TTabSheet AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
TabSheet_SetFocus(TTabSheet AObj);

void
TabSheet_Update(TTabSheet AObj);

void
TabSheet_BringToFront(TTabSheet AObj);

TPoint
TabSheet_ClientToScreen(TTabSheet AObj, TPoint Point);

TPoint
TabSheet_ClientToParent(TTabSheet AObj, TPoint Point, TWinControl AParent);

BOOL
TabSheet_Dragging(TTabSheet AObj);

BOOL
TabSheet_HasParent(TTabSheet AObj);

void
TabSheet_Hide(TTabSheet AObj);

intptr_t
TabSheet_Perform(TTabSheet AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
TabSheet_Refresh(TTabSheet AObj);

TPoint
TabSheet_ScreenToClient(TTabSheet AObj, TPoint Point);

TPoint
TabSheet_ParentToClient(TTabSheet AObj, TPoint Point, TWinControl AParent);

void
TabSheet_SendToBack(TTabSheet AObj);

void
TabSheet_Show(TTabSheet AObj);

int32_t
TabSheet_GetTextBuf(TTabSheet AObj, CChar char* Buffer, int32_t BufSize);

int32_t
TabSheet_GetTextLen(TTabSheet AObj);

void
TabSheet_SetTextBuf(TTabSheet AObj, CChar char* Buffer);

TComponent
TabSheet_FindComponent(TTabSheet AObj, CChar char* AName);

char*
TabSheet_GetNamePath(TTabSheet AObj);

void
TabSheet_Assign(TTabSheet AObj, TObject Source);

TClass
TabSheet_ClassType(TTabSheet AObj);

char*
TabSheet_ClassName(TTabSheet AObj);

int32_t
TabSheet_InstanceSize(TTabSheet AObj);

BOOL
TabSheet_InheritsFrom(TTabSheet AObj, TClass AClass);

BOOL
TabSheet_Equals(TTabSheet AObj, TObject Obj);

int32_t
TabSheet_GetHashCode(TTabSheet AObj);

char*
TabSheet_ToString(TTabSheet AObj);

void
TabSheet_AnchorToNeighbour(TTabSheet AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
TabSheet_AnchorParallel(TTabSheet AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
TabSheet_AnchorHorizontalCenterTo(TTabSheet AObj, TControl ASibling);

void
TabSheet_AnchorVerticalCenterTo(TTabSheet AObj, TControl ASibling);

void
TabSheet_AnchorSame(TTabSheet AObj, TAnchorKind ASide, TControl ASibling);

void
TabSheet_AnchorAsAlign(TTabSheet AObj, TAlign ATheAlign, int32_t ASpace);

void
TabSheet_AnchorClient(TTabSheet AObj, int32_t ASpace);

int32_t
TabSheet_ScaleDesignToForm(TTabSheet AObj, int32_t ASize);

int32_t
TabSheet_ScaleFormToDesign(TTabSheet AObj, int32_t ASize);

int32_t
TabSheet_Scale96ToForm(TTabSheet AObj, int32_t ASize);

int32_t
TabSheet_ScaleFormTo96(TTabSheet AObj, int32_t ASize);

int32_t
TabSheet_Scale96ToFont(TTabSheet AObj, int32_t ASize);

int32_t
TabSheet_ScaleFontTo96(TTabSheet AObj, int32_t ASize);

int32_t
TabSheet_ScaleScreenToFont(TTabSheet AObj, int32_t ASize);

int32_t
TabSheet_ScaleFontToScreen(TTabSheet AObj, int32_t ASize);

int32_t
TabSheet_Scale96ToScreen(TTabSheet AObj, int32_t ASize);

int32_t
TabSheet_ScaleScreenTo96(TTabSheet AObj, int32_t ASize);

void
TabSheet_AutoAdjustLayout(TTabSheet AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
TabSheet_FixDesignFontsPPI(TTabSheet AObj, int32_t ADesignTimePPI);

void
TabSheet_ScaleFontsPPI(TTabSheet AObj, int32_t AToPPI, double AProportion);

TPageControl
TabSheet_GetPageControl(TTabSheet AObj);

void
TabSheet_SetPageControl(TTabSheet AObj, TPageControl AValue);

int32_t
TabSheet_GetTabIndex(TTabSheet AObj);

int32_t
TabSheet_GetBorderWidth(TTabSheet AObj);

void
TabSheet_SetBorderWidth(TTabSheet AObj, int32_t AValue);

char*
TabSheet_GetCaption(TTabSheet AObj);

void
TabSheet_SetCaption(TTabSheet AObj, CChar char* AValue);

BOOL
TabSheet_GetDoubleBuffered(TTabSheet AObj);

void
TabSheet_SetDoubleBuffered(TTabSheet AObj, BOOL AValue);

BOOL
TabSheet_GetEnabled(TTabSheet AObj);

void
TabSheet_SetEnabled(TTabSheet AObj, BOOL AValue);

TFont
TabSheet_GetFont(TTabSheet AObj);

void
TabSheet_SetFont(TTabSheet AObj, TFont AValue);

int32_t
TabSheet_GetHeight(TTabSheet AObj);

void
TabSheet_SetHeight(TTabSheet AObj, int32_t AValue);

int32_t
TabSheet_GetImageIndex(TTabSheet AObj);

void
TabSheet_SetImageIndex(TTabSheet AObj, int32_t AValue);

int32_t
TabSheet_GetLeft(TTabSheet AObj);

void
TabSheet_SetLeft(TTabSheet AObj, int32_t AValue);

TSizeConstraints
TabSheet_GetConstraints(TTabSheet AObj);

void
TabSheet_SetConstraints(TTabSheet AObj, TSizeConstraints AValue);

int32_t
TabSheet_GetPageIndex(TTabSheet AObj);

void
TabSheet_SetPageIndex(TTabSheet AObj, int32_t AValue);

BOOL
TabSheet_GetParentDoubleBuffered(TTabSheet AObj);

void
TabSheet_SetParentDoubleBuffered(TTabSheet AObj, BOOL AValue);

BOOL
TabSheet_GetParentFont(TTabSheet AObj);

void
TabSheet_SetParentFont(TTabSheet AObj, BOOL AValue);

BOOL
TabSheet_GetParentShowHint(TTabSheet AObj);

void
TabSheet_SetParentShowHint(TTabSheet AObj, BOOL AValue);

TPopupMenu
TabSheet_GetPopupMenu(TTabSheet AObj);

void
TabSheet_SetPopupMenu(TTabSheet AObj, TPopupMenu AValue);

BOOL
TabSheet_GetShowHint(TTabSheet AObj);

void
TabSheet_SetShowHint(TTabSheet AObj, BOOL AValue);

BOOL
TabSheet_GetTabVisible(TTabSheet AObj);

void
TabSheet_SetTabVisible(TTabSheet AObj, BOOL AValue);

int32_t
TabSheet_GetTop(TTabSheet AObj);

void
TabSheet_SetTop(TTabSheet AObj, int32_t AValue);

BOOL
TabSheet_GetVisible(TTabSheet AObj);

void
TabSheet_SetVisible(TTabSheet AObj, BOOL AValue);

int32_t
TabSheet_GetWidth(TTabSheet AObj);

void
TabSheet_SetWidth(TTabSheet AObj, int32_t AValue);

void
TabSheet_SetOnContextPopup(TTabSheet AObj, TContextPopupEvent AEventData);

void
TabSheet_SetOnDragDrop(TTabSheet AObj, TDragDropEvent AEventData);

void
TabSheet_SetOnDragOver(TTabSheet AObj, TDragOverEvent AEventData);

void
TabSheet_SetOnEndDrag(TTabSheet AObj, TEndDragEvent AEventData);

void
TabSheet_SetOnEnter(TTabSheet AObj, TNotifyEvent AEventData);

void
TabSheet_SetOnExit(TTabSheet AObj, TNotifyEvent AEventData);

void
TabSheet_SetOnHide(TTabSheet AObj, TNotifyEvent AEventData);

void
TabSheet_SetOnMouseDown(TTabSheet AObj, TMouseEvent AEventData);

void
TabSheet_SetOnMouseEnter(TTabSheet AObj, TNotifyEvent AEventData);

void
TabSheet_SetOnMouseLeave(TTabSheet AObj, TNotifyEvent AEventData);

void
TabSheet_SetOnMouseMove(TTabSheet AObj, TMouseMoveEvent AEventData);

void
TabSheet_SetOnMouseUp(TTabSheet AObj, TMouseEvent AEventData);

void
TabSheet_SetOnResize(TTabSheet AObj, TNotifyEvent AEventData);

void
TabSheet_SetOnShow(TTabSheet AObj, TNotifyEvent AEventData);

int32_t
TabSheet_GetDockClientCount(TTabSheet AObj);

BOOL
TabSheet_GetDockSite(TTabSheet AObj);

void
TabSheet_SetDockSite(TTabSheet AObj, BOOL AValue);

BOOL
TabSheet_GetMouseInClient(TTabSheet AObj);

int32_t
TabSheet_GetVisibleDockClientCount(TTabSheet AObj);

TBrush
TabSheet_GetBrush(TTabSheet AObj);

int32_t
TabSheet_GetControlCount(TTabSheet AObj);

HWND
TabSheet_GetHandle(TTabSheet AObj);

HWND
TabSheet_GetParentWindow(TTabSheet AObj);

void
TabSheet_SetParentWindow(TTabSheet AObj, HWND AValue);

BOOL
TabSheet_GetShowing(TTabSheet AObj);

TTabOrder
TabSheet_GetTabOrder(TTabSheet AObj);

void
TabSheet_SetTabOrder(TTabSheet AObj, TTabOrder AValue);

BOOL
TabSheet_GetTabStop(TTabSheet AObj);

void
TabSheet_SetTabStop(TTabSheet AObj, BOOL AValue);

BOOL
TabSheet_GetUseDockManager(TTabSheet AObj);

void
TabSheet_SetUseDockManager(TTabSheet AObj, BOOL AValue);

TAction
TabSheet_GetAction(TTabSheet AObj);

void
TabSheet_SetAction(TTabSheet AObj, TAction AValue);

TAlign
TabSheet_GetAlign(TTabSheet AObj);

void
TabSheet_SetAlign(TTabSheet AObj, TAlign AValue);

TAnchors
TabSheet_GetAnchors(TTabSheet AObj);

void
TabSheet_SetAnchors(TTabSheet AObj, TAnchors AValue);

TBiDiMode
TabSheet_GetBiDiMode(TTabSheet AObj);

void
TabSheet_SetBiDiMode(TTabSheet AObj, TBiDiMode AValue);

TRect
TabSheet_GetBoundsRect(TTabSheet AObj);

void
TabSheet_SetBoundsRect(TTabSheet AObj, TRect AValue);

int32_t
TabSheet_GetClientHeight(TTabSheet AObj);

void
TabSheet_SetClientHeight(TTabSheet AObj, int32_t AValue);

TPoint
TabSheet_GetClientOrigin(TTabSheet AObj);

TRect
TabSheet_GetClientRect(TTabSheet AObj);

int32_t
TabSheet_GetClientWidth(TTabSheet AObj);

void
TabSheet_SetClientWidth(TTabSheet AObj, int32_t AValue);

TControlState
TabSheet_GetControlState(TTabSheet AObj);

void
TabSheet_SetControlState(TTabSheet AObj, TControlState AValue);

TControlStyle
TabSheet_GetControlStyle(TTabSheet AObj);

void
TabSheet_SetControlStyle(TTabSheet AObj, TControlStyle AValue);

BOOL
TabSheet_GetFloating(TTabSheet AObj);

TWinControl
TabSheet_GetParent(TTabSheet AObj);

void
TabSheet_SetParent(TTabSheet AObj, TWinControl AValue);

TCursor
TabSheet_GetCursor(TTabSheet AObj);

void
TabSheet_SetCursor(TTabSheet AObj, TCursor AValue);

char*
TabSheet_GetHint(TTabSheet AObj);

void
TabSheet_SetHint(TTabSheet AObj, CChar char* AValue);

int32_t
TabSheet_GetComponentCount(TTabSheet AObj);

int32_t
TabSheet_GetComponentIndex(TTabSheet AObj);

void
TabSheet_SetComponentIndex(TTabSheet AObj, int32_t AValue);

TComponent
TabSheet_GetOwner(TTabSheet AObj);

char*
TabSheet_GetName(TTabSheet AObj);

void
TabSheet_SetName(TTabSheet AObj, CChar char* AValue);

intptr_t
TabSheet_GetTag(TTabSheet AObj);

void
TabSheet_SetTag(TTabSheet AObj, intptr_t AValue);

TAnchorSide
TabSheet_GetAnchorSideLeft(TTabSheet AObj);

void
TabSheet_SetAnchorSideLeft(TTabSheet AObj, TAnchorSide AValue);

TAnchorSide
TabSheet_GetAnchorSideTop(TTabSheet AObj);

void
TabSheet_SetAnchorSideTop(TTabSheet AObj, TAnchorSide AValue);

TAnchorSide
TabSheet_GetAnchorSideRight(TTabSheet AObj);

void
TabSheet_SetAnchorSideRight(TTabSheet AObj, TAnchorSide AValue);

TAnchorSide
TabSheet_GetAnchorSideBottom(TTabSheet AObj);

void
TabSheet_SetAnchorSideBottom(TTabSheet AObj, TAnchorSide AValue);

TControlChildSizing
TabSheet_GetChildSizing(TTabSheet AObj);

void
TabSheet_SetChildSizing(TTabSheet AObj, TControlChildSizing AValue);

TControlBorderSpacing
TabSheet_GetBorderSpacing(TTabSheet AObj);

void
TabSheet_SetBorderSpacing(TTabSheet AObj, TControlBorderSpacing AValue);

TControl
TabSheet_GetDockClients(TTabSheet AObj, int32_t Index);

TControl
TabSheet_GetControls(TTabSheet AObj, int32_t Index);

TComponent
TabSheet_GetComponents(TTabSheet AObj, int32_t AIndex);

TAnchorSide
TabSheet_GetAnchorSide(TTabSheet AObj, TAnchorKind AKind);

TClass
TabSheet_StaticClassType();

// -------------------TButton-------------------

TButton
Button_Create(TComponent AOwner);

void
Button_Free(TButton AObj);

void
Button_Click(TButton AObj);

BOOL
Button_CanFocus(TButton AObj);

BOOL
Button_ContainsControl(TButton AObj, TControl Control);

TControl
Button_ControlAtPos(TButton AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
Button_DisableAlign(TButton AObj);

void
Button_EnableAlign(TButton AObj);

TControl
Button_FindChildControl(TButton AObj, CChar char* ControlName);

void
Button_FlipChildren(TButton AObj, BOOL AllLevels);

BOOL
Button_Focused(TButton AObj);

BOOL
Button_HandleAllocated(TButton AObj);

void
Button_InsertControl(TButton AObj, TControl AControl);

void
Button_Invalidate(TButton AObj);

void
Button_PaintTo(TButton AObj, HDC DC, int32_t X, int32_t Y);

void
Button_RemoveControl(TButton AObj, TControl AControl);

void
Button_Realign(TButton AObj);

void
Button_Repaint(TButton AObj);

void
Button_ScaleBy(TButton AObj, int32_t M, int32_t D);

void
Button_ScrollBy(TButton AObj, int32_t DeltaX, int32_t DeltaY);

void
Button_SetBounds(TButton AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
Button_SetFocus(TButton AObj);

void
Button_Update(TButton AObj);

void
Button_BringToFront(TButton AObj);

TPoint
Button_ClientToScreen(TButton AObj, TPoint Point);

TPoint
Button_ClientToParent(TButton AObj, TPoint Point, TWinControl AParent);

BOOL
Button_Dragging(TButton AObj);

BOOL
Button_HasParent(TButton AObj);

void
Button_Hide(TButton AObj);

intptr_t
Button_Perform(TButton AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
Button_Refresh(TButton AObj);

TPoint
Button_ScreenToClient(TButton AObj, TPoint Point);

TPoint
Button_ParentToClient(TButton AObj, TPoint Point, TWinControl AParent);

void
Button_SendToBack(TButton AObj);

void
Button_Show(TButton AObj);

int32_t
Button_GetTextBuf(TButton AObj, CChar char* Buffer, int32_t BufSize);

int32_t
Button_GetTextLen(TButton AObj);

void
Button_SetTextBuf(TButton AObj, CChar char* Buffer);

TComponent
Button_FindComponent(TButton AObj, CChar char* AName);

char*
Button_GetNamePath(TButton AObj);

void
Button_Assign(TButton AObj, TObject Source);

TClass
Button_ClassType(TButton AObj);

char*
Button_ClassName(TButton AObj);

int32_t
Button_InstanceSize(TButton AObj);

BOOL
Button_InheritsFrom(TButton AObj, TClass AClass);

BOOL
Button_Equals(TButton AObj, TObject Obj);

int32_t
Button_GetHashCode(TButton AObj);

char*
Button_ToString(TButton AObj);

void
Button_AnchorToNeighbour(TButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Button_AnchorParallel(TButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Button_AnchorHorizontalCenterTo(TButton AObj, TControl ASibling);

void
Button_AnchorVerticalCenterTo(TButton AObj, TControl ASibling);

void
Button_AnchorSame(TButton AObj, TAnchorKind ASide, TControl ASibling);

void
Button_AnchorAsAlign(TButton AObj, TAlign ATheAlign, int32_t ASpace);

void
Button_AnchorClient(TButton AObj, int32_t ASpace);

int32_t
Button_ScaleDesignToForm(TButton AObj, int32_t ASize);

int32_t
Button_ScaleFormToDesign(TButton AObj, int32_t ASize);

int32_t
Button_Scale96ToForm(TButton AObj, int32_t ASize);

int32_t
Button_ScaleFormTo96(TButton AObj, int32_t ASize);

int32_t
Button_Scale96ToFont(TButton AObj, int32_t ASize);

int32_t
Button_ScaleFontTo96(TButton AObj, int32_t ASize);

int32_t
Button_ScaleScreenToFont(TButton AObj, int32_t ASize);

int32_t
Button_ScaleFontToScreen(TButton AObj, int32_t ASize);

int32_t
Button_Scale96ToScreen(TButton AObj, int32_t ASize);

int32_t
Button_ScaleScreenTo96(TButton AObj, int32_t ASize);

void
Button_AutoAdjustLayout(TButton AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
Button_FixDesignFontsPPI(TButton AObj, int32_t ADesignTimePPI);

void
Button_ScaleFontsPPI(TButton AObj, int32_t AToPPI, double AProportion);

TAction
Button_GetAction(TButton AObj);

void
Button_SetAction(TButton AObj, TAction AValue);

TAlign
Button_GetAlign(TButton AObj);

void
Button_SetAlign(TButton AObj, TAlign AValue);

TAnchors
Button_GetAnchors(TButton AObj);

void
Button_SetAnchors(TButton AObj, TAnchors AValue);

TBiDiMode
Button_GetBiDiMode(TButton AObj);

void
Button_SetBiDiMode(TButton AObj, TBiDiMode AValue);

BOOL
Button_GetCancel(TButton AObj);

void
Button_SetCancel(TButton AObj, BOOL AValue);

char*
Button_GetCaption(TButton AObj);

void
Button_SetCaption(TButton AObj, CChar char* AValue);

TSizeConstraints
Button_GetConstraints(TButton AObj);

void
Button_SetConstraints(TButton AObj, TSizeConstraints AValue);

BOOL
Button_GetDefault(TButton AObj);

void
Button_SetDefault(TButton AObj, BOOL AValue);

BOOL
Button_GetDoubleBuffered(TButton AObj);

void
Button_SetDoubleBuffered(TButton AObj, BOOL AValue);

TCursor
Button_GetDragCursor(TButton AObj);

void
Button_SetDragCursor(TButton AObj, TCursor AValue);

TDragKind
Button_GetDragKind(TButton AObj);

void
Button_SetDragKind(TButton AObj, TDragKind AValue);

TDragMode
Button_GetDragMode(TButton AObj);

void
Button_SetDragMode(TButton AObj, TDragMode AValue);

BOOL
Button_GetEnabled(TButton AObj);

void
Button_SetEnabled(TButton AObj, BOOL AValue);

TFont
Button_GetFont(TButton AObj);

void
Button_SetFont(TButton AObj, TFont AValue);

TModalResult
Button_GetModalResult(TButton AObj);

void
Button_SetModalResult(TButton AObj, TModalResult AValue);

BOOL
Button_GetParentDoubleBuffered(TButton AObj);

void
Button_SetParentDoubleBuffered(TButton AObj, BOOL AValue);

BOOL
Button_GetParentFont(TButton AObj);

void
Button_SetParentFont(TButton AObj, BOOL AValue);

BOOL
Button_GetParentShowHint(TButton AObj);

void
Button_SetParentShowHint(TButton AObj, BOOL AValue);

TPopupMenu
Button_GetPopupMenu(TButton AObj);

void
Button_SetPopupMenu(TButton AObj, TPopupMenu AValue);

BOOL
Button_GetShowHint(TButton AObj);

void
Button_SetShowHint(TButton AObj, BOOL AValue);

TTabOrder
Button_GetTabOrder(TButton AObj);

void
Button_SetTabOrder(TButton AObj, TTabOrder AValue);

BOOL
Button_GetTabStop(TButton AObj);

void
Button_SetTabStop(TButton AObj, BOOL AValue);

BOOL
Button_GetVisible(TButton AObj);

void
Button_SetVisible(TButton AObj, BOOL AValue);

void
Button_SetOnClick(TButton AObj, TNotifyEvent AEventData);

void
Button_SetOnContextPopup(TButton AObj, TContextPopupEvent AEventData);

void
Button_SetOnDragDrop(TButton AObj, TDragDropEvent AEventData);

void
Button_SetOnDragOver(TButton AObj, TDragOverEvent AEventData);

void
Button_SetOnEndDrag(TButton AObj, TEndDragEvent AEventData);

void
Button_SetOnEnter(TButton AObj, TNotifyEvent AEventData);

void
Button_SetOnExit(TButton AObj, TNotifyEvent AEventData);

void
Button_SetOnKeyDown(TButton AObj, TKeyEvent AEventData);

void
Button_SetOnKeyPress(TButton AObj, TKeyPressEvent AEventData);

void
Button_SetOnKeyUp(TButton AObj, TKeyEvent AEventData);

void
Button_SetOnMouseDown(TButton AObj, TMouseEvent AEventData);

void
Button_SetOnMouseEnter(TButton AObj, TNotifyEvent AEventData);

void
Button_SetOnMouseLeave(TButton AObj, TNotifyEvent AEventData);

void
Button_SetOnMouseMove(TButton AObj, TMouseMoveEvent AEventData);

void
Button_SetOnMouseUp(TButton AObj, TMouseEvent AEventData);

int32_t
Button_GetDockClientCount(TButton AObj);

BOOL
Button_GetDockSite(TButton AObj);

void
Button_SetDockSite(TButton AObj, BOOL AValue);

BOOL
Button_GetMouseInClient(TButton AObj);

int32_t
Button_GetVisibleDockClientCount(TButton AObj);

TBrush
Button_GetBrush(TButton AObj);

int32_t
Button_GetControlCount(TButton AObj);

HWND
Button_GetHandle(TButton AObj);

HWND
Button_GetParentWindow(TButton AObj);

void
Button_SetParentWindow(TButton AObj, HWND AValue);

BOOL
Button_GetShowing(TButton AObj);

BOOL
Button_GetUseDockManager(TButton AObj);

void
Button_SetUseDockManager(TButton AObj, BOOL AValue);

TRect
Button_GetBoundsRect(TButton AObj);

void
Button_SetBoundsRect(TButton AObj, TRect AValue);

int32_t
Button_GetClientHeight(TButton AObj);

void
Button_SetClientHeight(TButton AObj, int32_t AValue);

TPoint
Button_GetClientOrigin(TButton AObj);

TRect
Button_GetClientRect(TButton AObj);

int32_t
Button_GetClientWidth(TButton AObj);

void
Button_SetClientWidth(TButton AObj, int32_t AValue);

TControlState
Button_GetControlState(TButton AObj);

void
Button_SetControlState(TButton AObj, TControlState AValue);

TControlStyle
Button_GetControlStyle(TButton AObj);

void
Button_SetControlStyle(TButton AObj, TControlStyle AValue);

BOOL
Button_GetFloating(TButton AObj);

TWinControl
Button_GetParent(TButton AObj);

void
Button_SetParent(TButton AObj, TWinControl AValue);

int32_t
Button_GetLeft(TButton AObj);

void
Button_SetLeft(TButton AObj, int32_t AValue);

int32_t
Button_GetTop(TButton AObj);

void
Button_SetTop(TButton AObj, int32_t AValue);

int32_t
Button_GetWidth(TButton AObj);

void
Button_SetWidth(TButton AObj, int32_t AValue);

int32_t
Button_GetHeight(TButton AObj);

void
Button_SetHeight(TButton AObj, int32_t AValue);

TCursor
Button_GetCursor(TButton AObj);

void
Button_SetCursor(TButton AObj, TCursor AValue);

char*
Button_GetHint(TButton AObj);

void
Button_SetHint(TButton AObj, CChar char* AValue);

int32_t
Button_GetComponentCount(TButton AObj);

int32_t
Button_GetComponentIndex(TButton AObj);

void
Button_SetComponentIndex(TButton AObj, int32_t AValue);

TComponent
Button_GetOwner(TButton AObj);

char*
Button_GetName(TButton AObj);

void
Button_SetName(TButton AObj, CChar char* AValue);

intptr_t
Button_GetTag(TButton AObj);

void
Button_SetTag(TButton AObj, intptr_t AValue);

TAnchorSide
Button_GetAnchorSideLeft(TButton AObj);

void
Button_SetAnchorSideLeft(TButton AObj, TAnchorSide AValue);

TAnchorSide
Button_GetAnchorSideTop(TButton AObj);

void
Button_SetAnchorSideTop(TButton AObj, TAnchorSide AValue);

TAnchorSide
Button_GetAnchorSideRight(TButton AObj);

void
Button_SetAnchorSideRight(TButton AObj, TAnchorSide AValue);

TAnchorSide
Button_GetAnchorSideBottom(TButton AObj);

void
Button_SetAnchorSideBottom(TButton AObj, TAnchorSide AValue);

TControlChildSizing
Button_GetChildSizing(TButton AObj);

void
Button_SetChildSizing(TButton AObj, TControlChildSizing AValue);

TControlBorderSpacing
Button_GetBorderSpacing(TButton AObj);

void
Button_SetBorderSpacing(TButton AObj, TControlBorderSpacing AValue);

TControl
Button_GetDockClients(TButton AObj, int32_t Index);

TControl
Button_GetControls(TButton AObj, int32_t Index);

TComponent
Button_GetComponents(TButton AObj, int32_t AIndex);

TAnchorSide
Button_GetAnchorSide(TButton AObj, TAnchorKind AKind);

TClass
Button_StaticClassType();

// -------------------TEdit-------------------

TEdit
Edit_Create(TComponent AOwner);

void
Edit_Free(TEdit AObj);

void
Edit_Clear(TEdit AObj);

void
Edit_ClearSelection(TEdit AObj);

void
Edit_CopyToClipboard(TEdit AObj);

void
Edit_CutToClipboard(TEdit AObj);

void
Edit_PasteFromClipboard(TEdit AObj);

void
Edit_Undo(TEdit AObj);

void
Edit_SelectAll(TEdit AObj);

BOOL
Edit_CanFocus(TEdit AObj);

BOOL
Edit_ContainsControl(TEdit AObj, TControl Control);

TControl
Edit_ControlAtPos(TEdit AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
Edit_DisableAlign(TEdit AObj);

void
Edit_EnableAlign(TEdit AObj);

TControl
Edit_FindChildControl(TEdit AObj, CChar char* ControlName);

void
Edit_FlipChildren(TEdit AObj, BOOL AllLevels);

BOOL
Edit_Focused(TEdit AObj);

BOOL
Edit_HandleAllocated(TEdit AObj);

void
Edit_InsertControl(TEdit AObj, TControl AControl);

void
Edit_Invalidate(TEdit AObj);

void
Edit_PaintTo(TEdit AObj, HDC DC, int32_t X, int32_t Y);

void
Edit_RemoveControl(TEdit AObj, TControl AControl);

void
Edit_Realign(TEdit AObj);

void
Edit_Repaint(TEdit AObj);

void
Edit_ScaleBy(TEdit AObj, int32_t M, int32_t D);

void
Edit_ScrollBy(TEdit AObj, int32_t DeltaX, int32_t DeltaY);

void
Edit_SetBounds(TEdit AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
Edit_SetFocus(TEdit AObj);

void
Edit_Update(TEdit AObj);

void
Edit_BringToFront(TEdit AObj);

TPoint
Edit_ClientToScreen(TEdit AObj, TPoint Point);

TPoint
Edit_ClientToParent(TEdit AObj, TPoint Point, TWinControl AParent);

BOOL
Edit_Dragging(TEdit AObj);

BOOL
Edit_HasParent(TEdit AObj);

void
Edit_Hide(TEdit AObj);

intptr_t
Edit_Perform(TEdit AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
Edit_Refresh(TEdit AObj);

TPoint
Edit_ScreenToClient(TEdit AObj, TPoint Point);

TPoint
Edit_ParentToClient(TEdit AObj, TPoint Point, TWinControl AParent);

void
Edit_SendToBack(TEdit AObj);

void
Edit_Show(TEdit AObj);

int32_t
Edit_GetTextBuf(TEdit AObj, CChar char* Buffer, int32_t BufSize);

int32_t
Edit_GetTextLen(TEdit AObj);

void
Edit_SetTextBuf(TEdit AObj, CChar char* Buffer);

TComponent
Edit_FindComponent(TEdit AObj, CChar char* AName);

char*
Edit_GetNamePath(TEdit AObj);

void
Edit_Assign(TEdit AObj, TObject Source);

TClass
Edit_ClassType(TEdit AObj);

char*
Edit_ClassName(TEdit AObj);

int32_t
Edit_InstanceSize(TEdit AObj);

BOOL
Edit_InheritsFrom(TEdit AObj, TClass AClass);

BOOL
Edit_Equals(TEdit AObj, TObject Obj);

int32_t
Edit_GetHashCode(TEdit AObj);

char*
Edit_ToString(TEdit AObj);

void
Edit_AnchorToNeighbour(TEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Edit_AnchorParallel(TEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Edit_AnchorHorizontalCenterTo(TEdit AObj, TControl ASibling);

void
Edit_AnchorVerticalCenterTo(TEdit AObj, TControl ASibling);

void
Edit_AnchorSame(TEdit AObj, TAnchorKind ASide, TControl ASibling);

void
Edit_AnchorAsAlign(TEdit AObj, TAlign ATheAlign, int32_t ASpace);

void
Edit_AnchorClient(TEdit AObj, int32_t ASpace);

int32_t
Edit_ScaleDesignToForm(TEdit AObj, int32_t ASize);

int32_t
Edit_ScaleFormToDesign(TEdit AObj, int32_t ASize);

int32_t
Edit_Scale96ToForm(TEdit AObj, int32_t ASize);

int32_t
Edit_ScaleFormTo96(TEdit AObj, int32_t ASize);

int32_t
Edit_Scale96ToFont(TEdit AObj, int32_t ASize);

int32_t
Edit_ScaleFontTo96(TEdit AObj, int32_t ASize);

int32_t
Edit_ScaleScreenToFont(TEdit AObj, int32_t ASize);

int32_t
Edit_ScaleFontToScreen(TEdit AObj, int32_t ASize);

int32_t
Edit_Scale96ToScreen(TEdit AObj, int32_t ASize);

int32_t
Edit_ScaleScreenTo96(TEdit AObj, int32_t ASize);

void
Edit_AutoAdjustLayout(TEdit AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
Edit_FixDesignFontsPPI(TEdit AObj, int32_t ADesignTimePPI);

void
Edit_ScaleFontsPPI(TEdit AObj, int32_t AToPPI, double AProportion);

TAlign
Edit_GetAlign(TEdit AObj);

void
Edit_SetAlign(TEdit AObj, TAlign AValue);

TAlignment
Edit_GetAlignment(TEdit AObj);

void
Edit_SetAlignment(TEdit AObj, TAlignment AValue);

TAnchors
Edit_GetAnchors(TEdit AObj);

void
Edit_SetAnchors(TEdit AObj, TAnchors AValue);

BOOL
Edit_GetAutoSelect(TEdit AObj);

void
Edit_SetAutoSelect(TEdit AObj, BOOL AValue);

BOOL
Edit_GetAutoSize(TEdit AObj);

void
Edit_SetAutoSize(TEdit AObj, BOOL AValue);

TBiDiMode
Edit_GetBiDiMode(TEdit AObj);

void
Edit_SetBiDiMode(TEdit AObj, TBiDiMode AValue);

TBorderStyle
Edit_GetBorderStyle(TEdit AObj);

void
Edit_SetBorderStyle(TEdit AObj, TBorderStyle AValue);

TEditCharCase
Edit_GetCharCase(TEdit AObj);

void
Edit_SetCharCase(TEdit AObj, TEditCharCase AValue);

TColor
Edit_GetColor(TEdit AObj);

void
Edit_SetColor(TEdit AObj, TColor AValue);

TSizeConstraints
Edit_GetConstraints(TEdit AObj);

void
Edit_SetConstraints(TEdit AObj, TSizeConstraints AValue);

BOOL
Edit_GetDoubleBuffered(TEdit AObj);

void
Edit_SetDoubleBuffered(TEdit AObj, BOOL AValue);

TCursor
Edit_GetDragCursor(TEdit AObj);

void
Edit_SetDragCursor(TEdit AObj, TCursor AValue);

TDragKind
Edit_GetDragKind(TEdit AObj);

void
Edit_SetDragKind(TEdit AObj, TDragKind AValue);

TDragMode
Edit_GetDragMode(TEdit AObj);

void
Edit_SetDragMode(TEdit AObj, TDragMode AValue);

BOOL
Edit_GetEnabled(TEdit AObj);

void
Edit_SetEnabled(TEdit AObj, BOOL AValue);

TFont
Edit_GetFont(TEdit AObj);

void
Edit_SetFont(TEdit AObj, TFont AValue);

BOOL
Edit_GetHideSelection(TEdit AObj);

void
Edit_SetHideSelection(TEdit AObj, BOOL AValue);

int32_t
Edit_GetMaxLength(TEdit AObj);

void
Edit_SetMaxLength(TEdit AObj, int32_t AValue);

BOOL
Edit_GetNumbersOnly(TEdit AObj);

void
Edit_SetNumbersOnly(TEdit AObj, BOOL AValue);

BOOL
Edit_GetParentColor(TEdit AObj);

void
Edit_SetParentColor(TEdit AObj, BOOL AValue);

BOOL
Edit_GetParentDoubleBuffered(TEdit AObj);

void
Edit_SetParentDoubleBuffered(TEdit AObj, BOOL AValue);

BOOL
Edit_GetParentFont(TEdit AObj);

void
Edit_SetParentFont(TEdit AObj, BOOL AValue);

BOOL
Edit_GetParentShowHint(TEdit AObj);

void
Edit_SetParentShowHint(TEdit AObj, BOOL AValue);

Char
Edit_GetPasswordChar(TEdit AObj);

void
Edit_SetPasswordChar(TEdit AObj, Char AValue);

TPopupMenu
Edit_GetPopupMenu(TEdit AObj);

void
Edit_SetPopupMenu(TEdit AObj, TPopupMenu AValue);

BOOL
Edit_GetReadOnly(TEdit AObj);

void
Edit_SetReadOnly(TEdit AObj, BOOL AValue);

BOOL
Edit_GetShowHint(TEdit AObj);

void
Edit_SetShowHint(TEdit AObj, BOOL AValue);

TTabOrder
Edit_GetTabOrder(TEdit AObj);

void
Edit_SetTabOrder(TEdit AObj, TTabOrder AValue);

BOOL
Edit_GetTabStop(TEdit AObj);

void
Edit_SetTabStop(TEdit AObj, BOOL AValue);

char*
Edit_GetText(TEdit AObj);

void
Edit_SetText(TEdit AObj, CChar char* AValue);

char*
Edit_GetTextHint(TEdit AObj);

void
Edit_SetTextHint(TEdit AObj, CChar char* AValue);

BOOL
Edit_GetVisible(TEdit AObj);

void
Edit_SetVisible(TEdit AObj, BOOL AValue);

void
Edit_SetOnChange(TEdit AObj, TNotifyEvent AEventData);

void
Edit_SetOnClick(TEdit AObj, TNotifyEvent AEventData);

void
Edit_SetOnContextPopup(TEdit AObj, TContextPopupEvent AEventData);

void
Edit_SetOnDblClick(TEdit AObj, TNotifyEvent AEventData);

void
Edit_SetOnDragDrop(TEdit AObj, TDragDropEvent AEventData);

void
Edit_SetOnDragOver(TEdit AObj, TDragOverEvent AEventData);

void
Edit_SetOnEndDrag(TEdit AObj, TEndDragEvent AEventData);

void
Edit_SetOnEnter(TEdit AObj, TNotifyEvent AEventData);

void
Edit_SetOnExit(TEdit AObj, TNotifyEvent AEventData);

void
Edit_SetOnKeyDown(TEdit AObj, TKeyEvent AEventData);

void
Edit_SetOnKeyPress(TEdit AObj, TKeyPressEvent AEventData);

void
Edit_SetOnKeyUp(TEdit AObj, TKeyEvent AEventData);

void
Edit_SetOnMouseDown(TEdit AObj, TMouseEvent AEventData);

void
Edit_SetOnMouseEnter(TEdit AObj, TNotifyEvent AEventData);

void
Edit_SetOnMouseLeave(TEdit AObj, TNotifyEvent AEventData);

void
Edit_SetOnMouseMove(TEdit AObj, TMouseMoveEvent AEventData);

void
Edit_SetOnMouseUp(TEdit AObj, TMouseEvent AEventData);

BOOL
Edit_GetCanUndo(TEdit AObj);

BOOL
Edit_GetModified(TEdit AObj);

void
Edit_SetModified(TEdit AObj, BOOL AValue);

int32_t
Edit_GetSelLength(TEdit AObj);

void
Edit_SetSelLength(TEdit AObj, int32_t AValue);

int32_t
Edit_GetSelStart(TEdit AObj);

void
Edit_SetSelStart(TEdit AObj, int32_t AValue);

char*
Edit_GetSelText(TEdit AObj);

void
Edit_SetSelText(TEdit AObj, CChar char* AValue);

int32_t
Edit_GetDockClientCount(TEdit AObj);

BOOL
Edit_GetDockSite(TEdit AObj);

void
Edit_SetDockSite(TEdit AObj, BOOL AValue);

BOOL
Edit_GetMouseInClient(TEdit AObj);

int32_t
Edit_GetVisibleDockClientCount(TEdit AObj);

TBrush
Edit_GetBrush(TEdit AObj);

int32_t
Edit_GetControlCount(TEdit AObj);

HWND
Edit_GetHandle(TEdit AObj);

HWND
Edit_GetParentWindow(TEdit AObj);

void
Edit_SetParentWindow(TEdit AObj, HWND AValue);

BOOL
Edit_GetShowing(TEdit AObj);

BOOL
Edit_GetUseDockManager(TEdit AObj);

void
Edit_SetUseDockManager(TEdit AObj, BOOL AValue);

TAction
Edit_GetAction(TEdit AObj);

void
Edit_SetAction(TEdit AObj, TAction AValue);

TRect
Edit_GetBoundsRect(TEdit AObj);

void
Edit_SetBoundsRect(TEdit AObj, TRect AValue);

int32_t
Edit_GetClientHeight(TEdit AObj);

void
Edit_SetClientHeight(TEdit AObj, int32_t AValue);

TPoint
Edit_GetClientOrigin(TEdit AObj);

TRect
Edit_GetClientRect(TEdit AObj);

int32_t
Edit_GetClientWidth(TEdit AObj);

void
Edit_SetClientWidth(TEdit AObj, int32_t AValue);

TControlState
Edit_GetControlState(TEdit AObj);

void
Edit_SetControlState(TEdit AObj, TControlState AValue);

TControlStyle
Edit_GetControlStyle(TEdit AObj);

void
Edit_SetControlStyle(TEdit AObj, TControlStyle AValue);

BOOL
Edit_GetFloating(TEdit AObj);

TWinControl
Edit_GetParent(TEdit AObj);

void
Edit_SetParent(TEdit AObj, TWinControl AValue);

int32_t
Edit_GetLeft(TEdit AObj);

void
Edit_SetLeft(TEdit AObj, int32_t AValue);

int32_t
Edit_GetTop(TEdit AObj);

void
Edit_SetTop(TEdit AObj, int32_t AValue);

int32_t
Edit_GetWidth(TEdit AObj);

void
Edit_SetWidth(TEdit AObj, int32_t AValue);

int32_t
Edit_GetHeight(TEdit AObj);

void
Edit_SetHeight(TEdit AObj, int32_t AValue);

TCursor
Edit_GetCursor(TEdit AObj);

void
Edit_SetCursor(TEdit AObj, TCursor AValue);

char*
Edit_GetHint(TEdit AObj);

void
Edit_SetHint(TEdit AObj, CChar char* AValue);

int32_t
Edit_GetComponentCount(TEdit AObj);

int32_t
Edit_GetComponentIndex(TEdit AObj);

void
Edit_SetComponentIndex(TEdit AObj, int32_t AValue);

TComponent
Edit_GetOwner(TEdit AObj);

char*
Edit_GetName(TEdit AObj);

void
Edit_SetName(TEdit AObj, CChar char* AValue);

intptr_t
Edit_GetTag(TEdit AObj);

void
Edit_SetTag(TEdit AObj, intptr_t AValue);

TAnchorSide
Edit_GetAnchorSideLeft(TEdit AObj);

void
Edit_SetAnchorSideLeft(TEdit AObj, TAnchorSide AValue);

TAnchorSide
Edit_GetAnchorSideTop(TEdit AObj);

void
Edit_SetAnchorSideTop(TEdit AObj, TAnchorSide AValue);

TAnchorSide
Edit_GetAnchorSideRight(TEdit AObj);

void
Edit_SetAnchorSideRight(TEdit AObj, TAnchorSide AValue);

TAnchorSide
Edit_GetAnchorSideBottom(TEdit AObj);

void
Edit_SetAnchorSideBottom(TEdit AObj, TAnchorSide AValue);

TControlChildSizing
Edit_GetChildSizing(TEdit AObj);

void
Edit_SetChildSizing(TEdit AObj, TControlChildSizing AValue);

TControlBorderSpacing
Edit_GetBorderSpacing(TEdit AObj);

void
Edit_SetBorderSpacing(TEdit AObj, TControlBorderSpacing AValue);

TControl
Edit_GetDockClients(TEdit AObj, int32_t Index);

TControl
Edit_GetControls(TEdit AObj, int32_t Index);

TComponent
Edit_GetComponents(TEdit AObj, int32_t AIndex);

TAnchorSide
Edit_GetAnchorSide(TEdit AObj, TAnchorKind AKind);

TClass
Edit_StaticClassType();

// -------------------TScreen-------------------

TScreen
Screen_Create(TComponent AOwner);

void
Screen_Free(TScreen AObj);

void
Screen_BeginTempCursor(TScreen AObj, TCursor aCursor);

void
Screen_EndTempCursor(TScreen AObj, TCursor aCursor);

void
Screen_BeginWaitCursor(TScreen AObj);

void
Screen_EndWaitCursor(TScreen AObj);

TComponent
Screen_FindComponent(TScreen AObj, CChar char* AName);

char*
Screen_GetNamePath(TScreen AObj);

BOOL
Screen_HasParent(TScreen AObj);

void
Screen_Assign(TScreen AObj, TObject Source);

TClass
Screen_ClassType(TScreen AObj);

char*
Screen_ClassName(TScreen AObj);

int32_t
Screen_InstanceSize(TScreen AObj);

BOOL
Screen_InheritsFrom(TScreen AObj, TClass AClass);

BOOL
Screen_Equals(TScreen AObj, TObject Obj);

int32_t
Screen_GetHashCode(TScreen AObj);

char*
Screen_ToString(TScreen AObj);

TCursor
Screen_GetRealCursor(TScreen AObj);

TForm
Screen_GetFocusedForm(TScreen AObj);

TWinControl
Screen_GetActiveControl(TScreen AObj);

TForm
Screen_GetActiveForm(TScreen AObj);

int32_t
Screen_GetCustomFormCount(TScreen AObj);

TCursor
Screen_GetCursor(TScreen AObj);

void
Screen_SetCursor(TScreen AObj, TCursor AValue);

int32_t
Screen_GetMonitorCount(TScreen AObj);

TRect
Screen_GetDesktopRect(TScreen AObj);

int32_t
Screen_GetDesktopHeight(TScreen AObj);

int32_t
Screen_GetDesktopLeft(TScreen AObj);

int32_t
Screen_GetDesktopTop(TScreen AObj);

int32_t
Screen_GetDesktopWidth(TScreen AObj);

TRect
Screen_GetWorkAreaRect(TScreen AObj);

int32_t
Screen_GetWorkAreaHeight(TScreen AObj);

int32_t
Screen_GetWorkAreaLeft(TScreen AObj);

int32_t
Screen_GetWorkAreaTop(TScreen AObj);

int32_t
Screen_GetWorkAreaWidth(TScreen AObj);

TStrings
Screen_GetFonts(TScreen AObj);

int32_t
Screen_GetFormCount(TScreen AObj);

int32_t
Screen_GetHeight(TScreen AObj);

int32_t
Screen_GetPixelsPerInch(TScreen AObj);

TMonitor
Screen_GetPrimaryMonitor(TScreen AObj);

int32_t
Screen_GetWidth(TScreen AObj);

int32_t
Screen_GetComponentCount(TScreen AObj);

int32_t
Screen_GetComponentIndex(TScreen AObj);

void
Screen_SetComponentIndex(TScreen AObj, int32_t AValue);

TComponent
Screen_GetOwner(TScreen AObj);

char*
Screen_GetName(TScreen AObj);

void
Screen_SetName(TScreen AObj, CChar char* AValue);

intptr_t
Screen_GetTag(TScreen AObj);

void
Screen_SetTag(TScreen AObj, intptr_t AValue);

HICON
Screen_GetCursors(TScreen AObj, int32_t Index);

void
Screen_SetCursors(TScreen AObj, int32_t Index, HICON AValue);

TMonitor
Screen_GetMonitors(TScreen AObj, int32_t Index);

TForm
Screen_GetForms(TScreen AObj, int32_t Index);

TComponent
Screen_GetComponents(TScreen AObj, int32_t AIndex);

TClass
Screen_StaticClassType();

// -------------------TMouse-------------------

TMouse
Mouse_Create();

void
Mouse_Free(TMouse AObj);

TClass
Mouse_ClassType(TMouse AObj);

char*
Mouse_ClassName(TMouse AObj);

int32_t
Mouse_InstanceSize(TMouse AObj);

BOOL
Mouse_InheritsFrom(TMouse AObj, TClass AClass);

BOOL
Mouse_Equals(TMouse AObj, TObject Obj);

int32_t
Mouse_GetHashCode(TMouse AObj);

char*
Mouse_ToString(TMouse AObj);

HWND
Mouse_GetCapture(TMouse AObj);

void
Mouse_SetCapture(TMouse AObj, HWND AValue);

TPoint
Mouse_GetCursorPos(TMouse AObj);

void
Mouse_SetCursorPos(TMouse AObj, TPoint AValue);

BOOL
Mouse_GetIsDragging(TMouse AObj);

int32_t
Mouse_GetWheelScrollLines(TMouse AObj);

TClass
Mouse_StaticClassType();

// -------------------TListColumn-------------------

TListColumn
ListColumn_Create(TCollection AOwner);

void
ListColumn_Free(TListColumn AObj);

void
ListColumn_Assign(TListColumn AObj, TObject Source);

char*
ListColumn_GetNamePath(TListColumn AObj);

TClass
ListColumn_ClassType(TListColumn AObj);

char*
ListColumn_ClassName(TListColumn AObj);

int32_t
ListColumn_InstanceSize(TListColumn AObj);

BOOL
ListColumn_InheritsFrom(TListColumn AObj, TClass AClass);

BOOL
ListColumn_Equals(TListColumn AObj, TObject Obj);

int32_t
ListColumn_GetHashCode(TListColumn AObj);

char*
ListColumn_ToString(TListColumn AObj);

TSortIndicator
ListColumn_GetSortIndicator(TListColumn AObj);

void
ListColumn_SetSortIndicator(TListColumn AObj, TSortIndicator AValue);

TAlignment
ListColumn_GetAlignment(TListColumn AObj);

void
ListColumn_SetAlignment(TListColumn AObj, TAlignment AValue);

BOOL
ListColumn_GetAutoSize(TListColumn AObj);

void
ListColumn_SetAutoSize(TListColumn AObj, BOOL AValue);

char*
ListColumn_GetCaption(TListColumn AObj);

void
ListColumn_SetCaption(TListColumn AObj, CChar char* AValue);

int32_t
ListColumn_GetImageIndex(TListColumn AObj);

void
ListColumn_SetImageIndex(TListColumn AObj, int32_t AValue);

int32_t
ListColumn_GetMaxWidth(TListColumn AObj);

void
ListColumn_SetMaxWidth(TListColumn AObj, int32_t AValue);

int32_t
ListColumn_GetMinWidth(TListColumn AObj);

void
ListColumn_SetMinWidth(TListColumn AObj, int32_t AValue);

int32_t
ListColumn_GetTag(TListColumn AObj);

void
ListColumn_SetTag(TListColumn AObj, int32_t AValue);

int32_t
ListColumn_GetWidth(TListColumn AObj);

void
ListColumn_SetWidth(TListColumn AObj, int32_t AValue);

TCollection
ListColumn_GetCollection(TListColumn AObj);

void
ListColumn_SetCollection(TListColumn AObj, TCollection AValue);

int32_t
ListColumn_GetIndex(TListColumn AObj);

void
ListColumn_SetIndex(TListColumn AObj, int32_t AValue);

char*
ListColumn_GetDisplayName(TListColumn AObj);

void
ListColumn_SetDisplayName(TListColumn AObj, CChar char* AValue);

TClass
ListColumn_StaticClassType();

// -------------------TCollectionItem-------------------

TCollectionItem
CollectionItem_Create(TCollection AOwner);

void
CollectionItem_Free(TCollectionItem AObj);

char*
CollectionItem_GetNamePath(TCollectionItem AObj);

void
CollectionItem_Assign(TCollectionItem AObj, TObject Source);

TClass
CollectionItem_ClassType(TCollectionItem AObj);

char*
CollectionItem_ClassName(TCollectionItem AObj);

int32_t
CollectionItem_InstanceSize(TCollectionItem AObj);

BOOL
CollectionItem_InheritsFrom(TCollectionItem AObj, TClass AClass);

BOOL
CollectionItem_Equals(TCollectionItem AObj, TObject Obj);

int32_t
CollectionItem_GetHashCode(TCollectionItem AObj);

char*
CollectionItem_ToString(TCollectionItem AObj);

TCollection
CollectionItem_GetCollection(TCollectionItem AObj);

void
CollectionItem_SetCollection(TCollectionItem AObj, TCollection AValue);

int32_t
CollectionItem_GetIndex(TCollectionItem AObj);

void
CollectionItem_SetIndex(TCollectionItem AObj, int32_t AValue);

char*
CollectionItem_GetDisplayName(TCollectionItem AObj);

void
CollectionItem_SetDisplayName(TCollectionItem AObj, CChar char* AValue);

TClass
CollectionItem_StaticClassType();

// -------------------TStatusPanels-------------------

TStatusPanels
StatusPanels_Create(TStatusBar AOwner);

void
StatusPanels_Free(TStatusPanels AObj);

TStatusPanel
StatusPanels_Add(TStatusPanels AObj);

TStatusPanel
StatusPanels_Insert(TStatusPanels AObj, int32_t Index);

TObject
StatusPanels_Owner(TStatusPanels AObj);

void
StatusPanels_Assign(TStatusPanels AObj, TObject Source);

void
StatusPanels_BeginUpdate(TStatusPanels AObj);

void
StatusPanels_Clear(TStatusPanels AObj);

void
StatusPanels_Delete(TStatusPanels AObj, int32_t Index);

void
StatusPanels_EndUpdate(TStatusPanels AObj);

TCollectionItem
StatusPanels_FindItemID(TStatusPanels AObj, int32_t ID);

char*
StatusPanels_GetNamePath(TStatusPanels AObj);

TClass
StatusPanels_ClassType(TStatusPanels AObj);

char*
StatusPanels_ClassName(TStatusPanels AObj);

int32_t
StatusPanels_InstanceSize(TStatusPanels AObj);

BOOL
StatusPanels_InheritsFrom(TStatusPanels AObj, TClass AClass);

BOOL
StatusPanels_Equals(TStatusPanels AObj, TObject Obj);

int32_t
StatusPanels_GetHashCode(TStatusPanels AObj);

char*
StatusPanels_ToString(TStatusPanels AObj);

int32_t
StatusPanels_GetCapacity(TStatusPanels AObj);

void
StatusPanels_SetCapacity(TStatusPanels AObj, int32_t AValue);

int32_t
StatusPanels_GetCount(TStatusPanels AObj);

TStatusPanel
StatusPanels_GetItems(TStatusPanels AObj, int32_t Index);

void
StatusPanels_SetItems(TStatusPanels AObj, int32_t Index, TStatusPanel AValue);

TClass
StatusPanels_StaticClassType();

// -------------------TStatusPanel-------------------

TStatusPanel
StatusPanel_Create(TCollection AOwner);

void
StatusPanel_Free(TStatusPanel AObj);

void
StatusPanel_Assign(TStatusPanel AObj, TObject Source);

char*
StatusPanel_GetNamePath(TStatusPanel AObj);

TClass
StatusPanel_ClassType(TStatusPanel AObj);

char*
StatusPanel_ClassName(TStatusPanel AObj);

int32_t
StatusPanel_InstanceSize(TStatusPanel AObj);

BOOL
StatusPanel_InheritsFrom(TStatusPanel AObj, TClass AClass);

BOOL
StatusPanel_Equals(TStatusPanel AObj, TObject Obj);

int32_t
StatusPanel_GetHashCode(TStatusPanel AObj);

char*
StatusPanel_ToString(TStatusPanel AObj);

TAlignment
StatusPanel_GetAlignment(TStatusPanel AObj);

void
StatusPanel_SetAlignment(TStatusPanel AObj, TAlignment AValue);

TBiDiMode
StatusPanel_GetBiDiMode(TStatusPanel AObj);

void
StatusPanel_SetBiDiMode(TStatusPanel AObj, TBiDiMode AValue);

TStatusPanelStyle
StatusPanel_GetStyle(TStatusPanel AObj);

void
StatusPanel_SetStyle(TStatusPanel AObj, TStatusPanelStyle AValue);

char*
StatusPanel_GetText(TStatusPanel AObj);

void
StatusPanel_SetText(TStatusPanel AObj, CChar char* AValue);

int32_t
StatusPanel_GetWidth(TStatusPanel AObj);

void
StatusPanel_SetWidth(TStatusPanel AObj, int32_t AValue);

TCollection
StatusPanel_GetCollection(TStatusPanel AObj);

void
StatusPanel_SetCollection(TStatusPanel AObj, TCollection AValue);

int32_t
StatusPanel_GetIndex(TStatusPanel AObj);

void
StatusPanel_SetIndex(TStatusPanel AObj, int32_t AValue);

char*
StatusPanel_GetDisplayName(TStatusPanel AObj);

void
StatusPanel_SetDisplayName(TStatusPanel AObj, CChar char* AValue);

TClass
StatusPanel_StaticClassType();

// -------------------TSpinEdit-------------------

TSpinEdit
SpinEdit_Create(TComponent AOwner);

void
SpinEdit_Free(TSpinEdit AObj);

void
SpinEdit_Clear(TSpinEdit AObj);

void
SpinEdit_ClearSelection(TSpinEdit AObj);

void
SpinEdit_CopyToClipboard(TSpinEdit AObj);

void
SpinEdit_CutToClipboard(TSpinEdit AObj);

void
SpinEdit_PasteFromClipboard(TSpinEdit AObj);

void
SpinEdit_Undo(TSpinEdit AObj);

void
SpinEdit_SelectAll(TSpinEdit AObj);

BOOL
SpinEdit_CanFocus(TSpinEdit AObj);

BOOL
SpinEdit_ContainsControl(TSpinEdit AObj, TControl Control);

TControl
SpinEdit_ControlAtPos(TSpinEdit AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
SpinEdit_DisableAlign(TSpinEdit AObj);

void
SpinEdit_EnableAlign(TSpinEdit AObj);

TControl
SpinEdit_FindChildControl(TSpinEdit AObj, CChar char* ControlName);

void
SpinEdit_FlipChildren(TSpinEdit AObj, BOOL AllLevels);

BOOL
SpinEdit_Focused(TSpinEdit AObj);

BOOL
SpinEdit_HandleAllocated(TSpinEdit AObj);

void
SpinEdit_InsertControl(TSpinEdit AObj, TControl AControl);

void
SpinEdit_Invalidate(TSpinEdit AObj);

void
SpinEdit_PaintTo(TSpinEdit AObj, HDC DC, int32_t X, int32_t Y);

void
SpinEdit_RemoveControl(TSpinEdit AObj, TControl AControl);

void
SpinEdit_Realign(TSpinEdit AObj);

void
SpinEdit_Repaint(TSpinEdit AObj);

void
SpinEdit_ScaleBy(TSpinEdit AObj, int32_t M, int32_t D);

void
SpinEdit_ScrollBy(TSpinEdit AObj, int32_t DeltaX, int32_t DeltaY);

void
SpinEdit_SetBounds(TSpinEdit AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
SpinEdit_SetFocus(TSpinEdit AObj);

void
SpinEdit_Update(TSpinEdit AObj);

void
SpinEdit_BringToFront(TSpinEdit AObj);

TPoint
SpinEdit_ClientToScreen(TSpinEdit AObj, TPoint Point);

TPoint
SpinEdit_ClientToParent(TSpinEdit AObj, TPoint Point, TWinControl AParent);

BOOL
SpinEdit_Dragging(TSpinEdit AObj);

BOOL
SpinEdit_HasParent(TSpinEdit AObj);

void
SpinEdit_Hide(TSpinEdit AObj);

intptr_t
SpinEdit_Perform(TSpinEdit AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
SpinEdit_Refresh(TSpinEdit AObj);

TPoint
SpinEdit_ScreenToClient(TSpinEdit AObj, TPoint Point);

TPoint
SpinEdit_ParentToClient(TSpinEdit AObj, TPoint Point, TWinControl AParent);

void
SpinEdit_SendToBack(TSpinEdit AObj);

void
SpinEdit_Show(TSpinEdit AObj);

int32_t
SpinEdit_GetTextBuf(TSpinEdit AObj, CChar char* Buffer, int32_t BufSize);

int32_t
SpinEdit_GetTextLen(TSpinEdit AObj);

void
SpinEdit_SetTextBuf(TSpinEdit AObj, CChar char* Buffer);

TComponent
SpinEdit_FindComponent(TSpinEdit AObj, CChar char* AName);

char*
SpinEdit_GetNamePath(TSpinEdit AObj);

void
SpinEdit_Assign(TSpinEdit AObj, TObject Source);

TClass
SpinEdit_ClassType(TSpinEdit AObj);

char*
SpinEdit_ClassName(TSpinEdit AObj);

int32_t
SpinEdit_InstanceSize(TSpinEdit AObj);

BOOL
SpinEdit_InheritsFrom(TSpinEdit AObj, TClass AClass);

BOOL
SpinEdit_Equals(TSpinEdit AObj, TObject Obj);

int32_t
SpinEdit_GetHashCode(TSpinEdit AObj);

char*
SpinEdit_ToString(TSpinEdit AObj);

void
SpinEdit_AnchorToNeighbour(TSpinEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
SpinEdit_AnchorParallel(TSpinEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
SpinEdit_AnchorHorizontalCenterTo(TSpinEdit AObj, TControl ASibling);

void
SpinEdit_AnchorVerticalCenterTo(TSpinEdit AObj, TControl ASibling);

void
SpinEdit_AnchorSame(TSpinEdit AObj, TAnchorKind ASide, TControl ASibling);

void
SpinEdit_AnchorAsAlign(TSpinEdit AObj, TAlign ATheAlign, int32_t ASpace);

void
SpinEdit_AnchorClient(TSpinEdit AObj, int32_t ASpace);

int32_t
SpinEdit_ScaleDesignToForm(TSpinEdit AObj, int32_t ASize);

int32_t
SpinEdit_ScaleFormToDesign(TSpinEdit AObj, int32_t ASize);

int32_t
SpinEdit_Scale96ToForm(TSpinEdit AObj, int32_t ASize);

int32_t
SpinEdit_ScaleFormTo96(TSpinEdit AObj, int32_t ASize);

int32_t
SpinEdit_Scale96ToFont(TSpinEdit AObj, int32_t ASize);

int32_t
SpinEdit_ScaleFontTo96(TSpinEdit AObj, int32_t ASize);

int32_t
SpinEdit_ScaleScreenToFont(TSpinEdit AObj, int32_t ASize);

int32_t
SpinEdit_ScaleFontToScreen(TSpinEdit AObj, int32_t ASize);

int32_t
SpinEdit_Scale96ToScreen(TSpinEdit AObj, int32_t ASize);

int32_t
SpinEdit_ScaleScreenTo96(TSpinEdit AObj, int32_t ASize);

void
SpinEdit_AutoAdjustLayout(TSpinEdit AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
SpinEdit_FixDesignFontsPPI(TSpinEdit AObj, int32_t ADesignTimePPI);

void
SpinEdit_ScaleFontsPPI(TSpinEdit AObj, int32_t AToPPI, double AProportion);

TAnchors
SpinEdit_GetAnchors(TSpinEdit AObj);

void
SpinEdit_SetAnchors(TSpinEdit AObj, TAnchors AValue);

BOOL
SpinEdit_GetAutoSelect(TSpinEdit AObj);

void
SpinEdit_SetAutoSelect(TSpinEdit AObj, BOOL AValue);

BOOL
SpinEdit_GetAutoSize(TSpinEdit AObj);

void
SpinEdit_SetAutoSize(TSpinEdit AObj, BOOL AValue);

TColor
SpinEdit_GetColor(TSpinEdit AObj);

void
SpinEdit_SetColor(TSpinEdit AObj, TColor AValue);

TSizeConstraints
SpinEdit_GetConstraints(TSpinEdit AObj);

void
SpinEdit_SetConstraints(TSpinEdit AObj, TSizeConstraints AValue);

BOOL
SpinEdit_GetEnabled(TSpinEdit AObj);

void
SpinEdit_SetEnabled(TSpinEdit AObj, BOOL AValue);

TFont
SpinEdit_GetFont(TSpinEdit AObj);

void
SpinEdit_SetFont(TSpinEdit AObj, TFont AValue);

int32_t
SpinEdit_GetIncrement(TSpinEdit AObj);

void
SpinEdit_SetIncrement(TSpinEdit AObj, int32_t AValue);

int32_t
SpinEdit_GetMaxLength(TSpinEdit AObj);

void
SpinEdit_SetMaxLength(TSpinEdit AObj, int32_t AValue);

int32_t
SpinEdit_GetMaxValue(TSpinEdit AObj);

void
SpinEdit_SetMaxValue(TSpinEdit AObj, int32_t AValue);

int32_t
SpinEdit_GetMinValue(TSpinEdit AObj);

void
SpinEdit_SetMinValue(TSpinEdit AObj, int32_t AValue);

BOOL
SpinEdit_GetParentColor(TSpinEdit AObj);

void
SpinEdit_SetParentColor(TSpinEdit AObj, BOOL AValue);

BOOL
SpinEdit_GetParentFont(TSpinEdit AObj);

void
SpinEdit_SetParentFont(TSpinEdit AObj, BOOL AValue);

BOOL
SpinEdit_GetParentShowHint(TSpinEdit AObj);

void
SpinEdit_SetParentShowHint(TSpinEdit AObj, BOOL AValue);

TPopupMenu
SpinEdit_GetPopupMenu(TSpinEdit AObj);

void
SpinEdit_SetPopupMenu(TSpinEdit AObj, TPopupMenu AValue);

BOOL
SpinEdit_GetReadOnly(TSpinEdit AObj);

void
SpinEdit_SetReadOnly(TSpinEdit AObj, BOOL AValue);

BOOL
SpinEdit_GetShowHint(TSpinEdit AObj);

void
SpinEdit_SetShowHint(TSpinEdit AObj, BOOL AValue);

TTabOrder
SpinEdit_GetTabOrder(TSpinEdit AObj);

void
SpinEdit_SetTabOrder(TSpinEdit AObj, TTabOrder AValue);

BOOL
SpinEdit_GetTabStop(TSpinEdit AObj);

void
SpinEdit_SetTabStop(TSpinEdit AObj, BOOL AValue);

int32_t
SpinEdit_GetValue(TSpinEdit AObj);

void
SpinEdit_SetValue(TSpinEdit AObj, int32_t AValue);

BOOL
SpinEdit_GetVisible(TSpinEdit AObj);

void
SpinEdit_SetVisible(TSpinEdit AObj, BOOL AValue);

void
SpinEdit_SetOnChange(TSpinEdit AObj, TNotifyEvent AEventData);

void
SpinEdit_SetOnClick(TSpinEdit AObj, TNotifyEvent AEventData);

void
SpinEdit_SetOnEnter(TSpinEdit AObj, TNotifyEvent AEventData);

void
SpinEdit_SetOnExit(TSpinEdit AObj, TNotifyEvent AEventData);

void
SpinEdit_SetOnKeyDown(TSpinEdit AObj, TKeyEvent AEventData);

void
SpinEdit_SetOnKeyPress(TSpinEdit AObj, TKeyPressEvent AEventData);

void
SpinEdit_SetOnKeyUp(TSpinEdit AObj, TKeyEvent AEventData);

void
SpinEdit_SetOnMouseDown(TSpinEdit AObj, TMouseEvent AEventData);

void
SpinEdit_SetOnMouseMove(TSpinEdit AObj, TMouseMoveEvent AEventData);

void
SpinEdit_SetOnMouseUp(TSpinEdit AObj, TMouseEvent AEventData);

TAlignment
SpinEdit_GetAlignment(TSpinEdit AObj);

void
SpinEdit_SetAlignment(TSpinEdit AObj, TAlignment AValue);

BOOL
SpinEdit_GetCanUndo(TSpinEdit AObj);

BOOL
SpinEdit_GetModified(TSpinEdit AObj);

void
SpinEdit_SetModified(TSpinEdit AObj, BOOL AValue);

int32_t
SpinEdit_GetSelLength(TSpinEdit AObj);

void
SpinEdit_SetSelLength(TSpinEdit AObj, int32_t AValue);

int32_t
SpinEdit_GetSelStart(TSpinEdit AObj);

void
SpinEdit_SetSelStart(TSpinEdit AObj, int32_t AValue);

char*
SpinEdit_GetSelText(TSpinEdit AObj);

void
SpinEdit_SetSelText(TSpinEdit AObj, CChar char* AValue);

char*
SpinEdit_GetText(TSpinEdit AObj);

void
SpinEdit_SetText(TSpinEdit AObj, CChar char* AValue);

char*
SpinEdit_GetTextHint(TSpinEdit AObj);

void
SpinEdit_SetTextHint(TSpinEdit AObj, CChar char* AValue);

int32_t
SpinEdit_GetDockClientCount(TSpinEdit AObj);

BOOL
SpinEdit_GetDockSite(TSpinEdit AObj);

void
SpinEdit_SetDockSite(TSpinEdit AObj, BOOL AValue);

BOOL
SpinEdit_GetDoubleBuffered(TSpinEdit AObj);

void
SpinEdit_SetDoubleBuffered(TSpinEdit AObj, BOOL AValue);

BOOL
SpinEdit_GetMouseInClient(TSpinEdit AObj);

int32_t
SpinEdit_GetVisibleDockClientCount(TSpinEdit AObj);

TBrush
SpinEdit_GetBrush(TSpinEdit AObj);

int32_t
SpinEdit_GetControlCount(TSpinEdit AObj);

HWND
SpinEdit_GetHandle(TSpinEdit AObj);

BOOL
SpinEdit_GetParentDoubleBuffered(TSpinEdit AObj);

void
SpinEdit_SetParentDoubleBuffered(TSpinEdit AObj, BOOL AValue);

HWND
SpinEdit_GetParentWindow(TSpinEdit AObj);

void
SpinEdit_SetParentWindow(TSpinEdit AObj, HWND AValue);

BOOL
SpinEdit_GetShowing(TSpinEdit AObj);

BOOL
SpinEdit_GetUseDockManager(TSpinEdit AObj);

void
SpinEdit_SetUseDockManager(TSpinEdit AObj, BOOL AValue);

TAction
SpinEdit_GetAction(TSpinEdit AObj);

void
SpinEdit_SetAction(TSpinEdit AObj, TAction AValue);

TAlign
SpinEdit_GetAlign(TSpinEdit AObj);

void
SpinEdit_SetAlign(TSpinEdit AObj, TAlign AValue);

TBiDiMode
SpinEdit_GetBiDiMode(TSpinEdit AObj);

void
SpinEdit_SetBiDiMode(TSpinEdit AObj, TBiDiMode AValue);

TRect
SpinEdit_GetBoundsRect(TSpinEdit AObj);

void
SpinEdit_SetBoundsRect(TSpinEdit AObj, TRect AValue);

int32_t
SpinEdit_GetClientHeight(TSpinEdit AObj);

void
SpinEdit_SetClientHeight(TSpinEdit AObj, int32_t AValue);

TPoint
SpinEdit_GetClientOrigin(TSpinEdit AObj);

TRect
SpinEdit_GetClientRect(TSpinEdit AObj);

int32_t
SpinEdit_GetClientWidth(TSpinEdit AObj);

void
SpinEdit_SetClientWidth(TSpinEdit AObj, int32_t AValue);

TControlState
SpinEdit_GetControlState(TSpinEdit AObj);

void
SpinEdit_SetControlState(TSpinEdit AObj, TControlState AValue);

TControlStyle
SpinEdit_GetControlStyle(TSpinEdit AObj);

void
SpinEdit_SetControlStyle(TSpinEdit AObj, TControlStyle AValue);

BOOL
SpinEdit_GetFloating(TSpinEdit AObj);

TWinControl
SpinEdit_GetParent(TSpinEdit AObj);

void
SpinEdit_SetParent(TSpinEdit AObj, TWinControl AValue);

int32_t
SpinEdit_GetLeft(TSpinEdit AObj);

void
SpinEdit_SetLeft(TSpinEdit AObj, int32_t AValue);

int32_t
SpinEdit_GetTop(TSpinEdit AObj);

void
SpinEdit_SetTop(TSpinEdit AObj, int32_t AValue);

int32_t
SpinEdit_GetWidth(TSpinEdit AObj);

void
SpinEdit_SetWidth(TSpinEdit AObj, int32_t AValue);

int32_t
SpinEdit_GetHeight(TSpinEdit AObj);

void
SpinEdit_SetHeight(TSpinEdit AObj, int32_t AValue);

TCursor
SpinEdit_GetCursor(TSpinEdit AObj);

void
SpinEdit_SetCursor(TSpinEdit AObj, TCursor AValue);

char*
SpinEdit_GetHint(TSpinEdit AObj);

void
SpinEdit_SetHint(TSpinEdit AObj, CChar char* AValue);

int32_t
SpinEdit_GetComponentCount(TSpinEdit AObj);

int32_t
SpinEdit_GetComponentIndex(TSpinEdit AObj);

void
SpinEdit_SetComponentIndex(TSpinEdit AObj, int32_t AValue);

TComponent
SpinEdit_GetOwner(TSpinEdit AObj);

char*
SpinEdit_GetName(TSpinEdit AObj);

void
SpinEdit_SetName(TSpinEdit AObj, CChar char* AValue);

intptr_t
SpinEdit_GetTag(TSpinEdit AObj);

void
SpinEdit_SetTag(TSpinEdit AObj, intptr_t AValue);

TAnchorSide
SpinEdit_GetAnchorSideLeft(TSpinEdit AObj);

void
SpinEdit_SetAnchorSideLeft(TSpinEdit AObj, TAnchorSide AValue);

TAnchorSide
SpinEdit_GetAnchorSideTop(TSpinEdit AObj);

void
SpinEdit_SetAnchorSideTop(TSpinEdit AObj, TAnchorSide AValue);

TAnchorSide
SpinEdit_GetAnchorSideRight(TSpinEdit AObj);

void
SpinEdit_SetAnchorSideRight(TSpinEdit AObj, TAnchorSide AValue);

TAnchorSide
SpinEdit_GetAnchorSideBottom(TSpinEdit AObj);

void
SpinEdit_SetAnchorSideBottom(TSpinEdit AObj, TAnchorSide AValue);

TControlChildSizing
SpinEdit_GetChildSizing(TSpinEdit AObj);

void
SpinEdit_SetChildSizing(TSpinEdit AObj, TControlChildSizing AValue);

TControlBorderSpacing
SpinEdit_GetBorderSpacing(TSpinEdit AObj);

void
SpinEdit_SetBorderSpacing(TSpinEdit AObj, TControlBorderSpacing AValue);

TControl
SpinEdit_GetDockClients(TSpinEdit AObj, int32_t Index);

TControl
SpinEdit_GetControls(TSpinEdit AObj, int32_t Index);

TComponent
SpinEdit_GetComponents(TSpinEdit AObj, int32_t AIndex);

TAnchorSide
SpinEdit_GetAnchorSide(TSpinEdit AObj, TAnchorKind AKind);

TClass
SpinEdit_StaticClassType();

// -------------------TFloatSpinEdit-------------------

TFloatSpinEdit
FloatSpinEdit_Create(TComponent AOwner);

void
FloatSpinEdit_Free(TFloatSpinEdit AObj);

void
FloatSpinEdit_Clear(TFloatSpinEdit AObj);

void
FloatSpinEdit_ClearSelection(TFloatSpinEdit AObj);

void
FloatSpinEdit_CopyToClipboard(TFloatSpinEdit AObj);

void
FloatSpinEdit_CutToClipboard(TFloatSpinEdit AObj);

void
FloatSpinEdit_PasteFromClipboard(TFloatSpinEdit AObj);

void
FloatSpinEdit_Undo(TFloatSpinEdit AObj);

void
FloatSpinEdit_SelectAll(TFloatSpinEdit AObj);

BOOL
FloatSpinEdit_CanFocus(TFloatSpinEdit AObj);

BOOL
FloatSpinEdit_ContainsControl(TFloatSpinEdit AObj, TControl Control);

TControl
FloatSpinEdit_ControlAtPos(TFloatSpinEdit AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
FloatSpinEdit_DisableAlign(TFloatSpinEdit AObj);

void
FloatSpinEdit_EnableAlign(TFloatSpinEdit AObj);

TControl
FloatSpinEdit_FindChildControl(TFloatSpinEdit AObj, CChar char* ControlName);

void
FloatSpinEdit_FlipChildren(TFloatSpinEdit AObj, BOOL AllLevels);

BOOL
FloatSpinEdit_Focused(TFloatSpinEdit AObj);

BOOL
FloatSpinEdit_HandleAllocated(TFloatSpinEdit AObj);

void
FloatSpinEdit_InsertControl(TFloatSpinEdit AObj, TControl AControl);

void
FloatSpinEdit_Invalidate(TFloatSpinEdit AObj);

void
FloatSpinEdit_PaintTo(TFloatSpinEdit AObj, HDC DC, int32_t X, int32_t Y);

void
FloatSpinEdit_RemoveControl(TFloatSpinEdit AObj, TControl AControl);

void
FloatSpinEdit_Realign(TFloatSpinEdit AObj);

void
FloatSpinEdit_Repaint(TFloatSpinEdit AObj);

void
FloatSpinEdit_ScaleBy(TFloatSpinEdit AObj, int32_t M, int32_t D);

void
FloatSpinEdit_ScrollBy(TFloatSpinEdit AObj, int32_t DeltaX, int32_t DeltaY);

void
FloatSpinEdit_SetBounds(TFloatSpinEdit AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
FloatSpinEdit_SetFocus(TFloatSpinEdit AObj);

void
FloatSpinEdit_Update(TFloatSpinEdit AObj);

void
FloatSpinEdit_BringToFront(TFloatSpinEdit AObj);

TPoint
FloatSpinEdit_ClientToScreen(TFloatSpinEdit AObj, TPoint Point);

TPoint
FloatSpinEdit_ClientToParent(TFloatSpinEdit AObj, TPoint Point, TWinControl AParent);

BOOL
FloatSpinEdit_Dragging(TFloatSpinEdit AObj);

BOOL
FloatSpinEdit_HasParent(TFloatSpinEdit AObj);

void
FloatSpinEdit_Hide(TFloatSpinEdit AObj);

intptr_t
FloatSpinEdit_Perform(TFloatSpinEdit AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
FloatSpinEdit_Refresh(TFloatSpinEdit AObj);

TPoint
FloatSpinEdit_ScreenToClient(TFloatSpinEdit AObj, TPoint Point);

TPoint
FloatSpinEdit_ParentToClient(TFloatSpinEdit AObj, TPoint Point, TWinControl AParent);

void
FloatSpinEdit_SendToBack(TFloatSpinEdit AObj);

void
FloatSpinEdit_Show(TFloatSpinEdit AObj);

int32_t
FloatSpinEdit_GetTextBuf(TFloatSpinEdit AObj, CChar char* Buffer, int32_t BufSize);

int32_t
FloatSpinEdit_GetTextLen(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetTextBuf(TFloatSpinEdit AObj, CChar char* Buffer);

TComponent
FloatSpinEdit_FindComponent(TFloatSpinEdit AObj, CChar char* AName);

char*
FloatSpinEdit_GetNamePath(TFloatSpinEdit AObj);

void
FloatSpinEdit_Assign(TFloatSpinEdit AObj, TObject Source);

TClass
FloatSpinEdit_ClassType(TFloatSpinEdit AObj);

char*
FloatSpinEdit_ClassName(TFloatSpinEdit AObj);

int32_t
FloatSpinEdit_InstanceSize(TFloatSpinEdit AObj);

BOOL
FloatSpinEdit_InheritsFrom(TFloatSpinEdit AObj, TClass AClass);

BOOL
FloatSpinEdit_Equals(TFloatSpinEdit AObj, TObject Obj);

int32_t
FloatSpinEdit_GetHashCode(TFloatSpinEdit AObj);

char*
FloatSpinEdit_ToString(TFloatSpinEdit AObj);

void
FloatSpinEdit_AnchorToNeighbour(TFloatSpinEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
FloatSpinEdit_AnchorParallel(TFloatSpinEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
FloatSpinEdit_AnchorHorizontalCenterTo(TFloatSpinEdit AObj, TControl ASibling);

void
FloatSpinEdit_AnchorVerticalCenterTo(TFloatSpinEdit AObj, TControl ASibling);

void
FloatSpinEdit_AnchorSame(TFloatSpinEdit AObj, TAnchorKind ASide, TControl ASibling);

void
FloatSpinEdit_AnchorAsAlign(TFloatSpinEdit AObj, TAlign ATheAlign, int32_t ASpace);

void
FloatSpinEdit_AnchorClient(TFloatSpinEdit AObj, int32_t ASpace);

int32_t
FloatSpinEdit_ScaleDesignToForm(TFloatSpinEdit AObj, int32_t ASize);

int32_t
FloatSpinEdit_ScaleFormToDesign(TFloatSpinEdit AObj, int32_t ASize);

int32_t
FloatSpinEdit_Scale96ToForm(TFloatSpinEdit AObj, int32_t ASize);

int32_t
FloatSpinEdit_ScaleFormTo96(TFloatSpinEdit AObj, int32_t ASize);

int32_t
FloatSpinEdit_Scale96ToFont(TFloatSpinEdit AObj, int32_t ASize);

int32_t
FloatSpinEdit_ScaleFontTo96(TFloatSpinEdit AObj, int32_t ASize);

int32_t
FloatSpinEdit_ScaleScreenToFont(TFloatSpinEdit AObj, int32_t ASize);

int32_t
FloatSpinEdit_ScaleFontToScreen(TFloatSpinEdit AObj, int32_t ASize);

int32_t
FloatSpinEdit_Scale96ToScreen(TFloatSpinEdit AObj, int32_t ASize);

int32_t
FloatSpinEdit_ScaleScreenTo96(TFloatSpinEdit AObj, int32_t ASize);

void
FloatSpinEdit_AutoAdjustLayout(TFloatSpinEdit AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
FloatSpinEdit_FixDesignFontsPPI(TFloatSpinEdit AObj, int32_t ADesignTimePPI);

void
FloatSpinEdit_ScaleFontsPPI(TFloatSpinEdit AObj, int32_t AToPPI, double AProportion);

BOOL
FloatSpinEdit_GetAutoSelected(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetAutoSelected(TFloatSpinEdit AObj, BOOL AValue);

TAlign
FloatSpinEdit_GetAlign(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetAlign(TFloatSpinEdit AObj, TAlign AValue);

TAlignment
FloatSpinEdit_GetAlignment(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetAlignment(TFloatSpinEdit AObj, TAlignment AValue);

TAnchors
FloatSpinEdit_GetAnchors(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetAnchors(TFloatSpinEdit AObj, TAnchors AValue);

BOOL
FloatSpinEdit_GetAutoSelect(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetAutoSelect(TFloatSpinEdit AObj, BOOL AValue);

BOOL
FloatSpinEdit_GetAutoSize(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetAutoSize(TFloatSpinEdit AObj, BOOL AValue);

TColor
FloatSpinEdit_GetColor(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetColor(TFloatSpinEdit AObj, TColor AValue);

TSizeConstraints
FloatSpinEdit_GetConstraints(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetConstraints(TFloatSpinEdit AObj, TSizeConstraints AValue);

BOOL
FloatSpinEdit_GetEnabled(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetEnabled(TFloatSpinEdit AObj, BOOL AValue);

TFont
FloatSpinEdit_GetFont(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetFont(TFloatSpinEdit AObj, TFont AValue);

double
FloatSpinEdit_GetIncrement(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetIncrement(TFloatSpinEdit AObj, double AValue);

double
FloatSpinEdit_GetMaxValue(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetMaxValue(TFloatSpinEdit AObj, double AValue);

double
FloatSpinEdit_GetMinValue(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetMinValue(TFloatSpinEdit AObj, double AValue);

void
FloatSpinEdit_SetOnChange(TFloatSpinEdit AObj, TNotifyEvent AEventData);

void
FloatSpinEdit_SetOnClick(TFloatSpinEdit AObj, TNotifyEvent AEventData);

void
FloatSpinEdit_SetOnEnter(TFloatSpinEdit AObj, TNotifyEvent AEventData);

void
FloatSpinEdit_SetOnExit(TFloatSpinEdit AObj, TNotifyEvent AEventData);

void
FloatSpinEdit_SetOnKeyDown(TFloatSpinEdit AObj, TKeyEvent AEventData);

void
FloatSpinEdit_SetOnKeyPress(TFloatSpinEdit AObj, TKeyPressEvent AEventData);

void
FloatSpinEdit_SetOnKeyUp(TFloatSpinEdit AObj, TKeyEvent AEventData);

void
FloatSpinEdit_SetOnMouseDown(TFloatSpinEdit AObj, TMouseEvent AEventData);

void
FloatSpinEdit_SetOnMouseEnter(TFloatSpinEdit AObj, TNotifyEvent AEventData);

void
FloatSpinEdit_SetOnMouseLeave(TFloatSpinEdit AObj, TNotifyEvent AEventData);

void
FloatSpinEdit_SetOnMouseMove(TFloatSpinEdit AObj, TMouseMoveEvent AEventData);

void
FloatSpinEdit_SetOnMouseUp(TFloatSpinEdit AObj, TMouseEvent AEventData);

void
FloatSpinEdit_SetOnMouseWheel(TFloatSpinEdit AObj, TMouseWheelEvent AEventData);

void
FloatSpinEdit_SetOnMouseWheelDown(TFloatSpinEdit AObj, TMouseWheelUpDownEvent AEventData);

void
FloatSpinEdit_SetOnMouseWheelUp(TFloatSpinEdit AObj, TMouseWheelUpDownEvent AEventData);

void
FloatSpinEdit_SetOnResize(TFloatSpinEdit AObj, TNotifyEvent AEventData);

BOOL
FloatSpinEdit_GetParentColor(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetParentColor(TFloatSpinEdit AObj, BOOL AValue);

BOOL
FloatSpinEdit_GetParentFont(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetParentFont(TFloatSpinEdit AObj, BOOL AValue);

BOOL
FloatSpinEdit_GetParentShowHint(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetParentShowHint(TFloatSpinEdit AObj, BOOL AValue);

TPopupMenu
FloatSpinEdit_GetPopupMenu(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetPopupMenu(TFloatSpinEdit AObj, TPopupMenu AValue);

BOOL
FloatSpinEdit_GetReadOnly(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetReadOnly(TFloatSpinEdit AObj, BOOL AValue);

BOOL
FloatSpinEdit_GetShowHint(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetShowHint(TFloatSpinEdit AObj, BOOL AValue);

BOOL
FloatSpinEdit_GetTabStop(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetTabStop(TFloatSpinEdit AObj, BOOL AValue);

TTabOrder
FloatSpinEdit_GetTabOrder(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetTabOrder(TFloatSpinEdit AObj, TTabOrder AValue);

double
FloatSpinEdit_GetValue(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetValue(TFloatSpinEdit AObj, double AValue);

BOOL
FloatSpinEdit_GetVisible(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetVisible(TFloatSpinEdit AObj, BOOL AValue);

BOOL
FloatSpinEdit_GetCanUndo(TFloatSpinEdit AObj);

BOOL
FloatSpinEdit_GetModified(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetModified(TFloatSpinEdit AObj, BOOL AValue);

int32_t
FloatSpinEdit_GetSelLength(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetSelLength(TFloatSpinEdit AObj, int32_t AValue);

int32_t
FloatSpinEdit_GetSelStart(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetSelStart(TFloatSpinEdit AObj, int32_t AValue);

char*
FloatSpinEdit_GetSelText(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetSelText(TFloatSpinEdit AObj, CChar char* AValue);

char*
FloatSpinEdit_GetText(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetText(TFloatSpinEdit AObj, CChar char* AValue);

char*
FloatSpinEdit_GetTextHint(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetTextHint(TFloatSpinEdit AObj, CChar char* AValue);

int32_t
FloatSpinEdit_GetDockClientCount(TFloatSpinEdit AObj);

BOOL
FloatSpinEdit_GetDockSite(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetDockSite(TFloatSpinEdit AObj, BOOL AValue);

BOOL
FloatSpinEdit_GetDoubleBuffered(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetDoubleBuffered(TFloatSpinEdit AObj, BOOL AValue);

BOOL
FloatSpinEdit_GetMouseInClient(TFloatSpinEdit AObj);

int32_t
FloatSpinEdit_GetVisibleDockClientCount(TFloatSpinEdit AObj);

TBrush
FloatSpinEdit_GetBrush(TFloatSpinEdit AObj);

int32_t
FloatSpinEdit_GetControlCount(TFloatSpinEdit AObj);

HWND
FloatSpinEdit_GetHandle(TFloatSpinEdit AObj);

BOOL
FloatSpinEdit_GetParentDoubleBuffered(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetParentDoubleBuffered(TFloatSpinEdit AObj, BOOL AValue);

HWND
FloatSpinEdit_GetParentWindow(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetParentWindow(TFloatSpinEdit AObj, HWND AValue);

BOOL
FloatSpinEdit_GetShowing(TFloatSpinEdit AObj);

BOOL
FloatSpinEdit_GetUseDockManager(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetUseDockManager(TFloatSpinEdit AObj, BOOL AValue);

TAction
FloatSpinEdit_GetAction(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetAction(TFloatSpinEdit AObj, TAction AValue);

TBiDiMode
FloatSpinEdit_GetBiDiMode(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetBiDiMode(TFloatSpinEdit AObj, TBiDiMode AValue);

TRect
FloatSpinEdit_GetBoundsRect(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetBoundsRect(TFloatSpinEdit AObj, TRect AValue);

int32_t
FloatSpinEdit_GetClientHeight(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetClientHeight(TFloatSpinEdit AObj, int32_t AValue);

TPoint
FloatSpinEdit_GetClientOrigin(TFloatSpinEdit AObj);

TRect
FloatSpinEdit_GetClientRect(TFloatSpinEdit AObj);

int32_t
FloatSpinEdit_GetClientWidth(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetClientWidth(TFloatSpinEdit AObj, int32_t AValue);

TControlState
FloatSpinEdit_GetControlState(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetControlState(TFloatSpinEdit AObj, TControlState AValue);

TControlStyle
FloatSpinEdit_GetControlStyle(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetControlStyle(TFloatSpinEdit AObj, TControlStyle AValue);

BOOL
FloatSpinEdit_GetFloating(TFloatSpinEdit AObj);

TWinControl
FloatSpinEdit_GetParent(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetParent(TFloatSpinEdit AObj, TWinControl AValue);

int32_t
FloatSpinEdit_GetLeft(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetLeft(TFloatSpinEdit AObj, int32_t AValue);

int32_t
FloatSpinEdit_GetTop(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetTop(TFloatSpinEdit AObj, int32_t AValue);

int32_t
FloatSpinEdit_GetWidth(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetWidth(TFloatSpinEdit AObj, int32_t AValue);

int32_t
FloatSpinEdit_GetHeight(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetHeight(TFloatSpinEdit AObj, int32_t AValue);

TCursor
FloatSpinEdit_GetCursor(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetCursor(TFloatSpinEdit AObj, TCursor AValue);

char*
FloatSpinEdit_GetHint(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetHint(TFloatSpinEdit AObj, CChar char* AValue);

int32_t
FloatSpinEdit_GetComponentCount(TFloatSpinEdit AObj);

int32_t
FloatSpinEdit_GetComponentIndex(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetComponentIndex(TFloatSpinEdit AObj, int32_t AValue);

TComponent
FloatSpinEdit_GetOwner(TFloatSpinEdit AObj);

char*
FloatSpinEdit_GetName(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetName(TFloatSpinEdit AObj, CChar char* AValue);

intptr_t
FloatSpinEdit_GetTag(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetTag(TFloatSpinEdit AObj, intptr_t AValue);

TAnchorSide
FloatSpinEdit_GetAnchorSideLeft(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetAnchorSideLeft(TFloatSpinEdit AObj, TAnchorSide AValue);

TAnchorSide
FloatSpinEdit_GetAnchorSideTop(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetAnchorSideTop(TFloatSpinEdit AObj, TAnchorSide AValue);

TAnchorSide
FloatSpinEdit_GetAnchorSideRight(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetAnchorSideRight(TFloatSpinEdit AObj, TAnchorSide AValue);

TAnchorSide
FloatSpinEdit_GetAnchorSideBottom(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetAnchorSideBottom(TFloatSpinEdit AObj, TAnchorSide AValue);

TControlChildSizing
FloatSpinEdit_GetChildSizing(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetChildSizing(TFloatSpinEdit AObj, TControlChildSizing AValue);

TControlBorderSpacing
FloatSpinEdit_GetBorderSpacing(TFloatSpinEdit AObj);

void
FloatSpinEdit_SetBorderSpacing(TFloatSpinEdit AObj, TControlBorderSpacing AValue);

TControl
FloatSpinEdit_GetDockClients(TFloatSpinEdit AObj, int32_t Index);

TControl
FloatSpinEdit_GetControls(TFloatSpinEdit AObj, int32_t Index);

TComponent
FloatSpinEdit_GetComponents(TFloatSpinEdit AObj, int32_t AIndex);

TAnchorSide
FloatSpinEdit_GetAnchorSide(TFloatSpinEdit AObj, TAnchorKind AKind);

TClass
FloatSpinEdit_StaticClassType();

// -------------------TDirectoryEdit-------------------

TDirectoryEdit
irectoryEdit_Create(TComponent AOwner);

void
irectoryEdit_Free(TDirectoryEdit AObj);

void
irectoryEdit_SetFocus(TDirectoryEdit AObj);

BOOL
irectoryEdit_Focused(TDirectoryEdit AObj);

void
irectoryEdit_Clear(TDirectoryEdit AObj);

void
irectoryEdit_ClearSelection(TDirectoryEdit AObj);

void
irectoryEdit_CopyToClipboard(TDirectoryEdit AObj);

void
irectoryEdit_CutToClipboard(TDirectoryEdit AObj);

void
irectoryEdit_PasteFromClipboard(TDirectoryEdit AObj);

void
irectoryEdit_SelectAll(TDirectoryEdit AObj);

void
irectoryEdit_Undo(TDirectoryEdit AObj);

void
irectoryEdit_ValidateEdit(TDirectoryEdit AObj);

BOOL
irectoryEdit_CanFocus(TDirectoryEdit AObj);

BOOL
irectoryEdit_ContainsControl(TDirectoryEdit AObj, TControl Control);

TControl
irectoryEdit_ControlAtPos(TDirectoryEdit AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
irectoryEdit_DisableAlign(TDirectoryEdit AObj);

void
irectoryEdit_EnableAlign(TDirectoryEdit AObj);

TControl
irectoryEdit_FindChildControl(TDirectoryEdit AObj, CChar char* ControlName);

void
irectoryEdit_FlipChildren(TDirectoryEdit AObj, BOOL AllLevels);

BOOL
irectoryEdit_HandleAllocated(TDirectoryEdit AObj);

void
irectoryEdit_InsertControl(TDirectoryEdit AObj, TControl AControl);

void
irectoryEdit_Invalidate(TDirectoryEdit AObj);

void
irectoryEdit_PaintTo(TDirectoryEdit AObj, HDC DC, int32_t X, int32_t Y);

void
irectoryEdit_RemoveControl(TDirectoryEdit AObj, TControl AControl);

void
irectoryEdit_Realign(TDirectoryEdit AObj);

void
irectoryEdit_Repaint(TDirectoryEdit AObj);

void
irectoryEdit_ScaleBy(TDirectoryEdit AObj, int32_t M, int32_t D);

void
irectoryEdit_ScrollBy(TDirectoryEdit AObj, int32_t DeltaX, int32_t DeltaY);

void
irectoryEdit_SetBounds(TDirectoryEdit AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
irectoryEdit_Update(TDirectoryEdit AObj);

void
irectoryEdit_BringToFront(TDirectoryEdit AObj);

TPoint
irectoryEdit_ClientToScreen(TDirectoryEdit AObj, TPoint Point);

TPoint
irectoryEdit_ClientToParent(TDirectoryEdit AObj, TPoint Point, TWinControl AParent);

BOOL
irectoryEdit_Dragging(TDirectoryEdit AObj);

BOOL
irectoryEdit_HasParent(TDirectoryEdit AObj);

void
irectoryEdit_Hide(TDirectoryEdit AObj);

intptr_t
irectoryEdit_Perform(TDirectoryEdit AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
irectoryEdit_Refresh(TDirectoryEdit AObj);

TPoint
irectoryEdit_ScreenToClient(TDirectoryEdit AObj, TPoint Point);

TPoint
irectoryEdit_ParentToClient(TDirectoryEdit AObj, TPoint Point, TWinControl AParent);

void
irectoryEdit_SendToBack(TDirectoryEdit AObj);

void
irectoryEdit_Show(TDirectoryEdit AObj);

int32_t
irectoryEdit_GetTextBuf(TDirectoryEdit AObj, CChar char* Buffer, int32_t BufSize);

int32_t
irectoryEdit_GetTextLen(TDirectoryEdit AObj);

void
irectoryEdit_SetTextBuf(TDirectoryEdit AObj, CChar char* Buffer);

TComponent
irectoryEdit_FindComponent(TDirectoryEdit AObj, CChar char* AName);

char*
irectoryEdit_GetNamePath(TDirectoryEdit AObj);

void
irectoryEdit_Assign(TDirectoryEdit AObj, TObject Source);

TClass
irectoryEdit_ClassType(TDirectoryEdit AObj);

char*
irectoryEdit_ClassName(TDirectoryEdit AObj);

int32_t
DirectoryEdit_InstanceSize(TDirectoryEdit AObj);

BOOL
irectoryEdit_InheritsFrom(TDirectoryEdit AObj, TClass AClass);

BOOL
irectoryEdit_Equals(TDirectoryEdit AObj, TObject Obj);

int32_t
irectoryEdit_GetHashCode(TDirectoryEdit AObj);

char*
irectoryEdit_ToString(TDirectoryEdit AObj);

void
irectoryEdit_AnchorToNeighbour(TDirectoryEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
irectoryEdit_AnchorParallel(TDirectoryEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
irectoryEdit_AnchorHorizontalCenterTo(TDirectoryEdit AObj, TControl ASibling);

void
irectoryEdit_AnchorVerticalCenterTo(TDirectoryEdit AObj, TControl ASibling);

void
irectoryEdit_AnchorSame(TDirectoryEdit AObj, TAnchorKind ASide, TControl ASibling);

void
irectoryEdit_AnchorAsAlign(TDirectoryEdit AObj, TAlign ATheAlign, int32_t ASpace);

void
irectoryEdit_AnchorClient(TDirectoryEdit AObj, int32_t ASpace);

int32_t
irectoryEdit_ScaleDesignToForm(TDirectoryEdit AObj, int32_t ASize);

int32_t
irectoryEdit_ScaleFormToDesign(TDirectoryEdit AObj, int32_t ASize);

int32_t
irectoryEdit_Scale96ToForm(TDirectoryEdit AObj, int32_t ASize);

int32_t
irectoryEdit_ScaleFormTo96(TDirectoryEdit AObj, int32_t ASize);

int32_t
irectoryEdit_Scale96ToFont(TDirectoryEdit AObj, int32_t ASize);

int32_t
irectoryEdit_ScaleFontTo96(TDirectoryEdit AObj, int32_t ASize);

int32_t
irectoryEdit_ScaleScreenToFont(TDirectoryEdit AObj, int32_t ASize);

int32_t
irectoryEdit_ScaleFontToScreen(TDirectoryEdit AObj, int32_t ASize);

int32_t
irectoryEdit_Scale96ToScreen(TDirectoryEdit AObj, int32_t ASize);

int32_t
irectoryEdit_ScaleScreenTo96(TDirectoryEdit AObj, int32_t ASize);

void
irectoryEdit_AutoAdjustLayout(TDirectoryEdit AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
irectoryEdit_FixDesignFontsPPI(TDirectoryEdit AObj, int32_t ADesignTimePPI);

void
irectoryEdit_ScaleFontsPPI(TDirectoryEdit AObj, int32_t AToPPI, double AProportion);

BOOL
irectoryEdit_GetAutoSelected(TDirectoryEdit AObj);

void
irectoryEdit_SetAutoSelected(TDirectoryEdit AObj, BOOL AValue);

char*
irectoryEdit_GetDirectory(TDirectoryEdit AObj);

void
irectoryEdit_SetDirectory(TDirectoryEdit AObj, CChar char* AValue);

char*
irectoryEdit_GetRootDir(TDirectoryEdit AObj);

void
irectoryEdit_SetRootDir(TDirectoryEdit AObj, CChar char* AValue);

void
irectoryEdit_SetOnAcceptDirectory(TDirectoryEdit AObj, TAcceptFileNameEvent AEventData);

char*
irectoryEdit_GetDialogTitle(TDirectoryEdit AObj);

void
irectoryEdit_SetDialogTitle(TDirectoryEdit AObj, CChar char* AValue);

TOpenOptions
irectoryEdit_GetDialogOptions(TDirectoryEdit AObj);

void
irectoryEdit_SetDialogOptions(TDirectoryEdit AObj, TOpenOptions AValue);

BOOL
irectoryEdit_GetShowHidden(TDirectoryEdit AObj);

void
irectoryEdit_SetShowHidden(TDirectoryEdit AObj, BOOL AValue);

char*
irectoryEdit_GetButtonCaption(TDirectoryEdit AObj);

void
irectoryEdit_SetButtonCaption(TDirectoryEdit AObj, CChar char* AValue);

TCursor
irectoryEdit_GetButtonCursor(TDirectoryEdit AObj);

void
irectoryEdit_SetButtonCursor(TDirectoryEdit AObj, TCursor AValue);

char*
irectoryEdit_GetButtonHint(TDirectoryEdit AObj);

void
irectoryEdit_SetButtonHint(TDirectoryEdit AObj, CChar char* AValue);

BOOL
irectoryEdit_GetButtonOnlyWhenFocused(TDirectoryEdit AObj);

void
irectoryEdit_SetButtonOnlyWhenFocused(TDirectoryEdit AObj, BOOL AValue);

int32_t
irectoryEdit_GetButtonWidth(TDirectoryEdit AObj);

void
irectoryEdit_SetButtonWidth(TDirectoryEdit AObj, int32_t AValue);

TSizeConstraints
irectoryEdit_GetConstraints(TDirectoryEdit AObj);

void
irectoryEdit_SetConstraints(TDirectoryEdit AObj, TSizeConstraints AValue);

BOOL
irectoryEdit_GetDirectInput(TDirectoryEdit AObj);

void
irectoryEdit_SetDirectInput(TDirectoryEdit AObj, BOOL AValue);

TBitmap
irectoryEdit_GetGlyph(TDirectoryEdit AObj);

void
irectoryEdit_SetGlyph(TDirectoryEdit AObj, TBitmap AValue);

int32_t
irectoryEdit_GetNumGlyphs(TDirectoryEdit AObj);

void
irectoryEdit_SetNumGlyphs(TDirectoryEdit AObj, int32_t AValue);

TImageList
irectoryEdit_GetImages(TDirectoryEdit AObj);

void
irectoryEdit_SetImages(TDirectoryEdit AObj, TImageList AValue);

int32_t
irectoryEdit_GetImageIndex(TDirectoryEdit AObj);

void
irectoryEdit_SetImageIndex(TDirectoryEdit AObj, int32_t AValue);

int32_t
irectoryEdit_GetImageWidth(TDirectoryEdit AObj);

void
irectoryEdit_SetImageWidth(TDirectoryEdit AObj, int32_t AValue);

BOOL
irectoryEdit_GetFlat(TDirectoryEdit AObj);

void
irectoryEdit_SetFlat(TDirectoryEdit AObj, BOOL AValue);

BOOL
irectoryEdit_GetFocusOnButtonClick(TDirectoryEdit AObj);

void
irectoryEdit_SetFocusOnButtonClick(TDirectoryEdit AObj, BOOL AValue);

TAlign
irectoryEdit_GetAlign(TDirectoryEdit AObj);

void
irectoryEdit_SetAlign(TDirectoryEdit AObj, TAlign AValue);

TAnchors
irectoryEdit_GetAnchors(TDirectoryEdit AObj);

void
irectoryEdit_SetAnchors(TDirectoryEdit AObj, TAnchors AValue);

BOOL
irectoryEdit_GetAutoSize(TDirectoryEdit AObj);

void
irectoryEdit_SetAutoSize(TDirectoryEdit AObj, BOOL AValue);

BOOL
irectoryEdit_GetAutoSelect(TDirectoryEdit AObj);

void
irectoryEdit_SetAutoSelect(TDirectoryEdit AObj, BOOL AValue);

TColor
irectoryEdit_GetColor(TDirectoryEdit AObj);

void
irectoryEdit_SetColor(TDirectoryEdit AObj, TColor AValue);

TCursor
irectoryEdit_GetDragCursor(TDirectoryEdit AObj);

void
irectoryEdit_SetDragCursor(TDirectoryEdit AObj, TCursor AValue);

TDragMode
irectoryEdit_GetDragMode(TDirectoryEdit AObj);

void
irectoryEdit_SetDragMode(TDirectoryEdit AObj, TDragMode AValue);

BOOL
irectoryEdit_GetEnabled(TDirectoryEdit AObj);

void
irectoryEdit_SetEnabled(TDirectoryEdit AObj, BOOL AValue);

TFont
irectoryEdit_GetFont(TDirectoryEdit AObj);

void
irectoryEdit_SetFont(TDirectoryEdit AObj, TFont AValue);

TLeftRight
irectoryEdit_GetLayout(TDirectoryEdit AObj);

void
irectoryEdit_SetLayout(TDirectoryEdit AObj, TLeftRight AValue);

int32_t
irectoryEdit_GetMaxLength(TDirectoryEdit AObj);

void
irectoryEdit_SetMaxLength(TDirectoryEdit AObj, int32_t AValue);

BOOL
irectoryEdit_GetParentColor(TDirectoryEdit AObj);

void
irectoryEdit_SetParentColor(TDirectoryEdit AObj, BOOL AValue);

BOOL
irectoryEdit_GetParentFont(TDirectoryEdit AObj);

void
irectoryEdit_SetParentFont(TDirectoryEdit AObj, BOOL AValue);

BOOL
irectoryEdit_GetParentShowHint(TDirectoryEdit AObj);

void
irectoryEdit_SetParentShowHint(TDirectoryEdit AObj, BOOL AValue);

TPopupMenu
irectoryEdit_GetPopupMenu(TDirectoryEdit AObj);

void
irectoryEdit_SetPopupMenu(TDirectoryEdit AObj, TPopupMenu AValue);

BOOL
irectoryEdit_GetReadOnly(TDirectoryEdit AObj);

void
irectoryEdit_SetReadOnly(TDirectoryEdit AObj, BOOL AValue);

BOOL
irectoryEdit_GetShowHint(TDirectoryEdit AObj);

void
irectoryEdit_SetShowHint(TDirectoryEdit AObj, BOOL AValue);

TTabOrder
irectoryEdit_GetTabOrder(TDirectoryEdit AObj);

void
irectoryEdit_SetTabOrder(TDirectoryEdit AObj, TTabOrder AValue);

int32_t
irectoryEdit_GetSpacing(TDirectoryEdit AObj);

void
irectoryEdit_SetSpacing(TDirectoryEdit AObj, int32_t AValue);

BOOL
irectoryEdit_GetTabStop(TDirectoryEdit AObj);

void
irectoryEdit_SetTabStop(TDirectoryEdit AObj, BOOL AValue);

BOOL
irectoryEdit_GetVisible(TDirectoryEdit AObj);

void
irectoryEdit_SetVisible(TDirectoryEdit AObj, BOOL AValue);

void
irectoryEdit_SetOnButtonClick(TDirectoryEdit AObj, TNotifyEvent AEventData);

void
irectoryEdit_SetOnChange(TDirectoryEdit AObj, TNotifyEvent AEventData);

void
irectoryEdit_SetOnClick(TDirectoryEdit AObj, TNotifyEvent AEventData);

void
irectoryEdit_SetOnContextPopup(TDirectoryEdit AObj, TContextPopupEvent AEventData);

void
irectoryEdit_SetOnDblClick(TDirectoryEdit AObj, TNotifyEvent AEventData);

void
irectoryEdit_SetOnDragDrop(TDirectoryEdit AObj, TDragDropEvent AEventData);

void
irectoryEdit_SetOnDragOver(TDirectoryEdit AObj, TDragOverEvent AEventData);

void
irectoryEdit_SetOnEditingDone(TDirectoryEdit AObj, TNotifyEvent AEventData);

void
irectoryEdit_SetOnEndDrag(TDirectoryEdit AObj, TEndDragEvent AEventData);

void
irectoryEdit_SetOnEnter(TDirectoryEdit AObj, TNotifyEvent AEventData);

void
irectoryEdit_SetOnExit(TDirectoryEdit AObj, TNotifyEvent AEventData);

void
irectoryEdit_SetOnKeyDown(TDirectoryEdit AObj, TKeyEvent AEventData);

void
irectoryEdit_SetOnKeyPress(TDirectoryEdit AObj, TKeyPressEvent AEventData);

void
irectoryEdit_SetOnKeyUp(TDirectoryEdit AObj, TKeyEvent AEventData);

void
irectoryEdit_SetOnMouseDown(TDirectoryEdit AObj, TMouseEvent AEventData);

void
irectoryEdit_SetOnMouseEnter(TDirectoryEdit AObj, TNotifyEvent AEventData);

void
irectoryEdit_SetOnMouseLeave(TDirectoryEdit AObj, TNotifyEvent AEventData);

void
irectoryEdit_SetOnMouseMove(TDirectoryEdit AObj, TMouseMoveEvent AEventData);

void
irectoryEdit_SetOnMouseUp(TDirectoryEdit AObj, TMouseEvent AEventData);

void
irectoryEdit_SetOnMouseWheel(TDirectoryEdit AObj, TMouseWheelEvent AEventData);

void
irectoryEdit_SetOnMouseWheelDown(TDirectoryEdit AObj, TMouseWheelUpDownEvent AEventData);

void
irectoryEdit_SetOnMouseWheelUp(TDirectoryEdit AObj, TMouseWheelUpDownEvent AEventData);

char*
irectoryEdit_GetText(TDirectoryEdit AObj);

void
irectoryEdit_SetText(TDirectoryEdit AObj, CChar char* AValue);

char*
irectoryEdit_GetTextHint(TDirectoryEdit AObj);

void
irectoryEdit_SetTextHint(TDirectoryEdit AObj, CChar char* AValue);

TAlignment
irectoryEdit_GetAlignment(TDirectoryEdit AObj);

void
irectoryEdit_SetAlignment(TDirectoryEdit AObj, TAlignment AValue);

BOOL
irectoryEdit_GetCanUndo(TDirectoryEdit AObj);

TPoint
irectoryEdit_GetCaretPos(TDirectoryEdit AObj);

void
irectoryEdit_SetCaretPos(TDirectoryEdit AObj, TPoint AValue);

TEditCharCase
irectoryEdit_GetCharCase(TDirectoryEdit AObj);

void
irectoryEdit_SetCharCase(TDirectoryEdit AObj, TEditCharCase AValue);

BOOL
irectoryEdit_GetHideSelection(TDirectoryEdit AObj);

void
irectoryEdit_SetHideSelection(TDirectoryEdit AObj, BOOL AValue);

BOOL
irectoryEdit_GetModified(TDirectoryEdit AObj);

void
irectoryEdit_SetModified(TDirectoryEdit AObj, BOOL AValue);

BOOL
irectoryEdit_GetNumbersOnly(TDirectoryEdit AObj);

void
irectoryEdit_SetNumbersOnly(TDirectoryEdit AObj, BOOL AValue);

Char
irectoryEdit_GetPasswordChar(TDirectoryEdit AObj);

void
irectoryEdit_SetPasswordChar(TDirectoryEdit AObj, Char AValue);

int32_t
irectoryEdit_GetSelLength(TDirectoryEdit AObj);

void
irectoryEdit_SetSelLength(TDirectoryEdit AObj, int32_t AValue);

int32_t
irectoryEdit_GetSelStart(TDirectoryEdit AObj);

void
irectoryEdit_SetSelStart(TDirectoryEdit AObj, int32_t AValue);

char*
irectoryEdit_GetSelText(TDirectoryEdit AObj);

void
irectoryEdit_SetSelText(TDirectoryEdit AObj, CChar char* AValue);

int32_t
irectoryEdit_GetDockClientCount(TDirectoryEdit AObj);

BOOL
irectoryEdit_GetDockSite(TDirectoryEdit AObj);

void
irectoryEdit_SetDockSite(TDirectoryEdit AObj, BOOL AValue);

BOOL
irectoryEdit_GetDoubleBuffered(TDirectoryEdit AObj);

void
irectoryEdit_SetDoubleBuffered(TDirectoryEdit AObj, BOOL AValue);

BOOL
irectoryEdit_GetMouseInClient(TDirectoryEdit AObj);

int32_t
irectoryEdit_GetVisibleDockClientCount(TDirectoryEdit AObj);

TBrush
irectoryEdit_GetBrush(TDirectoryEdit AObj);

int32_t
irectoryEdit_GetControlCount(TDirectoryEdit AObj);

HWND
irectoryEdit_GetHandle(TDirectoryEdit AObj);

BOOL
irectoryEdit_GetParentDoubleBuffered(TDirectoryEdit AObj);

void
irectoryEdit_SetParentDoubleBuffered(TDirectoryEdit AObj, BOOL AValue);

HWND
irectoryEdit_GetParentWindow(TDirectoryEdit AObj);

void
irectoryEdit_SetParentWindow(TDirectoryEdit AObj, HWND AValue);

BOOL
irectoryEdit_GetShowing(TDirectoryEdit AObj);

BOOL
irectoryEdit_GetUseDockManager(TDirectoryEdit AObj);

void
irectoryEdit_SetUseDockManager(TDirectoryEdit AObj, BOOL AValue);

TAction
irectoryEdit_GetAction(TDirectoryEdit AObj);

void
irectoryEdit_SetAction(TDirectoryEdit AObj, TAction AValue);

TBiDiMode
irectoryEdit_GetBiDiMode(TDirectoryEdit AObj);

void
irectoryEdit_SetBiDiMode(TDirectoryEdit AObj, TBiDiMode AValue);

TRect
irectoryEdit_GetBoundsRect(TDirectoryEdit AObj);

void
irectoryEdit_SetBoundsRect(TDirectoryEdit AObj, TRect AValue);

int32_t
irectoryEdit_GetClientHeight(TDirectoryEdit AObj);

void
irectoryEdit_SetClientHeight(TDirectoryEdit AObj, int32_t AValue);

TPoint
irectoryEdit_GetClientOrigin(TDirectoryEdit AObj);

TRect
irectoryEdit_GetClientRect(TDirectoryEdit AObj);

int32_t
irectoryEdit_GetClientWidth(TDirectoryEdit AObj);

void
irectoryEdit_SetClientWidth(TDirectoryEdit AObj, int32_t AValue);

TControlState
irectoryEdit_GetControlState(TDirectoryEdit AObj);

void
irectoryEdit_SetControlState(TDirectoryEdit AObj, TControlState AValue);

TControlStyle
irectoryEdit_GetControlStyle(TDirectoryEdit AObj);

void
irectoryEdit_SetControlStyle(TDirectoryEdit AObj, TControlStyle AValue);

BOOL
irectoryEdit_GetFloating(TDirectoryEdit AObj);

TWinControl
irectoryEdit_GetParent(TDirectoryEdit AObj);

void
irectoryEdit_SetParent(TDirectoryEdit AObj, TWinControl AValue);

int32_t
irectoryEdit_GetLeft(TDirectoryEdit AObj);

void
irectoryEdit_SetLeft(TDirectoryEdit AObj, int32_t AValue);

int32_t
irectoryEdit_GetTop(TDirectoryEdit AObj);

void
irectoryEdit_SetTop(TDirectoryEdit AObj, int32_t AValue);

int32_t
irectoryEdit_GetWidth(TDirectoryEdit AObj);

void
irectoryEdit_SetWidth(TDirectoryEdit AObj, int32_t AValue);

int32_t
irectoryEdit_GetHeight(TDirectoryEdit AObj);

void
irectoryEdit_SetHeight(TDirectoryEdit AObj, int32_t AValue);

TCursor
irectoryEdit_GetCursor(TDirectoryEdit AObj);

void
irectoryEdit_SetCursor(TDirectoryEdit AObj, TCursor AValue);

char*
irectoryEdit_GetHint(TDirectoryEdit AObj);

void
irectoryEdit_SetHint(TDirectoryEdit AObj, CChar char* AValue);

int32_t
irectoryEdit_GetComponentCount(TDirectoryEdit AObj);

int32_t
irectoryEdit_GetComponentIndex(TDirectoryEdit AObj);

void
irectoryEdit_SetComponentIndex(TDirectoryEdit AObj, int32_t AValue);

TComponent
irectoryEdit_GetOwner(TDirectoryEdit AObj);

char*
irectoryEdit_GetName(TDirectoryEdit AObj);

void
irectoryEdit_SetName(TDirectoryEdit AObj, CChar char* AValue);

intptr_t
irectoryEdit_GetTag(TDirectoryEdit AObj);

void
irectoryEdit_SetTag(TDirectoryEdit AObj, intptr_t AValue);

TAnchorSide
irectoryEdit_GetAnchorSideLeft(TDirectoryEdit AObj);

void
irectoryEdit_SetAnchorSideLeft(TDirectoryEdit AObj, TAnchorSide AValue);

TAnchorSide
irectoryEdit_GetAnchorSideTop(TDirectoryEdit AObj);

void
irectoryEdit_SetAnchorSideTop(TDirectoryEdit AObj, TAnchorSide AValue);

TAnchorSide
irectoryEdit_GetAnchorSideRight(TDirectoryEdit AObj);

void
irectoryEdit_SetAnchorSideRight(TDirectoryEdit AObj, TAnchorSide AValue);

TAnchorSide
irectoryEdit_GetAnchorSideBottom(TDirectoryEdit AObj);

void
irectoryEdit_SetAnchorSideBottom(TDirectoryEdit AObj, TAnchorSide AValue);

TControlChildSizing
irectoryEdit_GetChildSizing(TDirectoryEdit AObj);

void
irectoryEdit_SetChildSizing(TDirectoryEdit AObj, TControlChildSizing AValue);

TControlBorderSpacing
irectoryEdit_GetBorderSpacing(TDirectoryEdit AObj);

void
irectoryEdit_SetBorderSpacing(TDirectoryEdit AObj, TControlBorderSpacing AValue);

TControl
irectoryEdit_GetDockClients(TDirectoryEdit AObj, int32_t Index);

TControl
irectoryEdit_GetControls(TDirectoryEdit AObj, int32_t Index);

TComponent
irectoryEdit_GetComponents(TDirectoryEdit AObj, int32_t AIndex);

TAnchorSide
irectoryEdit_GetAnchorSide(TDirectoryEdit AObj, TAnchorKind AKind);

TClass
irectoryEdit_StaticClassType();

// -------------------TColorButton-------------------

TColorButton
ColorButton_Create(TComponent AOwner);

void
ColorButton_Free(TColorButton AObj);

void
ColorButton_Click(TColorButton AObj);

void
ColorButton_BringToFront(TColorButton AObj);

TPoint
ColorButton_ClientToScreen(TColorButton AObj, TPoint Point);

TPoint
ColorButton_ClientToParent(TColorButton AObj, TPoint Point, TWinControl AParent);

BOOL
ColorButton_Dragging(TColorButton AObj);

BOOL
ColorButton_HasParent(TColorButton AObj);

void
ColorButton_Hide(TColorButton AObj);

void
ColorButton_Invalidate(TColorButton AObj);

intptr_t
ColorButton_Perform(TColorButton AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ColorButton_Refresh(TColorButton AObj);

void
ColorButton_Repaint(TColorButton AObj);

TPoint
ColorButton_ScreenToClient(TColorButton AObj, TPoint Point);

TPoint
ColorButton_ParentToClient(TColorButton AObj, TPoint Point, TWinControl AParent);

void
ColorButton_SendToBack(TColorButton AObj);

void
ColorButton_SetBounds(TColorButton AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ColorButton_Show(TColorButton AObj);

void
ColorButton_Update(TColorButton AObj);

int32_t
ColorButton_GetTextBuf(TColorButton AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ColorButton_GetTextLen(TColorButton AObj);

void
ColorButton_SetTextBuf(TColorButton AObj, CChar char* Buffer);

TComponent
ColorButton_FindComponent(TColorButton AObj, CChar char* AName);

char*
ColorButton_GetNamePath(TColorButton AObj);

void
ColorButton_Assign(TColorButton AObj, TObject Source);

TClass
ColorButton_ClassType(TColorButton AObj);

char*
ColorButton_ClassName(TColorButton AObj);

int32_t
ColorButton_InstanceSize(TColorButton AObj);

BOOL
ColorButton_InheritsFrom(TColorButton AObj, TClass AClass);

BOOL
ColorButton_Equals(TColorButton AObj, TObject Obj);

int32_t
ColorButton_GetHashCode(TColorButton AObj);

char*
ColorButton_ToString(TColorButton AObj);

void
ColorButton_AnchorToNeighbour(TColorButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ColorButton_AnchorParallel(TColorButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ColorButton_AnchorHorizontalCenterTo(TColorButton AObj, TControl ASibling);

void
ColorButton_AnchorVerticalCenterTo(TColorButton AObj, TControl ASibling);

void
ColorButton_AnchorSame(TColorButton AObj, TAnchorKind ASide, TControl ASibling);

void
ColorButton_AnchorAsAlign(TColorButton AObj, TAlign ATheAlign, int32_t ASpace);

void
ColorButton_AnchorClient(TColorButton AObj, int32_t ASpace);

int32_t
ColorButton_ScaleDesignToForm(TColorButton AObj, int32_t ASize);

int32_t
ColorButton_ScaleFormToDesign(TColorButton AObj, int32_t ASize);

int32_t
ColorButton_Scale96ToForm(TColorButton AObj, int32_t ASize);

int32_t
ColorButton_ScaleFormTo96(TColorButton AObj, int32_t ASize);

int32_t
ColorButton_Scale96ToFont(TColorButton AObj, int32_t ASize);

int32_t
ColorButton_ScaleFontTo96(TColorButton AObj, int32_t ASize);

int32_t
ColorButton_ScaleScreenToFont(TColorButton AObj, int32_t ASize);

int32_t
ColorButton_ScaleFontToScreen(TColorButton AObj, int32_t ASize);

int32_t
ColorButton_Scale96ToScreen(TColorButton AObj, int32_t ASize);

int32_t
ColorButton_ScaleScreenTo96(TColorButton AObj, int32_t ASize);

void
ColorButton_AutoAdjustLayout(TColorButton AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ColorButton_FixDesignFontsPPI(TColorButton AObj, int32_t ADesignTimePPI);

void
ColorButton_ScaleFontsPPI(TColorButton AObj, int32_t AToPPI, double AProportion);

TAction
ColorButton_GetAction(TColorButton AObj);

void
ColorButton_SetAction(TColorButton AObj, TAction AValue);

TAlign
ColorButton_GetAlign(TColorButton AObj);

void
ColorButton_SetAlign(TColorButton AObj, TAlign AValue);

TAnchors
ColorButton_GetAnchors(TColorButton AObj);

void
ColorButton_SetAnchors(TColorButton AObj, TAnchors AValue);

BOOL
ColorButton_GetAllowAllUp(TColorButton AObj);

void
ColorButton_SetAllowAllUp(TColorButton AObj, BOOL AValue);

int32_t
ColorButton_GetBorderWidth(TColorButton AObj);

void
ColorButton_SetBorderWidth(TColorButton AObj, int32_t AValue);

BOOL
ColorButton_GetButtonColorAutoSize(TColorButton AObj);

void
ColorButton_SetButtonColorAutoSize(TColorButton AObj, BOOL AValue);

int32_t
ColorButton_GetButtonColorSize(TColorButton AObj);

void
ColorButton_SetButtonColorSize(TColorButton AObj, int32_t AValue);

TColor
ColorButton_GetButtonColor(TColorButton AObj);

void
ColorButton_SetButtonColor(TColorButton AObj, TColor AValue);

TColorDialog
ColorButton_GetColorDialog(TColorButton AObj);

void
ColorButton_SetColorDialog(TColorButton AObj, TColorDialog AValue);

TSizeConstraints
ColorButton_GetConstraints(TColorButton AObj);

void
ColorButton_SetConstraints(TColorButton AObj, TSizeConstraints AValue);

char*
ColorButton_GetCaption(TColorButton AObj);

void
ColorButton_SetCaption(TColorButton AObj, CChar char* AValue);

TColor
ColorButton_GetColor(TColorButton AObj);

void
ColorButton_SetColor(TColorButton AObj, TColor AValue);

BOOL
ColorButton_GetDown(TColorButton AObj);

void
ColorButton_SetDown(TColorButton AObj, BOOL AValue);

BOOL
ColorButton_GetEnabled(TColorButton AObj);

void
ColorButton_SetEnabled(TColorButton AObj, BOOL AValue);

BOOL
ColorButton_GetFlat(TColorButton AObj);

void
ColorButton_SetFlat(TColorButton AObj, BOOL AValue);

TFont
ColorButton_GetFont(TColorButton AObj);

void
ColorButton_SetFont(TColorButton AObj, TFont AValue);

int32_t
ColorButton_GetGroupIndex(TColorButton AObj);

void
ColorButton_SetGroupIndex(TColorButton AObj, int32_t AValue);

char*
ColorButton_GetHint(TColorButton AObj);

void
ColorButton_SetHint(TColorButton AObj, CChar char* AValue);

TButtonLayout
ColorButton_GetLayout(TColorButton AObj);

void
ColorButton_SetLayout(TColorButton AObj, TButtonLayout AValue);

int32_t
ColorButton_GetSpacing(TColorButton AObj);

void
ColorButton_SetSpacing(TColorButton AObj, int32_t AValue);

BOOL
ColorButton_GetTransparent(TColorButton AObj);

void
ColorButton_SetTransparent(TColorButton AObj, BOOL AValue);

BOOL
ColorButton_GetVisible(TColorButton AObj);

void
ColorButton_SetVisible(TColorButton AObj, BOOL AValue);

void
ColorButton_SetOnClick(TColorButton AObj, TNotifyEvent AEventData);

void
ColorButton_SetOnColorChanged(TColorButton AObj, TNotifyEvent AEventData);

void
ColorButton_SetOnDblClick(TColorButton AObj, TNotifyEvent AEventData);

void
ColorButton_SetOnMouseDown(TColorButton AObj, TMouseEvent AEventData);

void
ColorButton_SetOnMouseEnter(TColorButton AObj, TNotifyEvent AEventData);

void
ColorButton_SetOnMouseLeave(TColorButton AObj, TNotifyEvent AEventData);

void
ColorButton_SetOnMouseMove(TColorButton AObj, TMouseMoveEvent AEventData);

void
ColorButton_SetOnMouseUp(TColorButton AObj, TMouseEvent AEventData);

void
ColorButton_SetOnMouseWheel(TColorButton AObj, TMouseWheelEvent AEventData);

void
ColorButton_SetOnMouseWheelDown(TColorButton AObj, TMouseWheelUpDownEvent AEventData);

void
ColorButton_SetOnMouseWheelUp(TColorButton AObj, TMouseWheelUpDownEvent AEventData);

void
ColorButton_SetOnPaint(TColorButton AObj, TNotifyEvent AEventData);

void
ColorButton_SetOnResize(TColorButton AObj, TNotifyEvent AEventData);

BOOL
ColorButton_GetShowHint(TColorButton AObj);

void
ColorButton_SetShowHint(TColorButton AObj, BOOL AValue);

BOOL
ColorButton_GetParentFont(TColorButton AObj);

void
ColorButton_SetParentFont(TColorButton AObj, BOOL AValue);

BOOL
ColorButton_GetParentShowHint(TColorButton AObj);

void
ColorButton_SetParentShowHint(TColorButton AObj, BOOL AValue);

TPopupMenu
ColorButton_GetPopupMenu(TColorButton AObj);

void
ColorButton_SetPopupMenu(TColorButton AObj, TPopupMenu AValue);

int32_t
ColorButton_GetImageIndex(TColorButton AObj);

void
ColorButton_SetImageIndex(TColorButton AObj, int32_t AValue);

TImageList
ColorButton_GetImages(TColorButton AObj);

void
ColorButton_SetImages(TColorButton AObj, TImageList AValue);

int32_t
ColorButton_GetImageWidth(TColorButton AObj);

void
ColorButton_SetImageWidth(TColorButton AObj, int32_t AValue);

BOOL
ColorButton_GetShowCaption(TColorButton AObj);

void
ColorButton_SetShowCaption(TColorButton AObj, BOOL AValue);

TBiDiMode
ColorButton_GetBiDiMode(TColorButton AObj);

void
ColorButton_SetBiDiMode(TColorButton AObj, TBiDiMode AValue);

TBitmap
ColorButton_GetGlyph(TColorButton AObj);

void
ColorButton_SetGlyph(TColorButton AObj, TBitmap AValue);

TNumGlyphs
ColorButton_GetNumGlyphs(TColorButton AObj);

void
ColorButton_SetNumGlyphs(TColorButton AObj, TNumGlyphs AValue);

TRect
ColorButton_GetBoundsRect(TColorButton AObj);

void
ColorButton_SetBoundsRect(TColorButton AObj, TRect AValue);

int32_t
ColorButton_GetClientHeight(TColorButton AObj);

void
ColorButton_SetClientHeight(TColorButton AObj, int32_t AValue);

TPoint
ColorButton_GetClientOrigin(TColorButton AObj);

TRect
ColorButton_GetClientRect(TColorButton AObj);

int32_t
ColorButton_GetClientWidth(TColorButton AObj);

void
ColorButton_SetClientWidth(TColorButton AObj, int32_t AValue);

TControlState
ColorButton_GetControlState(TColorButton AObj);

void
ColorButton_SetControlState(TColorButton AObj, TControlState AValue);

TControlStyle
ColorButton_GetControlStyle(TColorButton AObj);

void
ColorButton_SetControlStyle(TColorButton AObj, TControlStyle AValue);

BOOL
ColorButton_GetFloating(TColorButton AObj);

TWinControl
ColorButton_GetParent(TColorButton AObj);

void
ColorButton_SetParent(TColorButton AObj, TWinControl AValue);

int32_t
ColorButton_GetLeft(TColorButton AObj);

void
ColorButton_SetLeft(TColorButton AObj, int32_t AValue);

int32_t
ColorButton_GetTop(TColorButton AObj);

void
ColorButton_SetTop(TColorButton AObj, int32_t AValue);

int32_t
ColorButton_GetWidth(TColorButton AObj);

void
ColorButton_SetWidth(TColorButton AObj, int32_t AValue);

int32_t
ColorButton_GetHeight(TColorButton AObj);

void
ColorButton_SetHeight(TColorButton AObj, int32_t AValue);

TCursor
ColorButton_GetCursor(TColorButton AObj);

void
ColorButton_SetCursor(TColorButton AObj, TCursor AValue);

int32_t
ColorButton_GetComponentCount(TColorButton AObj);

int32_t
ColorButton_GetComponentIndex(TColorButton AObj);

void
ColorButton_SetComponentIndex(TColorButton AObj, int32_t AValue);

TComponent
ColorButton_GetOwner(TColorButton AObj);

char*
ColorButton_GetName(TColorButton AObj);

void
ColorButton_SetName(TColorButton AObj, CChar char* AValue);

intptr_t
ColorButton_GetTag(TColorButton AObj);

void
ColorButton_SetTag(TColorButton AObj, intptr_t AValue);

TAnchorSide
ColorButton_GetAnchorSideLeft(TColorButton AObj);

void
ColorButton_SetAnchorSideLeft(TColorButton AObj, TAnchorSide AValue);

TAnchorSide
ColorButton_GetAnchorSideTop(TColorButton AObj);

void
ColorButton_SetAnchorSideTop(TColorButton AObj, TAnchorSide AValue);

TAnchorSide
ColorButton_GetAnchorSideRight(TColorButton AObj);

void
ColorButton_SetAnchorSideRight(TColorButton AObj, TAnchorSide AValue);

TAnchorSide
ColorButton_GetAnchorSideBottom(TColorButton AObj);

void
ColorButton_SetAnchorSideBottom(TColorButton AObj, TAnchorSide AValue);

TControlBorderSpacing
ColorButton_GetBorderSpacing(TColorButton AObj);

void
ColorButton_SetBorderSpacing(TColorButton AObj, TControlBorderSpacing AValue);

TComponent
ColorButton_GetComponents(TColorButton AObj, int32_t AIndex);

TAnchorSide
ColorButton_GetAnchorSide(TColorButton AObj, TAnchorKind AKind);

TClass
ColorButton_StaticClassType();

// -------------------TMiniWebview-------------------

TMiniWebview
MiniWebview_Create(TComponent AOwner);

void
MiniWebview_Free(TMiniWebview AObj);

void
MiniWebview_Navigate(TMiniWebview AObj, CChar char* AURL);

void
MiniWebview_GoBack(TMiniWebview AObj);

void
MiniWebview_GoForward(TMiniWebview AObj);

void
MiniWebview_GoHome(TMiniWebview AObj);

void
MiniWebview_GoSearch(TMiniWebview AObj);

void
MiniWebview_Refresh(TMiniWebview AObj);

void
MiniWebview_Stop(TMiniWebview AObj);

void
MiniWebview_SetBounds(TMiniWebview AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

char*
MiniWebview_ExecuteScript(TMiniWebview AObj, CChar char* AScriptText, CChar char* AScriptType);

char*
MiniWebview_ExecuteJS(TMiniWebview AObj, CChar char* AScriptText);

void
MiniWebview_LoadHTML(TMiniWebview AObj, CChar char* AStr);

BOOL
MiniWebview_CanFocus(TMiniWebview AObj);

BOOL
MiniWebview_ContainsControl(TMiniWebview AObj, TControl Control);

TControl
MiniWebview_ControlAtPos(TMiniWebview AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
MiniWebview_DisableAlign(TMiniWebview AObj);

void
MiniWebview_EnableAlign(TMiniWebview AObj);

TControl
MiniWebview_FindChildControl(TMiniWebview AObj, CChar char* ControlName);

void
MiniWebview_FlipChildren(TMiniWebview AObj, BOOL AllLevels);

BOOL
MiniWebview_Focused(TMiniWebview AObj);

BOOL
MiniWebview_HandleAllocated(TMiniWebview AObj);

void
MiniWebview_InsertControl(TMiniWebview AObj, TControl AControl);

void
MiniWebview_Invalidate(TMiniWebview AObj);

void
MiniWebview_PaintTo(TMiniWebview AObj, HDC DC, int32_t X, int32_t Y);

void
MiniWebview_RemoveControl(TMiniWebview AObj, TControl AControl);

void
MiniWebview_Realign(TMiniWebview AObj);

void
MiniWebview_Repaint(TMiniWebview AObj);

void
MiniWebview_ScaleBy(TMiniWebview AObj, int32_t M, int32_t D);

void
MiniWebview_ScrollBy(TMiniWebview AObj, int32_t DeltaX, int32_t DeltaY);

void
MiniWebview_SetFocus(TMiniWebview AObj);

void
MiniWebview_Update(TMiniWebview AObj);

void
MiniWebview_BringToFront(TMiniWebview AObj);

TPoint
MiniWebview_ClientToScreen(TMiniWebview AObj, TPoint Point);

TPoint
MiniWebview_ClientToParent(TMiniWebview AObj, TPoint Point, TWinControl AParent);

BOOL
MiniWebview_Dragging(TMiniWebview AObj);

BOOL
MiniWebview_HasParent(TMiniWebview AObj);

void
MiniWebview_Hide(TMiniWebview AObj);

intptr_t
MiniWebview_Perform(TMiniWebview AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

TPoint
MiniWebview_ScreenToClient(TMiniWebview AObj, TPoint Point);

TPoint
MiniWebview_ParentToClient(TMiniWebview AObj, TPoint Point, TWinControl AParent);

void
MiniWebview_SendToBack(TMiniWebview AObj);

void
MiniWebview_Show(TMiniWebview AObj);

int32_t
MiniWebview_GetTextBuf(TMiniWebview AObj, CChar char* Buffer, int32_t BufSize);

int32_t
MiniWebview_GetTextLen(TMiniWebview AObj);

void
MiniWebview_SetTextBuf(TMiniWebview AObj, CChar char* Buffer);

TComponent
MiniWebview_FindComponent(TMiniWebview AObj, CChar char* AName);

char*
MiniWebview_GetNamePath(TMiniWebview AObj);

void
MiniWebview_Assign(TMiniWebview AObj, TObject Source);

TClass
MiniWebview_ClassType(TMiniWebview AObj);

char*
MiniWebview_ClassName(TMiniWebview AObj);

int32_t
MiniWebview_InstanceSize(TMiniWebview AObj);

BOOL
MiniWebview_InheritsFrom(TMiniWebview AObj, TClass AClass);

BOOL
MiniWebview_Equals(TMiniWebview AObj, TObject Obj);

int32_t
MiniWebview_GetHashCode(TMiniWebview AObj);

char*
MiniWebview_ToString(TMiniWebview AObj);

void
MiniWebview_AnchorToNeighbour(TMiniWebview AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
MiniWebview_AnchorParallel(TMiniWebview AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
MiniWebview_AnchorHorizontalCenterTo(TMiniWebview AObj, TControl ASibling);

void
MiniWebview_AnchorVerticalCenterTo(TMiniWebview AObj, TControl ASibling);

void
MiniWebview_AnchorSame(TMiniWebview AObj, TAnchorKind ASide, TControl ASibling);

void
MiniWebview_AnchorAsAlign(TMiniWebview AObj, TAlign ATheAlign, int32_t ASpace);

void
MiniWebview_AnchorClient(TMiniWebview AObj, int32_t ASpace);

int32_t
MiniWebview_ScaleDesignToForm(TMiniWebview AObj, int32_t ASize);

int32_t
MiniWebview_ScaleFormToDesign(TMiniWebview AObj, int32_t ASize);

int32_t
MiniWebview_Scale96ToForm(TMiniWebview AObj, int32_t ASize);

int32_t
MiniWebview_ScaleFormTo96(TMiniWebview AObj, int32_t ASize);

int32_t
MiniWebview_Scale96ToFont(TMiniWebview AObj, int32_t ASize);

int32_t
MiniWebview_ScaleFontTo96(TMiniWebview AObj, int32_t ASize);

int32_t
MiniWebview_ScaleScreenToFont(TMiniWebview AObj, int32_t ASize);

int32_t
MiniWebview_ScaleFontToScreen(TMiniWebview AObj, int32_t ASize);

int32_t
MiniWebview_Scale96ToScreen(TMiniWebview AObj, int32_t ASize);

int32_t
MiniWebview_ScaleScreenTo96(TMiniWebview AObj, int32_t ASize);

void
MiniWebview_AutoAdjustLayout(TMiniWebview AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
MiniWebview_FixDesignFontsPPI(TMiniWebview AObj, int32_t ADesignTimePPI);

void
MiniWebview_ScaleFontsPPI(TMiniWebview AObj, int32_t AToPPI, double AProportion);

TReadyState
MiniWebview_GetReadyState(TMiniWebview AObj);

TAlign
MiniWebview_GetAlign(TMiniWebview AObj);

void
MiniWebview_SetAlign(TMiniWebview AObj, TAlign AValue);

TAnchors
MiniWebview_GetAnchors(TMiniWebview AObj);

void
MiniWebview_SetAnchors(TMiniWebview AObj, TAnchors AValue);

TSizeConstraints
MiniWebview_GetConstraints(TMiniWebview AObj);

void
MiniWebview_SetConstraints(TMiniWebview AObj, TSizeConstraints AValue);

BOOL
MiniWebview_GetEnabled(TMiniWebview AObj);

void
MiniWebview_SetEnabled(TMiniWebview AObj, BOOL AValue);

BOOL
MiniWebview_GetVisible(TMiniWebview AObj);

void
MiniWebview_SetVisible(TMiniWebview AObj, BOOL AValue);

void
MiniWebview_SetOnTitleChange(TMiniWebview AObj, TWebTitleChangeEvent AEventData);

void
MiniWebview_SetOnJSExternal(TMiniWebview AObj, TWebJSExternalEvent AEventData);

int32_t
MiniWebview_GetDockClientCount(TMiniWebview AObj);

BOOL
MiniWebview_GetDockSite(TMiniWebview AObj);

void
MiniWebview_SetDockSite(TMiniWebview AObj, BOOL AValue);

BOOL
MiniWebview_GetDoubleBuffered(TMiniWebview AObj);

void
MiniWebview_SetDoubleBuffered(TMiniWebview AObj, BOOL AValue);

BOOL
MiniWebview_GetMouseInClient(TMiniWebview AObj);

int32_t
MiniWebview_GetVisibleDockClientCount(TMiniWebview AObj);

TBrush
MiniWebview_GetBrush(TMiniWebview AObj);

int32_t
MiniWebview_GetControlCount(TMiniWebview AObj);

HWND
MiniWebview_GetHandle(TMiniWebview AObj);

BOOL
MiniWebview_GetParentDoubleBuffered(TMiniWebview AObj);

void
MiniWebview_SetParentDoubleBuffered(TMiniWebview AObj, BOOL AValue);

HWND
MiniWebview_GetParentWindow(TMiniWebview AObj);

void
MiniWebview_SetParentWindow(TMiniWebview AObj, HWND AValue);

BOOL
MiniWebview_GetShowing(TMiniWebview AObj);

TTabOrder
MiniWebview_GetTabOrder(TMiniWebview AObj);

void
MiniWebview_SetTabOrder(TMiniWebview AObj, TTabOrder AValue);

BOOL
MiniWebview_GetTabStop(TMiniWebview AObj);

void
MiniWebview_SetTabStop(TMiniWebview AObj, BOOL AValue);

BOOL
MiniWebview_GetUseDockManager(TMiniWebview AObj);

void
MiniWebview_SetUseDockManager(TMiniWebview AObj, BOOL AValue);

TAction
MiniWebview_GetAction(TMiniWebview AObj);

void
MiniWebview_SetAction(TMiniWebview AObj, TAction AValue);

TBiDiMode
MiniWebview_GetBiDiMode(TMiniWebview AObj);

void
MiniWebview_SetBiDiMode(TMiniWebview AObj, TBiDiMode AValue);

TRect
MiniWebview_GetBoundsRect(TMiniWebview AObj);

void
MiniWebview_SetBoundsRect(TMiniWebview AObj, TRect AValue);

int32_t
MiniWebview_GetClientHeight(TMiniWebview AObj);

void
MiniWebview_SetClientHeight(TMiniWebview AObj, int32_t AValue);

TPoint
MiniWebview_GetClientOrigin(TMiniWebview AObj);

TRect
MiniWebview_GetClientRect(TMiniWebview AObj);

int32_t
MiniWebview_GetClientWidth(TMiniWebview AObj);

void
MiniWebview_SetClientWidth(TMiniWebview AObj, int32_t AValue);

TControlState
MiniWebview_GetControlState(TMiniWebview AObj);

void
MiniWebview_SetControlState(TMiniWebview AObj, TControlState AValue);

TControlStyle
MiniWebview_GetControlStyle(TMiniWebview AObj);

void
MiniWebview_SetControlStyle(TMiniWebview AObj, TControlStyle AValue);

BOOL
MiniWebview_GetFloating(TMiniWebview AObj);

BOOL
MiniWebview_GetShowHint(TMiniWebview AObj);

void
MiniWebview_SetShowHint(TMiniWebview AObj, BOOL AValue);

TWinControl
MiniWebview_GetParent(TMiniWebview AObj);

void
MiniWebview_SetParent(TMiniWebview AObj, TWinControl AValue);

int32_t
MiniWebview_GetLeft(TMiniWebview AObj);

void
MiniWebview_SetLeft(TMiniWebview AObj, int32_t AValue);

int32_t
MiniWebview_GetTop(TMiniWebview AObj);

void
MiniWebview_SetTop(TMiniWebview AObj, int32_t AValue);

int32_t
MiniWebview_GetWidth(TMiniWebview AObj);

void
MiniWebview_SetWidth(TMiniWebview AObj, int32_t AValue);

int32_t
MiniWebview_GetHeight(TMiniWebview AObj);

void
MiniWebview_SetHeight(TMiniWebview AObj, int32_t AValue);

TCursor
MiniWebview_GetCursor(TMiniWebview AObj);

void
MiniWebview_SetCursor(TMiniWebview AObj, TCursor AValue);

char*
MiniWebview_GetHint(TMiniWebview AObj);

void
MiniWebview_SetHint(TMiniWebview AObj, CChar char* AValue);

int32_t
MiniWebview_GetComponentCount(TMiniWebview AObj);

int32_t
MiniWebview_GetComponentIndex(TMiniWebview AObj);

void
MiniWebview_SetComponentIndex(TMiniWebview AObj, int32_t AValue);

TComponent
MiniWebview_GetOwner(TMiniWebview AObj);

char*
MiniWebview_GetName(TMiniWebview AObj);

void
MiniWebview_SetName(TMiniWebview AObj, CChar char* AValue);

intptr_t
MiniWebview_GetTag(TMiniWebview AObj);

void
MiniWebview_SetTag(TMiniWebview AObj, intptr_t AValue);

TAnchorSide
MiniWebview_GetAnchorSideLeft(TMiniWebview AObj);

void
MiniWebview_SetAnchorSideLeft(TMiniWebview AObj, TAnchorSide AValue);

TAnchorSide
MiniWebview_GetAnchorSideTop(TMiniWebview AObj);

void
MiniWebview_SetAnchorSideTop(TMiniWebview AObj, TAnchorSide AValue);

TAnchorSide
MiniWebview_GetAnchorSideRight(TMiniWebview AObj);

void
MiniWebview_SetAnchorSideRight(TMiniWebview AObj, TAnchorSide AValue);

TAnchorSide
MiniWebview_GetAnchorSideBottom(TMiniWebview AObj);

void
MiniWebview_SetAnchorSideBottom(TMiniWebview AObj, TAnchorSide AValue);

TControlChildSizing
MiniWebview_GetChildSizing(TMiniWebview AObj);

void
MiniWebview_SetChildSizing(TMiniWebview AObj, TControlChildSizing AValue);

TControlBorderSpacing
MiniWebview_GetBorderSpacing(TMiniWebview AObj);

void
MiniWebview_SetBorderSpacing(TMiniWebview AObj, TControlBorderSpacing AValue);

TControl
MiniWebview_GetDockClients(TMiniWebview AObj, int32_t Index);

TControl
MiniWebview_GetControls(TMiniWebview AObj, int32_t Index);

TComponent
MiniWebview_GetComponents(TMiniWebview AObj, int32_t AIndex);

TAnchorSide
MiniWebview_GetAnchorSide(TMiniWebview AObj, TAnchorKind AKind);

TClass
MiniWebview_StaticClassType();

// -------------------TCanvas-------------------

TCanvas
Canvas_Create();

void
Canvas_Free(TCanvas AObj);

void
Canvas_Arc(TCanvas AObj, int32_t X1, int32_t Y1, int32_t X2, int32_t Y2, int32_t X3, int32_t Y3, int32_t X4, int32_t Y4);

void
Canvas_ArcTo(TCanvas AObj, int32_t X1, int32_t Y1, int32_t X2, int32_t Y2, int32_t X3, int32_t Y3, int32_t X4, int32_t Y4);

void
Canvas_AngleArc(TCanvas AObj, int32_t X, int32_t Y, uint32_t Radius, float StartAngle, float SweepAngle);

void
Canvas_Chord(TCanvas AObj, int32_t X1, int32_t Y1, int32_t X2, int32_t Y2, int32_t X3, int32_t Y3, int32_t X4, int32_t Y4);

void
Canvas_Ellipse(TCanvas AObj, int32_t X1, int32_t Y1, int32_t X2, int32_t Y2);

void
Canvas_FloodFill(TCanvas AObj, int32_t X, int32_t Y, TColor Color, TFillStyle FillStyle);

BOOL
Canvas_HandleAllocated(TCanvas AObj);

void
Canvas_LineTo(TCanvas AObj, int32_t X, int32_t Y);

void
Canvas_MoveTo(TCanvas AObj, int32_t X, int32_t Y);

void
Canvas_Pie(TCanvas AObj, int32_t X1, int32_t Y1, int32_t X2, int32_t Y2, int32_t X3, int32_t Y3, int32_t X4, int32_t Y4);

void
Canvas_Rectangle(TCanvas AObj, int32_t X1, int32_t Y1, int32_t X2, int32_t Y2);

void
Canvas_Refresh(TCanvas AObj);

void
Canvas_RoundRect(TCanvas AObj, int32_t X1, int32_t Y1, int32_t X2, int32_t Y2, int32_t X3, int32_t Y3);

void
Canvas_StretchDraw(TCanvas AObj, TRect Rect, TGraphic Graphic);

TSize
Canvas_TextExtent(TCanvas AObj, CChar char* Text);

void
Canvas_TextOut(TCanvas AObj, int32_t X, int32_t Y, CChar char* Text);

void
Canvas_Lock(TCanvas AObj);

int32_t
Canvas_TextHeight(TCanvas AObj, CChar char* Text);

int32_t
Canvas_TextWidth(TCanvas AObj, CChar char* Text);

void
Canvas_Assign(TCanvas AObj, TObject Source);

char*
Canvas_GetNamePath(TCanvas AObj);

TClass
Canvas_ClassType(TCanvas AObj);

char*
Canvas_ClassName(TCanvas AObj);

int32_t
Canvas_InstanceSize(TCanvas AObj);

BOOL
Canvas_InheritsFrom(TCanvas AObj, TClass AClass);

BOOL
Canvas_Equals(TCanvas AObj, TObject Obj);

int32_t
Canvas_GetHashCode(TCanvas AObj);

char*
Canvas_ToString(TCanvas AObj);

HDC
Canvas_GetHandle(TCanvas AObj);

void
Canvas_SetHandle(TCanvas AObj, HDC AValue);

TBrush
Canvas_GetBrush(TCanvas AObj);

void
Canvas_SetBrush(TCanvas AObj, TBrush AValue);

int32_t
Canvas_GetCopyMode(TCanvas AObj);

void
Canvas_SetCopyMode(TCanvas AObj, int32_t AValue);

TFont
Canvas_GetFont(TCanvas AObj);

void
Canvas_SetFont(TCanvas AObj, TFont AValue);

TPen
Canvas_GetPen(TCanvas AObj);

void
Canvas_SetPen(TCanvas AObj, TPen AValue);

void
Canvas_SetOnChange(TCanvas AObj, TNotifyEvent AEventData);

void
Canvas_SetOnChanging(TCanvas AObj, TNotifyEvent AEventData);

TColor
Canvas_GetPixels(TCanvas AObj, int32_t X, int32_t Y);

void
Canvas_SetPixels(TCanvas AObj, int32_t X, int32_t Y, TColor AValue);

TClass
Canvas_StaticClassType();

void
Canvas_BrushCopy(TCanvas AObj, TRect Dest, TBitmap Bitmap, TRect Source, TColor Color);

void
Canvas_CopyRect(TCanvas AObj, TRect Dest, TCanvas Canvas, TRect Source);

void
Canvas_Draw1(TCanvas AObj, int32_t X, int32_t Y, TGraphic Graphic);

void
Canvas_DrawFocusRect(TCanvas AObj, TRect ARect);

void
Canvas_FillRect(TCanvas AObj, TRect Rect);

void
Canvas_FrameRect(TCanvas AObj, TRect Rect);

void
Canvas_TextRect1(TCanvas AObj, TRect Rect, int32_t X, int32_t Y, CChar char* Text);

int32_t
Canvas_TextRect2(TCanvas AObj, TRect* Rect, CChar char* Text, TTextFormat TextFormat);

void
Canvas_Polygon(TCanvas AObj, TPoint* APoints, int32_t ALen);

void
Canvas_Polyline(TCanvas AObj, TPoint* APoints, int32_t ALen);

void
Canvas_PolyBezier(TCanvas AObj, TPoint* APoints, int32_t ALen);

// -------------------TApplication-------------------

TApplication
Application_Create(TComponent AOwner);

void
Application_Free(TApplication AObj);

void
Application_ActivateHint(TApplication AObj, TPoint CursorPos);

void
Application_BringToFront(TApplication AObj);

void
Application_CancelHint(TApplication AObj);

void
Application_HandleMessage(TApplication AObj);

void
Application_HideHint(TApplication AObj);

void
Application_Minimize(TApplication AObj);

void
Application_ModalStarted(TApplication AObj);

void
Application_ModalFinished(TApplication AObj);

void
Application_ProcessMessages(TApplication AObj);

void
Application_Restore(TApplication AObj);

void
Application_RestoreTopMosts(TApplication AObj);

void
Application_Terminate(TApplication AObj);

int32_t
Application_MessageBox(TApplication AObj, CChar char* Text, CChar char* Caption, int32_t Flags);

TComponent
Application_FindComponent(TApplication AObj, CChar char* AName);

char*
Application_GetNamePath(TApplication AObj);

BOOL
Application_HasParent(TApplication AObj);

void
Application_Assign(TApplication AObj, TObject Source);

TClass
Application_ClassType(TApplication AObj);

char*
Application_ClassName(TApplication AObj);

int32_t
Application_InstanceSize(TApplication AObj);

BOOL
Application_InheritsFrom(TApplication AObj, TClass AClass);

BOOL
Application_Equals(TApplication AObj, TObject Obj);

int32_t
Application_GetHashCode(TApplication AObj);

char*
Application_ToString(TApplication AObj);

BOOL
Application_GetScaled(TApplication AObj);

void
Application_SetScaled(TApplication AObj, BOOL AValue);

BOOL
Application_GetSingleInstanceEnabled(TApplication AObj);

void
Application_SetSingleInstanceEnabled(TApplication AObj, BOOL AValue);

char*
Application_GetLocation(TApplication AObj);

BOOL
Application_GetStopOnException(TApplication AObj);

void
Application_SetStopOnException(TApplication AObj, BOOL AValue);

int32_t
Application_GetExceptionExitCode(TApplication AObj);

void
Application_SetExceptionExitCode(TApplication AObj, int32_t AValue);

char*
Application_GetExeName(TApplication AObj);

char*
Application_GetHint(TApplication AObj);

void
Application_SetHint(TApplication AObj, CChar char* AValue);

TColor
Application_GetHintColor(TApplication AObj);

void
Application_SetHintColor(TApplication AObj, TColor AValue);

int32_t
Application_GetHintHidePause(TApplication AObj);

void
Application_SetHintHidePause(TApplication AObj, int32_t AValue);

int32_t
Application_GetHintPause(TApplication AObj);

void
Application_SetHintPause(TApplication AObj, int32_t AValue);

BOOL
Application_GetHintShortCuts(TApplication AObj);

void
Application_SetHintShortCuts(TApplication AObj, BOOL AValue);

int32_t
Application_GetHintShortPause(TApplication AObj);

void
Application_SetHintShortPause(TApplication AObj, int32_t AValue);

TIcon
Application_GetIcon(TApplication AObj);

void
Application_SetIcon(TApplication AObj, TIcon AValue);

TForm
Application_GetMainForm(TApplication AObj);

HWND
Application_GetMainFormHandle(TApplication AObj);

BOOL
Application_GetMainFormOnTaskBar(TApplication AObj);

void
Application_SetMainFormOnTaskBar(TApplication AObj, BOOL AValue);

TBiDiMode
Application_GetBiDiMode(TApplication AObj);

void
Application_SetBiDiMode(TApplication AObj, TBiDiMode AValue);

BOOL
Application_GetShowHint(TApplication AObj);

void
Application_SetShowHint(TApplication AObj, BOOL AValue);

BOOL
Application_GetShowMainForm(TApplication AObj);

void
Application_SetShowMainForm(TApplication AObj, BOOL AValue);

char*
Application_GetTitle(TApplication AObj);

void
Application_SetTitle(TApplication AObj, CChar char* AValue);

void
Application_SetOnActivate(TApplication AObj, TNotifyEvent AEventData);

void
Application_SetOnDeactivate(TApplication AObj, TNotifyEvent AEventData);

void
Application_SetOnException(TApplication AObj, TExceptionEvent AEventData);

void
Application_SetOnHelp(TApplication AObj, THelpEvent AEventData);

void
Application_SetOnHint(TApplication AObj, TNotifyEvent AEventData);

void
Application_SetOnMinimize(TApplication AObj, TNotifyEvent AEventData);

void
Application_SetOnRestore(TApplication AObj, TNotifyEvent AEventData);

void
Application_SetOnShortCut(TApplication AObj, TShortCutEvent AEventData);

HWND
Application_GetHandle(TApplication AObj);

void
Application_SetHandle(TApplication AObj, HWND AValue);

int32_t
Application_GetComponentCount(TApplication AObj);

int32_t
Application_GetComponentIndex(TApplication AObj);

void
Application_SetComponentIndex(TApplication AObj, int32_t AValue);

TComponent
Application_GetOwner(TApplication AObj);

char*
Application_GetName(TApplication AObj);

void
Application_SetName(TApplication AObj, CChar char* AValue);

intptr_t
Application_GetTag(TApplication AObj);

void
Application_SetTag(TApplication AObj, intptr_t AValue);

TComponent
Application_GetComponents(TApplication AObj, int32_t AIndex);

TClass
Application_StaticClassType();

void
Application_Initialize(TApplication AObj);

TForm
Application_CreateForm(TApplication App);

void
Application_Run(TApplication AObj);

// -------------------TMainMenu-------------------

TMainMenu
MainMenu_Create(TComponent AOwner);

void
MainMenu_Free(TMainMenu AObj);

TComponent
MainMenu_FindComponent(TMainMenu AObj, CChar char* AName);

char*
MainMenu_GetNamePath(TMainMenu AObj);

BOOL
MainMenu_HasParent(TMainMenu AObj);

void
MainMenu_Assign(TMainMenu AObj, TObject Source);

TClass
MainMenu_ClassType(TMainMenu AObj);

char*
MainMenu_ClassName(TMainMenu AObj);

int32_t
MainMenu_InstanceSize(TMainMenu AObj);

BOOL
MainMenu_InheritsFrom(TMainMenu AObj, TClass AClass);

BOOL
MainMenu_Equals(TMainMenu AObj, TObject Obj);

int32_t
MainMenu_GetHashCode(TMainMenu AObj);

char*
MainMenu_ToString(TMainMenu AObj);

int32_t
MainMenu_GetImagesWidth(TMainMenu AObj);

void
MainMenu_SetImagesWidth(TMainMenu AObj, int32_t AValue);

void
MainMenu_SetOnDrawItem(TMainMenu AObj, TMenuDrawItemEvent AEventData);

void
MainMenu_SetOnMeasureItem(TMainMenu AObj, TMenuMeasureItemEvent AEventData);

TBiDiMode
MainMenu_GetBiDiMode(TMainMenu AObj);

void
MainMenu_SetBiDiMode(TMainMenu AObj, TBiDiMode AValue);

TImageList
MainMenu_GetImages(TMainMenu AObj);

void
MainMenu_SetImages(TMainMenu AObj, TImageList AValue);

BOOL
MainMenu_GetOwnerDraw(TMainMenu AObj);

void
MainMenu_SetOwnerDraw(TMainMenu AObj, BOOL AValue);

void
MainMenu_SetOnChange(TMainMenu AObj, TMenuChangeEvent AEventData);

HMENU
MainMenu_GetHandle(TMainMenu AObj);

TMenuItem
MainMenu_GetItems(TMainMenu AObj);

int32_t
MainMenu_GetComponentCount(TMainMenu AObj);

int32_t
MainMenu_GetComponentIndex(TMainMenu AObj);

void
MainMenu_SetComponentIndex(TMainMenu AObj, int32_t AValue);

TComponent
MainMenu_GetOwner(TMainMenu AObj);

char*
MainMenu_GetName(TMainMenu AObj);

void
MainMenu_SetName(TMainMenu AObj, CChar char* AValue);

intptr_t
MainMenu_GetTag(TMainMenu AObj);

void
MainMenu_SetTag(TMainMenu AObj, intptr_t AValue);

TComponent
MainMenu_GetComponents(TMainMenu AObj, int32_t AIndex);

TClass
MainMenu_StaticClassType();

// -------------------TPngImage-------------------

TPngImage
PngImage_Create();

void
PngImage_Free(TPngImage AObj);

void
PngImage_Assign(TPngImage AObj, TObject Source);

void
PngImage_LoadFromStream(TPngImage AObj, TStream Stream);

void
PngImage_SaveToStream(TPngImage AObj, TStream Stream);

void
PngImage_LoadFromResourceName(TPngImage AObj, uintptr_t Instance, CChar char* Name);

void
PngImage_LoadFromResourceID(TPngImage AObj, uintptr_t Instance, int32_t ResID);

BOOL
PngImage_Equals(TPngImage AObj, TObject Obj);

void
PngImage_LoadFromFile(TPngImage AObj, CChar char* Filename);

void
PngImage_SaveToFile(TPngImage AObj, CChar char* Filename);

void
PngImage_SetSize(TPngImage AObj, int32_t AWidth, int32_t AHeight);

char*
PngImage_GetNamePath(TPngImage AObj);

TClass
PngImage_ClassType(TPngImage AObj);

char*
PngImage_ClassName(TPngImage AObj);

int32_t
PngImage_InstanceSize(TPngImage AObj);

BOOL
PngImage_InheritsFrom(TPngImage AObj, TClass AClass);

int32_t
PngImage_GetHashCode(TPngImage AObj);

char*
PngImage_ToString(TPngImage AObj);

TCanvas
PngImage_GetCanvas(TPngImage AObj);

int32_t
PngImage_GetWidth(TPngImage AObj);

int32_t
PngImage_GetHeight(TPngImage AObj);

BOOL
PngImage_GetEmpty(TPngImage AObj);

BOOL
PngImage_GetModified(TPngImage AObj);

void
PngImage_SetModified(TPngImage AObj, BOOL AValue);

HPALETTE
PngImage_GetPalette(TPngImage AObj);

void
PngImage_SetPalette(TPngImage AObj, HPALETTE AValue);

BOOL
PngImage_GetPaletteModified(TPngImage AObj);

void
PngImage_SetPaletteModified(TPngImage AObj, BOOL AValue);

BOOL
PngImage_GetTransparent(TPngImage AObj);

void
PngImage_SetTransparent(TPngImage AObj, BOOL AValue);

void
PngImage_SetOnChange(TPngImage AObj, TNotifyEvent AEventData);

TClass
PngImage_StaticClassType();

// -------------------TJPEGImage-------------------

TJPEGImage
JPEGImage_Create();

void
JPEGImage_Free(TJPEGImage AObj);

void
JPEGImage_Assign(TJPEGImage AObj, TObject Source);

void
JPEGImage_LoadFromStream(TJPEGImage AObj, TStream Stream);

void
JPEGImage_SaveToStream(TJPEGImage AObj, TStream Stream);

BOOL
JPEGImage_Equals(TJPEGImage AObj, TObject Obj);

void
JPEGImage_LoadFromFile(TJPEGImage AObj, CChar char* Filename);

void
JPEGImage_SaveToFile(TJPEGImage AObj, CChar char* Filename);

void
JPEGImage_SetSize(TJPEGImage AObj, int32_t AWidth, int32_t AHeight);

char*
JPEGImage_GetNamePath(TJPEGImage AObj);

TClass
JPEGImage_ClassType(TJPEGImage AObj);

char*
JPEGImage_ClassName(TJPEGImage AObj);

int32_t
JPEGImage_InstanceSize(TJPEGImage AObj);

BOOL
JPEGImage_InheritsFrom(TJPEGImage AObj, TClass AClass);

int32_t
JPEGImage_GetHashCode(TJPEGImage AObj);

char*
JPEGImage_ToString(TJPEGImage AObj);

TPixelFormat
JPEGImage_GetPixelFormat(TJPEGImage AObj);

void
JPEGImage_SetPixelFormat(TJPEGImage AObj, TJPEGPixelFormat AValue);

TJPEGPerformance
JPEGImage_GetPerformance(TJPEGImage AObj);

void
JPEGImage_SetPerformance(TJPEGImage AObj, TJPEGPerformance AValue);

TCanvas
JPEGImage_GetCanvas(TJPEGImage AObj);

BOOL
JPEGImage_GetEmpty(TJPEGImage AObj);

int32_t
JPEGImage_GetHeight(TJPEGImage AObj);

void
JPEGImage_SetHeight(TJPEGImage AObj, int32_t AValue);

BOOL
JPEGImage_GetModified(TJPEGImage AObj);

void
JPEGImage_SetModified(TJPEGImage AObj, BOOL AValue);

HPALETTE
JPEGImage_GetPalette(TJPEGImage AObj);

void
JPEGImage_SetPalette(TJPEGImage AObj, HPALETTE AValue);

BOOL
JPEGImage_GetPaletteModified(TJPEGImage AObj);

void
JPEGImage_SetPaletteModified(TJPEGImage AObj, BOOL AValue);

BOOL
JPEGImage_GetTransparent(TJPEGImage AObj);

void
JPEGImage_SetTransparent(TJPEGImage AObj, BOOL AValue);

int32_t
JPEGImage_GetWidth(TJPEGImage AObj);

void
JPEGImage_SetWidth(TJPEGImage AObj, int32_t AValue);

void
JPEGImage_SetOnChange(TJPEGImage AObj, TNotifyEvent AEventData);

TClass
JPEGImage_StaticClassType();

// -------------------TGIFImage-------------------

TGIFImage
GIFImage_Create();

void
GIFImage_Free(TGIFImage AObj);

void
GIFImage_SaveToStream(TGIFImage AObj, TStream Stream);

void
GIFImage_LoadFromStream(TGIFImage AObj, TStream Stream);

void
GIFImage_Clear(TGIFImage AObj);

void
GIFImage_Assign(TGIFImage AObj, TObject Source);

BOOL
GIFImage_Equals(TGIFImage AObj, TObject Obj);

void
GIFImage_LoadFromFile(TGIFImage AObj, CChar char* Filename);

void
GIFImage_SaveToFile(TGIFImage AObj, CChar char* Filename);

void
GIFImage_SetSize(TGIFImage AObj, int32_t AWidth, int32_t AHeight);

char*
GIFImage_GetNamePath(TGIFImage AObj);

TClass
GIFImage_ClassType(TGIFImage AObj);

char*
GIFImage_ClassName(TGIFImage AObj);

int32_t
GIFImage_InstanceSize(TGIFImage AObj);

BOOL
GIFImage_InheritsFrom(TGIFImage AObj, TClass AClass);

int32_t
GIFImage_GetHashCode(TGIFImage AObj);

char*
GIFImage_ToString(TGIFImage AObj);

int32_t
GIFImage_GetBitsPerPixel(TGIFImage AObj);

BOOL
GIFImage_GetEmpty(TGIFImage AObj);

int32_t
GIFImage_GetHeight(TGIFImage AObj);

void
GIFImage_SetHeight(TGIFImage AObj, int32_t AValue);

BOOL
GIFImage_GetModified(TGIFImage AObj);

void
GIFImage_SetModified(TGIFImage AObj, BOOL AValue);

HPALETTE
GIFImage_GetPalette(TGIFImage AObj);

void
GIFImage_SetPalette(TGIFImage AObj, HPALETTE AValue);

BOOL
GIFImage_GetPaletteModified(TGIFImage AObj);

void
GIFImage_SetPaletteModified(TGIFImage AObj, BOOL AValue);

BOOL
GIFImage_GetTransparent(TGIFImage AObj);

int32_t
GIFImage_GetWidth(TGIFImage AObj);

void
GIFImage_SetWidth(TGIFImage AObj, int32_t AValue);

void
GIFImage_SetOnChange(TGIFImage AObj, TNotifyEvent AEventData);

TClass
GIFImage_StaticClassType();

// -------------------TActionList-------------------

TActionList
ActionList_Create(TComponent AOwner);

void
ActionList_Free(TActionList AObj);

TComponent
ActionList_FindComponent(TActionList AObj, CChar char* AName);

char*
ActionList_GetNamePath(TActionList AObj);

BOOL
ActionList_HasParent(TActionList AObj);

void
ActionList_Assign(TActionList AObj, TObject Source);

TClass
ActionList_ClassType(TActionList AObj);

char*
ActionList_ClassName(TActionList AObj);

int32_t
ActionList_InstanceSize(TActionList AObj);

BOOL
ActionList_InheritsFrom(TActionList AObj, TClass AClass);

BOOL
ActionList_Equals(TActionList AObj, TObject Obj);

int32_t
ActionList_GetHashCode(TActionList AObj);

char*
ActionList_ToString(TActionList AObj);

TImageList
ActionList_GetImages(TActionList AObj);

void
ActionList_SetImages(TActionList AObj, TImageList AValue);

TActionListState
ActionList_GetState(TActionList AObj);

void
ActionList_SetState(TActionList AObj, TActionListState AValue);

void
ActionList_SetOnChange(TActionList AObj, TNotifyEvent AEventData);

int32_t
ActionList_GetComponentCount(TActionList AObj);

int32_t
ActionList_GetComponentIndex(TActionList AObj);

void
ActionList_SetComponentIndex(TActionList AObj, int32_t AValue);

TComponent
ActionList_GetOwner(TActionList AObj);

char*
ActionList_GetName(TActionList AObj);

void
ActionList_SetName(TActionList AObj, CChar char* AValue);

intptr_t
ActionList_GetTag(TActionList AObj);

void
ActionList_SetTag(TActionList AObj, intptr_t AValue);

TComponent
ActionList_GetComponents(TActionList AObj, int32_t AIndex);

TClass
ActionList_StaticClassType();

// -------------------TAction-------------------

TAction
Action_Create(TComponent AOwner);

void
Action_Free(TAction AObj);

BOOL
Action_Execute(TAction AObj);

BOOL
Action_Update(TAction AObj);

BOOL
Action_HasParent(TAction AObj);

TComponent
Action_FindComponent(TAction AObj, CChar char* AName);

char*
Action_GetNamePath(TAction AObj);

void
Action_Assign(TAction AObj, TObject Source);

TClass
Action_ClassType(TAction AObj);

char*
Action_ClassName(TAction AObj);

int32_t
Action_InstanceSize(TAction AObj);

BOOL
Action_InheritsFrom(TAction AObj, TClass AClass);

BOOL
Action_Equals(TAction AObj, TObject Obj);

int32_t
Action_GetHashCode(TAction AObj);

char*
Action_ToString(TAction AObj);

BOOL
Action_GetAutoCheck(TAction AObj);

void
Action_SetAutoCheck(TAction AObj, BOOL AValue);

char*
Action_GetCaption(TAction AObj);

void
Action_SetCaption(TAction AObj, CChar char* AValue);

BOOL
Action_GetChecked(TAction AObj);

void
Action_SetChecked(TAction AObj, BOOL AValue);

BOOL
Action_GetEnabled(TAction AObj);

void
Action_SetEnabled(TAction AObj, BOOL AValue);

int32_t
Action_GetGroupIndex(TAction AObj);

void
Action_SetGroupIndex(TAction AObj, int32_t AValue);

char*
Action_GetHint(TAction AObj);

void
Action_SetHint(TAction AObj, CChar char* AValue);

int32_t
Action_GetImageIndex(TAction AObj);

void
Action_SetImageIndex(TAction AObj, int32_t AValue);

TShortCut
Action_GetShortCut(TAction AObj);

void
Action_SetShortCut(TAction AObj, TShortCut AValue);

BOOL
Action_GetVisible(TAction AObj);

void
Action_SetVisible(TAction AObj, BOOL AValue);

void
Action_SetOnExecute(TAction AObj, TNotifyEvent AEventData);

void
Action_SetOnUpdate(TAction AObj, TNotifyEvent AEventData);

int32_t
Action_GetIndex(TAction AObj);

void
Action_SetIndex(TAction AObj, int32_t AValue);

int32_t
Action_GetComponentCount(TAction AObj);

int32_t
Action_GetComponentIndex(TAction AObj);

void
Action_SetComponentIndex(TAction AObj, int32_t AValue);

TComponent
Action_GetOwner(TAction AObj);

char*
Action_GetName(TAction AObj);

void
Action_SetName(TAction AObj, CChar char* AValue);

intptr_t
Action_GetTag(TAction AObj);

void
Action_SetTag(TAction AObj, intptr_t AValue);

TComponent
Action_GetComponents(TAction AObj, int32_t AIndex);

TClass
Action_StaticClassType();

// -------------------TToolButton-------------------

TToolButton
ToolButton_Create(TComponent AOwner);

void
ToolButton_Free(TToolButton AObj);

BOOL
ToolButton_CheckMenuDropdown(TToolButton AObj);

void
ToolButton_Click(TToolButton AObj);

void
ToolButton_SetBounds(TToolButton AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ToolButton_BringToFront(TToolButton AObj);

TPoint
ToolButton_ClientToScreen(TToolButton AObj, TPoint Point);

TPoint
ToolButton_ClientToParent(TToolButton AObj, TPoint Point, TWinControl AParent);

BOOL
ToolButton_Dragging(TToolButton AObj);

BOOL
ToolButton_HasParent(TToolButton AObj);

void
ToolButton_Hide(TToolButton AObj);

void
ToolButton_Invalidate(TToolButton AObj);

intptr_t
ToolButton_Perform(TToolButton AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ToolButton_Refresh(TToolButton AObj);

void
ToolButton_Repaint(TToolButton AObj);

TPoint
ToolButton_ScreenToClient(TToolButton AObj, TPoint Point);

TPoint
ToolButton_ParentToClient(TToolButton AObj, TPoint Point, TWinControl AParent);

void
ToolButton_SendToBack(TToolButton AObj);

void
ToolButton_Show(TToolButton AObj);

void
ToolButton_Update(TToolButton AObj);

int32_t
ToolButton_GetTextBuf(TToolButton AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ToolButton_GetTextLen(TToolButton AObj);

void
ToolButton_SetTextBuf(TToolButton AObj, CChar char* Buffer);

TComponent
ToolButton_FindComponent(TToolButton AObj, CChar char* AName);

char*
ToolButton_GetNamePath(TToolButton AObj);

void
ToolButton_Assign(TToolButton AObj, TObject Source);

TClass
ToolButton_ClassType(TToolButton AObj);

char*
ToolButton_ClassName(TToolButton AObj);

int32_t
ToolButton_InstanceSize(TToolButton AObj);

BOOL
ToolButton_InheritsFrom(TToolButton AObj, TClass AClass);

BOOL
ToolButton_Equals(TToolButton AObj, TObject Obj);

int32_t
ToolButton_GetHashCode(TToolButton AObj);

char*
ToolButton_ToString(TToolButton AObj);

void
ToolButton_AnchorToNeighbour(TToolButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ToolButton_AnchorParallel(TToolButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ToolButton_AnchorHorizontalCenterTo(TToolButton AObj, TControl ASibling);

void
ToolButton_AnchorVerticalCenterTo(TToolButton AObj, TControl ASibling);

void
ToolButton_AnchorSame(TToolButton AObj, TAnchorKind ASide, TControl ASibling);

void
ToolButton_AnchorAsAlign(TToolButton AObj, TAlign ATheAlign, int32_t ASpace);

void
ToolButton_AnchorClient(TToolButton AObj, int32_t ASpace);

int32_t
ToolButton_ScaleDesignToForm(TToolButton AObj, int32_t ASize);

int32_t
ToolButton_ScaleFormToDesign(TToolButton AObj, int32_t ASize);

int32_t
ToolButton_Scale96ToForm(TToolButton AObj, int32_t ASize);

int32_t
ToolButton_ScaleFormTo96(TToolButton AObj, int32_t ASize);

int32_t
ToolButton_Scale96ToFont(TToolButton AObj, int32_t ASize);

int32_t
ToolButton_ScaleFontTo96(TToolButton AObj, int32_t ASize);

int32_t
ToolButton_ScaleScreenToFont(TToolButton AObj, int32_t ASize);

int32_t
ToolButton_ScaleFontToScreen(TToolButton AObj, int32_t ASize);

int32_t
ToolButton_Scale96ToScreen(TToolButton AObj, int32_t ASize);

int32_t
ToolButton_ScaleScreenTo96(TToolButton AObj, int32_t ASize);

void
ToolButton_AutoAdjustLayout(TToolButton AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ToolButton_FixDesignFontsPPI(TToolButton AObj, int32_t ADesignTimePPI);

void
ToolButton_ScaleFontsPPI(TToolButton AObj, int32_t AToPPI, double AProportion);

int32_t
ToolButton_GetIndex(TToolButton AObj);

TAction
ToolButton_GetAction(TToolButton AObj);

void
ToolButton_SetAction(TToolButton AObj, TAction AValue);

BOOL
ToolButton_GetAllowAllUp(TToolButton AObj);

void
ToolButton_SetAllowAllUp(TToolButton AObj, BOOL AValue);

BOOL
ToolButton_GetAutoSize(TToolButton AObj);

void
ToolButton_SetAutoSize(TToolButton AObj, BOOL AValue);

char*
ToolButton_GetCaption(TToolButton AObj);

void
ToolButton_SetCaption(TToolButton AObj, CChar char* AValue);

BOOL
ToolButton_GetDown(TToolButton AObj);

void
ToolButton_SetDown(TToolButton AObj, BOOL AValue);

TCursor
ToolButton_GetDragCursor(TToolButton AObj);

void
ToolButton_SetDragCursor(TToolButton AObj, TCursor AValue);

TDragKind
ToolButton_GetDragKind(TToolButton AObj);

void
ToolButton_SetDragKind(TToolButton AObj, TDragKind AValue);

TDragMode
ToolButton_GetDragMode(TToolButton AObj);

void
ToolButton_SetDragMode(TToolButton AObj, TDragMode AValue);

TPopupMenu
ToolButton_GetDropdownMenu(TToolButton AObj);

void
ToolButton_SetDropdownMenu(TToolButton AObj, TPopupMenu AValue);

BOOL
ToolButton_GetEnabled(TToolButton AObj);

void
ToolButton_SetEnabled(TToolButton AObj, BOOL AValue);

BOOL
ToolButton_GetGrouped(TToolButton AObj);

void
ToolButton_SetGrouped(TToolButton AObj, BOOL AValue);

int32_t
ToolButton_GetHeight(TToolButton AObj);

void
ToolButton_SetHeight(TToolButton AObj, int32_t AValue);

int32_t
ToolButton_GetImageIndex(TToolButton AObj);

void
ToolButton_SetImageIndex(TToolButton AObj, int32_t AValue);

BOOL
ToolButton_GetIndeterminate(TToolButton AObj);

void
ToolButton_SetIndeterminate(TToolButton AObj, BOOL AValue);

BOOL
ToolButton_GetMarked(TToolButton AObj);

void
ToolButton_SetMarked(TToolButton AObj, BOOL AValue);

BOOL
ToolButton_GetParentShowHint(TToolButton AObj);

void
ToolButton_SetParentShowHint(TToolButton AObj, BOOL AValue);

TPopupMenu
ToolButton_GetPopupMenu(TToolButton AObj);

void
ToolButton_SetPopupMenu(TToolButton AObj, TPopupMenu AValue);

BOOL
ToolButton_GetWrap(TToolButton AObj);

void
ToolButton_SetWrap(TToolButton AObj, BOOL AValue);

BOOL
ToolButton_GetShowHint(TToolButton AObj);

void
ToolButton_SetShowHint(TToolButton AObj, BOOL AValue);

TToolButtonStyle
ToolButton_GetStyle(TToolButton AObj);

void
ToolButton_SetStyle(TToolButton AObj, TToolButtonStyle AValue);

BOOL
ToolButton_GetVisible(TToolButton AObj);

void
ToolButton_SetVisible(TToolButton AObj, BOOL AValue);

int32_t
ToolButton_GetWidth(TToolButton AObj);

void
ToolButton_SetWidth(TToolButton AObj, int32_t AValue);

void
ToolButton_SetOnClick(TToolButton AObj, TNotifyEvent AEventData);

void
ToolButton_SetOnContextPopup(TToolButton AObj, TContextPopupEvent AEventData);

void
ToolButton_SetOnDragDrop(TToolButton AObj, TDragDropEvent AEventData);

void
ToolButton_SetOnDragOver(TToolButton AObj, TDragOverEvent AEventData);

void
ToolButton_SetOnEndDock(TToolButton AObj, TEndDragEvent AEventData);

void
ToolButton_SetOnEndDrag(TToolButton AObj, TEndDragEvent AEventData);

void
ToolButton_SetOnMouseDown(TToolButton AObj, TMouseEvent AEventData);

void
ToolButton_SetOnMouseEnter(TToolButton AObj, TNotifyEvent AEventData);

void
ToolButton_SetOnMouseLeave(TToolButton AObj, TNotifyEvent AEventData);

void
ToolButton_SetOnMouseMove(TToolButton AObj, TMouseMoveEvent AEventData);

void
ToolButton_SetOnMouseUp(TToolButton AObj, TMouseEvent AEventData);

void
ToolButton_SetOnStartDock(TToolButton AObj, TStartDockEvent AEventData);

TAlign
ToolButton_GetAlign(TToolButton AObj);

void
ToolButton_SetAlign(TToolButton AObj, TAlign AValue);

TAnchors
ToolButton_GetAnchors(TToolButton AObj);

void
ToolButton_SetAnchors(TToolButton AObj, TAnchors AValue);

TBiDiMode
ToolButton_GetBiDiMode(TToolButton AObj);

void
ToolButton_SetBiDiMode(TToolButton AObj, TBiDiMode AValue);

TRect
ToolButton_GetBoundsRect(TToolButton AObj);

void
ToolButton_SetBoundsRect(TToolButton AObj, TRect AValue);

int32_t
ToolButton_GetClientHeight(TToolButton AObj);

void
ToolButton_SetClientHeight(TToolButton AObj, int32_t AValue);

TPoint
ToolButton_GetClientOrigin(TToolButton AObj);

TRect
ToolButton_GetClientRect(TToolButton AObj);

int32_t
ToolButton_GetClientWidth(TToolButton AObj);

void
ToolButton_SetClientWidth(TToolButton AObj, int32_t AValue);

TSizeConstraints
ToolButton_GetConstraints(TToolButton AObj);

void
ToolButton_SetConstraints(TToolButton AObj, TSizeConstraints AValue);

TControlState
ToolButton_GetControlState(TToolButton AObj);

void
ToolButton_SetControlState(TToolButton AObj, TControlState AValue);

TControlStyle
ToolButton_GetControlStyle(TToolButton AObj);

void
ToolButton_SetControlStyle(TToolButton AObj, TControlStyle AValue);

BOOL
ToolButton_GetFloating(TToolButton AObj);

TWinControl
ToolButton_GetParent(TToolButton AObj);

void
ToolButton_SetParent(TToolButton AObj, TWinControl AValue);

int32_t
ToolButton_GetLeft(TToolButton AObj);

void
ToolButton_SetLeft(TToolButton AObj, int32_t AValue);

int32_t
ToolButton_GetTop(TToolButton AObj);

void
ToolButton_SetTop(TToolButton AObj, int32_t AValue);

TCursor
ToolButton_GetCursor(TToolButton AObj);

void
ToolButton_SetCursor(TToolButton AObj, TCursor AValue);

char*
ToolButton_GetHint(TToolButton AObj);

void
ToolButton_SetHint(TToolButton AObj, CChar char* AValue);

int32_t
ToolButton_GetComponentCount(TToolButton AObj);

int32_t
ToolButton_GetComponentIndex(TToolButton AObj);

void
ToolButton_SetComponentIndex(TToolButton AObj, int32_t AValue);

TComponent
ToolButton_GetOwner(TToolButton AObj);

char*
ToolButton_GetName(TToolButton AObj);

void
ToolButton_SetName(TToolButton AObj, CChar char* AValue);

intptr_t
ToolButton_GetTag(TToolButton AObj);

void
ToolButton_SetTag(TToolButton AObj, intptr_t AValue);

TAnchorSide
ToolButton_GetAnchorSideLeft(TToolButton AObj);

void
ToolButton_SetAnchorSideLeft(TToolButton AObj, TAnchorSide AValue);

TAnchorSide
ToolButton_GetAnchorSideTop(TToolButton AObj);

void
ToolButton_SetAnchorSideTop(TToolButton AObj, TAnchorSide AValue);

TAnchorSide
ToolButton_GetAnchorSideRight(TToolButton AObj);

void
ToolButton_SetAnchorSideRight(TToolButton AObj, TAnchorSide AValue);

TAnchorSide
ToolButton_GetAnchorSideBottom(TToolButton AObj);

void
ToolButton_SetAnchorSideBottom(TToolButton AObj, TAnchorSide AValue);

TControlBorderSpacing
ToolButton_GetBorderSpacing(TToolButton AObj);

void
ToolButton_SetBorderSpacing(TToolButton AObj, TControlBorderSpacing AValue);

TComponent
ToolButton_GetComponents(TToolButton AObj, int32_t AIndex);

TAnchorSide
ToolButton_GetAnchorSide(TToolButton AObj, TAnchorKind AKind);

TClass
ToolButton_StaticClassType();

// -------------------TIniFile-------------------

TIniFile
IniFile_Create(CChar char* AFileName);

void
IniFile_Free(TIniFile AObj);

char*
IniFile_ReadString(TIniFile AObj, CChar char* Section, CChar char* Ident, CChar char* Default);

void
IniFile_WriteString(TIniFile AObj, CChar char* Section, CChar char* Ident, CChar char* Value);

void
IniFile_ReadSections(TIniFile AObj, TStrings Strings);

void
IniFile_ReadSectionValues(TIniFile AObj, CChar char* Section, TStrings Strings);

void
IniFile_EraseSection(TIniFile AObj, CChar char* Section);

void
IniFile_DeleteKey(TIniFile AObj, CChar char* Section, CChar char* Ident);

void
IniFile_UpdateFile(TIniFile AObj);

BOOL
IniFile_SectionExists(TIniFile AObj, CChar char* Section);

int32_t
IniFile_ReadInteger(TIniFile AObj, CChar char* Section, CChar char* Ident, int32_t Default);

void
IniFile_WriteInteger(TIniFile AObj, CChar char* Section, CChar char* Ident, int32_t Value);

BOOL
IniFile_ReadBool(TIniFile AObj, CChar char* Section, CChar char* Ident, BOOL Default);

void
IniFile_WriteBool(TIniFile AObj, CChar char* Section, CChar char* Ident, BOOL Value);

uint32_t
IniFile_ReadDate(TIniFile AObj, CChar char* Section, CChar char* Name, uint32_t Default);

uint32_t
IniFile_ReadDateTime(TIniFile AObj, CChar char* Section, CChar char* Name, uint32_t Default);

double
IniFile_ReadFloat(TIniFile AObj, CChar char* Section, CChar char* Name, double Default);

uint32_t
IniFile_ReadTime(TIniFile AObj, CChar char* Section, CChar char* Name, uint32_t Default);

void
IniFile_WriteDate(TIniFile AObj, CChar char* Section, CChar char* Name, uint32_t Value);

void
IniFile_WriteDateTime(TIniFile AObj, CChar char* Section, CChar char* Name, uint32_t Value);

void
IniFile_WriteFloat(TIniFile AObj, CChar char* Section, CChar char* Name, double Value);

void
IniFile_WriteTime(TIniFile AObj, CChar char* Section, CChar char* Name, uint32_t Value);

BOOL
IniFile_ValueExists(TIniFile AObj, CChar char* Section, CChar char* Ident);

TClass
IniFile_ClassType(TIniFile AObj);

char*
IniFile_ClassName(TIniFile AObj);

int32_t
IniFile_InstanceSize(TIniFile AObj);

BOOL
IniFile_InheritsFrom(TIniFile AObj, TClass AClass);

BOOL
IniFile_Equals(TIniFile AObj, TObject Obj);

int32_t
IniFile_GetHashCode(TIniFile AObj);

char*
IniFile_ToString(TIniFile AObj);

char*
IniFile_GetFileName(TIniFile AObj);

TClass
IniFile_StaticClassType();

// -------------------TRegistry-------------------

TRegistry
Registry_Create(uint32_t AAccess);

void
Registry_Free(TRegistry AObj);

void
Registry_CloseKey(TRegistry AObj);

BOOL
Registry_CreateKey(TRegistry AObj, CChar char* Key);

BOOL
Registry_DeleteKey(TRegistry AObj, CChar char* Key);

BOOL
Registry_DeleteValue(TRegistry AObj, CChar char* Name);

BOOL
Registry_HasSubKeys(TRegistry AObj);

BOOL
Registry_KeyExists(TRegistry AObj, CChar char* Key);

BOOL
Registry_LoadKey(TRegistry AObj, CChar char* Key, CChar char* FileName);

void
Registry_MoveKey(TRegistry AObj, CChar char* OldName, CChar char* NewName, BOOL Delete);

BOOL
Registry_OpenKey(TRegistry AObj, CChar char* Key, BOOL CanCreate);

BOOL
Registry_OpenKeyReadOnly(TRegistry AObj, CChar char* Key);

BOOL
Registry_ReadBool(TRegistry AObj, CChar char* Name);

uint32_t
Registry_ReadDate(TRegistry AObj, CChar char* Name);

uint32_t
Registry_ReadDateTime(TRegistry AObj, CChar char* Name);

double
Registry_ReadFloat(TRegistry AObj, CChar char* Name);

int32_t
Registry_ReadInteger(TRegistry AObj, CChar char* Name);

char*
Registry_ReadString(TRegistry AObj, CChar char* Name);

uint32_t
Registry_ReadTime(TRegistry AObj, CChar char* Name);

BOOL
Registry_RegistryConnect(TRegistry AObj, CChar char* UNCName);

void
Registry_RenameValue(TRegistry AObj, CChar char* OldName, CChar char* NewName);

BOOL
Registry_ReplaceKey(TRegistry AObj, CChar char* Key, CChar char* FileName, CChar char* BackUpFileName);

BOOL
Registry_RestoreKey(TRegistry AObj, CChar char* Key, CChar char* FileName);

BOOL
Registry_SaveKey(TRegistry AObj, CChar char* Key, CChar char* FileName);

BOOL
Registry_UnLoadKey(TRegistry AObj, CChar char* Key);

BOOL
Registry_ValueExists(TRegistry AObj, CChar char* Name);

void
Registry_WriteBool(TRegistry AObj, CChar char* Name, BOOL Value);

void
Registry_WriteDate(TRegistry AObj, CChar char* Name, uint32_t Value);

void
Registry_WriteDateTime(TRegistry AObj, CChar char* Name, uint32_t Value);

void
Registry_WriteFloat(TRegistry AObj, CChar char* Name, double Value);

void
Registry_WriteInteger(TRegistry AObj, CChar char* Name, int32_t Value);

void
Registry_WriteString(TRegistry AObj, CChar char* Name, CChar char* Value);

void
Registry_WriteExpandString(TRegistry AObj, CChar char* Name, CChar char* Value);

void
Registry_WriteTime(TRegistry AObj, CChar char* Name, uint32_t Value);

TClass
Registry_ClassType(TRegistry AObj);

char*
Registry_ClassName(TRegistry AObj);

int32_t
Registry_InstanceSize(TRegistry AObj);

BOOL
Registry_InheritsFrom(TRegistry AObj, TClass AClass);

BOOL
Registry_Equals(TRegistry AObj, TObject Obj);

int32_t
Registry_GetHashCode(TRegistry AObj);

char*
Registry_ToString(TRegistry AObj);

HKEY
Registry_GetCurrentKey(TRegistry AObj);

char*
Registry_GetCurrentPath(TRegistry AObj);

BOOL
Registry_GetLazyWrite(TRegistry AObj);

void
Registry_SetLazyWrite(TRegistry AObj, BOOL AValue);

int32_t
Registry_GetLastError(TRegistry AObj);

char*
Registry_GetLastErrorMsg(TRegistry AObj);

HKEY
Registry_GetRootKey(TRegistry AObj);

void
Registry_SetRootKey(TRegistry AObj, HKEY AValue);

uint32_t
Registry_GetAccess(TRegistry AObj);

void
Registry_SetAccess(TRegistry AObj, uint32_t AValue);

TClass
Registry_StaticClassType();

// -------------------TClipboard-------------------

TClipboard
Clipboard_Create();

void
Clipboard_Free(TClipboard AObj);

TClipboardFormat
Clipboard_FindPictureFormatID(TClipboard AObj);

TClipboardFormat
Clipboard_FindFormatID(TClipboard AObj, CChar char* FormatName);

void
Clipboard_SupportedFormats(TClipboard AObj, TStrings List);

BOOL
Clipboard_HasFormatName(TClipboard AObj, CChar char* FormatName);

BOOL
Clipboard_HasPictureFormat(TClipboard AObj);

void
Clipboard_SetAsHtml(TClipboard AObj, CChar char* Html, CChar char* PlainText);

BOOL
Clipboard_GetFormat(TClipboard AObj, TClipboardFormat FormatID, TStream Stream);

void
Clipboard_Assign(TClipboard AObj, TObject Source);

void
Clipboard_Clear(TClipboard AObj);

void
Clipboard_Close(TClipboard AObj);

void
Clipboard_Open(TClipboard AObj);

void
Clipboard_SetTextBuf(TClipboard AObj, CChar char* Buffer);

char*
Clipboard_GetNamePath(TClipboard AObj);

TClass
Clipboard_ClassType(TClipboard AObj);

char*
Clipboard_ClassName(TClipboard AObj);

int32_t
Clipboard_InstanceSize(TClipboard AObj);

BOOL
Clipboard_InheritsFrom(TClipboard AObj, TClass AClass);

BOOL
Clipboard_Equals(TClipboard AObj, TObject Obj);

int32_t
Clipboard_GetHashCode(TClipboard AObj);

char*
Clipboard_ToString(TClipboard AObj);

int32_t
Clipboard_GetFormatCount(TClipboard AObj);

TClipboardFormat
Clipboard_GetFormats(TClipboard AObj, int32_t Index);

TClass
Clipboard_StaticClassType();

BOOL
Clipboard_HasFormat(TClipboard AObj, TClipboardFormat AFormatID);

int32_t
Clipboard_GetTextBuf(TClipboard AObj, CChar char* Buffer, int32_t BufSize);

char*
Clipboard_GetAsText(TClipboard AObj);

void
Clipboard_SetAsText(TClipboard AObj, CChar char* AValue);

char*
Clipboard_GetAsHtml(TClipboard AObj, BOOL ExtractFragmentOnly);

// -------------------TMonitor-------------------

TMonitor
Monitor_Create();

void
Monitor_Free(TMonitor AObj);

TClass
Monitor_ClassType(TMonitor AObj);

char*
Monitor_ClassName(TMonitor AObj);

int32_t
Monitor_InstanceSize(TMonitor AObj);

BOOL
Monitor_InheritsFrom(TMonitor AObj, TClass AClass);

BOOL
Monitor_Equals(TMonitor AObj, TObject Obj);

int32_t
Monitor_GetHashCode(TMonitor AObj);

char*
Monitor_ToString(TMonitor AObj);

HMONITOR
Monitor_GetHandle(TMonitor AObj);

int32_t
Monitor_GetMonitorNum(TMonitor AObj);

int32_t
Monitor_GetLeft(TMonitor AObj);

int32_t
Monitor_GetHeight(TMonitor AObj);

int32_t
Monitor_GetTop(TMonitor AObj);

int32_t
Monitor_GetWidth(TMonitor AObj);

TRect
Monitor_GetBoundsRect(TMonitor AObj);

TRect
Monitor_GetWorkareaRect(TMonitor AObj);

BOOL
Monitor_GetPrimary(TMonitor AObj);

int32_t
Monitor_GetPixelsPerInch(TMonitor AObj);

TClass
Monitor_StaticClassType();

// -------------------TPaintBox-------------------

TPaintBox
PaintBox_Create(TComponent AOwner);

void
PaintBox_Free(TPaintBox AObj);

void
PaintBox_BringToFront(TPaintBox AObj);

TPoint
PaintBox_ClientToScreen(TPaintBox AObj, TPoint Point);

TPoint
PaintBox_ClientToParent(TPaintBox AObj, TPoint Point, TWinControl AParent);

BOOL
PaintBox_Dragging(TPaintBox AObj);

BOOL
PaintBox_HasParent(TPaintBox AObj);

void
PaintBox_Hide(TPaintBox AObj);

void
PaintBox_Invalidate(TPaintBox AObj);

intptr_t
PaintBox_Perform(TPaintBox AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
PaintBox_Refresh(TPaintBox AObj);

void
PaintBox_Repaint(TPaintBox AObj);

TPoint
PaintBox_ScreenToClient(TPaintBox AObj, TPoint Point);

TPoint
PaintBox_ParentToClient(TPaintBox AObj, TPoint Point, TWinControl AParent);

void
PaintBox_SendToBack(TPaintBox AObj);

void
PaintBox_SetBounds(TPaintBox AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
PaintBox_Show(TPaintBox AObj);

void
PaintBox_Update(TPaintBox AObj);

int32_t
PaintBox_GetTextBuf(TPaintBox AObj, CChar char* Buffer, int32_t BufSize);

int32_t
PaintBox_GetTextLen(TPaintBox AObj);

void
PaintBox_SetTextBuf(TPaintBox AObj, CChar char* Buffer);

TComponent
PaintBox_FindComponent(TPaintBox AObj, CChar char* AName);

char*
PaintBox_GetNamePath(TPaintBox AObj);

void
PaintBox_Assign(TPaintBox AObj, TObject Source);

TClass
PaintBox_ClassType(TPaintBox AObj);

char*
PaintBox_ClassName(TPaintBox AObj);

int32_t
PaintBox_InstanceSize(TPaintBox AObj);

BOOL
PaintBox_InheritsFrom(TPaintBox AObj, TClass AClass);

BOOL
PaintBox_Equals(TPaintBox AObj, TObject Obj);

int32_t
PaintBox_GetHashCode(TPaintBox AObj);

char*
PaintBox_ToString(TPaintBox AObj);

void
PaintBox_AnchorToNeighbour(TPaintBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
PaintBox_AnchorParallel(TPaintBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
PaintBox_AnchorHorizontalCenterTo(TPaintBox AObj, TControl ASibling);

void
PaintBox_AnchorVerticalCenterTo(TPaintBox AObj, TControl ASibling);

void
PaintBox_AnchorSame(TPaintBox AObj, TAnchorKind ASide, TControl ASibling);

void
PaintBox_AnchorAsAlign(TPaintBox AObj, TAlign ATheAlign, int32_t ASpace);

void
PaintBox_AnchorClient(TPaintBox AObj, int32_t ASpace);

int32_t
PaintBox_ScaleDesignToForm(TPaintBox AObj, int32_t ASize);

int32_t
PaintBox_ScaleFormToDesign(TPaintBox AObj, int32_t ASize);

int32_t
PaintBox_Scale96ToForm(TPaintBox AObj, int32_t ASize);

int32_t
PaintBox_ScaleFormTo96(TPaintBox AObj, int32_t ASize);

int32_t
PaintBox_Scale96ToFont(TPaintBox AObj, int32_t ASize);

int32_t
PaintBox_ScaleFontTo96(TPaintBox AObj, int32_t ASize);

int32_t
PaintBox_ScaleScreenToFont(TPaintBox AObj, int32_t ASize);

int32_t
PaintBox_ScaleFontToScreen(TPaintBox AObj, int32_t ASize);

int32_t
PaintBox_Scale96ToScreen(TPaintBox AObj, int32_t ASize);

int32_t
PaintBox_ScaleScreenTo96(TPaintBox AObj, int32_t ASize);

void
PaintBox_AutoAdjustLayout(TPaintBox AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
PaintBox_FixDesignFontsPPI(TPaintBox AObj, int32_t ADesignTimePPI);

void
PaintBox_ScaleFontsPPI(TPaintBox AObj, int32_t AToPPI, double AProportion);

TCanvas
PaintBox_GetCanvas(TPaintBox AObj);

TAlign
PaintBox_GetAlign(TPaintBox AObj);

void
PaintBox_SetAlign(TPaintBox AObj, TAlign AValue);

TAnchors
PaintBox_GetAnchors(TPaintBox AObj);

void
PaintBox_SetAnchors(TPaintBox AObj, TAnchors AValue);

TColor
PaintBox_GetColor(TPaintBox AObj);

void
PaintBox_SetColor(TPaintBox AObj, TColor AValue);

TSizeConstraints
PaintBox_GetConstraints(TPaintBox AObj);

void
PaintBox_SetConstraints(TPaintBox AObj, TSizeConstraints AValue);

TCursor
PaintBox_GetDragCursor(TPaintBox AObj);

void
PaintBox_SetDragCursor(TPaintBox AObj, TCursor AValue);

TDragMode
PaintBox_GetDragMode(TPaintBox AObj);

void
PaintBox_SetDragMode(TPaintBox AObj, TDragMode AValue);

BOOL
PaintBox_GetEnabled(TPaintBox AObj);

void
PaintBox_SetEnabled(TPaintBox AObj, BOOL AValue);

TFont
PaintBox_GetFont(TPaintBox AObj);

void
PaintBox_SetFont(TPaintBox AObj, TFont AValue);

BOOL
PaintBox_GetParentColor(TPaintBox AObj);

void
PaintBox_SetParentColor(TPaintBox AObj, BOOL AValue);

BOOL
PaintBox_GetParentFont(TPaintBox AObj);

void
PaintBox_SetParentFont(TPaintBox AObj, BOOL AValue);

BOOL
PaintBox_GetParentShowHint(TPaintBox AObj);

void
PaintBox_SetParentShowHint(TPaintBox AObj, BOOL AValue);

TPopupMenu
PaintBox_GetPopupMenu(TPaintBox AObj);

void
PaintBox_SetPopupMenu(TPaintBox AObj, TPopupMenu AValue);

BOOL
PaintBox_GetShowHint(TPaintBox AObj);

void
PaintBox_SetShowHint(TPaintBox AObj, BOOL AValue);

BOOL
PaintBox_GetVisible(TPaintBox AObj);

void
PaintBox_SetVisible(TPaintBox AObj, BOOL AValue);

void
PaintBox_SetOnClick(TPaintBox AObj, TNotifyEvent AEventData);

void
PaintBox_SetOnDblClick(TPaintBox AObj, TNotifyEvent AEventData);

void
PaintBox_SetOnDragDrop(TPaintBox AObj, TDragDropEvent AEventData);

void
PaintBox_SetOnDragOver(TPaintBox AObj, TDragOverEvent AEventData);

void
PaintBox_SetOnEndDrag(TPaintBox AObj, TEndDragEvent AEventData);

void
PaintBox_SetOnMouseDown(TPaintBox AObj, TMouseEvent AEventData);

void
PaintBox_SetOnMouseEnter(TPaintBox AObj, TNotifyEvent AEventData);

void
PaintBox_SetOnMouseLeave(TPaintBox AObj, TNotifyEvent AEventData);

void
PaintBox_SetOnMouseMove(TPaintBox AObj, TMouseMoveEvent AEventData);

void
PaintBox_SetOnMouseUp(TPaintBox AObj, TMouseEvent AEventData);

void
PaintBox_SetOnPaint(TPaintBox AObj, TNotifyEvent AEventData);

TAction
PaintBox_GetAction(TPaintBox AObj);

void
PaintBox_SetAction(TPaintBox AObj, TAction AValue);

TBiDiMode
PaintBox_GetBiDiMode(TPaintBox AObj);

void
PaintBox_SetBiDiMode(TPaintBox AObj, TBiDiMode AValue);

TRect
PaintBox_GetBoundsRect(TPaintBox AObj);

void
PaintBox_SetBoundsRect(TPaintBox AObj, TRect AValue);

int32_t
PaintBox_GetClientHeight(TPaintBox AObj);

void
PaintBox_SetClientHeight(TPaintBox AObj, int32_t AValue);

TPoint
PaintBox_GetClientOrigin(TPaintBox AObj);

TRect
PaintBox_GetClientRect(TPaintBox AObj);

int32_t
PaintBox_GetClientWidth(TPaintBox AObj);

void
PaintBox_SetClientWidth(TPaintBox AObj, int32_t AValue);

TControlState
PaintBox_GetControlState(TPaintBox AObj);

void
PaintBox_SetControlState(TPaintBox AObj, TControlState AValue);

TControlStyle
PaintBox_GetControlStyle(TPaintBox AObj);

void
PaintBox_SetControlStyle(TPaintBox AObj, TControlStyle AValue);

BOOL
PaintBox_GetFloating(TPaintBox AObj);

TWinControl
PaintBox_GetParent(TPaintBox AObj);

void
PaintBox_SetParent(TPaintBox AObj, TWinControl AValue);

int32_t
PaintBox_GetLeft(TPaintBox AObj);

void
PaintBox_SetLeft(TPaintBox AObj, int32_t AValue);

int32_t
PaintBox_GetTop(TPaintBox AObj);

void
PaintBox_SetTop(TPaintBox AObj, int32_t AValue);

int32_t
PaintBox_GetWidth(TPaintBox AObj);

void
PaintBox_SetWidth(TPaintBox AObj, int32_t AValue);

int32_t
PaintBox_GetHeight(TPaintBox AObj);

void
PaintBox_SetHeight(TPaintBox AObj, int32_t AValue);

TCursor
PaintBox_GetCursor(TPaintBox AObj);

void
PaintBox_SetCursor(TPaintBox AObj, TCursor AValue);

char*
PaintBox_GetHint(TPaintBox AObj);

void
PaintBox_SetHint(TPaintBox AObj, CChar char* AValue);

int32_t
PaintBox_GetComponentCount(TPaintBox AObj);

int32_t
PaintBox_GetComponentIndex(TPaintBox AObj);

void
PaintBox_SetComponentIndex(TPaintBox AObj, int32_t AValue);

TComponent
PaintBox_GetOwner(TPaintBox AObj);

char*
PaintBox_GetName(TPaintBox AObj);

void
PaintBox_SetName(TPaintBox AObj, CChar char* AValue);

intptr_t
PaintBox_GetTag(TPaintBox AObj);

void
PaintBox_SetTag(TPaintBox AObj, intptr_t AValue);

TAnchorSide
PaintBox_GetAnchorSideLeft(TPaintBox AObj);

void
PaintBox_SetAnchorSideLeft(TPaintBox AObj, TAnchorSide AValue);

TAnchorSide
PaintBox_GetAnchorSideTop(TPaintBox AObj);

void
PaintBox_SetAnchorSideTop(TPaintBox AObj, TAnchorSide AValue);

TAnchorSide
PaintBox_GetAnchorSideRight(TPaintBox AObj);

void
PaintBox_SetAnchorSideRight(TPaintBox AObj, TAnchorSide AValue);

TAnchorSide
PaintBox_GetAnchorSideBottom(TPaintBox AObj);

void
PaintBox_SetAnchorSideBottom(TPaintBox AObj, TAnchorSide AValue);

TControlBorderSpacing
PaintBox_GetBorderSpacing(TPaintBox AObj);

void
PaintBox_SetBorderSpacing(TPaintBox AObj, TControlBorderSpacing AValue);

TComponent
PaintBox_GetComponents(TPaintBox AObj, int32_t AIndex);

TAnchorSide
PaintBox_GetAnchorSide(TPaintBox AObj, TAnchorKind AKind);

TClass
PaintBox_StaticClassType();

// -------------------TTimer-------------------

TTimer
Timer_Create(TComponent AOwner);

void
Timer_Free(TTimer AObj);

TComponent
Timer_FindComponent(TTimer AObj, CChar char* AName);

char*
Timer_GetNamePath(TTimer AObj);

BOOL
Timer_HasParent(TTimer AObj);

void
Timer_Assign(TTimer AObj, TObject Source);

TClass
Timer_ClassType(TTimer AObj);

char*
Timer_ClassName(TTimer AObj);

int32_t
Timer_InstanceSize(TTimer AObj);

BOOL
Timer_InheritsFrom(TTimer AObj, TClass AClass);

BOOL
Timer_Equals(TTimer AObj, TObject Obj);

int32_t
Timer_GetHashCode(TTimer AObj);

char*
Timer_ToString(TTimer AObj);

BOOL
Timer_GetEnabled(TTimer AObj);

void
Timer_SetEnabled(TTimer AObj, BOOL AValue);

uint32_t
Timer_GetInterval(TTimer AObj);

void
Timer_SetInterval(TTimer AObj, uint32_t AValue);

void
Timer_SetOnTimer(TTimer AObj, TNotifyEvent AEventData);

int32_t
Timer_GetComponentCount(TTimer AObj);

int32_t
Timer_GetComponentIndex(TTimer AObj);

void
Timer_SetComponentIndex(TTimer AObj, int32_t AValue);

TComponent
Timer_GetOwner(TTimer AObj);

char*
Timer_GetName(TTimer AObj);

void
Timer_SetName(TTimer AObj, CChar char* AValue);

intptr_t
Timer_GetTag(TTimer AObj);

void
Timer_SetTag(TTimer AObj, intptr_t AValue);

TComponent
Timer_GetComponents(TTimer AObj, int32_t AIndex);

TClass
Timer_StaticClassType();

// -------------------TList-------------------

TList
List_Create();

void
List_Free(TList AObj);

int32_t
List_Add(TList AObj, void* Item);

void
List_Clear(TList AObj);

void
List_Delete(TList AObj, int32_t Index);

void
List_Exchange(TList AObj, int32_t Index1, int32_t Index2);

TList
List_Expand(TList AObj);

int32_t
List_IndexOf(TList AObj, void* Item);

void
List_Insert(TList AObj, int32_t Index, void* Item);

void
List_Move(TList AObj, int32_t CurIndex, int32_t NewIndex);

TClass
List_ClassType(TList AObj);

char*
List_ClassName(TList AObj);

int32_t
List_InstanceSize(TList AObj);

BOOL
List_InheritsFrom(TList AObj, TClass AClass);

BOOL
List_Equals(TList AObj, TObject Obj);

int32_t
List_GetHashCode(TList AObj);

char*
List_ToString(TList AObj);

int32_t
List_GetCapacity(TList AObj);

void
List_SetCapacity(TList AObj, int32_t AValue);

int32_t
List_GetCount(TList AObj);

void
List_SetCount(TList AObj, int32_t AValue);

void*
List_GetList(TList AObj);

void*
List_GetItems(TList AObj, int32_t Index);

void
List_SetItems(TList AObj, int32_t Index, void* AValue);

TClass
List_StaticClassType();

// -------------------TForm-------------------

TForm
Form_Create(TComponent AOwner);

void
Form_Free(TForm AObj);

void
Form_InheritedWndProc(TForm AObj, TMessage* TheMessage);

void
Form_EnabledMaximize(TForm AObj, BOOL AValue);

void
Form_EnabledMinimize(TForm AObj, BOOL AValue);

void
Form_EnabledSystemMenu(TForm AObj, BOOL AValue);

void
Form_ScaleForCurrentDpi(TForm AObj);

void
Form_ScaleForPPI(TForm AObj, int32_t ANewPPI);

void
Form_ScreenCenter(TForm AObj);

void
Form_WorkAreaCenter(TForm AObj);

void
Form_Cascade(TForm AObj);

void
Form_Close(TForm AObj);

void
Form_FocusControl(TForm AObj, TWinControl Control);

void
Form_Hide(TForm AObj);

void
Form_SetFocus(TForm AObj);

void
Form_Show(TForm AObj);

int32_t
Form_ShowModal(TForm AObj);

void
Form_ScrollInView(TForm AObj, TControl AControl);

BOOL
Form_CanFocus(TForm AObj);

BOOL
Form_ContainsControl(TForm AObj, TControl Control);

TControl
Form_ControlAtPos(TForm AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
Form_DisableAlign(TForm AObj);

void
Form_EnableAlign(TForm AObj);

TControl
Form_FindChildControl(TForm AObj, CChar char* ControlName);

void
Form_FlipChildren(TForm AObj, BOOL AllLevels);

BOOL
Form_Focused(TForm AObj);

BOOL
Form_HandleAllocated(TForm AObj);

void
Form_InsertControl(TForm AObj, TControl AControl);

void
Form_Invalidate(TForm AObj);

void
Form_PaintTo(TForm AObj, HDC DC, int32_t X, int32_t Y);

void
Form_RemoveControl(TForm AObj, TControl AControl);

void
Form_Realign(TForm AObj);

void
Form_Repaint(TForm AObj);

void
Form_ScaleBy(TForm AObj, int32_t M, int32_t D);

void
Form_ScrollBy(TForm AObj, int32_t DeltaX, int32_t DeltaY);

void
Form_SetBounds(TForm AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
Form_Update(TForm AObj);

void
Form_BringToFront(TForm AObj);

TPoint
Form_ClientToScreen(TForm AObj, TPoint Point);

TPoint
Form_ClientToParent(TForm AObj, TPoint Point, TWinControl AParent);

BOOL
Form_Dragging(TForm AObj);

BOOL
Form_HasParent(TForm AObj);

intptr_t
Form_Perform(TForm AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
Form_Refresh(TForm AObj);

TPoint
Form_ScreenToClient(TForm AObj, TPoint Point);

TPoint
Form_ParentToClient(TForm AObj, TPoint Point, TWinControl AParent);

void
Form_SendToBack(TForm AObj);

int32_t
Form_GetTextBuf(TForm AObj, CChar char* Buffer, int32_t BufSize);

int32_t
Form_GetTextLen(TForm AObj);

void
Form_SetTextBuf(TForm AObj, CChar char* Buffer);

TComponent
Form_FindComponent(TForm AObj, CChar char* AName);

char*
Form_GetNamePath(TForm AObj);

void
Form_Assign(TForm AObj, TObject Source);

TClass
Form_ClassType(TForm AObj);

char*
Form_ClassName(TForm AObj);

int32_t
Form_InstanceSize(TForm AObj);

BOOL
Form_InheritsFrom(TForm AObj, TClass AClass);

BOOL
Form_Equals(TForm AObj, TObject Obj);

int32_t
Form_GetHashCode(TForm AObj);

char*
Form_ToString(TForm AObj);

void
Form_AnchorToNeighbour(TForm AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Form_AnchorParallel(TForm AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Form_AnchorHorizontalCenterTo(TForm AObj, TControl ASibling);

void
Form_AnchorVerticalCenterTo(TForm AObj, TControl ASibling);

void
Form_AnchorSame(TForm AObj, TAnchorKind ASide, TControl ASibling);

void
Form_AnchorAsAlign(TForm AObj, TAlign ATheAlign, int32_t ASpace);

void
Form_AnchorClient(TForm AObj, int32_t ASpace);

int32_t
Form_ScaleDesignToForm(TForm AObj, int32_t ASize);

int32_t
Form_ScaleFormToDesign(TForm AObj, int32_t ASize);

int32_t
Form_Scale96ToForm(TForm AObj, int32_t ASize);

int32_t
Form_ScaleFormTo96(TForm AObj, int32_t ASize);

int32_t
Form_Scale96ToFont(TForm AObj, int32_t ASize);

int32_t
Form_ScaleFontTo96(TForm AObj, int32_t ASize);

int32_t
Form_ScaleScreenToFont(TForm AObj, int32_t ASize);

int32_t
Form_ScaleFontToScreen(TForm AObj, int32_t ASize);

int32_t
Form_Scale96ToScreen(TForm AObj, int32_t ASize);

int32_t
Form_ScaleScreenTo96(TForm AObj, int32_t ASize);

void
Form_AutoAdjustLayout(TForm AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
Form_FixDesignFontsPPI(TForm AObj, int32_t ADesignTimePPI);

void
Form_ScaleFontsPPI(TForm AObj, int32_t AToPPI, double AProportion);

BOOL
Form_GetAllowDropFiles(TForm AObj);

void
Form_SetAllowDropFiles(TForm AObj, BOOL AValue);

void
Form_SetOnDropFiles(TForm AObj, TDropFilesEvent AEventData);

TShowInTaskbar
Form_GetShowInTaskBar(TForm AObj);

void
Form_SetShowInTaskBar(TForm AObj, TShowInTaskbar AValue);

int32_t
Form_GetDesignTimePPI(TForm AObj);

void
Form_SetDesignTimePPI(TForm AObj, int32_t AValue);

void
Form_SetOnUTF8KeyPress(TForm AObj, TUTF8KeyPressEvent AEventData);

TAction
Form_GetAction(TForm AObj);

void
Form_SetAction(TForm AObj, TAction AValue);

TWinControl
Form_GetActiveControl(TForm AObj);

void
Form_SetActiveControl(TForm AObj, TWinControl AValue);

TAlign
Form_GetAlign(TForm AObj);

void
Form_SetAlign(TForm AObj, TAlign AValue);

BOOL
Form_GetAlphaBlend(TForm AObj);

void
Form_SetAlphaBlend(TForm AObj, BOOL AValue);

int8_t
Form_GetAlphaBlendValue(TForm AObj);

void
Form_SetAlphaBlendValue(TForm AObj, int8_t AValue);

TAnchors
Form_GetAnchors(TForm AObj);

void
Form_SetAnchors(TForm AObj, TAnchors AValue);

BOOL
Form_GetAutoScroll(TForm AObj);

void
Form_SetAutoScroll(TForm AObj, BOOL AValue);

BOOL
Form_GetAutoSize(TForm AObj);

void
Form_SetAutoSize(TForm AObj, BOOL AValue);

TBiDiMode
Form_GetBiDiMode(TForm AObj);

void
Form_SetBiDiMode(TForm AObj, TBiDiMode AValue);

TBorderIcons
Form_GetBorderIcons(TForm AObj);

void
Form_SetBorderIcons(TForm AObj, TBorderIcons AValue);

TFormBorderStyle
Form_GetBorderStyle(TForm AObj);

void
Form_SetBorderStyle(TForm AObj, TFormBorderStyle AValue);

int32_t
Form_GetBorderWidth(TForm AObj);

void
Form_SetBorderWidth(TForm AObj, int32_t AValue);

char*
Form_GetCaption(TForm AObj);

void
Form_SetCaption(TForm AObj, CChar char* AValue);

int32_t
Form_GetClientHeight(TForm AObj);

void
Form_SetClientHeight(TForm AObj, int32_t AValue);

int32_t
Form_GetClientWidth(TForm AObj);

void
Form_SetClientWidth(TForm AObj, int32_t AValue);

TColor
Form_GetColor(TForm AObj);

void
Form_SetColor(TForm AObj, TColor AValue);

TSizeConstraints
Form_GetConstraints(TForm AObj);

void
Form_SetConstraints(TForm AObj, TSizeConstraints AValue);

BOOL
Form_GetUseDockManager(TForm AObj);

void
Form_SetUseDockManager(TForm AObj, BOOL AValue);

TDefaultMonitor
Form_GetDefaultMonitor(TForm AObj);

void
Form_SetDefaultMonitor(TForm AObj, TDefaultMonitor AValue);

BOOL
Form_GetDockSite(TForm AObj);

void
Form_SetDockSite(TForm AObj, BOOL AValue);

BOOL
Form_GetDoubleBuffered(TForm AObj);

void
Form_SetDoubleBuffered(TForm AObj, BOOL AValue);

TDragKind
Form_GetDragKind(TForm AObj);

void
Form_SetDragKind(TForm AObj, TDragKind AValue);

TDragMode
Form_GetDragMode(TForm AObj);

void
Form_SetDragMode(TForm AObj, TDragMode AValue);

BOOL
Form_GetEnabled(TForm AObj);

void
Form_SetEnabled(TForm AObj, BOOL AValue);

BOOL
Form_GetParentFont(TForm AObj);

void
Form_SetParentFont(TForm AObj, BOOL AValue);

TFont
Form_GetFont(TForm AObj);

void
Form_SetFont(TForm AObj, TFont AValue);

TFormStyle
Form_GetFormStyle(TForm AObj);

void
Form_SetFormStyle(TForm AObj, TFormStyle AValue);

int32_t
Form_GetHeight(TForm AObj);

void
Form_SetHeight(TForm AObj, int32_t AValue);

TControlScrollBar
Form_GetHorzScrollBar(TForm AObj);

void
Form_SetHorzScrollBar(TForm AObj, TControlScrollBar AValue);

TIcon
Form_GetIcon(TForm AObj);

void
Form_SetIcon(TForm AObj, TIcon AValue);

BOOL
Form_GetKeyPreview(TForm AObj);

void
Form_SetKeyPreview(TForm AObj, BOOL AValue);

TMainMenu
Form_GetMenu(TForm AObj);

void
Form_SetMenu(TForm AObj, TMainMenu AValue);

int32_t
Form_GetPixelsPerInch(TForm AObj);

void
Form_SetPixelsPerInch(TForm AObj, int32_t AValue);

TPopupMenu
Form_GetPopupMenu(TForm AObj);

void
Form_SetPopupMenu(TForm AObj, TPopupMenu AValue);

TPosition
Form_GetPosition(TForm AObj);

void
Form_SetPosition(TForm AObj, TPosition AValue);

BOOL
Form_GetScaled(TForm AObj);

void
Form_SetScaled(TForm AObj, BOOL AValue);

BOOL
Form_GetShowHint(TForm AObj);

void
Form_SetShowHint(TForm AObj, BOOL AValue);

TControlScrollBar
Form_GetVertScrollBar(TForm AObj);

void
Form_SetVertScrollBar(TForm AObj, TControlScrollBar AValue);

BOOL
Form_GetVisible(TForm AObj);

void
Form_SetVisible(TForm AObj, BOOL AValue);

int32_t
Form_GetWidth(TForm AObj);

void
Form_SetWidth(TForm AObj, int32_t AValue);

TWindowState
Form_GetWindowState(TForm AObj);

void
Form_SetWindowState(TForm AObj, TWindowState AValue);

void
Form_SetOnActivate(TForm AObj, TNotifyEvent AEventData);

void
Form_SetOnAlignPosition(TForm AObj, TAlignPositionEvent AEventData);

void
Form_SetOnClick(TForm AObj, TNotifyEvent AEventData);

void
Form_SetOnClose(TForm AObj, TCloseEvent AEventData);

void
Form_SetOnCloseQuery(TForm AObj, TCloseQueryEvent AEventData);

void
Form_SetOnConstrainedResize(TForm AObj, TConstrainedResizeEvent AEventData);

void
Form_SetOnContextPopup(TForm AObj, TContextPopupEvent AEventData);

void
Form_SetOnDblClick(TForm AObj, TNotifyEvent AEventData);

void
Form_SetOnDestroy(TForm AObj, TNotifyEvent AEventData);

void
Form_SetOnDeactivate(TForm AObj, TNotifyEvent AEventData);

void
Form_SetOnDockDrop(TForm AObj, TDockDropEvent AEventData);

void
Form_SetOnDragDrop(TForm AObj, TDragDropEvent AEventData);

void
Form_SetOnDragOver(TForm AObj, TDragOverEvent AEventData);

void
Form_SetOnEndDock(TForm AObj, TEndDragEvent AEventData);

void
Form_SetOnGetSiteInfo(TForm AObj, TGetSiteInfoEvent AEventData);

void
Form_SetOnHide(TForm AObj, TNotifyEvent AEventData);

void
Form_SetOnHelp(TForm AObj, THelpEvent AEventData);

void
Form_SetOnKeyDown(TForm AObj, TKeyEvent AEventData);

void
Form_SetOnKeyPress(TForm AObj, TKeyPressEvent AEventData);

void
Form_SetOnKeyUp(TForm AObj, TKeyEvent AEventData);

void
Form_SetOnMouseDown(TForm AObj, TMouseEvent AEventData);

void
Form_SetOnMouseEnter(TForm AObj, TNotifyEvent AEventData);

void
Form_SetOnMouseLeave(TForm AObj, TNotifyEvent AEventData);

void
Form_SetOnMouseMove(TForm AObj, TMouseMoveEvent AEventData);

void
Form_SetOnMouseUp(TForm AObj, TMouseEvent AEventData);

void
Form_SetOnMouseWheel(TForm AObj, TMouseWheelEvent AEventData);

void
Form_SetOnMouseWheelDown(TForm AObj, TMouseWheelUpDownEvent AEventData);

void
Form_SetOnMouseWheelUp(TForm AObj, TMouseWheelUpDownEvent AEventData);

void
Form_SetOnPaint(TForm AObj, TNotifyEvent AEventData);

void
Form_SetOnResize(TForm AObj, TNotifyEvent AEventData);

void
Form_SetOnShortCut(TForm AObj, TShortCutEvent AEventData);

void
Form_SetOnShow(TForm AObj, TNotifyEvent AEventData);

void
Form_SetOnStartDock(TForm AObj, TStartDockEvent AEventData);

void
Form_SetOnUnDock(TForm AObj, TUnDockEvent AEventData);

TCanvas
Form_GetCanvas(TForm AObj);

TModalResult
Form_GetModalResult(TForm AObj);

void
Form_SetModalResult(TForm AObj, TModalResult AValue);

TMonitor
Form_GetMonitor(TForm AObj);

int32_t
Form_GetLeft(TForm AObj);

void
Form_SetLeft(TForm AObj, int32_t AValue);

int32_t
Form_GetTop(TForm AObj);

void
Form_SetTop(TForm AObj, int32_t AValue);

int32_t
Form_GetDockClientCount(TForm AObj);

BOOL
Form_GetMouseInClient(TForm AObj);

int32_t
Form_GetVisibleDockClientCount(TForm AObj);

TBrush
Form_GetBrush(TForm AObj);

int32_t
Form_GetControlCount(TForm AObj);

HWND
Form_GetHandle(TForm AObj);

BOOL
Form_GetParentDoubleBuffered(TForm AObj);

void
Form_SetParentDoubleBuffered(TForm AObj, BOOL AValue);

HWND
Form_GetParentWindow(TForm AObj);

void
Form_SetParentWindow(TForm AObj, HWND AValue);

BOOL
Form_GetShowing(TForm AObj);

TTabOrder
Form_GetTabOrder(TForm AObj);

void
Form_SetTabOrder(TForm AObj, TTabOrder AValue);

BOOL
Form_GetTabStop(TForm AObj);

void
Form_SetTabStop(TForm AObj, BOOL AValue);

TRect
Form_GetBoundsRect(TForm AObj);

void
Form_SetBoundsRect(TForm AObj, TRect AValue);

TPoint
Form_GetClientOrigin(TForm AObj);

TRect
Form_GetClientRect(TForm AObj);

TControlState
Form_GetControlState(TForm AObj);

void
Form_SetControlState(TForm AObj, TControlState AValue);

TControlStyle
Form_GetControlStyle(TForm AObj);

void
Form_SetControlStyle(TForm AObj, TControlStyle AValue);

BOOL
Form_GetFloating(TForm AObj);

TWinControl
Form_GetParent(TForm AObj);

void
Form_SetParent(TForm AObj, TWinControl AValue);

TCursor
Form_GetCursor(TForm AObj);

void
Form_SetCursor(TForm AObj, TCursor AValue);

char*
Form_GetHint(TForm AObj);

void
Form_SetHint(TForm AObj, CChar char* AValue);

int32_t
Form_GetComponentCount(TForm AObj);

int32_t
Form_GetComponentIndex(TForm AObj);

void
Form_SetComponentIndex(TForm AObj, int32_t AValue);

TComponent
Form_GetOwner(TForm AObj);

char*
Form_GetName(TForm AObj);

void
Form_SetName(TForm AObj, CChar char* AValue);

intptr_t
Form_GetTag(TForm AObj);

void
Form_SetTag(TForm AObj, intptr_t AValue);

TAnchorSide
Form_GetAnchorSideLeft(TForm AObj);

void
Form_SetAnchorSideLeft(TForm AObj, TAnchorSide AValue);

TAnchorSide
Form_GetAnchorSideTop(TForm AObj);

void
Form_SetAnchorSideTop(TForm AObj, TAnchorSide AValue);

TAnchorSide
Form_GetAnchorSideRight(TForm AObj);

void
Form_SetAnchorSideRight(TForm AObj, TAnchorSide AValue);

TAnchorSide
Form_GetAnchorSideBottom(TForm AObj);

void
Form_SetAnchorSideBottom(TForm AObj, TAnchorSide AValue);

TControlChildSizing
Form_GetChildSizing(TForm AObj);

void
Form_SetChildSizing(TForm AObj, TControlChildSizing AValue);

TControlBorderSpacing
Form_GetBorderSpacing(TForm AObj);

void
Form_SetBorderSpacing(TForm AObj, TControlBorderSpacing AValue);

TControl
Form_GetDockClients(TForm AObj, int32_t Index);

TControl
Form_GetControls(TForm AObj, int32_t Index);

TComponent
Form_GetComponents(TForm AObj, int32_t AIndex);

TAnchorSide
Form_GetAnchorSide(TForm AObj, TAnchorKind AKind);

TClass
Form_StaticClassType();

TForm
Form_Create2(TComponent AOwner);

void
Form_SetOnWndProc(TForm AObj, TWndProcEvent AEventData);

void
Form_SetGoPtr(TForm AObj, void* APtr);

// -------------------TParaAttributes-------------------

void
ParaAttributes_Assign(TParaAttributes AObj, TObject Source);

char*
ParaAttributes_GetNamePath(TParaAttributes AObj);

TClass
ParaAttributes_ClassType(TParaAttributes AObj);

char*
ParaAttributes_ClassName(TParaAttributes AObj);

int32_t
ParaAttributes_InstanceSize(TParaAttributes AObj);

BOOL
ParaAttributes_InheritsFrom(TParaAttributes AObj, TClass AClass);

BOOL
ParaAttributes_Equals(TParaAttributes AObj, TObject Obj);

int32_t
ParaAttributes_GetHashCode(TParaAttributes AObj);

char*
ParaAttributes_ToString(TParaAttributes AObj);

TAlignment
ParaAttributes_GetAlignment(TParaAttributes AObj);

void
ParaAttributes_SetAlignment(TParaAttributes AObj, TAlignment AValue);

int32_t
ParaAttributes_GetFirstIndent(TParaAttributes AObj);

void
ParaAttributes_SetFirstIndent(TParaAttributes AObj, int32_t AValue);

int32_t
ParaAttributes_GetLeftIndent(TParaAttributes AObj);

void
ParaAttributes_SetLeftIndent(TParaAttributes AObj, int32_t AValue);

TNumberingStyle
ParaAttributes_GetNumbering(TParaAttributes AObj);

void
ParaAttributes_SetNumbering(TParaAttributes AObj, TNumberingStyle AValue);

int32_t
ParaAttributes_GetRightIndent(TParaAttributes AObj);

void
ParaAttributes_SetRightIndent(TParaAttributes AObj, int32_t AValue);

int32_t
ParaAttributes_GetTabCount(TParaAttributes AObj);

void
ParaAttributes_SetTabCount(TParaAttributes AObj, int32_t AValue);

int32_t
ParaAttributes_GetTab(TParaAttributes AObj, int8_t Index);

void
ParaAttributes_SetTab(TParaAttributes AObj, int8_t Index, int32_t AValue);

TClass
ParaAttributes_StaticClassType();

// -------------------TTextAttributes-------------------

void
TextAttributes_Assign(TTextAttributes AObj, TObject Source);

char*
TextAttributes_GetNamePath(TTextAttributes AObj);

TClass
TextAttributes_ClassType(TTextAttributes AObj);

char*
TextAttributes_ClassName(TTextAttributes AObj);

int32_t
TextAttributes_InstanceSize(TTextAttributes AObj);

BOOL
TextAttributes_InheritsFrom(TTextAttributes AObj, TClass AClass);

BOOL
TextAttributes_Equals(TTextAttributes AObj, TObject Obj);

int32_t
TextAttributes_GetHashCode(TTextAttributes AObj);

char*
TextAttributes_ToString(TTextAttributes AObj);

TFontCharset
TextAttributes_GetCharset(TTextAttributes AObj);

void
TextAttributes_SetCharset(TTextAttributes AObj, TFontCharset AValue);

TColor
TextAttributes_GetColor(TTextAttributes AObj);

void
TextAttributes_SetColor(TTextAttributes AObj, TColor AValue);

char*
TextAttributes_GetName(TTextAttributes AObj);

void
TextAttributes_SetName(TTextAttributes AObj, CChar char* AValue);

TFontPitch
TextAttributes_GetPitch(TTextAttributes AObj);

void
TextAttributes_SetPitch(TTextAttributes AObj, TFontPitch AValue);

int32_t
TextAttributes_GetSize(TTextAttributes AObj);

void
TextAttributes_SetSize(TTextAttributes AObj, int32_t AValue);

TFontStyles
TextAttributes_GetStyle(TTextAttributes AObj);

void
TextAttributes_SetStyle(TTextAttributes AObj, TFontStyles AValue);

int32_t
TextAttributes_GetHeight(TTextAttributes AObj);

void
TextAttributes_SetHeight(TTextAttributes AObj, int32_t AValue);

TClass
TextAttributes_StaticClassType();

// -------------------TIconOptions-------------------

void
IconOptions_Assign(TIconOptions AObj, TObject Source);

char*
IconOptions_GetNamePath(TIconOptions AObj);

TClass
IconOptions_ClassType(TIconOptions AObj);

char*
IconOptions_ClassName(TIconOptions AObj);

int32_t
IconOptions_InstanceSize(TIconOptions AObj);

BOOL
IconOptions_InheritsFrom(TIconOptions AObj, TClass AClass);

BOOL
IconOptions_Equals(TIconOptions AObj, TObject Obj);

int32_t
IconOptions_GetHashCode(TIconOptions AObj);

char*
IconOptions_ToString(TIconOptions AObj);

TIconArrangement
IconOptions_GetArrangement(TIconOptions AObj);

void
IconOptions_SetArrangement(TIconOptions AObj, TIconArrangement AValue);

BOOL
IconOptions_GetAutoArrange(TIconOptions AObj);

void
IconOptions_SetAutoArrange(TIconOptions AObj, BOOL AValue);

TClass
IconOptions_StaticClassType();

// -------------------Exception-------------------

char*
Exception_ToString(Exception AObj);

TClass
Exception_ClassType(Exception AObj);

char*
Exception_ClassName(Exception AObj);

int32_t
Exception_InstanceSize(Exception AObj);

BOOL
Exception_InheritsFrom(Exception AObj, TClass AClass);

BOOL
Exception_Equals(Exception AObj, TObject Obj);

int32_t
Exception_GetHashCode(Exception AObj);

char*
Exception_GetMessage(Exception AObj);

void
Exception_SetMessage(Exception AObj, CChar char* AValue);

TClass
Exception_StaticClassType();

// -------------------TScrollBar-------------------

TScrollBar
ScrollBar_Create(TComponent AOwner);

void
ScrollBar_Free(TScrollBar AObj);

void
ScrollBar_SetParams(TScrollBar AObj, int32_t APosition, int32_t AMin, int32_t AMax);

BOOL
ScrollBar_CanFocus(TScrollBar AObj);

BOOL
ScrollBar_ContainsControl(TScrollBar AObj, TControl Control);

TControl
ScrollBar_ControlAtPos(TScrollBar AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
ScrollBar_DisableAlign(TScrollBar AObj);

void
ScrollBar_EnableAlign(TScrollBar AObj);

TControl
ScrollBar_FindChildControl(TScrollBar AObj, CChar char* ControlName);

void
ScrollBar_FlipChildren(TScrollBar AObj, BOOL AllLevels);

BOOL
ScrollBar_Focused(TScrollBar AObj);

BOOL
ScrollBar_HandleAllocated(TScrollBar AObj);

void
ScrollBar_InsertControl(TScrollBar AObj, TControl AControl);

void
ScrollBar_Invalidate(TScrollBar AObj);

void
ScrollBar_PaintTo(TScrollBar AObj, HDC DC, int32_t X, int32_t Y);

void
ScrollBar_RemoveControl(TScrollBar AObj, TControl AControl);

void
ScrollBar_Realign(TScrollBar AObj);

void
ScrollBar_Repaint(TScrollBar AObj);

void
ScrollBar_ScaleBy(TScrollBar AObj, int32_t M, int32_t D);

void
ScrollBar_ScrollBy(TScrollBar AObj, int32_t DeltaX, int32_t DeltaY);

void
ScrollBar_SetBounds(TScrollBar AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ScrollBar_SetFocus(TScrollBar AObj);

void
ScrollBar_Update(TScrollBar AObj);

void
ScrollBar_BringToFront(TScrollBar AObj);

TPoint
ScrollBar_ClientToScreen(TScrollBar AObj, TPoint Point);

TPoint
ScrollBar_ClientToParent(TScrollBar AObj, TPoint Point, TWinControl AParent);

BOOL
ScrollBar_Dragging(TScrollBar AObj);

BOOL
ScrollBar_HasParent(TScrollBar AObj);

void
ScrollBar_Hide(TScrollBar AObj);

intptr_t
ScrollBar_Perform(TScrollBar AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ScrollBar_Refresh(TScrollBar AObj);

TPoint
ScrollBar_ScreenToClient(TScrollBar AObj, TPoint Point);

TPoint
ScrollBar_ParentToClient(TScrollBar AObj, TPoint Point, TWinControl AParent);

void
ScrollBar_SendToBack(TScrollBar AObj);

void
ScrollBar_Show(TScrollBar AObj);

int32_t
ScrollBar_GetTextBuf(TScrollBar AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ScrollBar_GetTextLen(TScrollBar AObj);

void
ScrollBar_SetTextBuf(TScrollBar AObj, CChar char* Buffer);

TComponent
ScrollBar_FindComponent(TScrollBar AObj, CChar char* AName);

char*
ScrollBar_GetNamePath(TScrollBar AObj);

void
ScrollBar_Assign(TScrollBar AObj, TObject Source);

TClass
ScrollBar_ClassType(TScrollBar AObj);

char*
ScrollBar_ClassName(TScrollBar AObj);

int32_t
ScrollBar_InstanceSize(TScrollBar AObj);

BOOL
ScrollBar_InheritsFrom(TScrollBar AObj, TClass AClass);

BOOL
ScrollBar_Equals(TScrollBar AObj, TObject Obj);

int32_t
ScrollBar_GetHashCode(TScrollBar AObj);

char*
ScrollBar_ToString(TScrollBar AObj);

void
ScrollBar_AnchorToNeighbour(TScrollBar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ScrollBar_AnchorParallel(TScrollBar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ScrollBar_AnchorHorizontalCenterTo(TScrollBar AObj, TControl ASibling);

void
ScrollBar_AnchorVerticalCenterTo(TScrollBar AObj, TControl ASibling);

void
ScrollBar_AnchorSame(TScrollBar AObj, TAnchorKind ASide, TControl ASibling);

void
ScrollBar_AnchorAsAlign(TScrollBar AObj, TAlign ATheAlign, int32_t ASpace);

void
ScrollBar_AnchorClient(TScrollBar AObj, int32_t ASpace);

int32_t
ScrollBar_ScaleDesignToForm(TScrollBar AObj, int32_t ASize);

int32_t
ScrollBar_ScaleFormToDesign(TScrollBar AObj, int32_t ASize);

int32_t
ScrollBar_Scale96ToForm(TScrollBar AObj, int32_t ASize);

int32_t
ScrollBar_ScaleFormTo96(TScrollBar AObj, int32_t ASize);

int32_t
ScrollBar_Scale96ToFont(TScrollBar AObj, int32_t ASize);

int32_t
ScrollBar_ScaleFontTo96(TScrollBar AObj, int32_t ASize);

int32_t
ScrollBar_ScaleScreenToFont(TScrollBar AObj, int32_t ASize);

int32_t
ScrollBar_ScaleFontToScreen(TScrollBar AObj, int32_t ASize);

int32_t
ScrollBar_Scale96ToScreen(TScrollBar AObj, int32_t ASize);

int32_t
ScrollBar_ScaleScreenTo96(TScrollBar AObj, int32_t ASize);

void
ScrollBar_AutoAdjustLayout(TScrollBar AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ScrollBar_FixDesignFontsPPI(TScrollBar AObj, int32_t ADesignTimePPI);

void
ScrollBar_ScaleFontsPPI(TScrollBar AObj, int32_t AToPPI, double AProportion);

TAlign
ScrollBar_GetAlign(TScrollBar AObj);

void
ScrollBar_SetAlign(TScrollBar AObj, TAlign AValue);

TAnchors
ScrollBar_GetAnchors(TScrollBar AObj);

void
ScrollBar_SetAnchors(TScrollBar AObj, TAnchors AValue);

TBiDiMode
ScrollBar_GetBiDiMode(TScrollBar AObj);

void
ScrollBar_SetBiDiMode(TScrollBar AObj, TBiDiMode AValue);

TSizeConstraints
ScrollBar_GetConstraints(TScrollBar AObj);

void
ScrollBar_SetConstraints(TScrollBar AObj, TSizeConstraints AValue);

BOOL
ScrollBar_GetDoubleBuffered(TScrollBar AObj);

void
ScrollBar_SetDoubleBuffered(TScrollBar AObj, BOOL AValue);

TCursor
ScrollBar_GetDragCursor(TScrollBar AObj);

void
ScrollBar_SetDragCursor(TScrollBar AObj, TCursor AValue);

TDragKind
ScrollBar_GetDragKind(TScrollBar AObj);

void
ScrollBar_SetDragKind(TScrollBar AObj, TDragKind AValue);

TDragMode
ScrollBar_GetDragMode(TScrollBar AObj);

void
ScrollBar_SetDragMode(TScrollBar AObj, TDragMode AValue);

BOOL
ScrollBar_GetEnabled(TScrollBar AObj);

void
ScrollBar_SetEnabled(TScrollBar AObj, BOOL AValue);

TScrollBarKind
ScrollBar_GetKind(TScrollBar AObj);

void
ScrollBar_SetKind(TScrollBar AObj, TScrollBarKind AValue);

TScrollBarInc
ScrollBar_GetLargeChange(TScrollBar AObj);

void
ScrollBar_SetLargeChange(TScrollBar AObj, TScrollBarInc AValue);

int32_t
ScrollBar_GetMax(TScrollBar AObj);

void
ScrollBar_SetMax(TScrollBar AObj, int32_t AValue);

int32_t
ScrollBar_GetMin(TScrollBar AObj);

void
ScrollBar_SetMin(TScrollBar AObj, int32_t AValue);

int32_t
ScrollBar_GetPageSize(TScrollBar AObj);

void
ScrollBar_SetPageSize(TScrollBar AObj, int32_t AValue);

BOOL
ScrollBar_GetParentDoubleBuffered(TScrollBar AObj);

void
ScrollBar_SetParentDoubleBuffered(TScrollBar AObj, BOOL AValue);

BOOL
ScrollBar_GetParentShowHint(TScrollBar AObj);

void
ScrollBar_SetParentShowHint(TScrollBar AObj, BOOL AValue);

TPopupMenu
ScrollBar_GetPopupMenu(TScrollBar AObj);

void
ScrollBar_SetPopupMenu(TScrollBar AObj, TPopupMenu AValue);

int32_t
ScrollBar_GetPosition(TScrollBar AObj);

void
ScrollBar_SetPosition(TScrollBar AObj, int32_t AValue);

BOOL
ScrollBar_GetShowHint(TScrollBar AObj);

void
ScrollBar_SetShowHint(TScrollBar AObj, BOOL AValue);

TScrollBarInc
ScrollBar_GetSmallChange(TScrollBar AObj);

void
ScrollBar_SetSmallChange(TScrollBar AObj, TScrollBarInc AValue);

TTabOrder
ScrollBar_GetTabOrder(TScrollBar AObj);

void
ScrollBar_SetTabOrder(TScrollBar AObj, TTabOrder AValue);

BOOL
ScrollBar_GetTabStop(TScrollBar AObj);

void
ScrollBar_SetTabStop(TScrollBar AObj, BOOL AValue);

BOOL
ScrollBar_GetVisible(TScrollBar AObj);

void
ScrollBar_SetVisible(TScrollBar AObj, BOOL AValue);

void
ScrollBar_SetOnContextPopup(TScrollBar AObj, TContextPopupEvent AEventData);

void
ScrollBar_SetOnChange(TScrollBar AObj, TNotifyEvent AEventData);

void
ScrollBar_SetOnDragDrop(TScrollBar AObj, TDragDropEvent AEventData);

void
ScrollBar_SetOnDragOver(TScrollBar AObj, TDragOverEvent AEventData);

void
ScrollBar_SetOnEndDrag(TScrollBar AObj, TEndDragEvent AEventData);

void
ScrollBar_SetOnEnter(TScrollBar AObj, TNotifyEvent AEventData);

void
ScrollBar_SetOnExit(TScrollBar AObj, TNotifyEvent AEventData);

void
ScrollBar_SetOnKeyDown(TScrollBar AObj, TKeyEvent AEventData);

void
ScrollBar_SetOnKeyPress(TScrollBar AObj, TKeyPressEvent AEventData);

void
ScrollBar_SetOnKeyUp(TScrollBar AObj, TKeyEvent AEventData);

int32_t
ScrollBar_GetDockClientCount(TScrollBar AObj);

BOOL
ScrollBar_GetDockSite(TScrollBar AObj);

void
ScrollBar_SetDockSite(TScrollBar AObj, BOOL AValue);

BOOL
ScrollBar_GetMouseInClient(TScrollBar AObj);

int32_t
ScrollBar_GetVisibleDockClientCount(TScrollBar AObj);

TBrush
ScrollBar_GetBrush(TScrollBar AObj);

int32_t
ScrollBar_GetControlCount(TScrollBar AObj);

HWND
ScrollBar_GetHandle(TScrollBar AObj);

HWND
ScrollBar_GetParentWindow(TScrollBar AObj);

void
ScrollBar_SetParentWindow(TScrollBar AObj, HWND AValue);

BOOL
ScrollBar_GetShowing(TScrollBar AObj);

BOOL
ScrollBar_GetUseDockManager(TScrollBar AObj);

void
ScrollBar_SetUseDockManager(TScrollBar AObj, BOOL AValue);

TAction
ScrollBar_GetAction(TScrollBar AObj);

void
ScrollBar_SetAction(TScrollBar AObj, TAction AValue);

TRect
ScrollBar_GetBoundsRect(TScrollBar AObj);

void
ScrollBar_SetBoundsRect(TScrollBar AObj, TRect AValue);

int32_t
ScrollBar_GetClientHeight(TScrollBar AObj);

void
ScrollBar_SetClientHeight(TScrollBar AObj, int32_t AValue);

TPoint
ScrollBar_GetClientOrigin(TScrollBar AObj);

TRect
ScrollBar_GetClientRect(TScrollBar AObj);

int32_t
ScrollBar_GetClientWidth(TScrollBar AObj);

void
ScrollBar_SetClientWidth(TScrollBar AObj, int32_t AValue);

TControlState
ScrollBar_GetControlState(TScrollBar AObj);

void
ScrollBar_SetControlState(TScrollBar AObj, TControlState AValue);

TControlStyle
ScrollBar_GetControlStyle(TScrollBar AObj);

void
ScrollBar_SetControlStyle(TScrollBar AObj, TControlStyle AValue);

BOOL
ScrollBar_GetFloating(TScrollBar AObj);

TWinControl
ScrollBar_GetParent(TScrollBar AObj);

void
ScrollBar_SetParent(TScrollBar AObj, TWinControl AValue);

int32_t
ScrollBar_GetLeft(TScrollBar AObj);

void
ScrollBar_SetLeft(TScrollBar AObj, int32_t AValue);

int32_t
ScrollBar_GetTop(TScrollBar AObj);

void
ScrollBar_SetTop(TScrollBar AObj, int32_t AValue);

int32_t
ScrollBar_GetWidth(TScrollBar AObj);

void
ScrollBar_SetWidth(TScrollBar AObj, int32_t AValue);

int32_t
ScrollBar_GetHeight(TScrollBar AObj);

void
ScrollBar_SetHeight(TScrollBar AObj, int32_t AValue);

TCursor
ScrollBar_GetCursor(TScrollBar AObj);

void
ScrollBar_SetCursor(TScrollBar AObj, TCursor AValue);

char*
ScrollBar_GetHint(TScrollBar AObj);

void
ScrollBar_SetHint(TScrollBar AObj, CChar char* AValue);

int32_t
ScrollBar_GetComponentCount(TScrollBar AObj);

int32_t
ScrollBar_GetComponentIndex(TScrollBar AObj);

void
ScrollBar_SetComponentIndex(TScrollBar AObj, int32_t AValue);

TComponent
ScrollBar_GetOwner(TScrollBar AObj);

char*
ScrollBar_GetName(TScrollBar AObj);

void
ScrollBar_SetName(TScrollBar AObj, CChar char* AValue);

intptr_t
ScrollBar_GetTag(TScrollBar AObj);

void
ScrollBar_SetTag(TScrollBar AObj, intptr_t AValue);

TAnchorSide
ScrollBar_GetAnchorSideLeft(TScrollBar AObj);

void
ScrollBar_SetAnchorSideLeft(TScrollBar AObj, TAnchorSide AValue);

TAnchorSide
ScrollBar_GetAnchorSideTop(TScrollBar AObj);

void
ScrollBar_SetAnchorSideTop(TScrollBar AObj, TAnchorSide AValue);

TAnchorSide
ScrollBar_GetAnchorSideRight(TScrollBar AObj);

void
ScrollBar_SetAnchorSideRight(TScrollBar AObj, TAnchorSide AValue);

TAnchorSide
ScrollBar_GetAnchorSideBottom(TScrollBar AObj);

void
ScrollBar_SetAnchorSideBottom(TScrollBar AObj, TAnchorSide AValue);

TControlChildSizing
ScrollBar_GetChildSizing(TScrollBar AObj);

void
ScrollBar_SetChildSizing(TScrollBar AObj, TControlChildSizing AValue);

TControlBorderSpacing
ScrollBar_GetBorderSpacing(TScrollBar AObj);

void
ScrollBar_SetBorderSpacing(TScrollBar AObj, TControlBorderSpacing AValue);

TControl
ScrollBar_GetDockClients(TScrollBar AObj, int32_t Index);

TControl
ScrollBar_GetControls(TScrollBar AObj, int32_t Index);

TComponent
ScrollBar_GetComponents(TScrollBar AObj, int32_t AIndex);

TAnchorSide
ScrollBar_GetAnchorSide(TScrollBar AObj, TAnchorKind AKind);

TClass
ScrollBar_StaticClassType();

// -------------------TMaskEdit-------------------

TMaskEdit
MaskEdit_Create(TComponent AOwner);

void
MaskEdit_Free(TMaskEdit AObj);

void
MaskEdit_ValidateEdit(TMaskEdit AObj);

void
MaskEdit_Clear(TMaskEdit AObj);

int32_t
MaskEdit_GetTextLen(TMaskEdit AObj);

void
MaskEdit_ClearSelection(TMaskEdit AObj);

void
MaskEdit_CopyToClipboard(TMaskEdit AObj);

void
MaskEdit_CutToClipboard(TMaskEdit AObj);

void
MaskEdit_PasteFromClipboard(TMaskEdit AObj);

void
MaskEdit_Undo(TMaskEdit AObj);

void
MaskEdit_SelectAll(TMaskEdit AObj);

BOOL
MaskEdit_CanFocus(TMaskEdit AObj);

BOOL
MaskEdit_ContainsControl(TMaskEdit AObj, TControl Control);

TControl
MaskEdit_ControlAtPos(TMaskEdit AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
MaskEdit_DisableAlign(TMaskEdit AObj);

void
MaskEdit_EnableAlign(TMaskEdit AObj);

TControl
MaskEdit_FindChildControl(TMaskEdit AObj, CChar char* ControlName);

void
MaskEdit_FlipChildren(TMaskEdit AObj, BOOL AllLevels);

BOOL
MaskEdit_Focused(TMaskEdit AObj);

BOOL
MaskEdit_HandleAllocated(TMaskEdit AObj);

void
MaskEdit_InsertControl(TMaskEdit AObj, TControl AControl);

void
MaskEdit_Invalidate(TMaskEdit AObj);

void
MaskEdit_PaintTo(TMaskEdit AObj, HDC DC, int32_t X, int32_t Y);

void
MaskEdit_RemoveControl(TMaskEdit AObj, TControl AControl);

void
MaskEdit_Realign(TMaskEdit AObj);

void
MaskEdit_Repaint(TMaskEdit AObj);

void
MaskEdit_ScaleBy(TMaskEdit AObj, int32_t M, int32_t D);

void
MaskEdit_ScrollBy(TMaskEdit AObj, int32_t DeltaX, int32_t DeltaY);

void
MaskEdit_SetBounds(TMaskEdit AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
MaskEdit_SetFocus(TMaskEdit AObj);

void
MaskEdit_Update(TMaskEdit AObj);

void
MaskEdit_BringToFront(TMaskEdit AObj);

TPoint
MaskEdit_ClientToScreen(TMaskEdit AObj, TPoint Point);

TPoint
MaskEdit_ClientToParent(TMaskEdit AObj, TPoint Point, TWinControl AParent);

BOOL
MaskEdit_Dragging(TMaskEdit AObj);

BOOL
MaskEdit_HasParent(TMaskEdit AObj);

void
MaskEdit_Hide(TMaskEdit AObj);

intptr_t
MaskEdit_Perform(TMaskEdit AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
MaskEdit_Refresh(TMaskEdit AObj);

TPoint
MaskEdit_ScreenToClient(TMaskEdit AObj, TPoint Point);

TPoint
MaskEdit_ParentToClient(TMaskEdit AObj, TPoint Point, TWinControl AParent);

void
MaskEdit_SendToBack(TMaskEdit AObj);

void
MaskEdit_Show(TMaskEdit AObj);

int32_t
MaskEdit_GetTextBuf(TMaskEdit AObj, CChar char* Buffer, int32_t BufSize);

void
MaskEdit_SetTextBuf(TMaskEdit AObj, CChar char* Buffer);

TComponent
MaskEdit_FindComponent(TMaskEdit AObj, CChar char* AName);

char*
MaskEdit_GetNamePath(TMaskEdit AObj);

void
MaskEdit_Assign(TMaskEdit AObj, TObject Source);

TClass
MaskEdit_ClassType(TMaskEdit AObj);

char*
MaskEdit_ClassName(TMaskEdit AObj);

int32_t
MaskEdit_InstanceSize(TMaskEdit AObj);

BOOL
MaskEdit_InheritsFrom(TMaskEdit AObj, TClass AClass);

BOOL
MaskEdit_Equals(TMaskEdit AObj, TObject Obj);

int32_t
MaskEdit_GetHashCode(TMaskEdit AObj);

char*
MaskEdit_ToString(TMaskEdit AObj);

void
MaskEdit_AnchorToNeighbour(TMaskEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
MaskEdit_AnchorParallel(TMaskEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
MaskEdit_AnchorHorizontalCenterTo(TMaskEdit AObj, TControl ASibling);

void
MaskEdit_AnchorVerticalCenterTo(TMaskEdit AObj, TControl ASibling);

void
MaskEdit_AnchorSame(TMaskEdit AObj, TAnchorKind ASide, TControl ASibling);

void
MaskEdit_AnchorAsAlign(TMaskEdit AObj, TAlign ATheAlign, int32_t ASpace);

void
MaskEdit_AnchorClient(TMaskEdit AObj, int32_t ASpace);

int32_t
MaskEdit_ScaleDesignToForm(TMaskEdit AObj, int32_t ASize);

int32_t
MaskEdit_ScaleFormToDesign(TMaskEdit AObj, int32_t ASize);

int32_t
MaskEdit_Scale96ToForm(TMaskEdit AObj, int32_t ASize);

int32_t
MaskEdit_ScaleFormTo96(TMaskEdit AObj, int32_t ASize);

int32_t
MaskEdit_Scale96ToFont(TMaskEdit AObj, int32_t ASize);

int32_t
MaskEdit_ScaleFontTo96(TMaskEdit AObj, int32_t ASize);

int32_t
MaskEdit_ScaleScreenToFont(TMaskEdit AObj, int32_t ASize);

int32_t
MaskEdit_ScaleFontToScreen(TMaskEdit AObj, int32_t ASize);

int32_t
MaskEdit_Scale96ToScreen(TMaskEdit AObj, int32_t ASize);

int32_t
MaskEdit_ScaleScreenTo96(TMaskEdit AObj, int32_t ASize);

void
MaskEdit_AutoAdjustLayout(TMaskEdit AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
MaskEdit_FixDesignFontsPPI(TMaskEdit AObj, int32_t ADesignTimePPI);

void
MaskEdit_ScaleFontsPPI(TMaskEdit AObj, int32_t AToPPI, double AProportion);

TAlign
MaskEdit_GetAlign(TMaskEdit AObj);

void
MaskEdit_SetAlign(TMaskEdit AObj, TAlign AValue);

TAlignment
MaskEdit_GetAlignment(TMaskEdit AObj);

void
MaskEdit_SetAlignment(TMaskEdit AObj, TAlignment AValue);

TAnchors
MaskEdit_GetAnchors(TMaskEdit AObj);

void
MaskEdit_SetAnchors(TMaskEdit AObj, TAnchors AValue);

BOOL
MaskEdit_GetAutoSelect(TMaskEdit AObj);

void
MaskEdit_SetAutoSelect(TMaskEdit AObj, BOOL AValue);

BOOL
MaskEdit_GetAutoSize(TMaskEdit AObj);

void
MaskEdit_SetAutoSize(TMaskEdit AObj, BOOL AValue);

TBiDiMode
MaskEdit_GetBiDiMode(TMaskEdit AObj);

void
MaskEdit_SetBiDiMode(TMaskEdit AObj, TBiDiMode AValue);

TBorderStyle
MaskEdit_GetBorderStyle(TMaskEdit AObj);

void
MaskEdit_SetBorderStyle(TMaskEdit AObj, TBorderStyle AValue);

TEditCharCase
MaskEdit_GetCharCase(TMaskEdit AObj);

void
MaskEdit_SetCharCase(TMaskEdit AObj, TEditCharCase AValue);

TColor
MaskEdit_GetColor(TMaskEdit AObj);

void
MaskEdit_SetColor(TMaskEdit AObj, TColor AValue);

TSizeConstraints
MaskEdit_GetConstraints(TMaskEdit AObj);

void
MaskEdit_SetConstraints(TMaskEdit AObj, TSizeConstraints AValue);

BOOL
MaskEdit_GetDoubleBuffered(TMaskEdit AObj);

void
MaskEdit_SetDoubleBuffered(TMaskEdit AObj, BOOL AValue);

TCursor
MaskEdit_GetDragCursor(TMaskEdit AObj);

void
MaskEdit_SetDragCursor(TMaskEdit AObj, TCursor AValue);

TDragKind
MaskEdit_GetDragKind(TMaskEdit AObj);

void
MaskEdit_SetDragKind(TMaskEdit AObj, TDragKind AValue);

TDragMode
MaskEdit_GetDragMode(TMaskEdit AObj);

void
MaskEdit_SetDragMode(TMaskEdit AObj, TDragMode AValue);

BOOL
MaskEdit_GetEnabled(TMaskEdit AObj);

void
MaskEdit_SetEnabled(TMaskEdit AObj, BOOL AValue);

TFont
MaskEdit_GetFont(TMaskEdit AObj);

void
MaskEdit_SetFont(TMaskEdit AObj, TFont AValue);

int32_t
MaskEdit_GetMaxLength(TMaskEdit AObj);

void
MaskEdit_SetMaxLength(TMaskEdit AObj, int32_t AValue);

BOOL
MaskEdit_GetParentColor(TMaskEdit AObj);

void
MaskEdit_SetParentColor(TMaskEdit AObj, BOOL AValue);

BOOL
MaskEdit_GetParentDoubleBuffered(TMaskEdit AObj);

void
MaskEdit_SetParentDoubleBuffered(TMaskEdit AObj, BOOL AValue);

BOOL
MaskEdit_GetParentFont(TMaskEdit AObj);

void
MaskEdit_SetParentFont(TMaskEdit AObj, BOOL AValue);

BOOL
MaskEdit_GetParentShowHint(TMaskEdit AObj);

void
MaskEdit_SetParentShowHint(TMaskEdit AObj, BOOL AValue);

Char
MaskEdit_GetPasswordChar(TMaskEdit AObj);

void
MaskEdit_SetPasswordChar(TMaskEdit AObj, Char AValue);

TPopupMenu
MaskEdit_GetPopupMenu(TMaskEdit AObj);

void
MaskEdit_SetPopupMenu(TMaskEdit AObj, TPopupMenu AValue);

BOOL
MaskEdit_GetReadOnly(TMaskEdit AObj);

void
MaskEdit_SetReadOnly(TMaskEdit AObj, BOOL AValue);

BOOL
MaskEdit_GetShowHint(TMaskEdit AObj);

void
MaskEdit_SetShowHint(TMaskEdit AObj, BOOL AValue);

TTabOrder
MaskEdit_GetTabOrder(TMaskEdit AObj);

void
MaskEdit_SetTabOrder(TMaskEdit AObj, TTabOrder AValue);

BOOL
MaskEdit_GetTabStop(TMaskEdit AObj);

void
MaskEdit_SetTabStop(TMaskEdit AObj, BOOL AValue);

char*
MaskEdit_GetText(TMaskEdit AObj);

void
MaskEdit_SetText(TMaskEdit AObj, CChar char* AValue);

char*
MaskEdit_GetTextHint(TMaskEdit AObj);

void
MaskEdit_SetTextHint(TMaskEdit AObj, CChar char* AValue);

BOOL
MaskEdit_GetVisible(TMaskEdit AObj);

void
MaskEdit_SetVisible(TMaskEdit AObj, BOOL AValue);

void
MaskEdit_SetOnChange(TMaskEdit AObj, TNotifyEvent AEventData);

void
MaskEdit_SetOnClick(TMaskEdit AObj, TNotifyEvent AEventData);

void
MaskEdit_SetOnDblClick(TMaskEdit AObj, TNotifyEvent AEventData);

void
MaskEdit_SetOnDragDrop(TMaskEdit AObj, TDragDropEvent AEventData);

void
MaskEdit_SetOnDragOver(TMaskEdit AObj, TDragOverEvent AEventData);

void
MaskEdit_SetOnEndDock(TMaskEdit AObj, TEndDragEvent AEventData);

void
MaskEdit_SetOnEndDrag(TMaskEdit AObj, TEndDragEvent AEventData);

void
MaskEdit_SetOnEnter(TMaskEdit AObj, TNotifyEvent AEventData);

void
MaskEdit_SetOnExit(TMaskEdit AObj, TNotifyEvent AEventData);

void
MaskEdit_SetOnKeyDown(TMaskEdit AObj, TKeyEvent AEventData);

void
MaskEdit_SetOnKeyPress(TMaskEdit AObj, TKeyPressEvent AEventData);

void
MaskEdit_SetOnKeyUp(TMaskEdit AObj, TKeyEvent AEventData);

void
MaskEdit_SetOnMouseDown(TMaskEdit AObj, TMouseEvent AEventData);

void
MaskEdit_SetOnMouseEnter(TMaskEdit AObj, TNotifyEvent AEventData);

void
MaskEdit_SetOnMouseLeave(TMaskEdit AObj, TNotifyEvent AEventData);

void
MaskEdit_SetOnMouseMove(TMaskEdit AObj, TMouseMoveEvent AEventData);

void
MaskEdit_SetOnMouseUp(TMaskEdit AObj, TMouseEvent AEventData);

void
MaskEdit_SetOnStartDock(TMaskEdit AObj, TStartDockEvent AEventData);

BOOL
MaskEdit_GetIsMasked(TMaskEdit AObj);

char*
MaskEdit_GetEditText(TMaskEdit AObj);

void
MaskEdit_SetEditText(TMaskEdit AObj, CChar char* AValue);

BOOL
MaskEdit_GetCanUndo(TMaskEdit AObj);

BOOL
MaskEdit_GetModified(TMaskEdit AObj);

void
MaskEdit_SetModified(TMaskEdit AObj, BOOL AValue);

int32_t
MaskEdit_GetSelLength(TMaskEdit AObj);

void
MaskEdit_SetSelLength(TMaskEdit AObj, int32_t AValue);

int32_t
MaskEdit_GetSelStart(TMaskEdit AObj);

void
MaskEdit_SetSelStart(TMaskEdit AObj, int32_t AValue);

char*
MaskEdit_GetSelText(TMaskEdit AObj);

void
MaskEdit_SetSelText(TMaskEdit AObj, CChar char* AValue);

int32_t
MaskEdit_GetDockClientCount(TMaskEdit AObj);

BOOL
MaskEdit_GetDockSite(TMaskEdit AObj);

void
MaskEdit_SetDockSite(TMaskEdit AObj, BOOL AValue);

BOOL
MaskEdit_GetMouseInClient(TMaskEdit AObj);

int32_t
MaskEdit_GetVisibleDockClientCount(TMaskEdit AObj);

TBrush
MaskEdit_GetBrush(TMaskEdit AObj);

int32_t
MaskEdit_GetControlCount(TMaskEdit AObj);

HWND
MaskEdit_GetHandle(TMaskEdit AObj);

HWND
MaskEdit_GetParentWindow(TMaskEdit AObj);

void
MaskEdit_SetParentWindow(TMaskEdit AObj, HWND AValue);

BOOL
MaskEdit_GetShowing(TMaskEdit AObj);

BOOL
MaskEdit_GetUseDockManager(TMaskEdit AObj);

void
MaskEdit_SetUseDockManager(TMaskEdit AObj, BOOL AValue);

TAction
MaskEdit_GetAction(TMaskEdit AObj);

void
MaskEdit_SetAction(TMaskEdit AObj, TAction AValue);

TRect
MaskEdit_GetBoundsRect(TMaskEdit AObj);

void
MaskEdit_SetBoundsRect(TMaskEdit AObj, TRect AValue);

int32_t
MaskEdit_GetClientHeight(TMaskEdit AObj);

void
MaskEdit_SetClientHeight(TMaskEdit AObj, int32_t AValue);

TPoint
MaskEdit_GetClientOrigin(TMaskEdit AObj);

TRect
MaskEdit_GetClientRect(TMaskEdit AObj);

int32_t
MaskEdit_GetClientWidth(TMaskEdit AObj);

void
MaskEdit_SetClientWidth(TMaskEdit AObj, int32_t AValue);

TControlState
MaskEdit_GetControlState(TMaskEdit AObj);

void
MaskEdit_SetControlState(TMaskEdit AObj, TControlState AValue);

TControlStyle
MaskEdit_GetControlStyle(TMaskEdit AObj);

void
MaskEdit_SetControlStyle(TMaskEdit AObj, TControlStyle AValue);

BOOL
MaskEdit_GetFloating(TMaskEdit AObj);

TWinControl
MaskEdit_GetParent(TMaskEdit AObj);

void
MaskEdit_SetParent(TMaskEdit AObj, TWinControl AValue);

int32_t
MaskEdit_GetLeft(TMaskEdit AObj);

void
MaskEdit_SetLeft(TMaskEdit AObj, int32_t AValue);

int32_t
MaskEdit_GetTop(TMaskEdit AObj);

void
MaskEdit_SetTop(TMaskEdit AObj, int32_t AValue);

int32_t
MaskEdit_GetWidth(TMaskEdit AObj);

void
MaskEdit_SetWidth(TMaskEdit AObj, int32_t AValue);

int32_t
MaskEdit_GetHeight(TMaskEdit AObj);

void
MaskEdit_SetHeight(TMaskEdit AObj, int32_t AValue);

TCursor
MaskEdit_GetCursor(TMaskEdit AObj);

void
MaskEdit_SetCursor(TMaskEdit AObj, TCursor AValue);

char*
MaskEdit_GetHint(TMaskEdit AObj);

void
MaskEdit_SetHint(TMaskEdit AObj, CChar char* AValue);

int32_t
MaskEdit_GetComponentCount(TMaskEdit AObj);

int32_t
MaskEdit_GetComponentIndex(TMaskEdit AObj);

void
MaskEdit_SetComponentIndex(TMaskEdit AObj, int32_t AValue);

TComponent
MaskEdit_GetOwner(TMaskEdit AObj);

char*
MaskEdit_GetName(TMaskEdit AObj);

void
MaskEdit_SetName(TMaskEdit AObj, CChar char* AValue);

intptr_t
MaskEdit_GetTag(TMaskEdit AObj);

void
MaskEdit_SetTag(TMaskEdit AObj, intptr_t AValue);

TAnchorSide
MaskEdit_GetAnchorSideLeft(TMaskEdit AObj);

void
MaskEdit_SetAnchorSideLeft(TMaskEdit AObj, TAnchorSide AValue);

TAnchorSide
MaskEdit_GetAnchorSideTop(TMaskEdit AObj);

void
MaskEdit_SetAnchorSideTop(TMaskEdit AObj, TAnchorSide AValue);

TAnchorSide
MaskEdit_GetAnchorSideRight(TMaskEdit AObj);

void
MaskEdit_SetAnchorSideRight(TMaskEdit AObj, TAnchorSide AValue);

TAnchorSide
MaskEdit_GetAnchorSideBottom(TMaskEdit AObj);

void
MaskEdit_SetAnchorSideBottom(TMaskEdit AObj, TAnchorSide AValue);

TControlChildSizing
MaskEdit_GetChildSizing(TMaskEdit AObj);

void
MaskEdit_SetChildSizing(TMaskEdit AObj, TControlChildSizing AValue);

TControlBorderSpacing
MaskEdit_GetBorderSpacing(TMaskEdit AObj);

void
MaskEdit_SetBorderSpacing(TMaskEdit AObj, TControlBorderSpacing AValue);

TControl
MaskEdit_GetDockClients(TMaskEdit AObj, int32_t Index);

TControl
MaskEdit_GetControls(TMaskEdit AObj, int32_t Index);

TComponent
MaskEdit_GetComponents(TMaskEdit AObj, int32_t AIndex);

TAnchorSide
MaskEdit_GetAnchorSide(TMaskEdit AObj, TAnchorKind AKind);

TClass
MaskEdit_StaticClassType();

// -------------------TShape-------------------

TShape
Shape_Create(TComponent AOwner);

void
Shape_Free(TShape AObj);

void
Shape_BringToFront(TShape AObj);

TPoint
Shape_ClientToScreen(TShape AObj, TPoint Point);

TPoint
Shape_ClientToParent(TShape AObj, TPoint Point, TWinControl AParent);

BOOL
Shape_Dragging(TShape AObj);

BOOL
Shape_HasParent(TShape AObj);

void
Shape_Hide(TShape AObj);

void
Shape_Invalidate(TShape AObj);

intptr_t
Shape_Perform(TShape AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
Shape_Refresh(TShape AObj);

void
Shape_Repaint(TShape AObj);

TPoint
Shape_ScreenToClient(TShape AObj, TPoint Point);

TPoint
Shape_ParentToClient(TShape AObj, TPoint Point, TWinControl AParent);

void
Shape_SendToBack(TShape AObj);

void
Shape_SetBounds(TShape AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
Shape_Show(TShape AObj);

void
Shape_Update(TShape AObj);

int32_t
Shape_GetTextBuf(TShape AObj, CChar char* Buffer, int32_t BufSize);

int32_t
Shape_GetTextLen(TShape AObj);

void
Shape_SetTextBuf(TShape AObj, CChar char* Buffer);

TComponent
Shape_FindComponent(TShape AObj, CChar char* AName);

char*
Shape_GetNamePath(TShape AObj);

void
Shape_Assign(TShape AObj, TObject Source);

TClass
Shape_ClassType(TShape AObj);

char*
Shape_ClassName(TShape AObj);

int32_t
Shape_InstanceSize(TShape AObj);

BOOL
Shape_InheritsFrom(TShape AObj, TClass AClass);

BOOL
Shape_Equals(TShape AObj, TObject Obj);

int32_t
Shape_GetHashCode(TShape AObj);

char*
Shape_ToString(TShape AObj);

void
Shape_AnchorToNeighbour(TShape AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Shape_AnchorParallel(TShape AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Shape_AnchorHorizontalCenterTo(TShape AObj, TControl ASibling);

void
Shape_AnchorVerticalCenterTo(TShape AObj, TControl ASibling);

void
Shape_AnchorSame(TShape AObj, TAnchorKind ASide, TControl ASibling);

void
Shape_AnchorAsAlign(TShape AObj, TAlign ATheAlign, int32_t ASpace);

void
Shape_AnchorClient(TShape AObj, int32_t ASpace);

int32_t
Shape_ScaleDesignToForm(TShape AObj, int32_t ASize);

int32_t
Shape_ScaleFormToDesign(TShape AObj, int32_t ASize);

int32_t
Shape_Scale96ToForm(TShape AObj, int32_t ASize);

int32_t
Shape_ScaleFormTo96(TShape AObj, int32_t ASize);

int32_t
Shape_Scale96ToFont(TShape AObj, int32_t ASize);

int32_t
Shape_ScaleFontTo96(TShape AObj, int32_t ASize);

int32_t
Shape_ScaleScreenToFont(TShape AObj, int32_t ASize);

int32_t
Shape_ScaleFontToScreen(TShape AObj, int32_t ASize);

int32_t
Shape_Scale96ToScreen(TShape AObj, int32_t ASize);

int32_t
Shape_ScaleScreenTo96(TShape AObj, int32_t ASize);

void
Shape_AutoAdjustLayout(TShape AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
Shape_FixDesignFontsPPI(TShape AObj, int32_t ADesignTimePPI);

void
Shape_ScaleFontsPPI(TShape AObj, int32_t AToPPI, double AProportion);

TAlign
Shape_GetAlign(TShape AObj);

void
Shape_SetAlign(TShape AObj, TAlign AValue);

TAnchors
Shape_GetAnchors(TShape AObj);

void
Shape_SetAnchors(TShape AObj, TAnchors AValue);

TBrush
Shape_GetBrush(TShape AObj);

void
Shape_SetBrush(TShape AObj, TBrush AValue);

TCursor
Shape_GetDragCursor(TShape AObj);

void
Shape_SetDragCursor(TShape AObj, TCursor AValue);

TDragKind
Shape_GetDragKind(TShape AObj);

void
Shape_SetDragKind(TShape AObj, TDragKind AValue);

TDragMode
Shape_GetDragMode(TShape AObj);

void
Shape_SetDragMode(TShape AObj, TDragMode AValue);

BOOL
Shape_GetEnabled(TShape AObj);

void
Shape_SetEnabled(TShape AObj, BOOL AValue);

TSizeConstraints
Shape_GetConstraints(TShape AObj);

void
Shape_SetConstraints(TShape AObj, TSizeConstraints AValue);

BOOL
Shape_GetParentShowHint(TShape AObj);

void
Shape_SetParentShowHint(TShape AObj, BOOL AValue);

TPen
Shape_GetPen(TShape AObj);

void
Shape_SetPen(TShape AObj, TPen AValue);

TShapeType
Shape_GetShape(TShape AObj);

void
Shape_SetShape(TShape AObj, TShapeType AValue);

BOOL
Shape_GetShowHint(TShape AObj);

void
Shape_SetShowHint(TShape AObj, BOOL AValue);

BOOL
Shape_GetVisible(TShape AObj);

void
Shape_SetVisible(TShape AObj, BOOL AValue);

void
Shape_SetOnDragDrop(TShape AObj, TDragDropEvent AEventData);

void
Shape_SetOnDragOver(TShape AObj, TDragOverEvent AEventData);

void
Shape_SetOnEndDrag(TShape AObj, TEndDragEvent AEventData);

void
Shape_SetOnMouseDown(TShape AObj, TMouseEvent AEventData);

void
Shape_SetOnMouseEnter(TShape AObj, TNotifyEvent AEventData);

void
Shape_SetOnMouseLeave(TShape AObj, TNotifyEvent AEventData);

void
Shape_SetOnMouseMove(TShape AObj, TMouseMoveEvent AEventData);

void
Shape_SetOnMouseUp(TShape AObj, TMouseEvent AEventData);

TAction
Shape_GetAction(TShape AObj);

void
Shape_SetAction(TShape AObj, TAction AValue);

TBiDiMode
Shape_GetBiDiMode(TShape AObj);

void
Shape_SetBiDiMode(TShape AObj, TBiDiMode AValue);

TRect
Shape_GetBoundsRect(TShape AObj);

void
Shape_SetBoundsRect(TShape AObj, TRect AValue);

int32_t
Shape_GetClientHeight(TShape AObj);

void
Shape_SetClientHeight(TShape AObj, int32_t AValue);

TPoint
Shape_GetClientOrigin(TShape AObj);

TRect
Shape_GetClientRect(TShape AObj);

int32_t
Shape_GetClientWidth(TShape AObj);

void
Shape_SetClientWidth(TShape AObj, int32_t AValue);

TControlState
Shape_GetControlState(TShape AObj);

void
Shape_SetControlState(TShape AObj, TControlState AValue);

TControlStyle
Shape_GetControlStyle(TShape AObj);

void
Shape_SetControlStyle(TShape AObj, TControlStyle AValue);

BOOL
Shape_GetFloating(TShape AObj);

TWinControl
Shape_GetParent(TShape AObj);

void
Shape_SetParent(TShape AObj, TWinControl AValue);

int32_t
Shape_GetLeft(TShape AObj);

void
Shape_SetLeft(TShape AObj, int32_t AValue);

int32_t
Shape_GetTop(TShape AObj);

void
Shape_SetTop(TShape AObj, int32_t AValue);

int32_t
Shape_GetWidth(TShape AObj);

void
Shape_SetWidth(TShape AObj, int32_t AValue);

int32_t
Shape_GetHeight(TShape AObj);

void
Shape_SetHeight(TShape AObj, int32_t AValue);

TCursor
Shape_GetCursor(TShape AObj);

void
Shape_SetCursor(TShape AObj, TCursor AValue);

char*
Shape_GetHint(TShape AObj);

void
Shape_SetHint(TShape AObj, CChar char* AValue);

int32_t
Shape_GetComponentCount(TShape AObj);

int32_t
Shape_GetComponentIndex(TShape AObj);

void
Shape_SetComponentIndex(TShape AObj, int32_t AValue);

TComponent
Shape_GetOwner(TShape AObj);

char*
Shape_GetName(TShape AObj);

void
Shape_SetName(TShape AObj, CChar char* AValue);

intptr_t
Shape_GetTag(TShape AObj);

void
Shape_SetTag(TShape AObj, intptr_t AValue);

TAnchorSide
Shape_GetAnchorSideLeft(TShape AObj);

void
Shape_SetAnchorSideLeft(TShape AObj, TAnchorSide AValue);

TAnchorSide
Shape_GetAnchorSideTop(TShape AObj);

void
Shape_SetAnchorSideTop(TShape AObj, TAnchorSide AValue);

TAnchorSide
Shape_GetAnchorSideRight(TShape AObj);

void
Shape_SetAnchorSideRight(TShape AObj, TAnchorSide AValue);

TAnchorSide
Shape_GetAnchorSideBottom(TShape AObj);

void
Shape_SetAnchorSideBottom(TShape AObj, TAnchorSide AValue);

TControlBorderSpacing
Shape_GetBorderSpacing(TShape AObj);

void
Shape_SetBorderSpacing(TShape AObj, TControlBorderSpacing AValue);

TComponent
Shape_GetComponents(TShape AObj, int32_t AIndex);

TAnchorSide
Shape_GetAnchorSide(TShape AObj, TAnchorKind AKind);

TClass
Shape_StaticClassType();

// -------------------TBevel-------------------

TBevel
Bevel_Create(TComponent AOwner);

void
Bevel_Free(TBevel AObj);

void
Bevel_BringToFront(TBevel AObj);

TPoint
Bevel_ClientToScreen(TBevel AObj, TPoint Point);

TPoint
Bevel_ClientToParent(TBevel AObj, TPoint Point, TWinControl AParent);

BOOL
Bevel_Dragging(TBevel AObj);

BOOL
Bevel_HasParent(TBevel AObj);

void
Bevel_Hide(TBevel AObj);

void
Bevel_Invalidate(TBevel AObj);

intptr_t
Bevel_Perform(TBevel AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
Bevel_Refresh(TBevel AObj);

void
Bevel_Repaint(TBevel AObj);

TPoint
Bevel_ScreenToClient(TBevel AObj, TPoint Point);

TPoint
Bevel_ParentToClient(TBevel AObj, TPoint Point, TWinControl AParent);

void
Bevel_SendToBack(TBevel AObj);

void
Bevel_SetBounds(TBevel AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
Bevel_Show(TBevel AObj);

void
Bevel_Update(TBevel AObj);

int32_t
Bevel_GetTextBuf(TBevel AObj, CChar char* Buffer, int32_t BufSize);

int32_t
Bevel_GetTextLen(TBevel AObj);

void
Bevel_SetTextBuf(TBevel AObj, CChar char* Buffer);

TComponent
Bevel_FindComponent(TBevel AObj, CChar char* AName);

char*
Bevel_GetNamePath(TBevel AObj);

void
Bevel_Assign(TBevel AObj, TObject Source);

TClass
Bevel_ClassType(TBevel AObj);

char*
Bevel_ClassName(TBevel AObj);

int32_t
Bevel_InstanceSize(TBevel AObj);

BOOL
Bevel_InheritsFrom(TBevel AObj, TClass AClass);

BOOL
Bevel_Equals(TBevel AObj, TObject Obj);

int32_t
Bevel_GetHashCode(TBevel AObj);

char*
Bevel_ToString(TBevel AObj);

void
Bevel_AnchorToNeighbour(TBevel AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Bevel_AnchorParallel(TBevel AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Bevel_AnchorHorizontalCenterTo(TBevel AObj, TControl ASibling);

void
Bevel_AnchorVerticalCenterTo(TBevel AObj, TControl ASibling);

void
Bevel_AnchorSame(TBevel AObj, TAnchorKind ASide, TControl ASibling);

void
Bevel_AnchorAsAlign(TBevel AObj, TAlign ATheAlign, int32_t ASpace);

void
Bevel_AnchorClient(TBevel AObj, int32_t ASpace);

int32_t
Bevel_ScaleDesignToForm(TBevel AObj, int32_t ASize);

int32_t
Bevel_ScaleFormToDesign(TBevel AObj, int32_t ASize);

int32_t
Bevel_Scale96ToForm(TBevel AObj, int32_t ASize);

int32_t
Bevel_ScaleFormTo96(TBevel AObj, int32_t ASize);

int32_t
Bevel_Scale96ToFont(TBevel AObj, int32_t ASize);

int32_t
Bevel_ScaleFontTo96(TBevel AObj, int32_t ASize);

int32_t
Bevel_ScaleScreenToFont(TBevel AObj, int32_t ASize);

int32_t
Bevel_ScaleFontToScreen(TBevel AObj, int32_t ASize);

int32_t
Bevel_Scale96ToScreen(TBevel AObj, int32_t ASize);

int32_t
Bevel_ScaleScreenTo96(TBevel AObj, int32_t ASize);

void
Bevel_AutoAdjustLayout(TBevel AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
Bevel_FixDesignFontsPPI(TBevel AObj, int32_t ADesignTimePPI);

void
Bevel_ScaleFontsPPI(TBevel AObj, int32_t AToPPI, double AProportion);

TAlign
Bevel_GetAlign(TBevel AObj);

void
Bevel_SetAlign(TBevel AObj, TAlign AValue);

TAnchors
Bevel_GetAnchors(TBevel AObj);

void
Bevel_SetAnchors(TBevel AObj, TAnchors AValue);

TSizeConstraints
Bevel_GetConstraints(TBevel AObj);

void
Bevel_SetConstraints(TBevel AObj, TSizeConstraints AValue);

BOOL
Bevel_GetParentShowHint(TBevel AObj);

void
Bevel_SetParentShowHint(TBevel AObj, BOOL AValue);

TBevelShape
Bevel_GetShape(TBevel AObj);

void
Bevel_SetShape(TBevel AObj, TBevelShape AValue);

BOOL
Bevel_GetShowHint(TBevel AObj);

void
Bevel_SetShowHint(TBevel AObj, BOOL AValue);

TBevelStyle
Bevel_GetStyle(TBevel AObj);

void
Bevel_SetStyle(TBevel AObj, TBevelStyle AValue);

BOOL
Bevel_GetVisible(TBevel AObj);

void
Bevel_SetVisible(TBevel AObj, BOOL AValue);

BOOL
Bevel_GetEnabled(TBevel AObj);

void
Bevel_SetEnabled(TBevel AObj, BOOL AValue);

TAction
Bevel_GetAction(TBevel AObj);

void
Bevel_SetAction(TBevel AObj, TAction AValue);

TBiDiMode
Bevel_GetBiDiMode(TBevel AObj);

void
Bevel_SetBiDiMode(TBevel AObj, TBiDiMode AValue);

TRect
Bevel_GetBoundsRect(TBevel AObj);

void
Bevel_SetBoundsRect(TBevel AObj, TRect AValue);

int32_t
Bevel_GetClientHeight(TBevel AObj);

void
Bevel_SetClientHeight(TBevel AObj, int32_t AValue);

TPoint
Bevel_GetClientOrigin(TBevel AObj);

TRect
Bevel_GetClientRect(TBevel AObj);

int32_t
Bevel_GetClientWidth(TBevel AObj);

void
Bevel_SetClientWidth(TBevel AObj, int32_t AValue);

TControlState
Bevel_GetControlState(TBevel AObj);

void
Bevel_SetControlState(TBevel AObj, TControlState AValue);

TControlStyle
Bevel_GetControlStyle(TBevel AObj);

void
Bevel_SetControlStyle(TBevel AObj, TControlStyle AValue);

BOOL
Bevel_GetFloating(TBevel AObj);

TWinControl
Bevel_GetParent(TBevel AObj);

void
Bevel_SetParent(TBevel AObj, TWinControl AValue);

int32_t
Bevel_GetLeft(TBevel AObj);

void
Bevel_SetLeft(TBevel AObj, int32_t AValue);

int32_t
Bevel_GetTop(TBevel AObj);

void
Bevel_SetTop(TBevel AObj, int32_t AValue);

int32_t
Bevel_GetWidth(TBevel AObj);

void
Bevel_SetWidth(TBevel AObj, int32_t AValue);

int32_t
Bevel_GetHeight(TBevel AObj);

void
Bevel_SetHeight(TBevel AObj, int32_t AValue);

TCursor
Bevel_GetCursor(TBevel AObj);

void
Bevel_SetCursor(TBevel AObj, TCursor AValue);

char*
Bevel_GetHint(TBevel AObj);

void
Bevel_SetHint(TBevel AObj, CChar char* AValue);

int32_t
Bevel_GetComponentCount(TBevel AObj);

int32_t
Bevel_GetComponentIndex(TBevel AObj);

void
Bevel_SetComponentIndex(TBevel AObj, int32_t AValue);

TComponent
Bevel_GetOwner(TBevel AObj);

char*
Bevel_GetName(TBevel AObj);

void
Bevel_SetName(TBevel AObj, CChar char* AValue);

intptr_t
Bevel_GetTag(TBevel AObj);

void
Bevel_SetTag(TBevel AObj, intptr_t AValue);

TAnchorSide
Bevel_GetAnchorSideLeft(TBevel AObj);

void
Bevel_SetAnchorSideLeft(TBevel AObj, TAnchorSide AValue);

TAnchorSide
Bevel_GetAnchorSideTop(TBevel AObj);

void
Bevel_SetAnchorSideTop(TBevel AObj, TAnchorSide AValue);

TAnchorSide
Bevel_GetAnchorSideRight(TBevel AObj);

void
Bevel_SetAnchorSideRight(TBevel AObj, TAnchorSide AValue);

TAnchorSide
Bevel_GetAnchorSideBottom(TBevel AObj);

void
Bevel_SetAnchorSideBottom(TBevel AObj, TAnchorSide AValue);

TControlBorderSpacing
Bevel_GetBorderSpacing(TBevel AObj);

void
Bevel_SetBorderSpacing(TBevel AObj, TControlBorderSpacing AValue);

TComponent
Bevel_GetComponents(TBevel AObj, int32_t AIndex);

TAnchorSide
Bevel_GetAnchorSide(TBevel AObj, TAnchorKind AKind);

TClass
Bevel_StaticClassType();

// -------------------TScrollBox-------------------

TScrollBox
ScrollBox_Create(TComponent AOwner);

void
ScrollBox_Free(TScrollBox AObj);

void
ScrollBox_ScrollInView(TScrollBox AObj, TControl AControl);

BOOL
ScrollBox_CanFocus(TScrollBox AObj);

BOOL
ScrollBox_ContainsControl(TScrollBox AObj, TControl Control);

TControl
ScrollBox_ControlAtPos(TScrollBox AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
ScrollBox_DisableAlign(TScrollBox AObj);

void
ScrollBox_EnableAlign(TScrollBox AObj);

TControl
ScrollBox_FindChildControl(TScrollBox AObj, CChar char* ControlName);

void
ScrollBox_FlipChildren(TScrollBox AObj, BOOL AllLevels);

BOOL
ScrollBox_Focused(TScrollBox AObj);

BOOL
ScrollBox_HandleAllocated(TScrollBox AObj);

void
ScrollBox_InsertControl(TScrollBox AObj, TControl AControl);

void
ScrollBox_Invalidate(TScrollBox AObj);

void
ScrollBox_PaintTo(TScrollBox AObj, HDC DC, int32_t X, int32_t Y);

void
ScrollBox_RemoveControl(TScrollBox AObj, TControl AControl);

void
ScrollBox_Realign(TScrollBox AObj);

void
ScrollBox_Repaint(TScrollBox AObj);

void
ScrollBox_ScaleBy(TScrollBox AObj, int32_t M, int32_t D);

void
ScrollBox_ScrollBy(TScrollBox AObj, int32_t DeltaX, int32_t DeltaY);

void
ScrollBox_SetBounds(TScrollBox AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ScrollBox_SetFocus(TScrollBox AObj);

void
ScrollBox_Update(TScrollBox AObj);

void
ScrollBox_BringToFront(TScrollBox AObj);

TPoint
ScrollBox_ClientToScreen(TScrollBox AObj, TPoint Point);

TPoint
ScrollBox_ClientToParent(TScrollBox AObj, TPoint Point, TWinControl AParent);

BOOL
ScrollBox_Dragging(TScrollBox AObj);

BOOL
ScrollBox_HasParent(TScrollBox AObj);

void
ScrollBox_Hide(TScrollBox AObj);

intptr_t
ScrollBox_Perform(TScrollBox AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ScrollBox_Refresh(TScrollBox AObj);

TPoint
ScrollBox_ScreenToClient(TScrollBox AObj, TPoint Point);

TPoint
ScrollBox_ParentToClient(TScrollBox AObj, TPoint Point, TWinControl AParent);

void
ScrollBox_SendToBack(TScrollBox AObj);

void
ScrollBox_Show(TScrollBox AObj);

int32_t
ScrollBox_GetTextBuf(TScrollBox AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ScrollBox_GetTextLen(TScrollBox AObj);

void
ScrollBox_SetTextBuf(TScrollBox AObj, CChar char* Buffer);

TComponent
ScrollBox_FindComponent(TScrollBox AObj, CChar char* AName);

char*
ScrollBox_GetNamePath(TScrollBox AObj);

void
ScrollBox_Assign(TScrollBox AObj, TObject Source);

TClass
ScrollBox_ClassType(TScrollBox AObj);

char*
ScrollBox_ClassName(TScrollBox AObj);

int32_t
ScrollBox_InstanceSize(TScrollBox AObj);

BOOL
ScrollBox_InheritsFrom(TScrollBox AObj, TClass AClass);

BOOL
ScrollBox_Equals(TScrollBox AObj, TObject Obj);

int32_t
ScrollBox_GetHashCode(TScrollBox AObj);

char*
ScrollBox_ToString(TScrollBox AObj);

void
ScrollBox_AnchorToNeighbour(TScrollBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ScrollBox_AnchorParallel(TScrollBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ScrollBox_AnchorHorizontalCenterTo(TScrollBox AObj, TControl ASibling);

void
ScrollBox_AnchorVerticalCenterTo(TScrollBox AObj, TControl ASibling);

void
ScrollBox_AnchorSame(TScrollBox AObj, TAnchorKind ASide, TControl ASibling);

void
ScrollBox_AnchorAsAlign(TScrollBox AObj, TAlign ATheAlign, int32_t ASpace);

void
ScrollBox_AnchorClient(TScrollBox AObj, int32_t ASpace);

int32_t
ScrollBox_ScaleDesignToForm(TScrollBox AObj, int32_t ASize);

int32_t
ScrollBox_ScaleFormToDesign(TScrollBox AObj, int32_t ASize);

int32_t
ScrollBox_Scale96ToForm(TScrollBox AObj, int32_t ASize);

int32_t
ScrollBox_ScaleFormTo96(TScrollBox AObj, int32_t ASize);

int32_t
ScrollBox_Scale96ToFont(TScrollBox AObj, int32_t ASize);

int32_t
ScrollBox_ScaleFontTo96(TScrollBox AObj, int32_t ASize);

int32_t
ScrollBox_ScaleScreenToFont(TScrollBox AObj, int32_t ASize);

int32_t
ScrollBox_ScaleFontToScreen(TScrollBox AObj, int32_t ASize);

int32_t
ScrollBox_Scale96ToScreen(TScrollBox AObj, int32_t ASize);

int32_t
ScrollBox_ScaleScreenTo96(TScrollBox AObj, int32_t ASize);

void
ScrollBox_AutoAdjustLayout(TScrollBox AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ScrollBox_FixDesignFontsPPI(TScrollBox AObj, int32_t ADesignTimePPI);

void
ScrollBox_ScaleFontsPPI(TScrollBox AObj, int32_t AToPPI, double AProportion);

TAlign
ScrollBox_GetAlign(TScrollBox AObj);

void
ScrollBox_SetAlign(TScrollBox AObj, TAlign AValue);

TAnchors
ScrollBox_GetAnchors(TScrollBox AObj);

void
ScrollBox_SetAnchors(TScrollBox AObj, TAnchors AValue);

BOOL
ScrollBox_GetAutoScroll(TScrollBox AObj);

void
ScrollBox_SetAutoScroll(TScrollBox AObj, BOOL AValue);

BOOL
ScrollBox_GetAutoSize(TScrollBox AObj);

void
ScrollBox_SetAutoSize(TScrollBox AObj, BOOL AValue);

TBiDiMode
ScrollBox_GetBiDiMode(TScrollBox AObj);

void
ScrollBox_SetBiDiMode(TScrollBox AObj, TBiDiMode AValue);

TBorderStyle
ScrollBox_GetBorderStyle(TScrollBox AObj);

void
ScrollBox_SetBorderStyle(TScrollBox AObj, TBorderStyle AValue);

TSizeConstraints
ScrollBox_GetConstraints(TScrollBox AObj);

void
ScrollBox_SetConstraints(TScrollBox AObj, TSizeConstraints AValue);

BOOL
ScrollBox_GetDockSite(TScrollBox AObj);

void
ScrollBox_SetDockSite(TScrollBox AObj, BOOL AValue);

BOOL
ScrollBox_GetDoubleBuffered(TScrollBox AObj);

void
ScrollBox_SetDoubleBuffered(TScrollBox AObj, BOOL AValue);

TCursor
ScrollBox_GetDragCursor(TScrollBox AObj);

void
ScrollBox_SetDragCursor(TScrollBox AObj, TCursor AValue);

TDragKind
ScrollBox_GetDragKind(TScrollBox AObj);

void
ScrollBox_SetDragKind(TScrollBox AObj, TDragKind AValue);

TDragMode
ScrollBox_GetDragMode(TScrollBox AObj);

void
ScrollBox_SetDragMode(TScrollBox AObj, TDragMode AValue);

BOOL
ScrollBox_GetEnabled(TScrollBox AObj);

void
ScrollBox_SetEnabled(TScrollBox AObj, BOOL AValue);

TColor
ScrollBox_GetColor(TScrollBox AObj);

void
ScrollBox_SetColor(TScrollBox AObj, TColor AValue);

TFont
ScrollBox_GetFont(TScrollBox AObj);

void
ScrollBox_SetFont(TScrollBox AObj, TFont AValue);

BOOL
ScrollBox_GetParentBackground(TScrollBox AObj);

void
ScrollBox_SetParentBackground(TScrollBox AObj, BOOL AValue);

BOOL
ScrollBox_GetParentColor(TScrollBox AObj);

void
ScrollBox_SetParentColor(TScrollBox AObj, BOOL AValue);

BOOL
ScrollBox_GetParentDoubleBuffered(TScrollBox AObj);

void
ScrollBox_SetParentDoubleBuffered(TScrollBox AObj, BOOL AValue);

BOOL
ScrollBox_GetParentFont(TScrollBox AObj);

void
ScrollBox_SetParentFont(TScrollBox AObj, BOOL AValue);

BOOL
ScrollBox_GetParentShowHint(TScrollBox AObj);

void
ScrollBox_SetParentShowHint(TScrollBox AObj, BOOL AValue);

TPopupMenu
ScrollBox_GetPopupMenu(TScrollBox AObj);

void
ScrollBox_SetPopupMenu(TScrollBox AObj, TPopupMenu AValue);

BOOL
ScrollBox_GetShowHint(TScrollBox AObj);

void
ScrollBox_SetShowHint(TScrollBox AObj, BOOL AValue);

TTabOrder
ScrollBox_GetTabOrder(TScrollBox AObj);

void
ScrollBox_SetTabOrder(TScrollBox AObj, TTabOrder AValue);

BOOL
ScrollBox_GetTabStop(TScrollBox AObj);

void
ScrollBox_SetTabStop(TScrollBox AObj, BOOL AValue);

BOOL
ScrollBox_GetVisible(TScrollBox AObj);

void
ScrollBox_SetVisible(TScrollBox AObj, BOOL AValue);

void
ScrollBox_SetOnClick(TScrollBox AObj, TNotifyEvent AEventData);

void
ScrollBox_SetOnConstrainedResize(TScrollBox AObj, TConstrainedResizeEvent AEventData);

void
ScrollBox_SetOnDblClick(TScrollBox AObj, TNotifyEvent AEventData);

void
ScrollBox_SetOnDockDrop(TScrollBox AObj, TDockDropEvent AEventData);

void
ScrollBox_SetOnDragDrop(TScrollBox AObj, TDragDropEvent AEventData);

void
ScrollBox_SetOnDragOver(TScrollBox AObj, TDragOverEvent AEventData);

void
ScrollBox_SetOnEndDrag(TScrollBox AObj, TEndDragEvent AEventData);

void
ScrollBox_SetOnEnter(TScrollBox AObj, TNotifyEvent AEventData);

void
ScrollBox_SetOnExit(TScrollBox AObj, TNotifyEvent AEventData);

void
ScrollBox_SetOnGetSiteInfo(TScrollBox AObj, TGetSiteInfoEvent AEventData);

void
ScrollBox_SetOnMouseDown(TScrollBox AObj, TMouseEvent AEventData);

void
ScrollBox_SetOnMouseEnter(TScrollBox AObj, TNotifyEvent AEventData);

void
ScrollBox_SetOnMouseLeave(TScrollBox AObj, TNotifyEvent AEventData);

void
ScrollBox_SetOnMouseMove(TScrollBox AObj, TMouseMoveEvent AEventData);

void
ScrollBox_SetOnMouseUp(TScrollBox AObj, TMouseEvent AEventData);

void
ScrollBox_SetOnMouseWheel(TScrollBox AObj, TMouseWheelEvent AEventData);

void
ScrollBox_SetOnMouseWheelDown(TScrollBox AObj, TMouseWheelUpDownEvent AEventData);

void
ScrollBox_SetOnMouseWheelUp(TScrollBox AObj, TMouseWheelUpDownEvent AEventData);

void
ScrollBox_SetOnResize(TScrollBox AObj, TNotifyEvent AEventData);

void
ScrollBox_SetOnUnDock(TScrollBox AObj, TUnDockEvent AEventData);

void
ScrollBox_SetOnAlignPosition(TScrollBox AObj, TAlignPositionEvent AEventData);

TControlScrollBar
ScrollBox_GetHorzScrollBar(TScrollBox AObj);

void
ScrollBox_SetHorzScrollBar(TScrollBox AObj, TControlScrollBar AValue);

TControlScrollBar
ScrollBox_GetVertScrollBar(TScrollBox AObj);

void
ScrollBox_SetVertScrollBar(TScrollBox AObj, TControlScrollBar AValue);

int32_t
ScrollBox_GetDockClientCount(TScrollBox AObj);

BOOL
ScrollBox_GetMouseInClient(TScrollBox AObj);

int32_t
ScrollBox_GetVisibleDockClientCount(TScrollBox AObj);

TBrush
ScrollBox_GetBrush(TScrollBox AObj);

int32_t
ScrollBox_GetControlCount(TScrollBox AObj);

HWND
ScrollBox_GetHandle(TScrollBox AObj);

HWND
ScrollBox_GetParentWindow(TScrollBox AObj);

void
ScrollBox_SetParentWindow(TScrollBox AObj, HWND AValue);

BOOL
ScrollBox_GetShowing(TScrollBox AObj);

BOOL
ScrollBox_GetUseDockManager(TScrollBox AObj);

void
ScrollBox_SetUseDockManager(TScrollBox AObj, BOOL AValue);

TAction
ScrollBox_GetAction(TScrollBox AObj);

void
ScrollBox_SetAction(TScrollBox AObj, TAction AValue);

TRect
ScrollBox_GetBoundsRect(TScrollBox AObj);

void
ScrollBox_SetBoundsRect(TScrollBox AObj, TRect AValue);

int32_t
ScrollBox_GetClientHeight(TScrollBox AObj);

void
ScrollBox_SetClientHeight(TScrollBox AObj, int32_t AValue);

TPoint
ScrollBox_GetClientOrigin(TScrollBox AObj);

TRect
ScrollBox_GetClientRect(TScrollBox AObj);

int32_t
ScrollBox_GetClientWidth(TScrollBox AObj);

void
ScrollBox_SetClientWidth(TScrollBox AObj, int32_t AValue);

TControlState
ScrollBox_GetControlState(TScrollBox AObj);

void
ScrollBox_SetControlState(TScrollBox AObj, TControlState AValue);

TControlStyle
ScrollBox_GetControlStyle(TScrollBox AObj);

void
ScrollBox_SetControlStyle(TScrollBox AObj, TControlStyle AValue);

BOOL
ScrollBox_GetFloating(TScrollBox AObj);

TWinControl
ScrollBox_GetParent(TScrollBox AObj);

void
ScrollBox_SetParent(TScrollBox AObj, TWinControl AValue);

int32_t
ScrollBox_GetLeft(TScrollBox AObj);

void
ScrollBox_SetLeft(TScrollBox AObj, int32_t AValue);

int32_t
ScrollBox_GetTop(TScrollBox AObj);

void
ScrollBox_SetTop(TScrollBox AObj, int32_t AValue);

int32_t
ScrollBox_GetWidth(TScrollBox AObj);

void
ScrollBox_SetWidth(TScrollBox AObj, int32_t AValue);

int32_t
ScrollBox_GetHeight(TScrollBox AObj);

void
ScrollBox_SetHeight(TScrollBox AObj, int32_t AValue);

TCursor
ScrollBox_GetCursor(TScrollBox AObj);

void
ScrollBox_SetCursor(TScrollBox AObj, TCursor AValue);

char*
ScrollBox_GetHint(TScrollBox AObj);

void
ScrollBox_SetHint(TScrollBox AObj, CChar char* AValue);

int32_t
ScrollBox_GetComponentCount(TScrollBox AObj);

int32_t
ScrollBox_GetComponentIndex(TScrollBox AObj);

void
ScrollBox_SetComponentIndex(TScrollBox AObj, int32_t AValue);

TComponent
ScrollBox_GetOwner(TScrollBox AObj);

char*
ScrollBox_GetName(TScrollBox AObj);

void
ScrollBox_SetName(TScrollBox AObj, CChar char* AValue);

intptr_t
ScrollBox_GetTag(TScrollBox AObj);

void
ScrollBox_SetTag(TScrollBox AObj, intptr_t AValue);

TAnchorSide
ScrollBox_GetAnchorSideLeft(TScrollBox AObj);

void
ScrollBox_SetAnchorSideLeft(TScrollBox AObj, TAnchorSide AValue);

TAnchorSide
ScrollBox_GetAnchorSideTop(TScrollBox AObj);

void
ScrollBox_SetAnchorSideTop(TScrollBox AObj, TAnchorSide AValue);

TAnchorSide
ScrollBox_GetAnchorSideRight(TScrollBox AObj);

void
ScrollBox_SetAnchorSideRight(TScrollBox AObj, TAnchorSide AValue);

TAnchorSide
ScrollBox_GetAnchorSideBottom(TScrollBox AObj);

void
ScrollBox_SetAnchorSideBottom(TScrollBox AObj, TAnchorSide AValue);

TControlChildSizing
ScrollBox_GetChildSizing(TScrollBox AObj);

void
ScrollBox_SetChildSizing(TScrollBox AObj, TControlChildSizing AValue);

TControlBorderSpacing
ScrollBox_GetBorderSpacing(TScrollBox AObj);

void
ScrollBox_SetBorderSpacing(TScrollBox AObj, TControlBorderSpacing AValue);

TControl
ScrollBox_GetDockClients(TScrollBox AObj, int32_t Index);

TControl
ScrollBox_GetControls(TScrollBox AObj, int32_t Index);

TComponent
ScrollBox_GetComponents(TScrollBox AObj, int32_t AIndex);

TAnchorSide
ScrollBox_GetAnchorSide(TScrollBox AObj, TAnchorKind AKind);

TClass
ScrollBox_StaticClassType();

// -------------------TCheckListBox-------------------

TCheckListBox
CheckListBox_Create(TComponent AOwner);

void
CheckListBox_Free(TCheckListBox AObj);

void
CheckListBox_CheckAll(TCheckListBox AObj, TCheckBoxState AState, BOOL AllowGrayed, BOOL AllowDisabled);

void
CheckListBox_AddItem(TCheckListBox AObj, CChar char* Item, TObject AObject);

void
CheckListBox_Clear(TCheckListBox AObj);

void
CheckListBox_ClearSelection(TCheckListBox AObj);

void
CheckListBox_DeleteSelected(TCheckListBox AObj);

int32_t
CheckListBox_ItemAtPos(TCheckListBox AObj, TPoint Pos, BOOL Existing);

TRect
CheckListBox_ItemRect(TCheckListBox AObj, int32_t Index);

void
CheckListBox_SelectAll(TCheckListBox AObj);

BOOL
CheckListBox_CanFocus(TCheckListBox AObj);

BOOL
CheckListBox_ContainsControl(TCheckListBox AObj, TControl Control);

TControl
CheckListBox_ControlAtPos(TCheckListBox AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
CheckListBox_DisableAlign(TCheckListBox AObj);

void
CheckListBox_EnableAlign(TCheckListBox AObj);

TControl
CheckListBox_FindChildControl(TCheckListBox AObj, CChar char* ControlName);

void
CheckListBox_FlipChildren(TCheckListBox AObj, BOOL AllLevels);

BOOL
CheckListBox_Focused(TCheckListBox AObj);

BOOL
CheckListBox_HandleAllocated(TCheckListBox AObj);

void
CheckListBox_InsertControl(TCheckListBox AObj, TControl AControl);

void
CheckListBox_Invalidate(TCheckListBox AObj);

void
CheckListBox_PaintTo(TCheckListBox AObj, HDC DC, int32_t X, int32_t Y);

void
CheckListBox_RemoveControl(TCheckListBox AObj, TControl AControl);

void
CheckListBox_Realign(TCheckListBox AObj);

void
CheckListBox_Repaint(TCheckListBox AObj);

void
CheckListBox_ScaleBy(TCheckListBox AObj, int32_t M, int32_t D);

void
CheckListBox_ScrollBy(TCheckListBox AObj, int32_t DeltaX, int32_t DeltaY);

void
CheckListBox_SetBounds(TCheckListBox AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
CheckListBox_SetFocus(TCheckListBox AObj);

void
CheckListBox_Update(TCheckListBox AObj);

void
CheckListBox_BringToFront(TCheckListBox AObj);

TPoint
CheckListBox_ClientToScreen(TCheckListBox AObj, TPoint Point);

TPoint
CheckListBox_ClientToParent(TCheckListBox AObj, TPoint Point, TWinControl AParent);

BOOL
CheckListBox_Dragging(TCheckListBox AObj);

BOOL
CheckListBox_HasParent(TCheckListBox AObj);

void
CheckListBox_Hide(TCheckListBox AObj);

intptr_t
CheckListBox_Perform(TCheckListBox AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
CheckListBox_Refresh(TCheckListBox AObj);

TPoint
CheckListBox_ScreenToClient(TCheckListBox AObj, TPoint Point);

TPoint
CheckListBox_ParentToClient(TCheckListBox AObj, TPoint Point, TWinControl AParent);

void
CheckListBox_SendToBack(TCheckListBox AObj);

void
CheckListBox_Show(TCheckListBox AObj);

int32_t
CheckListBox_GetTextBuf(TCheckListBox AObj, CChar char* Buffer, int32_t BufSize);

int32_t
CheckListBox_GetTextLen(TCheckListBox AObj);

void
CheckListBox_SetTextBuf(TCheckListBox AObj, CChar char* Buffer);

TComponent
CheckListBox_FindComponent(TCheckListBox AObj, CChar char* AName);

char*
CheckListBox_GetNamePath(TCheckListBox AObj);

void
CheckListBox_Assign(TCheckListBox AObj, TObject Source);

TClass
CheckListBox_ClassType(TCheckListBox AObj);

char*
CheckListBox_ClassName(TCheckListBox AObj);

int32_t
CheckListBox_InstanceSize(TCheckListBox AObj);

BOOL
CheckListBox_InheritsFrom(TCheckListBox AObj, TClass AClass);

BOOL
CheckListBox_Equals(TCheckListBox AObj, TObject Obj);

int32_t
CheckListBox_GetHashCode(TCheckListBox AObj);

char*
CheckListBox_ToString(TCheckListBox AObj);

void
CheckListBox_AnchorToNeighbour(TCheckListBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
CheckListBox_AnchorParallel(TCheckListBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
CheckListBox_AnchorHorizontalCenterTo(TCheckListBox AObj, TControl ASibling);

void
CheckListBox_AnchorVerticalCenterTo(TCheckListBox AObj, TControl ASibling);

void
CheckListBox_AnchorSame(TCheckListBox AObj, TAnchorKind ASide, TControl ASibling);

void
CheckListBox_AnchorAsAlign(TCheckListBox AObj, TAlign ATheAlign, int32_t ASpace);

void
CheckListBox_AnchorClient(TCheckListBox AObj, int32_t ASpace);

int32_t
CheckListBox_ScaleDesignToForm(TCheckListBox AObj, int32_t ASize);

int32_t
CheckListBox_ScaleFormToDesign(TCheckListBox AObj, int32_t ASize);

int32_t
CheckListBox_Scale96ToForm(TCheckListBox AObj, int32_t ASize);

int32_t
CheckListBox_ScaleFormTo96(TCheckListBox AObj, int32_t ASize);

int32_t
CheckListBox_Scale96ToFont(TCheckListBox AObj, int32_t ASize);

int32_t
CheckListBox_ScaleFontTo96(TCheckListBox AObj, int32_t ASize);

int32_t
CheckListBox_ScaleScreenToFont(TCheckListBox AObj, int32_t ASize);

int32_t
CheckListBox_ScaleFontToScreen(TCheckListBox AObj, int32_t ASize);

int32_t
CheckListBox_Scale96ToScreen(TCheckListBox AObj, int32_t ASize);

int32_t
CheckListBox_ScaleScreenTo96(TCheckListBox AObj, int32_t ASize);

void
CheckListBox_AutoAdjustLayout(TCheckListBox AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
CheckListBox_FixDesignFontsPPI(TCheckListBox AObj, int32_t ADesignTimePPI);

void
CheckListBox_ScaleFontsPPI(TCheckListBox AObj, int32_t AToPPI, double AProportion);

void
CheckListBox_SetOnClickCheck(TCheckListBox AObj, TNotifyEvent AEventData);

TAlign
CheckListBox_GetAlign(TCheckListBox AObj);

void
CheckListBox_SetAlign(TCheckListBox AObj, TAlign AValue);

BOOL
CheckListBox_GetAllowGrayed(TCheckListBox AObj);

void
CheckListBox_SetAllowGrayed(TCheckListBox AObj, BOOL AValue);

TAnchors
CheckListBox_GetAnchors(TCheckListBox AObj);

void
CheckListBox_SetAnchors(TCheckListBox AObj, TAnchors AValue);

TBiDiMode
CheckListBox_GetBiDiMode(TCheckListBox AObj);

void
CheckListBox_SetBiDiMode(TCheckListBox AObj, TBiDiMode AValue);

TBorderStyle
CheckListBox_GetBorderStyle(TCheckListBox AObj);

void
CheckListBox_SetBorderStyle(TCheckListBox AObj, TBorderStyle AValue);

TColor
CheckListBox_GetColor(TCheckListBox AObj);

void
CheckListBox_SetColor(TCheckListBox AObj, TColor AValue);

int32_t
CheckListBox_GetColumns(TCheckListBox AObj);

void
CheckListBox_SetColumns(TCheckListBox AObj, int32_t AValue);

TSizeConstraints
CheckListBox_GetConstraints(TCheckListBox AObj);

void
CheckListBox_SetConstraints(TCheckListBox AObj, TSizeConstraints AValue);

BOOL
CheckListBox_GetDoubleBuffered(TCheckListBox AObj);

void
CheckListBox_SetDoubleBuffered(TCheckListBox AObj, BOOL AValue);

TCursor
CheckListBox_GetDragCursor(TCheckListBox AObj);

void
CheckListBox_SetDragCursor(TCheckListBox AObj, TCursor AValue);

TDragMode
CheckListBox_GetDragMode(TCheckListBox AObj);

void
CheckListBox_SetDragMode(TCheckListBox AObj, TDragMode AValue);

BOOL
CheckListBox_GetEnabled(TCheckListBox AObj);

void
CheckListBox_SetEnabled(TCheckListBox AObj, BOOL AValue);

TFont
CheckListBox_GetFont(TCheckListBox AObj);

void
CheckListBox_SetFont(TCheckListBox AObj, TFont AValue);

int32_t
CheckListBox_GetItemHeight(TCheckListBox AObj);

void
CheckListBox_SetItemHeight(TCheckListBox AObj, int32_t AValue);

TStrings
CheckListBox_GetItems(TCheckListBox AObj);

void
CheckListBox_SetItems(TCheckListBox AObj, TStrings AValue);

BOOL
CheckListBox_GetParentColor(TCheckListBox AObj);

void
CheckListBox_SetParentColor(TCheckListBox AObj, BOOL AValue);

BOOL
CheckListBox_GetParentDoubleBuffered(TCheckListBox AObj);

void
CheckListBox_SetParentDoubleBuffered(TCheckListBox AObj, BOOL AValue);

BOOL
CheckListBox_GetParentFont(TCheckListBox AObj);

void
CheckListBox_SetParentFont(TCheckListBox AObj, BOOL AValue);

BOOL
CheckListBox_GetParentShowHint(TCheckListBox AObj);

void
CheckListBox_SetParentShowHint(TCheckListBox AObj, BOOL AValue);

TPopupMenu
CheckListBox_GetPopupMenu(TCheckListBox AObj);

void
CheckListBox_SetPopupMenu(TCheckListBox AObj, TPopupMenu AValue);

BOOL
CheckListBox_GetShowHint(TCheckListBox AObj);

void
CheckListBox_SetShowHint(TCheckListBox AObj, BOOL AValue);

BOOL
CheckListBox_GetSorted(TCheckListBox AObj);

void
CheckListBox_SetSorted(TCheckListBox AObj, BOOL AValue);

TListBoxStyle
CheckListBox_GetStyle(TCheckListBox AObj);

void
CheckListBox_SetStyle(TCheckListBox AObj, TListBoxStyle AValue);

TTabOrder
CheckListBox_GetTabOrder(TCheckListBox AObj);

void
CheckListBox_SetTabOrder(TCheckListBox AObj, TTabOrder AValue);

BOOL
CheckListBox_GetTabStop(TCheckListBox AObj);

void
CheckListBox_SetTabStop(TCheckListBox AObj, BOOL AValue);

BOOL
CheckListBox_GetVisible(TCheckListBox AObj);

void
CheckListBox_SetVisible(TCheckListBox AObj, BOOL AValue);

void
CheckListBox_SetOnClick(TCheckListBox AObj, TNotifyEvent AEventData);

void
CheckListBox_SetOnContextPopup(TCheckListBox AObj, TContextPopupEvent AEventData);

void
CheckListBox_SetOnDblClick(TCheckListBox AObj, TNotifyEvent AEventData);

void
CheckListBox_SetOnDragDrop(TCheckListBox AObj, TDragDropEvent AEventData);

void
CheckListBox_SetOnDragOver(TCheckListBox AObj, TDragOverEvent AEventData);

void
CheckListBox_SetOnEndDrag(TCheckListBox AObj, TEndDragEvent AEventData);

void
CheckListBox_SetOnEnter(TCheckListBox AObj, TNotifyEvent AEventData);

void
CheckListBox_SetOnExit(TCheckListBox AObj, TNotifyEvent AEventData);

void
CheckListBox_SetOnKeyDown(TCheckListBox AObj, TKeyEvent AEventData);

void
CheckListBox_SetOnKeyPress(TCheckListBox AObj, TKeyPressEvent AEventData);

void
CheckListBox_SetOnKeyUp(TCheckListBox AObj, TKeyEvent AEventData);

void
CheckListBox_SetOnMeasureItem(TCheckListBox AObj, TMeasureItemEvent AEventData);

void
CheckListBox_SetOnMouseDown(TCheckListBox AObj, TMouseEvent AEventData);

void
CheckListBox_SetOnMouseEnter(TCheckListBox AObj, TNotifyEvent AEventData);

void
CheckListBox_SetOnMouseLeave(TCheckListBox AObj, TNotifyEvent AEventData);

void
CheckListBox_SetOnMouseMove(TCheckListBox AObj, TMouseMoveEvent AEventData);

void
CheckListBox_SetOnMouseUp(TCheckListBox AObj, TMouseEvent AEventData);

TCanvas
CheckListBox_GetCanvas(TCheckListBox AObj);

int32_t
CheckListBox_GetCount(TCheckListBox AObj);

int32_t
CheckListBox_GetTopIndex(TCheckListBox AObj);

void
CheckListBox_SetTopIndex(TCheckListBox AObj, int32_t AValue);

BOOL
CheckListBox_GetMultiSelect(TCheckListBox AObj);

void
CheckListBox_SetMultiSelect(TCheckListBox AObj, BOOL AValue);

int32_t
CheckListBox_GetSelCount(TCheckListBox AObj);

int32_t
CheckListBox_GetItemIndex(TCheckListBox AObj);

void
CheckListBox_SetItemIndex(TCheckListBox AObj, int32_t AValue);

int32_t
CheckListBox_GetDockClientCount(TCheckListBox AObj);

BOOL
CheckListBox_GetDockSite(TCheckListBox AObj);

void
CheckListBox_SetDockSite(TCheckListBox AObj, BOOL AValue);

BOOL
CheckListBox_GetMouseInClient(TCheckListBox AObj);

int32_t
CheckListBox_GetVisibleDockClientCount(TCheckListBox AObj);

TBrush
CheckListBox_GetBrush(TCheckListBox AObj);

int32_t
CheckListBox_GetControlCount(TCheckListBox AObj);

HWND
CheckListBox_GetHandle(TCheckListBox AObj);

HWND
CheckListBox_GetParentWindow(TCheckListBox AObj);

void
CheckListBox_SetParentWindow(TCheckListBox AObj, HWND AValue);

BOOL
CheckListBox_GetShowing(TCheckListBox AObj);

BOOL
CheckListBox_GetUseDockManager(TCheckListBox AObj);

void
CheckListBox_SetUseDockManager(TCheckListBox AObj, BOOL AValue);

TAction
CheckListBox_GetAction(TCheckListBox AObj);

void
CheckListBox_SetAction(TCheckListBox AObj, TAction AValue);

TRect
CheckListBox_GetBoundsRect(TCheckListBox AObj);

void
CheckListBox_SetBoundsRect(TCheckListBox AObj, TRect AValue);

int32_t
CheckListBox_GetClientHeight(TCheckListBox AObj);

void
CheckListBox_SetClientHeight(TCheckListBox AObj, int32_t AValue);

TPoint
CheckListBox_GetClientOrigin(TCheckListBox AObj);

TRect
CheckListBox_GetClientRect(TCheckListBox AObj);

int32_t
CheckListBox_GetClientWidth(TCheckListBox AObj);

void
CheckListBox_SetClientWidth(TCheckListBox AObj, int32_t AValue);

TControlState
CheckListBox_GetControlState(TCheckListBox AObj);

void
CheckListBox_SetControlState(TCheckListBox AObj, TControlState AValue);

TControlStyle
CheckListBox_GetControlStyle(TCheckListBox AObj);

void
CheckListBox_SetControlStyle(TCheckListBox AObj, TControlStyle AValue);

BOOL
CheckListBox_GetFloating(TCheckListBox AObj);

TWinControl
CheckListBox_GetParent(TCheckListBox AObj);

void
CheckListBox_SetParent(TCheckListBox AObj, TWinControl AValue);

int32_t
CheckListBox_GetLeft(TCheckListBox AObj);

void
CheckListBox_SetLeft(TCheckListBox AObj, int32_t AValue);

int32_t
CheckListBox_GetTop(TCheckListBox AObj);

void
CheckListBox_SetTop(TCheckListBox AObj, int32_t AValue);

int32_t
CheckListBox_GetWidth(TCheckListBox AObj);

void
CheckListBox_SetWidth(TCheckListBox AObj, int32_t AValue);

int32_t
CheckListBox_GetHeight(TCheckListBox AObj);

void
CheckListBox_SetHeight(TCheckListBox AObj, int32_t AValue);

TCursor
CheckListBox_GetCursor(TCheckListBox AObj);

void
CheckListBox_SetCursor(TCheckListBox AObj, TCursor AValue);

char*
CheckListBox_GetHint(TCheckListBox AObj);

void
CheckListBox_SetHint(TCheckListBox AObj, CChar char* AValue);

int32_t
CheckListBox_GetComponentCount(TCheckListBox AObj);

int32_t
CheckListBox_GetComponentIndex(TCheckListBox AObj);

void
CheckListBox_SetComponentIndex(TCheckListBox AObj, int32_t AValue);

TComponent
CheckListBox_GetOwner(TCheckListBox AObj);

char*
CheckListBox_GetName(TCheckListBox AObj);

void
CheckListBox_SetName(TCheckListBox AObj, CChar char* AValue);

intptr_t
CheckListBox_GetTag(TCheckListBox AObj);

void
CheckListBox_SetTag(TCheckListBox AObj, intptr_t AValue);

TAnchorSide
CheckListBox_GetAnchorSideLeft(TCheckListBox AObj);

void
CheckListBox_SetAnchorSideLeft(TCheckListBox AObj, TAnchorSide AValue);

TAnchorSide
CheckListBox_GetAnchorSideTop(TCheckListBox AObj);

void
CheckListBox_SetAnchorSideTop(TCheckListBox AObj, TAnchorSide AValue);

TAnchorSide
CheckListBox_GetAnchorSideRight(TCheckListBox AObj);

void
CheckListBox_SetAnchorSideRight(TCheckListBox AObj, TAnchorSide AValue);

TAnchorSide
CheckListBox_GetAnchorSideBottom(TCheckListBox AObj);

void
CheckListBox_SetAnchorSideBottom(TCheckListBox AObj, TAnchorSide AValue);

TControlChildSizing
CheckListBox_GetChildSizing(TCheckListBox AObj);

void
CheckListBox_SetChildSizing(TCheckListBox AObj, TControlChildSizing AValue);

TControlBorderSpacing
CheckListBox_GetBorderSpacing(TCheckListBox AObj);

void
CheckListBox_SetBorderSpacing(TCheckListBox AObj, TControlBorderSpacing AValue);

BOOL
CheckListBox_GetChecked(TCheckListBox AObj, int32_t Index);

void
CheckListBox_SetChecked(TCheckListBox AObj, int32_t Index, BOOL AValue);

BOOL
CheckListBox_GetItemEnabled(TCheckListBox AObj, int32_t Index);

void
CheckListBox_SetItemEnabled(TCheckListBox AObj, int32_t Index, BOOL AValue);

TCheckBoxState
CheckListBox_GetState(TCheckListBox AObj, int32_t Index);

void
CheckListBox_SetState(TCheckListBox AObj, int32_t Index, TCheckBoxState AValue);

BOOL
CheckListBox_GetHeader(TCheckListBox AObj, int32_t Index);

void
CheckListBox_SetHeader(TCheckListBox AObj, int32_t Index, BOOL AValue);

BOOL
CheckListBox_GetSelected(TCheckListBox AObj, int32_t Index);

void
CheckListBox_SetSelected(TCheckListBox AObj, int32_t Index, BOOL AValue);

TControl
CheckListBox_GetDockClients(TCheckListBox AObj, int32_t Index);

TControl
CheckListBox_GetControls(TCheckListBox AObj, int32_t Index);

TComponent
CheckListBox_GetComponents(TCheckListBox AObj, int32_t AIndex);

TAnchorSide
CheckListBox_GetAnchorSide(TCheckListBox AObj, TAnchorKind AKind);

TClass
CheckListBox_StaticClassType();

// -------------------TGauge-------------------

TGauge
Gauge_Create(TComponent AOwner);

void
Gauge_Free(TGauge AObj);

void
Gauge_AddProgress(TGauge AObj, int32_t Value);

void
Gauge_BringToFront(TGauge AObj);

TPoint
Gauge_ClientToScreen(TGauge AObj, TPoint Point);

TPoint
Gauge_ClientToParent(TGauge AObj, TPoint Point, TWinControl AParent);

BOOL
Gauge_Dragging(TGauge AObj);

BOOL
Gauge_HasParent(TGauge AObj);

void
Gauge_Hide(TGauge AObj);

void
Gauge_Invalidate(TGauge AObj);

intptr_t
Gauge_Perform(TGauge AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
Gauge_Refresh(TGauge AObj);

void
Gauge_Repaint(TGauge AObj);

TPoint
Gauge_ScreenToClient(TGauge AObj, TPoint Point);

TPoint
Gauge_ParentToClient(TGauge AObj, TPoint Point, TWinControl AParent);

void
Gauge_SendToBack(TGauge AObj);

void
Gauge_SetBounds(TGauge AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
Gauge_Show(TGauge AObj);

void
Gauge_Update(TGauge AObj);

int32_t
Gauge_GetTextBuf(TGauge AObj, CChar char* Buffer, int32_t BufSize);

int32_t
Gauge_GetTextLen(TGauge AObj);

void
Gauge_SetTextBuf(TGauge AObj, CChar char* Buffer);

TComponent
Gauge_FindComponent(TGauge AObj, CChar char* AName);

char*
Gauge_GetNamePath(TGauge AObj);

void
Gauge_Assign(TGauge AObj, TObject Source);

TClass
Gauge_ClassType(TGauge AObj);

char*
Gauge_ClassName(TGauge AObj);

int32_t
Gauge_InstanceSize(TGauge AObj);

BOOL
Gauge_InheritsFrom(TGauge AObj, TClass AClass);

BOOL
Gauge_Equals(TGauge AObj, TObject Obj);

int32_t
Gauge_GetHashCode(TGauge AObj);

char*
Gauge_ToString(TGauge AObj);

void
Gauge_AnchorToNeighbour(TGauge AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Gauge_AnchorParallel(TGauge AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Gauge_AnchorHorizontalCenterTo(TGauge AObj, TControl ASibling);

void
Gauge_AnchorVerticalCenterTo(TGauge AObj, TControl ASibling);

void
Gauge_AnchorSame(TGauge AObj, TAnchorKind ASide, TControl ASibling);

void
Gauge_AnchorAsAlign(TGauge AObj, TAlign ATheAlign, int32_t ASpace);

void
Gauge_AnchorClient(TGauge AObj, int32_t ASpace);

int32_t
Gauge_ScaleDesignToForm(TGauge AObj, int32_t ASize);

int32_t
Gauge_ScaleFormToDesign(TGauge AObj, int32_t ASize);

int32_t
Gauge_Scale96ToForm(TGauge AObj, int32_t ASize);

int32_t
Gauge_ScaleFormTo96(TGauge AObj, int32_t ASize);

int32_t
Gauge_Scale96ToFont(TGauge AObj, int32_t ASize);

int32_t
Gauge_ScaleFontTo96(TGauge AObj, int32_t ASize);

int32_t
Gauge_ScaleScreenToFont(TGauge AObj, int32_t ASize);

int32_t
Gauge_ScaleFontToScreen(TGauge AObj, int32_t ASize);

int32_t
Gauge_Scale96ToScreen(TGauge AObj, int32_t ASize);

int32_t
Gauge_ScaleScreenTo96(TGauge AObj, int32_t ASize);

void
Gauge_AutoAdjustLayout(TGauge AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
Gauge_FixDesignFontsPPI(TGauge AObj, int32_t ADesignTimePPI);

void
Gauge_ScaleFontsPPI(TGauge AObj, int32_t AToPPI, double AProportion);

int32_t
Gauge_GetPercentDone(TGauge AObj);

TAlign
Gauge_GetAlign(TGauge AObj);

void
Gauge_SetAlign(TGauge AObj, TAlign AValue);

TAnchors
Gauge_GetAnchors(TGauge AObj);

void
Gauge_SetAnchors(TGauge AObj, TAnchors AValue);

TColor
Gauge_GetBackColor(TGauge AObj);

void
Gauge_SetBackColor(TGauge AObj, TColor AValue);

TBorderStyle
Gauge_GetBorderStyle(TGauge AObj);

void
Gauge_SetBorderStyle(TGauge AObj, TBorderStyle AValue);

TColor
Gauge_GetColor(TGauge AObj);

void
Gauge_SetColor(TGauge AObj, TColor AValue);

TSizeConstraints
Gauge_GetConstraints(TGauge AObj);

void
Gauge_SetConstraints(TGauge AObj, TSizeConstraints AValue);

BOOL
Gauge_GetEnabled(TGauge AObj);

void
Gauge_SetEnabled(TGauge AObj, BOOL AValue);

TColor
Gauge_GetForeColor(TGauge AObj);

void
Gauge_SetForeColor(TGauge AObj, TColor AValue);

TFont
Gauge_GetFont(TGauge AObj);

void
Gauge_SetFont(TGauge AObj, TFont AValue);

TGaugeKind
Gauge_GetKind(TGauge AObj);

void
Gauge_SetKind(TGauge AObj, TGaugeKind AValue);

int32_t
Gauge_GetMinValue(TGauge AObj);

void
Gauge_SetMinValue(TGauge AObj, int32_t AValue);

int32_t
Gauge_GetMaxValue(TGauge AObj);

void
Gauge_SetMaxValue(TGauge AObj, int32_t AValue);

BOOL
Gauge_GetParentColor(TGauge AObj);

void
Gauge_SetParentColor(TGauge AObj, BOOL AValue);

BOOL
Gauge_GetParentFont(TGauge AObj);

void
Gauge_SetParentFont(TGauge AObj, BOOL AValue);

BOOL
Gauge_GetParentShowHint(TGauge AObj);

void
Gauge_SetParentShowHint(TGauge AObj, BOOL AValue);

TPopupMenu
Gauge_GetPopupMenu(TGauge AObj);

void
Gauge_SetPopupMenu(TGauge AObj, TPopupMenu AValue);

int32_t
Gauge_GetProgress(TGauge AObj);

void
Gauge_SetProgress(TGauge AObj, int32_t AValue);

BOOL
Gauge_GetShowHint(TGauge AObj);

void
Gauge_SetShowHint(TGauge AObj, BOOL AValue);

BOOL
Gauge_GetShowText(TGauge AObj);

void
Gauge_SetShowText(TGauge AObj, BOOL AValue);

BOOL
Gauge_GetVisible(TGauge AObj);

void
Gauge_SetVisible(TGauge AObj, BOOL AValue);

TAction
Gauge_GetAction(TGauge AObj);

void
Gauge_SetAction(TGauge AObj, TAction AValue);

TBiDiMode
Gauge_GetBiDiMode(TGauge AObj);

void
Gauge_SetBiDiMode(TGauge AObj, TBiDiMode AValue);

TRect
Gauge_GetBoundsRect(TGauge AObj);

void
Gauge_SetBoundsRect(TGauge AObj, TRect AValue);

int32_t
Gauge_GetClientHeight(TGauge AObj);

void
Gauge_SetClientHeight(TGauge AObj, int32_t AValue);

TPoint
Gauge_GetClientOrigin(TGauge AObj);

TRect
Gauge_GetClientRect(TGauge AObj);

int32_t
Gauge_GetClientWidth(TGauge AObj);

void
Gauge_SetClientWidth(TGauge AObj, int32_t AValue);

TControlState
Gauge_GetControlState(TGauge AObj);

void
Gauge_SetControlState(TGauge AObj, TControlState AValue);

TControlStyle
Gauge_GetControlStyle(TGauge AObj);

void
Gauge_SetControlStyle(TGauge AObj, TControlStyle AValue);

BOOL
Gauge_GetFloating(TGauge AObj);

TWinControl
Gauge_GetParent(TGauge AObj);

void
Gauge_SetParent(TGauge AObj, TWinControl AValue);

int32_t
Gauge_GetLeft(TGauge AObj);

void
Gauge_SetLeft(TGauge AObj, int32_t AValue);

int32_t
Gauge_GetTop(TGauge AObj);

void
Gauge_SetTop(TGauge AObj, int32_t AValue);

int32_t
Gauge_GetWidth(TGauge AObj);

void
Gauge_SetWidth(TGauge AObj, int32_t AValue);

int32_t
Gauge_GetHeight(TGauge AObj);

void
Gauge_SetHeight(TGauge AObj, int32_t AValue);

TCursor
Gauge_GetCursor(TGauge AObj);

void
Gauge_SetCursor(TGauge AObj, TCursor AValue);

char*
Gauge_GetHint(TGauge AObj);

void
Gauge_SetHint(TGauge AObj, CChar char* AValue);

int32_t
Gauge_GetComponentCount(TGauge AObj);

int32_t
Gauge_GetComponentIndex(TGauge AObj);

void
Gauge_SetComponentIndex(TGauge AObj, int32_t AValue);

TComponent
Gauge_GetOwner(TGauge AObj);

char*
Gauge_GetName(TGauge AObj);

void
Gauge_SetName(TGauge AObj, CChar char* AValue);

intptr_t
Gauge_GetTag(TGauge AObj);

void
Gauge_SetTag(TGauge AObj, intptr_t AValue);

TAnchorSide
Gauge_GetAnchorSideLeft(TGauge AObj);

void
Gauge_SetAnchorSideLeft(TGauge AObj, TAnchorSide AValue);

TAnchorSide
Gauge_GetAnchorSideTop(TGauge AObj);

void
Gauge_SetAnchorSideTop(TGauge AObj, TAnchorSide AValue);

TAnchorSide
Gauge_GetAnchorSideRight(TGauge AObj);

void
Gauge_SetAnchorSideRight(TGauge AObj, TAnchorSide AValue);

TAnchorSide
Gauge_GetAnchorSideBottom(TGauge AObj);

void
Gauge_SetAnchorSideBottom(TGauge AObj, TAnchorSide AValue);

TControlBorderSpacing
Gauge_GetBorderSpacing(TGauge AObj);

void
Gauge_SetBorderSpacing(TGauge AObj, TControlBorderSpacing AValue);

TComponent
Gauge_GetComponents(TGauge AObj, int32_t AIndex);

TAnchorSide
Gauge_GetAnchorSide(TGauge AObj, TAnchorKind AKind);

TClass
Gauge_StaticClassType();

// -------------------TImageButton-------------------

TImageButton
ImageButton_Create(TComponent AOwner);

void
ImageButton_Free(TImageButton AObj);

void
ImageButton_Click(TImageButton AObj);

void
ImageButton_BringToFront(TImageButton AObj);

TPoint
ImageButton_ClientToScreen(TImageButton AObj, TPoint Point);

TPoint
ImageButton_ClientToParent(TImageButton AObj, TPoint Point, TWinControl AParent);

BOOL
ImageButton_Dragging(TImageButton AObj);

BOOL
ImageButton_HasParent(TImageButton AObj);

void
ImageButton_Hide(TImageButton AObj);

void
ImageButton_Invalidate(TImageButton AObj);

intptr_t
ImageButton_Perform(TImageButton AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ImageButton_Refresh(TImageButton AObj);

void
ImageButton_Repaint(TImageButton AObj);

TPoint
ImageButton_ScreenToClient(TImageButton AObj, TPoint Point);

TPoint
ImageButton_ParentToClient(TImageButton AObj, TPoint Point, TWinControl AParent);

void
ImageButton_SendToBack(TImageButton AObj);

void
ImageButton_SetBounds(TImageButton AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ImageButton_Show(TImageButton AObj);

void
ImageButton_Update(TImageButton AObj);

int32_t
ImageButton_GetTextBuf(TImageButton AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ImageButton_GetTextLen(TImageButton AObj);

void
ImageButton_SetTextBuf(TImageButton AObj, CChar char* Buffer);

TComponent
ImageButton_FindComponent(TImageButton AObj, CChar char* AName);

char*
ImageButton_GetNamePath(TImageButton AObj);

void
ImageButton_Assign(TImageButton AObj, TObject Source);

TClass
ImageButton_ClassType(TImageButton AObj);

char*
ImageButton_ClassName(TImageButton AObj);

int32_t
ImageButton_InstanceSize(TImageButton AObj);

BOOL
ImageButton_InheritsFrom(TImageButton AObj, TClass AClass);

BOOL
ImageButton_Equals(TImageButton AObj, TObject Obj);

int32_t
ImageButton_GetHashCode(TImageButton AObj);

char*
ImageButton_ToString(TImageButton AObj);

void
ImageButton_AnchorToNeighbour(TImageButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ImageButton_AnchorParallel(TImageButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ImageButton_AnchorHorizontalCenterTo(TImageButton AObj, TControl ASibling);

void
ImageButton_AnchorVerticalCenterTo(TImageButton AObj, TControl ASibling);

void
ImageButton_AnchorSame(TImageButton AObj, TAnchorKind ASide, TControl ASibling);

void
ImageButton_AnchorAsAlign(TImageButton AObj, TAlign ATheAlign, int32_t ASpace);

void
ImageButton_AnchorClient(TImageButton AObj, int32_t ASpace);

int32_t
ImageButton_ScaleDesignToForm(TImageButton AObj, int32_t ASize);

int32_t
ImageButton_ScaleFormToDesign(TImageButton AObj, int32_t ASize);

int32_t
ImageButton_Scale96ToForm(TImageButton AObj, int32_t ASize);

int32_t
ImageButton_ScaleFormTo96(TImageButton AObj, int32_t ASize);

int32_t
ImageButton_Scale96ToFont(TImageButton AObj, int32_t ASize);

int32_t
ImageButton_ScaleFontTo96(TImageButton AObj, int32_t ASize);

int32_t
ImageButton_ScaleScreenToFont(TImageButton AObj, int32_t ASize);

int32_t
ImageButton_ScaleFontToScreen(TImageButton AObj, int32_t ASize);

int32_t
ImageButton_Scale96ToScreen(TImageButton AObj, int32_t ASize);

int32_t
ImageButton_ScaleScreenTo96(TImageButton AObj, int32_t ASize);

void
ImageButton_AutoAdjustLayout(TImageButton AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ImageButton_FixDesignFontsPPI(TImageButton AObj, int32_t ADesignTimePPI);

void
ImageButton_ScaleFontsPPI(TImageButton AObj, int32_t AToPPI, double AProportion);

TAction
ImageButton_GetAction(TImageButton AObj);

void
ImageButton_SetAction(TImageButton AObj, TAction AValue);

TAlign
ImageButton_GetAlign(TImageButton AObj);

void
ImageButton_SetAlign(TImageButton AObj, TAlign AValue);

TAnchors
ImageButton_GetAnchors(TImageButton AObj);

void
ImageButton_SetAnchors(TImageButton AObj, TAnchors AValue);

BOOL
ImageButton_GetAutoSize(TImageButton AObj);

void
ImageButton_SetAutoSize(TImageButton AObj, BOOL AValue);

TSizeConstraints
ImageButton_GetConstraints(TImageButton AObj);

void
ImageButton_SetConstraints(TImageButton AObj, TSizeConstraints AValue);

char*
ImageButton_GetCaption(TImageButton AObj);

void
ImageButton_SetCaption(TImageButton AObj, CChar char* AValue);

TCursor
ImageButton_GetDragCursor(TImageButton AObj);

void
ImageButton_SetDragCursor(TImageButton AObj, TCursor AValue);

TDragKind
ImageButton_GetDragKind(TImageButton AObj);

void
ImageButton_SetDragKind(TImageButton AObj, TDragKind AValue);

TDragMode
ImageButton_GetDragMode(TImageButton AObj);

void
ImageButton_SetDragMode(TImageButton AObj, TDragMode AValue);

BOOL
ImageButton_GetEnabled(TImageButton AObj);

void
ImageButton_SetEnabled(TImageButton AObj, BOOL AValue);

TFont
ImageButton_GetFont(TImageButton AObj);

void
ImageButton_SetFont(TImageButton AObj, TFont AValue);

int32_t
ImageButton_GetImageCount(TImageButton AObj);

void
ImageButton_SetImageCount(TImageButton AObj, int32_t AValue);

TImageOrientation
ImageButton_GetOrientation(TImageButton AObj);

void
ImageButton_SetOrientation(TImageButton AObj, TImageOrientation AValue);

TModalResult
ImageButton_GetModalResult(TImageButton AObj);

void
ImageButton_SetModalResult(TImageButton AObj, TModalResult AValue);

BOOL
ImageButton_GetParentShowHint(TImageButton AObj);

void
ImageButton_SetParentShowHint(TImageButton AObj, BOOL AValue);

BOOL
ImageButton_GetParentFont(TImageButton AObj);

void
ImageButton_SetParentFont(TImageButton AObj, BOOL AValue);

TPicture
ImageButton_GetPicture(TImageButton AObj);

void
ImageButton_SetPicture(TImageButton AObj, TPicture AValue);

TPopupMenu
ImageButton_GetPopupMenu(TImageButton AObj);

void
ImageButton_SetPopupMenu(TImageButton AObj, TPopupMenu AValue);

BOOL
ImageButton_GetShowHint(TImageButton AObj);

void
ImageButton_SetShowHint(TImageButton AObj, BOOL AValue);

BOOL
ImageButton_GetShowCaption(TImageButton AObj);

void
ImageButton_SetShowCaption(TImageButton AObj, BOOL AValue);

BOOL
ImageButton_GetVisible(TImageButton AObj);

void
ImageButton_SetVisible(TImageButton AObj, BOOL AValue);

void
ImageButton_SetOnClick(TImageButton AObj, TNotifyEvent AEventData);

void
ImageButton_SetOnContextPopup(TImageButton AObj, TContextPopupEvent AEventData);

void
ImageButton_SetOnDblClick(TImageButton AObj, TNotifyEvent AEventData);

void
ImageButton_SetOnDragDrop(TImageButton AObj, TDragDropEvent AEventData);

void
ImageButton_SetOnDragOver(TImageButton AObj, TDragOverEvent AEventData);

void
ImageButton_SetOnEndDock(TImageButton AObj, TEndDragEvent AEventData);

void
ImageButton_SetOnEndDrag(TImageButton AObj, TEndDragEvent AEventData);

void
ImageButton_SetOnMouseDown(TImageButton AObj, TMouseEvent AEventData);

void
ImageButton_SetOnMouseEnter(TImageButton AObj, TNotifyEvent AEventData);

void
ImageButton_SetOnMouseLeave(TImageButton AObj, TNotifyEvent AEventData);

void
ImageButton_SetOnMouseMove(TImageButton AObj, TMouseMoveEvent AEventData);

void
ImageButton_SetOnMouseUp(TImageButton AObj, TMouseEvent AEventData);

TBiDiMode
ImageButton_GetBiDiMode(TImageButton AObj);

void
ImageButton_SetBiDiMode(TImageButton AObj, TBiDiMode AValue);

TRect
ImageButton_GetBoundsRect(TImageButton AObj);

void
ImageButton_SetBoundsRect(TImageButton AObj, TRect AValue);

int32_t
ImageButton_GetClientHeight(TImageButton AObj);

void
ImageButton_SetClientHeight(TImageButton AObj, int32_t AValue);

TPoint
ImageButton_GetClientOrigin(TImageButton AObj);

TRect
ImageButton_GetClientRect(TImageButton AObj);

int32_t
ImageButton_GetClientWidth(TImageButton AObj);

void
ImageButton_SetClientWidth(TImageButton AObj, int32_t AValue);

TControlState
ImageButton_GetControlState(TImageButton AObj);

void
ImageButton_SetControlState(TImageButton AObj, TControlState AValue);

TControlStyle
ImageButton_GetControlStyle(TImageButton AObj);

void
ImageButton_SetControlStyle(TImageButton AObj, TControlStyle AValue);

BOOL
ImageButton_GetFloating(TImageButton AObj);

TWinControl
ImageButton_GetParent(TImageButton AObj);

void
ImageButton_SetParent(TImageButton AObj, TWinControl AValue);

int32_t
ImageButton_GetLeft(TImageButton AObj);

void
ImageButton_SetLeft(TImageButton AObj, int32_t AValue);

int32_t
ImageButton_GetTop(TImageButton AObj);

void
ImageButton_SetTop(TImageButton AObj, int32_t AValue);

int32_t
ImageButton_GetWidth(TImageButton AObj);

void
ImageButton_SetWidth(TImageButton AObj, int32_t AValue);

int32_t
ImageButton_GetHeight(TImageButton AObj);

void
ImageButton_SetHeight(TImageButton AObj, int32_t AValue);

TCursor
ImageButton_GetCursor(TImageButton AObj);

void
ImageButton_SetCursor(TImageButton AObj, TCursor AValue);

char*
ImageButton_GetHint(TImageButton AObj);

void
ImageButton_SetHint(TImageButton AObj, CChar char* AValue);

int32_t
ImageButton_GetComponentCount(TImageButton AObj);

int32_t
ImageButton_GetComponentIndex(TImageButton AObj);

void
ImageButton_SetComponentIndex(TImageButton AObj, int32_t AValue);

TComponent
ImageButton_GetOwner(TImageButton AObj);

char*
ImageButton_GetName(TImageButton AObj);

void
ImageButton_SetName(TImageButton AObj, CChar char* AValue);

intptr_t
ImageButton_GetTag(TImageButton AObj);

void
ImageButton_SetTag(TImageButton AObj, intptr_t AValue);

TAnchorSide
ImageButton_GetAnchorSideLeft(TImageButton AObj);

void
ImageButton_SetAnchorSideLeft(TImageButton AObj, TAnchorSide AValue);

TAnchorSide
ImageButton_GetAnchorSideTop(TImageButton AObj);

void
ImageButton_SetAnchorSideTop(TImageButton AObj, TAnchorSide AValue);

TAnchorSide
ImageButton_GetAnchorSideRight(TImageButton AObj);

void
ImageButton_SetAnchorSideRight(TImageButton AObj, TAnchorSide AValue);

TAnchorSide
ImageButton_GetAnchorSideBottom(TImageButton AObj);

void
ImageButton_SetAnchorSideBottom(TImageButton AObj, TAnchorSide AValue);

TControlBorderSpacing
ImageButton_GetBorderSpacing(TImageButton AObj);

void
ImageButton_SetBorderSpacing(TImageButton AObj, TControlBorderSpacing AValue);

TComponent
ImageButton_GetComponents(TImageButton AObj, int32_t AIndex);

TAnchorSide
ImageButton_GetAnchorSide(TImageButton AObj, TAnchorKind AKind);

TClass
ImageButton_StaticClassType();

// -------------------TFindDialog-------------------

TFindDialog
FindDialog_Create(TComponent AOwner);

void
FindDialog_Free(TFindDialog AObj);

void
FindDialog_CloseDialog(TFindDialog AObj);

BOOL
FindDialog_Execute(TFindDialog AObj);

TComponent
FindDialog_FindComponent(TFindDialog AObj, CChar char* AName);

char*
FindDialog_GetNamePath(TFindDialog AObj);

BOOL
FindDialog_HasParent(TFindDialog AObj);

void
FindDialog_Assign(TFindDialog AObj, TObject Source);

TClass
FindDialog_ClassType(TFindDialog AObj);

char*
FindDialog_ClassName(TFindDialog AObj);

int32_t
FindDialog_InstanceSize(TFindDialog AObj);

BOOL
FindDialog_InheritsFrom(TFindDialog AObj, TClass AClass);

BOOL
FindDialog_Equals(TFindDialog AObj, TObject Obj);

int32_t
FindDialog_GetHashCode(TFindDialog AObj);

char*
FindDialog_ToString(TFindDialog AObj);

int32_t
FindDialog_GetLeft(TFindDialog AObj);

void
FindDialog_SetLeft(TFindDialog AObj, int32_t AValue);

TPoint
FindDialog_GetPosition(TFindDialog AObj);

void
FindDialog_SetPosition(TFindDialog AObj, TPoint AValue);

int32_t
FindDialog_GetTop(TFindDialog AObj);

void
FindDialog_SetTop(TFindDialog AObj, int32_t AValue);

char*
FindDialog_GetFindText(TFindDialog AObj);

void
FindDialog_SetFindText(TFindDialog AObj, CChar char* AValue);

TFindOptions
FindDialog_GetOptions(TFindDialog AObj);

void
FindDialog_SetOptions(TFindDialog AObj, TFindOptions AValue);

void
FindDialog_SetOnFind(TFindDialog AObj, TNotifyEvent AEventData);

HWND
FindDialog_GetHandle(TFindDialog AObj);

void
FindDialog_SetOnClose(TFindDialog AObj, TNotifyEvent AEventData);

void
FindDialog_SetOnShow(TFindDialog AObj, TNotifyEvent AEventData);

int32_t
FindDialog_GetComponentCount(TFindDialog AObj);

int32_t
FindDialog_GetComponentIndex(TFindDialog AObj);

void
FindDialog_SetComponentIndex(TFindDialog AObj, int32_t AValue);

TComponent
FindDialog_GetOwner(TFindDialog AObj);

char*
FindDialog_GetName(TFindDialog AObj);

void
FindDialog_SetName(TFindDialog AObj, CChar char* AValue);

intptr_t
FindDialog_GetTag(TFindDialog AObj);

void
FindDialog_SetTag(TFindDialog AObj, intptr_t AValue);

TComponent
FindDialog_GetComponents(TFindDialog AObj, int32_t AIndex);

TClass
FindDialog_StaticClassType();

// -------------------TReplaceDialog-------------------

TReplaceDialog
ReplaceDialog_Create(TComponent AOwner);

void
ReplaceDialog_Free(TReplaceDialog AObj);

void
ReplaceDialog_CloseDialog(TReplaceDialog AObj);

BOOL
ReplaceDialog_Execute(TReplaceDialog AObj);

TComponent
ReplaceDialog_FindComponent(TReplaceDialog AObj, CChar char* AName);

char*
ReplaceDialog_GetNamePath(TReplaceDialog AObj);

BOOL
ReplaceDialog_HasParent(TReplaceDialog AObj);

void
ReplaceDialog_Assign(TReplaceDialog AObj, TObject Source);

TClass
ReplaceDialog_ClassType(TReplaceDialog AObj);

char*
ReplaceDialog_ClassName(TReplaceDialog AObj);

int32_t
ReplaceDialog_InstanceSize(TReplaceDialog AObj);

BOOL
ReplaceDialog_InheritsFrom(TReplaceDialog AObj, TClass AClass);

BOOL
ReplaceDialog_Equals(TReplaceDialog AObj, TObject Obj);

int32_t
ReplaceDialog_GetHashCode(TReplaceDialog AObj);

char*
ReplaceDialog_ToString(TReplaceDialog AObj);

char*
ReplaceDialog_GetReplaceText(TReplaceDialog AObj);

void
ReplaceDialog_SetReplaceText(TReplaceDialog AObj, CChar char* AValue);

void
ReplaceDialog_SetOnReplace(TReplaceDialog AObj, TNotifyEvent AEventData);

int32_t
ReplaceDialog_GetLeft(TReplaceDialog AObj);

void
ReplaceDialog_SetLeft(TReplaceDialog AObj, int32_t AValue);

TPoint
ReplaceDialog_GetPosition(TReplaceDialog AObj);

void
ReplaceDialog_SetPosition(TReplaceDialog AObj, TPoint AValue);

int32_t
ReplaceDialog_GetTop(TReplaceDialog AObj);

void
ReplaceDialog_SetTop(TReplaceDialog AObj, int32_t AValue);

char*
ReplaceDialog_GetFindText(TReplaceDialog AObj);

void
ReplaceDialog_SetFindText(TReplaceDialog AObj, CChar char* AValue);

TFindOptions
ReplaceDialog_GetOptions(TReplaceDialog AObj);

void
ReplaceDialog_SetOptions(TReplaceDialog AObj, TFindOptions AValue);

void
ReplaceDialog_SetOnFind(TReplaceDialog AObj, TNotifyEvent AEventData);

HWND
ReplaceDialog_GetHandle(TReplaceDialog AObj);

void
ReplaceDialog_SetOnClose(TReplaceDialog AObj, TNotifyEvent AEventData);

void
ReplaceDialog_SetOnShow(TReplaceDialog AObj, TNotifyEvent AEventData);

int32_t
ReplaceDialog_GetComponentCount(TReplaceDialog AObj);

int32_t
ReplaceDialog_GetComponentIndex(TReplaceDialog AObj);

void
ReplaceDialog_SetComponentIndex(TReplaceDialog AObj, int32_t AValue);

TComponent
ReplaceDialog_GetOwner(TReplaceDialog AObj);

char*
ReplaceDialog_GetName(TReplaceDialog AObj);

void
ReplaceDialog_SetName(TReplaceDialog AObj, CChar char* AValue);

intptr_t
ReplaceDialog_GetTag(TReplaceDialog AObj);

void
ReplaceDialog_SetTag(TReplaceDialog AObj, intptr_t AValue);

TComponent
ReplaceDialog_GetComponents(TReplaceDialog AObj, int32_t AIndex);

TClass
ReplaceDialog_StaticClassType();

// -------------------TPrinterSetupDialog-------------------

TPrinterSetupDialog
PrinterSetupDialog_Create(TComponent AOwner);

void
PrinterSetupDialog_Free(TPrinterSetupDialog AObj);

BOOL
PrinterSetupDialog_Execute(TPrinterSetupDialog AObj);

TComponent
PrinterSetupDialog_FindComponent(TPrinterSetupDialog AObj, CChar char* AName);

char*
PrinterSetupDialog_GetNamePath(TPrinterSetupDialog AObj);

BOOL
PrinterSetupDialog_HasParent(TPrinterSetupDialog AObj);

void
PrinterSetupDialog_Assign(TPrinterSetupDialog AObj, TObject Source);

TClass
PrinterSetupDialog_ClassType(TPrinterSetupDialog AObj);

char*
PrinterSetupDialog_ClassName(TPrinterSetupDialog AObj);

int32_t
PrinterSetupDialog_InstanceSize(TPrinterSetupDialog AObj);

BOOL
PrinterSetupDialog_InheritsFrom(TPrinterSetupDialog AObj, TClass AClass);

BOOL
PrinterSetupDialog_Equals(TPrinterSetupDialog AObj, TObject Obj);

int32_t
PrinterSetupDialog_GetHashCode(TPrinterSetupDialog AObj);

char*
PrinterSetupDialog_ToString(TPrinterSetupDialog AObj);

HWND
PrinterSetupDialog_GetHandle(TPrinterSetupDialog AObj);

void
PrinterSetupDialog_SetOnClose(TPrinterSetupDialog AObj, TNotifyEvent AEventData);

void
PrinterSetupDialog_SetOnShow(TPrinterSetupDialog AObj, TNotifyEvent AEventData);

int32_t
PrinterSetupDialog_GetComponentCount(TPrinterSetupDialog AObj);

int32_t
PrinterSetupDialog_GetComponentIndex(TPrinterSetupDialog AObj);

void
PrinterSetupDialog_SetComponentIndex(TPrinterSetupDialog AObj, int32_t AValue);

TComponent
PrinterSetupDialog_GetOwner(TPrinterSetupDialog AObj);

char*
PrinterSetupDialog_GetName(TPrinterSetupDialog AObj);

void
PrinterSetupDialog_SetName(TPrinterSetupDialog AObj, CChar char* AValue);

intptr_t
PrinterSetupDialog_GetTag(TPrinterSetupDialog AObj);

void
PrinterSetupDialog_SetTag(TPrinterSetupDialog AObj, intptr_t AValue);

TComponent
PrinterSetupDialog_GetComponents(TPrinterSetupDialog AObj, int32_t AIndex);

TClass
PrinterSetupDialog_StaticClassType();

// -------------------TPageSetupDialog-------------------

TPageSetupDialog
PageSetupDialog_Create(TComponent AOwner);

void
PageSetupDialog_Free(TPageSetupDialog AObj);

BOOL
PageSetupDialog_Execute(TPageSetupDialog AObj);

TComponent
PageSetupDialog_FindComponent(TPageSetupDialog AObj, CChar char* AName);

char*
PageSetupDialog_GetNamePath(TPageSetupDialog AObj);

BOOL
PageSetupDialog_HasParent(TPageSetupDialog AObj);

void
PageSetupDialog_Assign(TPageSetupDialog AObj, TObject Source);

TClass
PageSetupDialog_ClassType(TPageSetupDialog AObj);

char*
PageSetupDialog_ClassName(TPageSetupDialog AObj);

int32_t
PageSetupDialog_InstanceSize(TPageSetupDialog AObj);

BOOL
PageSetupDialog_InheritsFrom(TPageSetupDialog AObj, TClass AClass);

BOOL
PageSetupDialog_Equals(TPageSetupDialog AObj, TObject Obj);

int32_t
PageSetupDialog_GetHashCode(TPageSetupDialog AObj);

char*
PageSetupDialog_ToString(TPageSetupDialog AObj);

int32_t
PageSetupDialog_GetMarginLeft(TPageSetupDialog AObj);

void
PageSetupDialog_SetMarginLeft(TPageSetupDialog AObj, int32_t AValue);

int32_t
PageSetupDialog_GetMarginTop(TPageSetupDialog AObj);

void
PageSetupDialog_SetMarginTop(TPageSetupDialog AObj, int32_t AValue);

int32_t
PageSetupDialog_GetMarginRight(TPageSetupDialog AObj);

void
PageSetupDialog_SetMarginRight(TPageSetupDialog AObj, int32_t AValue);

int32_t
PageSetupDialog_GetMarginBottom(TPageSetupDialog AObj);

void
PageSetupDialog_SetMarginBottom(TPageSetupDialog AObj, int32_t AValue);

TPageSetupDialogOptions
PageSetupDialog_GetOptions(TPageSetupDialog AObj);

void
PageSetupDialog_SetOptions(TPageSetupDialog AObj, TPageSetupDialogOptions AValue);

int32_t
PageSetupDialog_GetPageWidth(TPageSetupDialog AObj);

void
PageSetupDialog_SetPageWidth(TPageSetupDialog AObj, int32_t AValue);

int32_t
PageSetupDialog_GetPageHeight(TPageSetupDialog AObj);

void
PageSetupDialog_SetPageHeight(TPageSetupDialog AObj, int32_t AValue);

TPageMeasureUnits
PageSetupDialog_GetUnits(TPageSetupDialog AObj);

HWND
PageSetupDialog_GetHandle(TPageSetupDialog AObj);

void
PageSetupDialog_SetOnClose(TPageSetupDialog AObj, TNotifyEvent AEventData);

void
PageSetupDialog_SetOnShow(TPageSetupDialog AObj, TNotifyEvent AEventData);

int32_t
PageSetupDialog_GetComponentCount(TPageSetupDialog AObj);

int32_t
PageSetupDialog_GetComponentIndex(TPageSetupDialog AObj);

void
PageSetupDialog_SetComponentIndex(TPageSetupDialog AObj, int32_t AValue);

TComponent
PageSetupDialog_GetOwner(TPageSetupDialog AObj);

char*
PageSetupDialog_GetName(TPageSetupDialog AObj);

void
PageSetupDialog_SetName(TPageSetupDialog AObj, CChar char* AValue);

intptr_t
PageSetupDialog_GetTag(TPageSetupDialog AObj);

void
PageSetupDialog_SetTag(TPageSetupDialog AObj, intptr_t AValue);

TComponent
PageSetupDialog_GetComponents(TPageSetupDialog AObj, int32_t AIndex);

TClass
PageSetupDialog_StaticClassType();

// -------------------TDragObject-------------------

TDragObject
ragObject_Create(TControl AOwner);

void
ragObject_Free(TDragObject AObj);

void
ragObject_Assign(TDragObject AObj, TDragObject Source);

void
ragObject_HideDragImage(TDragObject AObj);

void
ragObject_ShowDragImage(TDragObject AObj);

TClass
ragObject_ClassType(TDragObject AObj);

char*
ragObject_ClassName(TDragObject AObj);

int32_t
DragObject_InstanceSize(TDragObject AObj);

BOOL
ragObject_InheritsFrom(TDragObject AObj, TClass AClass);

BOOL
ragObject_Equals(TDragObject AObj, TObject Obj);

int32_t
ragObject_GetHashCode(TDragObject AObj);

char*
ragObject_ToString(TDragObject AObj);

BOOL
ragObject_GetAlwaysShowDragImages(TDragObject AObj);

void
ragObject_SetAlwaysShowDragImages(TDragObject AObj, BOOL AValue);

TPoint
ragObject_GetDragPos(TDragObject AObj);

void
ragObject_SetDragPos(TDragObject AObj, TPoint AValue);

void*
ragObject_GetDragTarget(TDragObject AObj);

void
ragObject_SetDragTarget(TDragObject AObj, void* AValue);

TPoint
ragObject_GetDragTargetPos(TDragObject AObj);

void
ragObject_SetDragTargetPos(TDragObject AObj, TPoint AValue);

BOOL
ragObject_GetDropped(TDragObject AObj);

TClass
ragObject_StaticClassType();

// -------------------TDragDockObject-------------------

TDragDockObject
ragDockObject_Create(TControl AOwner);

void
ragDockObject_Free(TDragDockObject AObj);

void
ragDockObject_Assign(TDragDockObject AObj, TDragObject Source);

void
ragDockObject_HideDragImage(TDragDockObject AObj);

void
ragDockObject_ShowDragImage(TDragDockObject AObj);

TClass
ragDockObject_ClassType(TDragDockObject AObj);

char*
ragDockObject_ClassName(TDragDockObject AObj);

int32_t
DragDockObject_InstanceSize(TDragDockObject AObj);

BOOL
ragDockObject_InheritsFrom(TDragDockObject AObj, TClass AClass);

BOOL
ragDockObject_Equals(TDragDockObject AObj, TObject Obj);

int32_t
ragDockObject_GetHashCode(TDragDockObject AObj);

char*
ragDockObject_ToString(TDragDockObject AObj);

TRect
ragDockObject_GetDockRect(TDragDockObject AObj);

void
ragDockObject_SetDockRect(TDragDockObject AObj, TRect AValue);

TAlign
ragDockObject_GetDropAlign(TDragDockObject AObj);

TControl
ragDockObject_GetDropOnControl(TDragDockObject AObj);

TRect
ragDockObject_GetEraseDockRect(TDragDockObject AObj);

void
ragDockObject_SetEraseDockRect(TDragDockObject AObj, TRect AValue);

BOOL
ragDockObject_GetFloating(TDragDockObject AObj);

void
ragDockObject_SetFloating(TDragDockObject AObj, BOOL AValue);

TControl
ragDockObject_GetControl(TDragDockObject AObj);

void
ragDockObject_SetControl(TDragDockObject AObj, TControl AValue);

BOOL
ragDockObject_GetAlwaysShowDragImages(TDragDockObject AObj);

void
ragDockObject_SetAlwaysShowDragImages(TDragDockObject AObj, BOOL AValue);

TPoint
ragDockObject_GetDragPos(TDragDockObject AObj);

void
ragDockObject_SetDragPos(TDragDockObject AObj, TPoint AValue);

void*
ragDockObject_GetDragTarget(TDragDockObject AObj);

void
ragDockObject_SetDragTarget(TDragDockObject AObj, void* AValue);

TPoint
ragDockObject_GetDragTargetPos(TDragDockObject AObj);

void
ragDockObject_SetDragTargetPos(TDragDockObject AObj, TPoint AValue);

BOOL
ragDockObject_GetDropped(TDragDockObject AObj);

TClass
ragDockObject_StaticClassType();

// -------------------TStringGrid-------------------

TStringGrid
StringGrid_Create(TComponent AOwner);

void
StringGrid_Free(TStringGrid AObj);

void
StringGrid_DeleteColRow(TStringGrid AObj, BOOL IsColumn, int32_t index);

void
StringGrid_DeleteCol(TStringGrid AObj, int32_t Index);

void
StringGrid_DeleteRow(TStringGrid AObj, int32_t Index);

void
StringGrid_ExchangeColRow(TStringGrid AObj, BOOL IsColumn, int32_t index, int32_t WithIndex);

void
StringGrid_InsertColRow(TStringGrid AObj, BOOL IsColumn, int32_t index);

void
StringGrid_MoveColRow(TStringGrid AObj, BOOL IsColumn, int32_t FromIndex, int32_t ToIndex);

void
StringGrid_SortColRow(TStringGrid AObj, BOOL IsColumn, int32_t Index, int32_t FromIndex, int32_t ToIndex);

TWinControl
StringGrid_EditorByStyle(TStringGrid AObj, TColumnButtonStyle Style);

void
StringGrid_EditorKeyDown(TStringGrid AObj, TObject Sender, uint16_t* Key, TShiftState Shift);

void
StringGrid_EditorKeyPress(TStringGrid AObj, TObject Sender, Char* Key);

void
StringGrid_EditorKeyUp(TStringGrid AObj, TObject Sender, uint16_t* key, TShiftState shift);

void
StringGrid_EditorTextChanged(TStringGrid AObj, int32_t aCol, int32_t aRow, CChar char* aText);

void
StringGrid_EditingDone(TStringGrid AObj);

void
StringGrid_AutoAdjustColumns(TStringGrid AObj);

TRect
StringGrid_CellRect(TStringGrid AObj, int32_t ACol, int32_t ARow);

TGridZone
StringGrid_CellToGridZone(TStringGrid AObj, int32_t aCol, int32_t aRow);

void
StringGrid_CheckPosition(TStringGrid AObj);

BOOL
StringGrid_ClearCols(TStringGrid AObj);

BOOL
StringGrid_ClearRows(TStringGrid AObj);

void
StringGrid_Clear(TStringGrid AObj);

void
StringGrid_ClearSelections(TStringGrid AObj);

BOOL
StringGrid_HasMultiSelection(TStringGrid AObj);

void
StringGrid_InvalidateCell(TStringGrid AObj, int32_t aCol, int32_t aRow);

void
StringGrid_InvalidateCol(TStringGrid AObj, int32_t ACol);

void
StringGrid_InvalidateRange(TStringGrid AObj, TRect aRange);

void
StringGrid_InvalidateRow(TStringGrid AObj, int32_t ARow);

BOOL
StringGrid_IsCellVisible(TStringGrid AObj, int32_t aCol, int32_t aRow);

BOOL
StringGrid_IsFixedCellVisible(TStringGrid AObj, int32_t aCol, int32_t aRow);

TGridCoord
StringGrid_MouseCoord(TStringGrid AObj, int32_t X, int32_t Y);

TPoint
StringGrid_MouseToCell(TStringGrid AObj, TPoint Mouse);

TPoint
StringGrid_MouseToLogcell(TStringGrid AObj, TPoint Mouse);

TGridZone
StringGrid_MouseToGridZone(TStringGrid AObj, int32_t X, int32_t Y);

BOOL
StringGrid_CanFocus(TStringGrid AObj);

BOOL
StringGrid_ContainsControl(TStringGrid AObj, TControl Control);

TControl
StringGrid_ControlAtPos(TStringGrid AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
StringGrid_DisableAlign(TStringGrid AObj);

void
StringGrid_EnableAlign(TStringGrid AObj);

TControl
StringGrid_FindChildControl(TStringGrid AObj, CChar char* ControlName);

void
StringGrid_FlipChildren(TStringGrid AObj, BOOL AllLevels);

BOOL
StringGrid_Focused(TStringGrid AObj);

BOOL
StringGrid_HandleAllocated(TStringGrid AObj);

void
StringGrid_InsertControl(TStringGrid AObj, TControl AControl);

void
StringGrid_Invalidate(TStringGrid AObj);

void
StringGrid_PaintTo(TStringGrid AObj, HDC DC, int32_t X, int32_t Y);

void
StringGrid_RemoveControl(TStringGrid AObj, TControl AControl);

void
StringGrid_Realign(TStringGrid AObj);

void
StringGrid_Repaint(TStringGrid AObj);

void
StringGrid_ScaleBy(TStringGrid AObj, int32_t M, int32_t D);

void
StringGrid_ScrollBy(TStringGrid AObj, int32_t DeltaX, int32_t DeltaY);

void
StringGrid_SetBounds(TStringGrid AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
StringGrid_SetFocus(TStringGrid AObj);

void
StringGrid_Update(TStringGrid AObj);

void
StringGrid_BringToFront(TStringGrid AObj);

TPoint
StringGrid_ClientToScreen(TStringGrid AObj, TPoint Point);

TPoint
StringGrid_ClientToParent(TStringGrid AObj, TPoint Point, TWinControl AParent);

BOOL
StringGrid_Dragging(TStringGrid AObj);

BOOL
StringGrid_HasParent(TStringGrid AObj);

void
StringGrid_Hide(TStringGrid AObj);

intptr_t
StringGrid_Perform(TStringGrid AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
StringGrid_Refresh(TStringGrid AObj);

TPoint
StringGrid_ScreenToClient(TStringGrid AObj, TPoint Point);

TPoint
StringGrid_ParentToClient(TStringGrid AObj, TPoint Point, TWinControl AParent);

void
StringGrid_SendToBack(TStringGrid AObj);

void
StringGrid_Show(TStringGrid AObj);

int32_t
StringGrid_GetTextBuf(TStringGrid AObj, CChar char* Buffer, int32_t BufSize);

int32_t
StringGrid_GetTextLen(TStringGrid AObj);

void
StringGrid_SetTextBuf(TStringGrid AObj, CChar char* Buffer);

TComponent
StringGrid_FindComponent(TStringGrid AObj, CChar char* AName);

char*
StringGrid_GetNamePath(TStringGrid AObj);

void
StringGrid_Assign(TStringGrid AObj, TObject Source);

TClass
StringGrid_ClassType(TStringGrid AObj);

char*
StringGrid_ClassName(TStringGrid AObj);

int32_t
StringGrid_InstanceSize(TStringGrid AObj);

BOOL
StringGrid_InheritsFrom(TStringGrid AObj, TClass AClass);

BOOL
StringGrid_Equals(TStringGrid AObj, TObject Obj);

int32_t
StringGrid_GetHashCode(TStringGrid AObj);

char*
StringGrid_ToString(TStringGrid AObj);

void
StringGrid_AnchorToNeighbour(TStringGrid AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
StringGrid_AnchorParallel(TStringGrid AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
StringGrid_AnchorHorizontalCenterTo(TStringGrid AObj, TControl ASibling);

void
StringGrid_AnchorVerticalCenterTo(TStringGrid AObj, TControl ASibling);

void
StringGrid_AnchorSame(TStringGrid AObj, TAnchorKind ASide, TControl ASibling);

void
StringGrid_AnchorAsAlign(TStringGrid AObj, TAlign ATheAlign, int32_t ASpace);

void
StringGrid_AnchorClient(TStringGrid AObj, int32_t ASpace);

int32_t
StringGrid_ScaleDesignToForm(TStringGrid AObj, int32_t ASize);

int32_t
StringGrid_ScaleFormToDesign(TStringGrid AObj, int32_t ASize);

int32_t
StringGrid_Scale96ToForm(TStringGrid AObj, int32_t ASize);

int32_t
StringGrid_ScaleFormTo96(TStringGrid AObj, int32_t ASize);

int32_t
StringGrid_Scale96ToFont(TStringGrid AObj, int32_t ASize);

int32_t
StringGrid_ScaleFontTo96(TStringGrid AObj, int32_t ASize);

int32_t
StringGrid_ScaleScreenToFont(TStringGrid AObj, int32_t ASize);

int32_t
StringGrid_ScaleFontToScreen(TStringGrid AObj, int32_t ASize);

int32_t
StringGrid_Scale96ToScreen(TStringGrid AObj, int32_t ASize);

int32_t
StringGrid_ScaleScreenTo96(TStringGrid AObj, int32_t ASize);

void
StringGrid_AutoAdjustLayout(TStringGrid AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
StringGrid_FixDesignFontsPPI(TStringGrid AObj, int32_t ADesignTimePPI);

void
StringGrid_ScaleFontsPPI(TStringGrid AObj, int32_t AToPPI, double AProportion);

TColor
StringGrid_GetSelectedColor(TStringGrid AObj);

void
StringGrid_SetSelectedColor(TStringGrid AObj, TColor AValue);

TGridColumn
StringGrid_GetSelectedColumn(TStringGrid AObj);

BOOL
StringGrid_GetStrictSort(TStringGrid AObj);

void
StringGrid_SetStrictSort(TStringGrid AObj, BOOL AValue);

TColor
StringGrid_GetFixedHotColor(TStringGrid AObj);

void
StringGrid_SetFixedHotColor(TStringGrid AObj, TColor AValue);

BOOL
StringGrid_GetFastEditing(TStringGrid AObj);

void
StringGrid_SetFastEditing(TStringGrid AObj, BOOL AValue);

TColor
StringGrid_GetFixedGridLineColor(TStringGrid AObj);

void
StringGrid_SetFixedGridLineColor(TStringGrid AObj, TColor AValue);

TColor
StringGrid_GetFocusColor(TStringGrid AObj);

void
StringGrid_SetFocusColor(TStringGrid AObj, TColor AValue);

BOOL
StringGrid_GetFocusRectVisible(TStringGrid AObj);

void
StringGrid_SetFocusRectVisible(TStringGrid AObj, BOOL AValue);

TColor
StringGrid_GetGridLineColor(TStringGrid AObj);

void
StringGrid_SetGridLineColor(TStringGrid AObj, TColor AValue);

TPenStyle
StringGrid_GetGridLineStyle(TStringGrid AObj);

void
StringGrid_SetGridLineStyle(TStringGrid AObj, TPenStyle AValue);

TWinControl
StringGrid_GetEditor(TStringGrid AObj);

void
StringGrid_SetEditor(TStringGrid AObj, TWinControl AValue);

TBorderStyle
StringGrid_GetEditorBorderStyle(TStringGrid AObj);

void
StringGrid_SetEditorBorderStyle(TStringGrid AObj, TBorderStyle AValue);

BOOL
StringGrid_GetEditorMode(TStringGrid AObj);

void
StringGrid_SetEditorMode(TStringGrid AObj, BOOL AValue);

TSortOrder
StringGrid_GetSortOrder(TStringGrid AObj);

void
StringGrid_SetSortOrder(TStringGrid AObj, TSortOrder AValue);

int32_t
StringGrid_GetSortColumn(TStringGrid AObj);

void
StringGrid_SetOnAfterSelection(TStringGrid AObj, TOnSelectEvent AEventData);

void
StringGrid_SetOnBeforeSelection(TStringGrid AObj, TOnSelectEvent AEventData);

void
StringGrid_SetOnButtonClick(TStringGrid AObj, TOnSelectEvent AEventData);

void
StringGrid_SetOnCheckboxToggled(TStringGrid AObj, TToggledCheckboxEvent AEventData);

void
StringGrid_SetOnColRowDeleted(TStringGrid AObj, TGridOperationEvent AEventData);

void
StringGrid_SetOnColRowExchanged(TStringGrid AObj, TGridOperationEvent AEventData);

void
StringGrid_SetOnColRowInserted(TStringGrid AObj, TGridOperationEvent AEventData);

void
StringGrid_SetOnColRowMoved(TStringGrid AObj, TGridOperationEvent AEventData);

void
StringGrid_SetOnCompareCells(TStringGrid AObj, TOnCompareCells AEventData);

void
StringGrid_SetOnEditingDone(TStringGrid AObj, TNotifyEvent AEventData);

void
StringGrid_SetOnGetCellHint(TStringGrid AObj, TGetCellHintEvent AEventData);

void
StringGrid_SetOnGetCheckboxState(TStringGrid AObj, TGetCheckboxStateEvent AEventData);

void
StringGrid_SetOnSetCheckboxState(TStringGrid AObj, TSetCheckboxStateEvent AEventData);

void
StringGrid_SetOnHeaderClick(TStringGrid AObj, THdrEvent AEventData);

void
StringGrid_SetOnHeaderSized(TStringGrid AObj, THdrEvent AEventData);

void
StringGrid_SetOnHeaderSizing(TStringGrid AObj, THeaderSizingEvent AEventData);

void
StringGrid_SetOnPickListSelect(TStringGrid AObj, TNotifyEvent AEventData);

void
StringGrid_SetOnSelection(TStringGrid AObj, TOnSelectEvent AEventData);

void
StringGrid_SetOnSelectEditor(TStringGrid AObj, TSelectEditorEvent AEventData);

void
StringGrid_SetOnUserCheckboxBitmap(TStringGrid AObj, TUserCheckBoxBitmapEvent AEventData);

void
StringGrid_SetOnValidateEntry(TStringGrid AObj, TValidateEntryEvent AEventData);

void
StringGrid_SetOnPrepareCanvas(TStringGrid AObj, TOnPrepareCanvasEvent AEventData);

TColor
StringGrid_GetAlternateColor(TStringGrid AObj);

void
StringGrid_SetAlternateColor(TStringGrid AObj, TColor AValue);

TAutoAdvance
StringGrid_GetAutoAdvance(TStringGrid AObj);

void
StringGrid_SetAutoAdvance(TStringGrid AObj, TAutoAdvance AValue);

BOOL
StringGrid_GetAutoEdit(TStringGrid AObj);

void
StringGrid_SetAutoEdit(TStringGrid AObj, BOOL AValue);

BOOL
StringGrid_GetAutoFillColumns(TStringGrid AObj);

void
StringGrid_SetAutoFillColumns(TStringGrid AObj, BOOL AValue);

TCellHintPriority
StringGrid_GetCellHintPriority(TStringGrid AObj);

void
StringGrid_SetCellHintPriority(TStringGrid AObj, TCellHintPriority AValue);

BOOL
StringGrid_GetColumnClickSorts(TStringGrid AObj);

void
StringGrid_SetColumnClickSorts(TStringGrid AObj, BOOL AValue);

TGridColumns
StringGrid_GetColumns(TStringGrid AObj);

void
StringGrid_SetColumns(TStringGrid AObj, TGridColumns AValue);

BOOL
StringGrid_GetExtendedSelect(TStringGrid AObj);

void
StringGrid_SetExtendedSelect(TStringGrid AObj, BOOL AValue);

BOOL
StringGrid_GetFlat(TStringGrid AObj);

void
StringGrid_SetFlat(TStringGrid AObj, BOOL AValue);

TGridZoneSet
StringGrid_GetHeaderHotZones(TStringGrid AObj);

void
StringGrid_SetHeaderHotZones(TStringGrid AObj, TGridZoneSet AValue);

TGridZoneSet
StringGrid_GetHeaderPushZones(TStringGrid AObj);

void
StringGrid_SetHeaderPushZones(TStringGrid AObj, TGridZoneSet AValue);

int32_t
StringGrid_GetImageIndexSortAsc(TStringGrid AObj);

void
StringGrid_SetImageIndexSortAsc(TStringGrid AObj, int32_t AValue);

int32_t
StringGrid_GetImageIndexSortDesc(TStringGrid AObj);

void
StringGrid_SetImageIndexSortDesc(TStringGrid AObj, int32_t AValue);

TMouseWheelOption
StringGrid_GetMouseWheelOption(TStringGrid AObj);

void
StringGrid_SetMouseWheelOption(TStringGrid AObj, TMouseWheelOption AValue);

TGridOptions2
StringGrid_GetOptions2(TStringGrid AObj);

void
StringGrid_SetOptions2(TStringGrid AObj, TGridOptions2 AValue);

TRangeSelectMode
StringGrid_GetRangeSelectMode(TStringGrid AObj);

void
StringGrid_SetRangeSelectMode(TStringGrid AObj, TRangeSelectMode AValue);

TAutoAdvance
StringGrid_GetTabAdvance(TStringGrid AObj);

void
StringGrid_SetTabAdvance(TStringGrid AObj, TAutoAdvance AValue);

TFont
StringGrid_GetTitleFont(TStringGrid AObj);

void
StringGrid_SetTitleFont(TStringGrid AObj, TFont AValue);

TImageList
StringGrid_GetTitleImageList(TStringGrid AObj);

void
StringGrid_SetTitleImageList(TStringGrid AObj, TImageList AValue);

TTitleStyle
StringGrid_GetTitleStyle(TStringGrid AObj);

void
StringGrid_SetTitleStyle(TStringGrid AObj, TTitleStyle AValue);

BOOL
StringGrid_GetUseXORFeatures(TStringGrid AObj);

void
StringGrid_SetUseXORFeatures(TStringGrid AObj, BOOL AValue);

TAlign
StringGrid_GetAlign(TStringGrid AObj);

void
StringGrid_SetAlign(TStringGrid AObj, TAlign AValue);

TAnchors
StringGrid_GetAnchors(TStringGrid AObj);

void
StringGrid_SetAnchors(TStringGrid AObj, TAnchors AValue);

TBiDiMode
StringGrid_GetBiDiMode(TStringGrid AObj);

void
StringGrid_SetBiDiMode(TStringGrid AObj, TBiDiMode AValue);

TBorderStyle
StringGrid_GetBorderStyle(TStringGrid AObj);

void
StringGrid_SetBorderStyle(TStringGrid AObj, TBorderStyle AValue);

TColor
StringGrid_GetColor(TStringGrid AObj);

void
StringGrid_SetColor(TStringGrid AObj, TColor AValue);

int32_t
StringGrid_GetColCount(TStringGrid AObj);

void
StringGrid_SetColCount(TStringGrid AObj, int32_t AValue);

TSizeConstraints
StringGrid_GetConstraints(TStringGrid AObj);

void
StringGrid_SetConstraints(TStringGrid AObj, TSizeConstraints AValue);

int32_t
StringGrid_GetDefaultColWidth(TStringGrid AObj);

void
StringGrid_SetDefaultColWidth(TStringGrid AObj, int32_t AValue);

int32_t
StringGrid_GetDefaultRowHeight(TStringGrid AObj);

void
StringGrid_SetDefaultRowHeight(TStringGrid AObj, int32_t AValue);

BOOL
StringGrid_GetDefaultDrawing(TStringGrid AObj);

void
StringGrid_SetDefaultDrawing(TStringGrid AObj, BOOL AValue);

BOOL
StringGrid_GetDoubleBuffered(TStringGrid AObj);

void
StringGrid_SetDoubleBuffered(TStringGrid AObj, BOOL AValue);

TCursor
StringGrid_GetDragCursor(TStringGrid AObj);

void
StringGrid_SetDragCursor(TStringGrid AObj, TCursor AValue);

TDragKind
StringGrid_GetDragKind(TStringGrid AObj);

void
StringGrid_SetDragKind(TStringGrid AObj, TDragKind AValue);

TDragMode
StringGrid_GetDragMode(TStringGrid AObj);

void
StringGrid_SetDragMode(TStringGrid AObj, TDragMode AValue);

BOOL
StringGrid_GetEnabled(TStringGrid AObj);

void
StringGrid_SetEnabled(TStringGrid AObj, BOOL AValue);

TColor
StringGrid_GetFixedColor(TStringGrid AObj);

void
StringGrid_SetFixedColor(TStringGrid AObj, TColor AValue);

int32_t
StringGrid_GetFixedCols(TStringGrid AObj);

void
StringGrid_SetFixedCols(TStringGrid AObj, int32_t AValue);

int32_t
StringGrid_GetRowCount(TStringGrid AObj);

void
StringGrid_SetRowCount(TStringGrid AObj, int32_t AValue);

int32_t
StringGrid_GetFixedRows(TStringGrid AObj);

void
StringGrid_SetFixedRows(TStringGrid AObj, int32_t AValue);

TFont
StringGrid_GetFont(TStringGrid AObj);

void
StringGrid_SetFont(TStringGrid AObj, TFont AValue);

int32_t
StringGrid_GetGridLineWidth(TStringGrid AObj);

void
StringGrid_SetGridLineWidth(TStringGrid AObj, int32_t AValue);

TGridOptions
StringGrid_GetOptions(TStringGrid AObj);

void
StringGrid_SetOptions(TStringGrid AObj, TGridOptions AValue);

BOOL
StringGrid_GetParentColor(TStringGrid AObj);

void
StringGrid_SetParentColor(TStringGrid AObj, BOOL AValue);

BOOL
StringGrid_GetParentDoubleBuffered(TStringGrid AObj);

void
StringGrid_SetParentDoubleBuffered(TStringGrid AObj, BOOL AValue);

BOOL
StringGrid_GetParentFont(TStringGrid AObj);

void
StringGrid_SetParentFont(TStringGrid AObj, BOOL AValue);

BOOL
StringGrid_GetParentShowHint(TStringGrid AObj);

void
StringGrid_SetParentShowHint(TStringGrid AObj, BOOL AValue);

TPopupMenu
StringGrid_GetPopupMenu(TStringGrid AObj);

void
StringGrid_SetPopupMenu(TStringGrid AObj, TPopupMenu AValue);

TScrollStyle
StringGrid_GetScrollBars(TStringGrid AObj);

void
StringGrid_SetScrollBars(TStringGrid AObj, TScrollStyle AValue);

BOOL
StringGrid_GetShowHint(TStringGrid AObj);

void
StringGrid_SetShowHint(TStringGrid AObj, BOOL AValue);

TTabOrder
StringGrid_GetTabOrder(TStringGrid AObj);

void
StringGrid_SetTabOrder(TStringGrid AObj, TTabOrder AValue);

BOOL
StringGrid_GetVisible(TStringGrid AObj);

void
StringGrid_SetVisible(TStringGrid AObj, BOOL AValue);

int32_t
StringGrid_GetVisibleColCount(TStringGrid AObj);

int32_t
StringGrid_GetVisibleRowCount(TStringGrid AObj);

void
StringGrid_SetOnClick(TStringGrid AObj, TNotifyEvent AEventData);

void
StringGrid_SetOnContextPopup(TStringGrid AObj, TContextPopupEvent AEventData);

void
StringGrid_SetOnDblClick(TStringGrid AObj, TNotifyEvent AEventData);

void
StringGrid_SetOnDragDrop(TStringGrid AObj, TDragDropEvent AEventData);

void
StringGrid_SetOnDragOver(TStringGrid AObj, TDragOverEvent AEventData);

void
StringGrid_SetOnDrawCell(TStringGrid AObj, TDrawCellEvent AEventData);

void
StringGrid_SetOnEndDock(TStringGrid AObj, TEndDragEvent AEventData);

void
StringGrid_SetOnEndDrag(TStringGrid AObj, TEndDragEvent AEventData);

void
StringGrid_SetOnEnter(TStringGrid AObj, TNotifyEvent AEventData);

void
StringGrid_SetOnExit(TStringGrid AObj, TNotifyEvent AEventData);

void
StringGrid_SetOnGetEditMask(TStringGrid AObj, TGetEditEvent AEventData);

void
StringGrid_SetOnGetEditText(TStringGrid AObj, TGetEditEvent AEventData);

void
StringGrid_SetOnKeyDown(TStringGrid AObj, TKeyEvent AEventData);

void
StringGrid_SetOnKeyPress(TStringGrid AObj, TKeyPressEvent AEventData);

void
StringGrid_SetOnKeyUp(TStringGrid AObj, TKeyEvent AEventData);

void
StringGrid_SetOnMouseDown(TStringGrid AObj, TMouseEvent AEventData);

void
StringGrid_SetOnMouseEnter(TStringGrid AObj, TNotifyEvent AEventData);

void
StringGrid_SetOnMouseLeave(TStringGrid AObj, TNotifyEvent AEventData);

void
StringGrid_SetOnMouseMove(TStringGrid AObj, TMouseMoveEvent AEventData);

void
StringGrid_SetOnMouseUp(TStringGrid AObj, TMouseEvent AEventData);

void
StringGrid_SetOnMouseWheelDown(TStringGrid AObj, TMouseWheelUpDownEvent AEventData);

void
StringGrid_SetOnMouseWheelUp(TStringGrid AObj, TMouseWheelUpDownEvent AEventData);

void
StringGrid_SetOnSelectCell(TStringGrid AObj, TSelectCellEvent AEventData);

void
StringGrid_SetOnSetEditText(TStringGrid AObj, TSetEditEvent AEventData);

void
StringGrid_SetOnStartDock(TStringGrid AObj, TStartDockEvent AEventData);

void
StringGrid_SetOnTopLeftChanged(TStringGrid AObj, TNotifyEvent AEventData);

TCanvas
StringGrid_GetCanvas(TStringGrid AObj);

int32_t
StringGrid_GetCol(TStringGrid AObj);

void
StringGrid_SetCol(TStringGrid AObj, int32_t AValue);

int32_t
StringGrid_GetGridHeight(TStringGrid AObj);

int32_t
StringGrid_GetGridWidth(TStringGrid AObj);

int32_t
StringGrid_GetLeftCol(TStringGrid AObj);

void
StringGrid_SetLeftCol(TStringGrid AObj, int32_t AValue);

TGridRect
StringGrid_GetSelection(TStringGrid AObj);

void
StringGrid_SetSelection(TStringGrid AObj, TGridRect AValue);

int32_t
StringGrid_GetRow(TStringGrid AObj);

void
StringGrid_SetRow(TStringGrid AObj, int32_t AValue);

int32_t
StringGrid_GetTopRow(TStringGrid AObj);

void
StringGrid_SetTopRow(TStringGrid AObj, int32_t AValue);

BOOL
StringGrid_GetTabStop(TStringGrid AObj);

void
StringGrid_SetTabStop(TStringGrid AObj, BOOL AValue);

int32_t
StringGrid_GetDockClientCount(TStringGrid AObj);

BOOL
StringGrid_GetDockSite(TStringGrid AObj);

void
StringGrid_SetDockSite(TStringGrid AObj, BOOL AValue);

BOOL
StringGrid_GetMouseInClient(TStringGrid AObj);

int32_t
StringGrid_GetVisibleDockClientCount(TStringGrid AObj);

TBrush
StringGrid_GetBrush(TStringGrid AObj);

int32_t
StringGrid_GetControlCount(TStringGrid AObj);

HWND
StringGrid_GetHandle(TStringGrid AObj);

HWND
StringGrid_GetParentWindow(TStringGrid AObj);

void
StringGrid_SetParentWindow(TStringGrid AObj, HWND AValue);

BOOL
StringGrid_GetShowing(TStringGrid AObj);

BOOL
StringGrid_GetUseDockManager(TStringGrid AObj);

void
StringGrid_SetUseDockManager(TStringGrid AObj, BOOL AValue);

TAction
StringGrid_GetAction(TStringGrid AObj);

void
StringGrid_SetAction(TStringGrid AObj, TAction AValue);

TRect
StringGrid_GetBoundsRect(TStringGrid AObj);

void
StringGrid_SetBoundsRect(TStringGrid AObj, TRect AValue);

int32_t
StringGrid_GetClientHeight(TStringGrid AObj);

void
StringGrid_SetClientHeight(TStringGrid AObj, int32_t AValue);

TPoint
StringGrid_GetClientOrigin(TStringGrid AObj);

TRect
StringGrid_GetClientRect(TStringGrid AObj);

int32_t
StringGrid_GetClientWidth(TStringGrid AObj);

void
StringGrid_SetClientWidth(TStringGrid AObj, int32_t AValue);

TControlState
StringGrid_GetControlState(TStringGrid AObj);

void
StringGrid_SetControlState(TStringGrid AObj, TControlState AValue);

TControlStyle
StringGrid_GetControlStyle(TStringGrid AObj);

void
StringGrid_SetControlStyle(TStringGrid AObj, TControlStyle AValue);

BOOL
StringGrid_GetFloating(TStringGrid AObj);

TWinControl
StringGrid_GetParent(TStringGrid AObj);

void
StringGrid_SetParent(TStringGrid AObj, TWinControl AValue);

int32_t
StringGrid_GetLeft(TStringGrid AObj);

void
StringGrid_SetLeft(TStringGrid AObj, int32_t AValue);

int32_t
StringGrid_GetTop(TStringGrid AObj);

void
StringGrid_SetTop(TStringGrid AObj, int32_t AValue);

int32_t
StringGrid_GetWidth(TStringGrid AObj);

void
StringGrid_SetWidth(TStringGrid AObj, int32_t AValue);

int32_t
StringGrid_GetHeight(TStringGrid AObj);

void
StringGrid_SetHeight(TStringGrid AObj, int32_t AValue);

TCursor
StringGrid_GetCursor(TStringGrid AObj);

void
StringGrid_SetCursor(TStringGrid AObj, TCursor AValue);

char*
StringGrid_GetHint(TStringGrid AObj);

void
StringGrid_SetHint(TStringGrid AObj, CChar char* AValue);

int32_t
StringGrid_GetComponentCount(TStringGrid AObj);

int32_t
StringGrid_GetComponentIndex(TStringGrid AObj);

void
StringGrid_SetComponentIndex(TStringGrid AObj, int32_t AValue);

TComponent
StringGrid_GetOwner(TStringGrid AObj);

char*
StringGrid_GetName(TStringGrid AObj);

void
StringGrid_SetName(TStringGrid AObj, CChar char* AValue);

intptr_t
StringGrid_GetTag(TStringGrid AObj);

void
StringGrid_SetTag(TStringGrid AObj, intptr_t AValue);

TAnchorSide
StringGrid_GetAnchorSideLeft(TStringGrid AObj);

void
StringGrid_SetAnchorSideLeft(TStringGrid AObj, TAnchorSide AValue);

TAnchorSide
StringGrid_GetAnchorSideTop(TStringGrid AObj);

void
StringGrid_SetAnchorSideTop(TStringGrid AObj, TAnchorSide AValue);

TAnchorSide
StringGrid_GetAnchorSideRight(TStringGrid AObj);

void
StringGrid_SetAnchorSideRight(TStringGrid AObj, TAnchorSide AValue);

TAnchorSide
StringGrid_GetAnchorSideBottom(TStringGrid AObj);

void
StringGrid_SetAnchorSideBottom(TStringGrid AObj, TAnchorSide AValue);

TControlChildSizing
StringGrid_GetChildSizing(TStringGrid AObj);

void
StringGrid_SetChildSizing(TStringGrid AObj, TControlChildSizing AValue);

TControlBorderSpacing
StringGrid_GetBorderSpacing(TStringGrid AObj);

void
StringGrid_SetBorderSpacing(TStringGrid AObj, TControlBorderSpacing AValue);

BOOL
StringGrid_GetIsCellSelected(TStringGrid AObj, int32_t aCol, int32_t aRow);

char*
StringGrid_GetCells(TStringGrid AObj, int32_t ACol, int32_t ARow);

void
StringGrid_SetCells(TStringGrid AObj, int32_t ACol, int32_t ARow, CChar char* AValue);

TStrings
StringGrid_GetCols(TStringGrid AObj, int32_t Index);

void
StringGrid_SetCols(TStringGrid AObj, int32_t Index, TStrings AValue);

TObject
StringGrid_GetObjects(TStringGrid AObj, int32_t ACol, int32_t ARow);

void
StringGrid_SetObjects(TStringGrid AObj, int32_t ACol, int32_t ARow, TObject AValue);

TStrings
StringGrid_GetRows(TStringGrid AObj, int32_t Index);

void
StringGrid_SetRows(TStringGrid AObj, int32_t Index, TStrings AValue);

int32_t
StringGrid_GetColWidths(TStringGrid AObj, int32_t Index);

void
StringGrid_SetColWidths(TStringGrid AObj, int32_t Index, int32_t AValue);

int32_t
StringGrid_GetRowHeights(TStringGrid AObj, int32_t Index);

void
StringGrid_SetRowHeights(TStringGrid AObj, int32_t Index, int32_t AValue);

TControl
StringGrid_GetDockClients(TStringGrid AObj, int32_t Index);

TControl
StringGrid_GetControls(TStringGrid AObj, int32_t Index);

TComponent
StringGrid_GetComponents(TStringGrid AObj, int32_t AIndex);

TAnchorSide
StringGrid_GetAnchorSide(TStringGrid AObj, TAnchorKind AKind);

TClass
StringGrid_StaticClassType();

// -------------------TDrawGrid-------------------

TDrawGrid
rawGrid_Create(TComponent AOwner);

void
rawGrid_Free(TDrawGrid AObj);

TRect
rawGrid_CellRect(TDrawGrid AObj, int32_t ACol, int32_t ARow);

void
rawGrid_MouseToCell(TDrawGrid AObj, int32_t X, int32_t Y, int32_t* ACol, int32_t* ARow);

TGridCoord
rawGrid_MouseCoord(TDrawGrid AObj, int32_t X, int32_t Y);

BOOL
rawGrid_CanFocus(TDrawGrid AObj);

BOOL
rawGrid_ContainsControl(TDrawGrid AObj, TControl Control);

TControl
rawGrid_ControlAtPos(TDrawGrid AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
rawGrid_DisableAlign(TDrawGrid AObj);

void
rawGrid_EnableAlign(TDrawGrid AObj);

TControl
rawGrid_FindChildControl(TDrawGrid AObj, CChar char* ControlName);

void
rawGrid_FlipChildren(TDrawGrid AObj, BOOL AllLevels);

BOOL
rawGrid_Focused(TDrawGrid AObj);

BOOL
rawGrid_HandleAllocated(TDrawGrid AObj);

void
rawGrid_InsertControl(TDrawGrid AObj, TControl AControl);

void
rawGrid_Invalidate(TDrawGrid AObj);

void
rawGrid_PaintTo(TDrawGrid AObj, HDC DC, int32_t X, int32_t Y);

void
rawGrid_RemoveControl(TDrawGrid AObj, TControl AControl);

void
rawGrid_Realign(TDrawGrid AObj);

void
rawGrid_Repaint(TDrawGrid AObj);

void
rawGrid_ScaleBy(TDrawGrid AObj, int32_t M, int32_t D);

void
rawGrid_ScrollBy(TDrawGrid AObj, int32_t DeltaX, int32_t DeltaY);

void
rawGrid_SetBounds(TDrawGrid AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
rawGrid_SetFocus(TDrawGrid AObj);

void
rawGrid_Update(TDrawGrid AObj);

void
rawGrid_BringToFront(TDrawGrid AObj);

TPoint
rawGrid_ClientToScreen(TDrawGrid AObj, TPoint Point);

TPoint
rawGrid_ClientToParent(TDrawGrid AObj, TPoint Point, TWinControl AParent);

BOOL
rawGrid_Dragging(TDrawGrid AObj);

BOOL
rawGrid_HasParent(TDrawGrid AObj);

void
rawGrid_Hide(TDrawGrid AObj);

intptr_t
rawGrid_Perform(TDrawGrid AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
rawGrid_Refresh(TDrawGrid AObj);

TPoint
rawGrid_ScreenToClient(TDrawGrid AObj, TPoint Point);

TPoint
rawGrid_ParentToClient(TDrawGrid AObj, TPoint Point, TWinControl AParent);

void
rawGrid_SendToBack(TDrawGrid AObj);

void
rawGrid_Show(TDrawGrid AObj);

int32_t
rawGrid_GetTextBuf(TDrawGrid AObj, CChar char* Buffer, int32_t BufSize);

int32_t
rawGrid_GetTextLen(TDrawGrid AObj);

void
rawGrid_SetTextBuf(TDrawGrid AObj, CChar char* Buffer);

TComponent
rawGrid_FindComponent(TDrawGrid AObj, CChar char* AName);

char*
rawGrid_GetNamePath(TDrawGrid AObj);

void
rawGrid_Assign(TDrawGrid AObj, TObject Source);

TClass
rawGrid_ClassType(TDrawGrid AObj);

char*
rawGrid_ClassName(TDrawGrid AObj);

int32_t
DrawGrid_InstanceSize(TDrawGrid AObj);

BOOL
rawGrid_InheritsFrom(TDrawGrid AObj, TClass AClass);

BOOL
rawGrid_Equals(TDrawGrid AObj, TObject Obj);

int32_t
rawGrid_GetHashCode(TDrawGrid AObj);

char*
rawGrid_ToString(TDrawGrid AObj);

void
rawGrid_AnchorToNeighbour(TDrawGrid AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
rawGrid_AnchorParallel(TDrawGrid AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
rawGrid_AnchorHorizontalCenterTo(TDrawGrid AObj, TControl ASibling);

void
rawGrid_AnchorVerticalCenterTo(TDrawGrid AObj, TControl ASibling);

void
rawGrid_AnchorSame(TDrawGrid AObj, TAnchorKind ASide, TControl ASibling);

void
rawGrid_AnchorAsAlign(TDrawGrid AObj, TAlign ATheAlign, int32_t ASpace);

void
rawGrid_AnchorClient(TDrawGrid AObj, int32_t ASpace);

int32_t
rawGrid_ScaleDesignToForm(TDrawGrid AObj, int32_t ASize);

int32_t
rawGrid_ScaleFormToDesign(TDrawGrid AObj, int32_t ASize);

int32_t
rawGrid_Scale96ToForm(TDrawGrid AObj, int32_t ASize);

int32_t
rawGrid_ScaleFormTo96(TDrawGrid AObj, int32_t ASize);

int32_t
rawGrid_Scale96ToFont(TDrawGrid AObj, int32_t ASize);

int32_t
rawGrid_ScaleFontTo96(TDrawGrid AObj, int32_t ASize);

int32_t
rawGrid_ScaleScreenToFont(TDrawGrid AObj, int32_t ASize);

int32_t
rawGrid_ScaleFontToScreen(TDrawGrid AObj, int32_t ASize);

int32_t
rawGrid_Scale96ToScreen(TDrawGrid AObj, int32_t ASize);

int32_t
rawGrid_ScaleScreenTo96(TDrawGrid AObj, int32_t ASize);

void
rawGrid_AutoAdjustLayout(TDrawGrid AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
rawGrid_FixDesignFontsPPI(TDrawGrid AObj, int32_t ADesignTimePPI);

void
rawGrid_ScaleFontsPPI(TDrawGrid AObj, int32_t AToPPI, double AProportion);

void
rawGrid_SetOnColRowMoved(TDrawGrid AObj, TGridOperationEvent AEventData);

void
rawGrid_SetOnPrepareCanvas(TDrawGrid AObj, TOnPrepareCanvasEvent AEventData);

TAlign
rawGrid_GetAlign(TDrawGrid AObj);

void
rawGrid_SetAlign(TDrawGrid AObj, TAlign AValue);

TAnchors
rawGrid_GetAnchors(TDrawGrid AObj);

void
rawGrid_SetAnchors(TDrawGrid AObj, TAnchors AValue);

TBiDiMode
rawGrid_GetBiDiMode(TDrawGrid AObj);

void
rawGrid_SetBiDiMode(TDrawGrid AObj, TBiDiMode AValue);

TBorderStyle
rawGrid_GetBorderStyle(TDrawGrid AObj);

void
rawGrid_SetBorderStyle(TDrawGrid AObj, TBorderStyle AValue);

TColor
rawGrid_GetColor(TDrawGrid AObj);

void
rawGrid_SetColor(TDrawGrid AObj, TColor AValue);

int32_t
rawGrid_GetColCount(TDrawGrid AObj);

void
rawGrid_SetColCount(TDrawGrid AObj, int32_t AValue);

TSizeConstraints
rawGrid_GetConstraints(TDrawGrid AObj);

void
rawGrid_SetConstraints(TDrawGrid AObj, TSizeConstraints AValue);

int32_t
rawGrid_GetDefaultColWidth(TDrawGrid AObj);

void
rawGrid_SetDefaultColWidth(TDrawGrid AObj, int32_t AValue);

int32_t
rawGrid_GetDefaultRowHeight(TDrawGrid AObj);

void
rawGrid_SetDefaultRowHeight(TDrawGrid AObj, int32_t AValue);

BOOL
rawGrid_GetDefaultDrawing(TDrawGrid AObj);

void
rawGrid_SetDefaultDrawing(TDrawGrid AObj, BOOL AValue);

BOOL
rawGrid_GetDoubleBuffered(TDrawGrid AObj);

void
rawGrid_SetDoubleBuffered(TDrawGrid AObj, BOOL AValue);

TCursor
rawGrid_GetDragCursor(TDrawGrid AObj);

void
rawGrid_SetDragCursor(TDrawGrid AObj, TCursor AValue);

TDragKind
rawGrid_GetDragKind(TDrawGrid AObj);

void
rawGrid_SetDragKind(TDrawGrid AObj, TDragKind AValue);

TDragMode
rawGrid_GetDragMode(TDrawGrid AObj);

void
rawGrid_SetDragMode(TDrawGrid AObj, TDragMode AValue);

BOOL
rawGrid_GetEnabled(TDrawGrid AObj);

void
rawGrid_SetEnabled(TDrawGrid AObj, BOOL AValue);

TColor
rawGrid_GetFixedColor(TDrawGrid AObj);

void
rawGrid_SetFixedColor(TDrawGrid AObj, TColor AValue);

int32_t
rawGrid_GetFixedCols(TDrawGrid AObj);

void
rawGrid_SetFixedCols(TDrawGrid AObj, int32_t AValue);

int32_t
rawGrid_GetRowCount(TDrawGrid AObj);

void
rawGrid_SetRowCount(TDrawGrid AObj, int32_t AValue);

int32_t
rawGrid_GetFixedRows(TDrawGrid AObj);

void
rawGrid_SetFixedRows(TDrawGrid AObj, int32_t AValue);

TFont
rawGrid_GetFont(TDrawGrid AObj);

void
rawGrid_SetFont(TDrawGrid AObj, TFont AValue);

int32_t
rawGrid_GetGridLineWidth(TDrawGrid AObj);

void
rawGrid_SetGridLineWidth(TDrawGrid AObj, int32_t AValue);

TGridOptions
rawGrid_GetOptions(TDrawGrid AObj);

void
rawGrid_SetOptions(TDrawGrid AObj, TGridOptions AValue);

BOOL
rawGrid_GetParentColor(TDrawGrid AObj);

void
rawGrid_SetParentColor(TDrawGrid AObj, BOOL AValue);

BOOL
rawGrid_GetParentDoubleBuffered(TDrawGrid AObj);

void
rawGrid_SetParentDoubleBuffered(TDrawGrid AObj, BOOL AValue);

BOOL
rawGrid_GetParentFont(TDrawGrid AObj);

void
rawGrid_SetParentFont(TDrawGrid AObj, BOOL AValue);

BOOL
rawGrid_GetParentShowHint(TDrawGrid AObj);

void
rawGrid_SetParentShowHint(TDrawGrid AObj, BOOL AValue);

TPopupMenu
rawGrid_GetPopupMenu(TDrawGrid AObj);

void
rawGrid_SetPopupMenu(TDrawGrid AObj, TPopupMenu AValue);

TScrollStyle
rawGrid_GetScrollBars(TDrawGrid AObj);

void
rawGrid_SetScrollBars(TDrawGrid AObj, TScrollStyle AValue);

BOOL
rawGrid_GetShowHint(TDrawGrid AObj);

void
rawGrid_SetShowHint(TDrawGrid AObj, BOOL AValue);

TTabOrder
rawGrid_GetTabOrder(TDrawGrid AObj);

void
rawGrid_SetTabOrder(TDrawGrid AObj, TTabOrder AValue);

BOOL
rawGrid_GetVisible(TDrawGrid AObj);

void
rawGrid_SetVisible(TDrawGrid AObj, BOOL AValue);

int32_t
rawGrid_GetVisibleColCount(TDrawGrid AObj);

int32_t
rawGrid_GetVisibleRowCount(TDrawGrid AObj);

void
rawGrid_SetOnClick(TDrawGrid AObj, TNotifyEvent AEventData);

void
rawGrid_SetOnContextPopup(TDrawGrid AObj, TContextPopupEvent AEventData);

void
rawGrid_SetOnDblClick(TDrawGrid AObj, TNotifyEvent AEventData);

void
rawGrid_SetOnDragDrop(TDrawGrid AObj, TDragDropEvent AEventData);

void
rawGrid_SetOnDragOver(TDrawGrid AObj, TDragOverEvent AEventData);

void
rawGrid_SetOnDrawCell(TDrawGrid AObj, TDrawCellEvent AEventData);

void
rawGrid_SetOnEndDock(TDrawGrid AObj, TEndDragEvent AEventData);

void
rawGrid_SetOnEndDrag(TDrawGrid AObj, TEndDragEvent AEventData);

void
rawGrid_SetOnEnter(TDrawGrid AObj, TNotifyEvent AEventData);

void
rawGrid_SetOnExit(TDrawGrid AObj, TNotifyEvent AEventData);

void
rawGrid_SetOnGetEditMask(TDrawGrid AObj, TGetEditEvent AEventData);

void
rawGrid_SetOnGetEditText(TDrawGrid AObj, TGetEditEvent AEventData);

void
rawGrid_SetOnKeyDown(TDrawGrid AObj, TKeyEvent AEventData);

void
rawGrid_SetOnKeyPress(TDrawGrid AObj, TKeyPressEvent AEventData);

void
rawGrid_SetOnKeyUp(TDrawGrid AObj, TKeyEvent AEventData);

void
rawGrid_SetOnMouseDown(TDrawGrid AObj, TMouseEvent AEventData);

void
rawGrid_SetOnMouseEnter(TDrawGrid AObj, TNotifyEvent AEventData);

void
rawGrid_SetOnMouseLeave(TDrawGrid AObj, TNotifyEvent AEventData);

void
rawGrid_SetOnMouseMove(TDrawGrid AObj, TMouseMoveEvent AEventData);

void
rawGrid_SetOnMouseUp(TDrawGrid AObj, TMouseEvent AEventData);

void
rawGrid_SetOnMouseWheelDown(TDrawGrid AObj, TMouseWheelUpDownEvent AEventData);

void
rawGrid_SetOnMouseWheelUp(TDrawGrid AObj, TMouseWheelUpDownEvent AEventData);

void
rawGrid_SetOnSelectCell(TDrawGrid AObj, TSelectCellEvent AEventData);

void
rawGrid_SetOnSetEditText(TDrawGrid AObj, TSetEditEvent AEventData);

void
rawGrid_SetOnStartDock(TDrawGrid AObj, TStartDockEvent AEventData);

void
rawGrid_SetOnTopLeftChanged(TDrawGrid AObj, TNotifyEvent AEventData);

TCanvas
rawGrid_GetCanvas(TDrawGrid AObj);

int32_t
rawGrid_GetCol(TDrawGrid AObj);

void
rawGrid_SetCol(TDrawGrid AObj, int32_t AValue);

BOOL
rawGrid_GetEditorMode(TDrawGrid AObj);

void
rawGrid_SetEditorMode(TDrawGrid AObj, BOOL AValue);

int32_t
rawGrid_GetGridHeight(TDrawGrid AObj);

int32_t
rawGrid_GetGridWidth(TDrawGrid AObj);

int32_t
rawGrid_GetLeftCol(TDrawGrid AObj);

void
rawGrid_SetLeftCol(TDrawGrid AObj, int32_t AValue);

TGridRect
rawGrid_GetSelection(TDrawGrid AObj);

void
rawGrid_SetSelection(TDrawGrid AObj, TGridRect AValue);

int32_t
rawGrid_GetRow(TDrawGrid AObj);

void
rawGrid_SetRow(TDrawGrid AObj, int32_t AValue);

int32_t
rawGrid_GetTopRow(TDrawGrid AObj);

void
rawGrid_SetTopRow(TDrawGrid AObj, int32_t AValue);

BOOL
rawGrid_GetTabStop(TDrawGrid AObj);

void
rawGrid_SetTabStop(TDrawGrid AObj, BOOL AValue);

int32_t
rawGrid_GetDockClientCount(TDrawGrid AObj);

BOOL
rawGrid_GetDockSite(TDrawGrid AObj);

void
rawGrid_SetDockSite(TDrawGrid AObj, BOOL AValue);

BOOL
rawGrid_GetMouseInClient(TDrawGrid AObj);

int32_t
rawGrid_GetVisibleDockClientCount(TDrawGrid AObj);

TBrush
rawGrid_GetBrush(TDrawGrid AObj);

int32_t
rawGrid_GetControlCount(TDrawGrid AObj);

HWND
rawGrid_GetHandle(TDrawGrid AObj);

HWND
rawGrid_GetParentWindow(TDrawGrid AObj);

void
rawGrid_SetParentWindow(TDrawGrid AObj, HWND AValue);

BOOL
rawGrid_GetShowing(TDrawGrid AObj);

BOOL
rawGrid_GetUseDockManager(TDrawGrid AObj);

void
rawGrid_SetUseDockManager(TDrawGrid AObj, BOOL AValue);

TAction
rawGrid_GetAction(TDrawGrid AObj);

void
rawGrid_SetAction(TDrawGrid AObj, TAction AValue);

TRect
rawGrid_GetBoundsRect(TDrawGrid AObj);

void
rawGrid_SetBoundsRect(TDrawGrid AObj, TRect AValue);

int32_t
rawGrid_GetClientHeight(TDrawGrid AObj);

void
rawGrid_SetClientHeight(TDrawGrid AObj, int32_t AValue);

TPoint
rawGrid_GetClientOrigin(TDrawGrid AObj);

TRect
rawGrid_GetClientRect(TDrawGrid AObj);

int32_t
rawGrid_GetClientWidth(TDrawGrid AObj);

void
rawGrid_SetClientWidth(TDrawGrid AObj, int32_t AValue);

TControlState
rawGrid_GetControlState(TDrawGrid AObj);

void
rawGrid_SetControlState(TDrawGrid AObj, TControlState AValue);

TControlStyle
rawGrid_GetControlStyle(TDrawGrid AObj);

void
rawGrid_SetControlStyle(TDrawGrid AObj, TControlStyle AValue);

BOOL
rawGrid_GetFloating(TDrawGrid AObj);

TWinControl
rawGrid_GetParent(TDrawGrid AObj);

void
rawGrid_SetParent(TDrawGrid AObj, TWinControl AValue);

int32_t
rawGrid_GetLeft(TDrawGrid AObj);

void
rawGrid_SetLeft(TDrawGrid AObj, int32_t AValue);

int32_t
rawGrid_GetTop(TDrawGrid AObj);

void
rawGrid_SetTop(TDrawGrid AObj, int32_t AValue);

int32_t
rawGrid_GetWidth(TDrawGrid AObj);

void
rawGrid_SetWidth(TDrawGrid AObj, int32_t AValue);

int32_t
rawGrid_GetHeight(TDrawGrid AObj);

void
rawGrid_SetHeight(TDrawGrid AObj, int32_t AValue);

TCursor
rawGrid_GetCursor(TDrawGrid AObj);

void
rawGrid_SetCursor(TDrawGrid AObj, TCursor AValue);

char*
rawGrid_GetHint(TDrawGrid AObj);

void
rawGrid_SetHint(TDrawGrid AObj, CChar char* AValue);

int32_t
rawGrid_GetComponentCount(TDrawGrid AObj);

int32_t
rawGrid_GetComponentIndex(TDrawGrid AObj);

void
rawGrid_SetComponentIndex(TDrawGrid AObj, int32_t AValue);

TComponent
rawGrid_GetOwner(TDrawGrid AObj);

char*
rawGrid_GetName(TDrawGrid AObj);

void
rawGrid_SetName(TDrawGrid AObj, CChar char* AValue);

intptr_t
rawGrid_GetTag(TDrawGrid AObj);

void
rawGrid_SetTag(TDrawGrid AObj, intptr_t AValue);

TAnchorSide
rawGrid_GetAnchorSideLeft(TDrawGrid AObj);

void
rawGrid_SetAnchorSideLeft(TDrawGrid AObj, TAnchorSide AValue);

TAnchorSide
rawGrid_GetAnchorSideTop(TDrawGrid AObj);

void
rawGrid_SetAnchorSideTop(TDrawGrid AObj, TAnchorSide AValue);

TAnchorSide
rawGrid_GetAnchorSideRight(TDrawGrid AObj);

void
rawGrid_SetAnchorSideRight(TDrawGrid AObj, TAnchorSide AValue);

TAnchorSide
rawGrid_GetAnchorSideBottom(TDrawGrid AObj);

void
rawGrid_SetAnchorSideBottom(TDrawGrid AObj, TAnchorSide AValue);

TControlChildSizing
rawGrid_GetChildSizing(TDrawGrid AObj);

void
rawGrid_SetChildSizing(TDrawGrid AObj, TControlChildSizing AValue);

TControlBorderSpacing
rawGrid_GetBorderSpacing(TDrawGrid AObj);

void
rawGrid_SetBorderSpacing(TDrawGrid AObj, TControlBorderSpacing AValue);

int32_t
rawGrid_GetColWidths(TDrawGrid AObj, int32_t Index);

void
rawGrid_SetColWidths(TDrawGrid AObj, int32_t Index, int32_t AValue);

int32_t
rawGrid_GetRowHeights(TDrawGrid AObj, int32_t Index);

void
rawGrid_SetRowHeights(TDrawGrid AObj, int32_t Index, int32_t AValue);

TControl
rawGrid_GetDockClients(TDrawGrid AObj, int32_t Index);

TControl
rawGrid_GetControls(TDrawGrid AObj, int32_t Index);

TComponent
rawGrid_GetComponents(TDrawGrid AObj, int32_t AIndex);

TAnchorSide
rawGrid_GetAnchorSide(TDrawGrid AObj, TAnchorKind AKind);

TClass
rawGrid_StaticClassType();

// -------------------TValueListEditor-------------------

TValueListEditor
ValueListEditor_Create(TComponent AOwner);

void
ValueListEditor_Free(TValueListEditor AObj);

void
ValueListEditor_DeleteRow(TValueListEditor AObj, int32_t ARow);

void
ValueListEditor_Refresh(TValueListEditor AObj);

TRect
ValueListEditor_CellRect(TValueListEditor AObj, int32_t ACol, int32_t ARow);

void
ValueListEditor_MouseToCell(TValueListEditor AObj, int32_t X, int32_t Y, int32_t* ACol, int32_t* ARow);

TGridCoord
ValueListEditor_MouseCoord(TValueListEditor AObj, int32_t X, int32_t Y);

BOOL
ValueListEditor_CanFocus(TValueListEditor AObj);

BOOL
ValueListEditor_ContainsControl(TValueListEditor AObj, TControl Control);

TControl
ValueListEditor_ControlAtPos(TValueListEditor AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
ValueListEditor_DisableAlign(TValueListEditor AObj);

void
ValueListEditor_EnableAlign(TValueListEditor AObj);

TControl
ValueListEditor_FindChildControl(TValueListEditor AObj, CChar char* ControlName);

void
ValueListEditor_FlipChildren(TValueListEditor AObj, BOOL AllLevels);

BOOL
ValueListEditor_Focused(TValueListEditor AObj);

BOOL
ValueListEditor_HandleAllocated(TValueListEditor AObj);

void
ValueListEditor_InsertControl(TValueListEditor AObj, TControl AControl);

void
ValueListEditor_Invalidate(TValueListEditor AObj);

void
ValueListEditor_PaintTo(TValueListEditor AObj, HDC DC, int32_t X, int32_t Y);

void
ValueListEditor_RemoveControl(TValueListEditor AObj, TControl AControl);

void
ValueListEditor_Realign(TValueListEditor AObj);

void
ValueListEditor_Repaint(TValueListEditor AObj);

void
ValueListEditor_ScaleBy(TValueListEditor AObj, int32_t M, int32_t D);

void
ValueListEditor_ScrollBy(TValueListEditor AObj, int32_t DeltaX, int32_t DeltaY);

void
ValueListEditor_SetBounds(TValueListEditor AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ValueListEditor_SetFocus(TValueListEditor AObj);

void
ValueListEditor_Update(TValueListEditor AObj);

void
ValueListEditor_BringToFront(TValueListEditor AObj);

TPoint
ValueListEditor_ClientToScreen(TValueListEditor AObj, TPoint Point);

TPoint
ValueListEditor_ClientToParent(TValueListEditor AObj, TPoint Point, TWinControl AParent);

BOOL
ValueListEditor_Dragging(TValueListEditor AObj);

BOOL
ValueListEditor_HasParent(TValueListEditor AObj);

void
ValueListEditor_Hide(TValueListEditor AObj);

intptr_t
ValueListEditor_Perform(TValueListEditor AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

TPoint
ValueListEditor_ScreenToClient(TValueListEditor AObj, TPoint Point);

TPoint
ValueListEditor_ParentToClient(TValueListEditor AObj, TPoint Point, TWinControl AParent);

void
ValueListEditor_SendToBack(TValueListEditor AObj);

void
ValueListEditor_Show(TValueListEditor AObj);

int32_t
ValueListEditor_GetTextBuf(TValueListEditor AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ValueListEditor_GetTextLen(TValueListEditor AObj);

void
ValueListEditor_SetTextBuf(TValueListEditor AObj, CChar char* Buffer);

TComponent
ValueListEditor_FindComponent(TValueListEditor AObj, CChar char* AName);

char*
ValueListEditor_GetNamePath(TValueListEditor AObj);

void
ValueListEditor_Assign(TValueListEditor AObj, TObject Source);

TClass
ValueListEditor_ClassType(TValueListEditor AObj);

char*
ValueListEditor_ClassName(TValueListEditor AObj);

int32_t
ValueListEditor_InstanceSize(TValueListEditor AObj);

BOOL
ValueListEditor_InheritsFrom(TValueListEditor AObj, TClass AClass);

BOOL
ValueListEditor_Equals(TValueListEditor AObj, TObject Obj);

int32_t
ValueListEditor_GetHashCode(TValueListEditor AObj);

char*
ValueListEditor_ToString(TValueListEditor AObj);

void
ValueListEditor_AnchorToNeighbour(TValueListEditor AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ValueListEditor_AnchorParallel(TValueListEditor AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ValueListEditor_AnchorHorizontalCenterTo(TValueListEditor AObj, TControl ASibling);

void
ValueListEditor_AnchorVerticalCenterTo(TValueListEditor AObj, TControl ASibling);

void
ValueListEditor_AnchorSame(TValueListEditor AObj, TAnchorKind ASide, TControl ASibling);

void
ValueListEditor_AnchorAsAlign(TValueListEditor AObj, TAlign ATheAlign, int32_t ASpace);

void
ValueListEditor_AnchorClient(TValueListEditor AObj, int32_t ASpace);

int32_t
ValueListEditor_ScaleDesignToForm(TValueListEditor AObj, int32_t ASize);

int32_t
ValueListEditor_ScaleFormToDesign(TValueListEditor AObj, int32_t ASize);

int32_t
ValueListEditor_Scale96ToForm(TValueListEditor AObj, int32_t ASize);

int32_t
ValueListEditor_ScaleFormTo96(TValueListEditor AObj, int32_t ASize);

int32_t
ValueListEditor_Scale96ToFont(TValueListEditor AObj, int32_t ASize);

int32_t
ValueListEditor_ScaleFontTo96(TValueListEditor AObj, int32_t ASize);

int32_t
ValueListEditor_ScaleScreenToFont(TValueListEditor AObj, int32_t ASize);

int32_t
ValueListEditor_ScaleFontToScreen(TValueListEditor AObj, int32_t ASize);

int32_t
ValueListEditor_Scale96ToScreen(TValueListEditor AObj, int32_t ASize);

int32_t
ValueListEditor_ScaleScreenTo96(TValueListEditor AObj, int32_t ASize);

void
ValueListEditor_AutoAdjustLayout(TValueListEditor AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ValueListEditor_FixDesignFontsPPI(TValueListEditor AObj, int32_t ADesignTimePPI);

void
ValueListEditor_ScaleFontsPPI(TValueListEditor AObj, int32_t AToPPI, double AProportion);

int32_t
ValueListEditor_GetColCount(TValueListEditor AObj);

void
ValueListEditor_SetColCount(TValueListEditor AObj, int32_t AValue);

int32_t
ValueListEditor_GetRowCount(TValueListEditor AObj);

int32_t
ValueListEditor_GetVisibleColCount(TValueListEditor AObj);

int32_t
ValueListEditor_GetVisibleRowCount(TValueListEditor AObj);

TAlign
ValueListEditor_GetAlign(TValueListEditor AObj);

void
ValueListEditor_SetAlign(TValueListEditor AObj, TAlign AValue);

TAnchors
ValueListEditor_GetAnchors(TValueListEditor AObj);

void
ValueListEditor_SetAnchors(TValueListEditor AObj, TAnchors AValue);

TBiDiMode
ValueListEditor_GetBiDiMode(TValueListEditor AObj);

void
ValueListEditor_SetBiDiMode(TValueListEditor AObj, TBiDiMode AValue);

TBorderStyle
ValueListEditor_GetBorderStyle(TValueListEditor AObj);

void
ValueListEditor_SetBorderStyle(TValueListEditor AObj, TBorderStyle AValue);

TColor
ValueListEditor_GetColor(TValueListEditor AObj);

void
ValueListEditor_SetColor(TValueListEditor AObj, TColor AValue);

TSizeConstraints
ValueListEditor_GetConstraints(TValueListEditor AObj);

void
ValueListEditor_SetConstraints(TValueListEditor AObj, TSizeConstraints AValue);

int32_t
ValueListEditor_GetDefaultColWidth(TValueListEditor AObj);

void
ValueListEditor_SetDefaultColWidth(TValueListEditor AObj, int32_t AValue);

BOOL
ValueListEditor_GetDefaultDrawing(TValueListEditor AObj);

void
ValueListEditor_SetDefaultDrawing(TValueListEditor AObj, BOOL AValue);

int32_t
ValueListEditor_GetDefaultRowHeight(TValueListEditor AObj);

void
ValueListEditor_SetDefaultRowHeight(TValueListEditor AObj, int32_t AValue);

BOOL
ValueListEditor_GetDoubleBuffered(TValueListEditor AObj);

void
ValueListEditor_SetDoubleBuffered(TValueListEditor AObj, BOOL AValue);

TCursor
ValueListEditor_GetDragCursor(TValueListEditor AObj);

void
ValueListEditor_SetDragCursor(TValueListEditor AObj, TCursor AValue);

TDragKind
ValueListEditor_GetDragKind(TValueListEditor AObj);

void
ValueListEditor_SetDragKind(TValueListEditor AObj, TDragKind AValue);

TDragMode
ValueListEditor_GetDragMode(TValueListEditor AObj);

void
ValueListEditor_SetDragMode(TValueListEditor AObj, TDragMode AValue);

int32_t
ValueListEditor_GetDropDownRows(TValueListEditor AObj);

void
ValueListEditor_SetDropDownRows(TValueListEditor AObj, int32_t AValue);

BOOL
ValueListEditor_GetEnabled(TValueListEditor AObj);

void
ValueListEditor_SetEnabled(TValueListEditor AObj, BOOL AValue);

TColor
ValueListEditor_GetFixedColor(TValueListEditor AObj);

void
ValueListEditor_SetFixedColor(TValueListEditor AObj, TColor AValue);

int32_t
ValueListEditor_GetFixedCols(TValueListEditor AObj);

void
ValueListEditor_SetFixedCols(TValueListEditor AObj, int32_t AValue);

TFont
ValueListEditor_GetFont(TValueListEditor AObj);

void
ValueListEditor_SetFont(TValueListEditor AObj, TFont AValue);

int32_t
ValueListEditor_GetGridLineWidth(TValueListEditor AObj);

void
ValueListEditor_SetGridLineWidth(TValueListEditor AObj, int32_t AValue);

TGridOptions
ValueListEditor_GetOptions(TValueListEditor AObj);

void
ValueListEditor_SetOptions(TValueListEditor AObj, TGridOptions AValue);

BOOL
ValueListEditor_GetParentColor(TValueListEditor AObj);

void
ValueListEditor_SetParentColor(TValueListEditor AObj, BOOL AValue);

BOOL
ValueListEditor_GetParentDoubleBuffered(TValueListEditor AObj);

void
ValueListEditor_SetParentDoubleBuffered(TValueListEditor AObj, BOOL AValue);

BOOL
ValueListEditor_GetParentFont(TValueListEditor AObj);

void
ValueListEditor_SetParentFont(TValueListEditor AObj, BOOL AValue);

BOOL
ValueListEditor_GetParentShowHint(TValueListEditor AObj);

void
ValueListEditor_SetParentShowHint(TValueListEditor AObj, BOOL AValue);

TPopupMenu
ValueListEditor_GetPopupMenu(TValueListEditor AObj);

void
ValueListEditor_SetPopupMenu(TValueListEditor AObj, TPopupMenu AValue);

TScrollStyle
ValueListEditor_GetScrollBars(TValueListEditor AObj);

void
ValueListEditor_SetScrollBars(TValueListEditor AObj, TScrollStyle AValue);

BOOL
ValueListEditor_GetShowHint(TValueListEditor AObj);

void
ValueListEditor_SetShowHint(TValueListEditor AObj, BOOL AValue);

TStrings
ValueListEditor_GetStrings(TValueListEditor AObj);

void
ValueListEditor_SetStrings(TValueListEditor AObj, TStrings AValue);

TTabOrder
ValueListEditor_GetTabOrder(TValueListEditor AObj);

void
ValueListEditor_SetTabOrder(TValueListEditor AObj, TTabOrder AValue);

BOOL
ValueListEditor_GetVisible(TValueListEditor AObj);

void
ValueListEditor_SetVisible(TValueListEditor AObj, BOOL AValue);

void
ValueListEditor_SetOnClick(TValueListEditor AObj, TNotifyEvent AEventData);

void
ValueListEditor_SetOnContextPopup(TValueListEditor AObj, TContextPopupEvent AEventData);

void
ValueListEditor_SetOnDblClick(TValueListEditor AObj, TNotifyEvent AEventData);

void
ValueListEditor_SetOnDragDrop(TValueListEditor AObj, TDragDropEvent AEventData);

void
ValueListEditor_SetOnDragOver(TValueListEditor AObj, TDragOverEvent AEventData);

void
ValueListEditor_SetOnDrawCell(TValueListEditor AObj, TDrawCellEvent AEventData);

void
ValueListEditor_SetOnEndDock(TValueListEditor AObj, TEndDragEvent AEventData);

void
ValueListEditor_SetOnEndDrag(TValueListEditor AObj, TEndDragEvent AEventData);

void
ValueListEditor_SetOnEnter(TValueListEditor AObj, TNotifyEvent AEventData);

void
ValueListEditor_SetOnExit(TValueListEditor AObj, TNotifyEvent AEventData);

void
ValueListEditor_SetOnGetEditMask(TValueListEditor AObj, TGetEditEvent AEventData);

void
ValueListEditor_SetOnGetEditText(TValueListEditor AObj, TGetEditEvent AEventData);

void
ValueListEditor_SetOnKeyDown(TValueListEditor AObj, TKeyEvent AEventData);

void
ValueListEditor_SetOnKeyPress(TValueListEditor AObj, TKeyPressEvent AEventData);

void
ValueListEditor_SetOnKeyUp(TValueListEditor AObj, TKeyEvent AEventData);

void
ValueListEditor_SetOnMouseDown(TValueListEditor AObj, TMouseEvent AEventData);

void
ValueListEditor_SetOnMouseEnter(TValueListEditor AObj, TNotifyEvent AEventData);

void
ValueListEditor_SetOnMouseLeave(TValueListEditor AObj, TNotifyEvent AEventData);

void
ValueListEditor_SetOnMouseMove(TValueListEditor AObj, TMouseMoveEvent AEventData);

void
ValueListEditor_SetOnMouseUp(TValueListEditor AObj, TMouseEvent AEventData);

void
ValueListEditor_SetOnMouseWheelDown(TValueListEditor AObj, TMouseWheelUpDownEvent AEventData);

void
ValueListEditor_SetOnMouseWheelUp(TValueListEditor AObj, TMouseWheelUpDownEvent AEventData);

void
ValueListEditor_SetOnSelectCell(TValueListEditor AObj, TSelectCellEvent AEventData);

void
ValueListEditor_SetOnSetEditText(TValueListEditor AObj, TSetEditEvent AEventData);

void
ValueListEditor_SetOnStartDock(TValueListEditor AObj, TStartDockEvent AEventData);

void
ValueListEditor_SetOnTopLeftChanged(TValueListEditor AObj, TNotifyEvent AEventData);

TCanvas
ValueListEditor_GetCanvas(TValueListEditor AObj);

int32_t
ValueListEditor_GetCol(TValueListEditor AObj);

void
ValueListEditor_SetCol(TValueListEditor AObj, int32_t AValue);

BOOL
ValueListEditor_GetEditorMode(TValueListEditor AObj);

void
ValueListEditor_SetEditorMode(TValueListEditor AObj, BOOL AValue);

int32_t
ValueListEditor_GetGridHeight(TValueListEditor AObj);

int32_t
ValueListEditor_GetGridWidth(TValueListEditor AObj);

int32_t
ValueListEditor_GetLeftCol(TValueListEditor AObj);

void
ValueListEditor_SetLeftCol(TValueListEditor AObj, int32_t AValue);

TGridRect
ValueListEditor_GetSelection(TValueListEditor AObj);

void
ValueListEditor_SetSelection(TValueListEditor AObj, TGridRect AValue);

int32_t
ValueListEditor_GetRow(TValueListEditor AObj);

void
ValueListEditor_SetRow(TValueListEditor AObj, int32_t AValue);

int32_t
ValueListEditor_GetTopRow(TValueListEditor AObj);

void
ValueListEditor_SetTopRow(TValueListEditor AObj, int32_t AValue);

BOOL
ValueListEditor_GetTabStop(TValueListEditor AObj);

void
ValueListEditor_SetTabStop(TValueListEditor AObj, BOOL AValue);

int32_t
ValueListEditor_GetDockClientCount(TValueListEditor AObj);

BOOL
ValueListEditor_GetDockSite(TValueListEditor AObj);

void
ValueListEditor_SetDockSite(TValueListEditor AObj, BOOL AValue);

BOOL
ValueListEditor_GetMouseInClient(TValueListEditor AObj);

int32_t
ValueListEditor_GetVisibleDockClientCount(TValueListEditor AObj);

TBrush
ValueListEditor_GetBrush(TValueListEditor AObj);

int32_t
ValueListEditor_GetControlCount(TValueListEditor AObj);

HWND
ValueListEditor_GetHandle(TValueListEditor AObj);

HWND
ValueListEditor_GetParentWindow(TValueListEditor AObj);

void
ValueListEditor_SetParentWindow(TValueListEditor AObj, HWND AValue);

BOOL
ValueListEditor_GetShowing(TValueListEditor AObj);

BOOL
ValueListEditor_GetUseDockManager(TValueListEditor AObj);

void
ValueListEditor_SetUseDockManager(TValueListEditor AObj, BOOL AValue);

TAction
ValueListEditor_GetAction(TValueListEditor AObj);

void
ValueListEditor_SetAction(TValueListEditor AObj, TAction AValue);

TRect
ValueListEditor_GetBoundsRect(TValueListEditor AObj);

void
ValueListEditor_SetBoundsRect(TValueListEditor AObj, TRect AValue);

int32_t
ValueListEditor_GetClientHeight(TValueListEditor AObj);

void
ValueListEditor_SetClientHeight(TValueListEditor AObj, int32_t AValue);

TPoint
ValueListEditor_GetClientOrigin(TValueListEditor AObj);

TRect
ValueListEditor_GetClientRect(TValueListEditor AObj);

int32_t
ValueListEditor_GetClientWidth(TValueListEditor AObj);

void
ValueListEditor_SetClientWidth(TValueListEditor AObj, int32_t AValue);

TControlState
ValueListEditor_GetControlState(TValueListEditor AObj);

void
ValueListEditor_SetControlState(TValueListEditor AObj, TControlState AValue);

TControlStyle
ValueListEditor_GetControlStyle(TValueListEditor AObj);

void
ValueListEditor_SetControlStyle(TValueListEditor AObj, TControlStyle AValue);

BOOL
ValueListEditor_GetFloating(TValueListEditor AObj);

TWinControl
ValueListEditor_GetParent(TValueListEditor AObj);

void
ValueListEditor_SetParent(TValueListEditor AObj, TWinControl AValue);

int32_t
ValueListEditor_GetLeft(TValueListEditor AObj);

void
ValueListEditor_SetLeft(TValueListEditor AObj, int32_t AValue);

int32_t
ValueListEditor_GetTop(TValueListEditor AObj);

void
ValueListEditor_SetTop(TValueListEditor AObj, int32_t AValue);

int32_t
ValueListEditor_GetWidth(TValueListEditor AObj);

void
ValueListEditor_SetWidth(TValueListEditor AObj, int32_t AValue);

int32_t
ValueListEditor_GetHeight(TValueListEditor AObj);

void
ValueListEditor_SetHeight(TValueListEditor AObj, int32_t AValue);

TCursor
ValueListEditor_GetCursor(TValueListEditor AObj);

void
ValueListEditor_SetCursor(TValueListEditor AObj, TCursor AValue);

char*
ValueListEditor_GetHint(TValueListEditor AObj);

void
ValueListEditor_SetHint(TValueListEditor AObj, CChar char* AValue);

int32_t
ValueListEditor_GetComponentCount(TValueListEditor AObj);

int32_t
ValueListEditor_GetComponentIndex(TValueListEditor AObj);

void
ValueListEditor_SetComponentIndex(TValueListEditor AObj, int32_t AValue);

TComponent
ValueListEditor_GetOwner(TValueListEditor AObj);

char*
ValueListEditor_GetName(TValueListEditor AObj);

void
ValueListEditor_SetName(TValueListEditor AObj, CChar char* AValue);

intptr_t
ValueListEditor_GetTag(TValueListEditor AObj);

void
ValueListEditor_SetTag(TValueListEditor AObj, intptr_t AValue);

TAnchorSide
ValueListEditor_GetAnchorSideLeft(TValueListEditor AObj);

void
ValueListEditor_SetAnchorSideLeft(TValueListEditor AObj, TAnchorSide AValue);

TAnchorSide
ValueListEditor_GetAnchorSideTop(TValueListEditor AObj);

void
ValueListEditor_SetAnchorSideTop(TValueListEditor AObj, TAnchorSide AValue);

TAnchorSide
ValueListEditor_GetAnchorSideRight(TValueListEditor AObj);

void
ValueListEditor_SetAnchorSideRight(TValueListEditor AObj, TAnchorSide AValue);

TAnchorSide
ValueListEditor_GetAnchorSideBottom(TValueListEditor AObj);

void
ValueListEditor_SetAnchorSideBottom(TValueListEditor AObj, TAnchorSide AValue);

TControlChildSizing
ValueListEditor_GetChildSizing(TValueListEditor AObj);

void
ValueListEditor_SetChildSizing(TValueListEditor AObj, TControlChildSizing AValue);

TControlBorderSpacing
ValueListEditor_GetBorderSpacing(TValueListEditor AObj);

void
ValueListEditor_SetBorderSpacing(TValueListEditor AObj, TControlBorderSpacing AValue);

char*
ValueListEditor_GetCells(TValueListEditor AObj, int32_t ACol, int32_t ARow);

void
ValueListEditor_SetCells(TValueListEditor AObj, int32_t ACol, int32_t ARow, CChar char* AValue);

char*
ValueListEditor_GetValues(TValueListEditor AObj, CChar char* Key);

void
ValueListEditor_SetValues(TValueListEditor AObj, CChar char* Key, CChar char* AValue);

int32_t
ValueListEditor_GetColWidths(TValueListEditor AObj, int32_t Index);

void
ValueListEditor_SetColWidths(TValueListEditor AObj, int32_t Index, int32_t AValue);

int32_t
ValueListEditor_GetRowHeights(TValueListEditor AObj, int32_t Index);

void
ValueListEditor_SetRowHeights(TValueListEditor AObj, int32_t Index, int32_t AValue);

TControl
ValueListEditor_GetDockClients(TValueListEditor AObj, int32_t Index);

TControl
ValueListEditor_GetControls(TValueListEditor AObj, int32_t Index);

TComponent
ValueListEditor_GetComponents(TValueListEditor AObj, int32_t AIndex);

TAnchorSide
ValueListEditor_GetAnchorSide(TValueListEditor AObj, TAnchorKind AKind);

TClass
ValueListEditor_StaticClassType();

// -------------------THeaderControl-------------------

THeaderControl
HeaderControl_Create(TComponent AOwner);

void
HeaderControl_Free(THeaderControl AObj);

void
HeaderControl_FlipChildren(THeaderControl AObj, BOOL AllLevels);

BOOL
HeaderControl_CanFocus(THeaderControl AObj);

BOOL
HeaderControl_ContainsControl(THeaderControl AObj, TControl Control);

TControl
HeaderControl_ControlAtPos(THeaderControl AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
HeaderControl_DisableAlign(THeaderControl AObj);

void
HeaderControl_EnableAlign(THeaderControl AObj);

TControl
HeaderControl_FindChildControl(THeaderControl AObj, CChar char* ControlName);

BOOL
HeaderControl_Focused(THeaderControl AObj);

BOOL
HeaderControl_HandleAllocated(THeaderControl AObj);

void
HeaderControl_InsertControl(THeaderControl AObj, TControl AControl);

void
HeaderControl_Invalidate(THeaderControl AObj);

void
HeaderControl_PaintTo(THeaderControl AObj, HDC DC, int32_t X, int32_t Y);

void
HeaderControl_RemoveControl(THeaderControl AObj, TControl AControl);

void
HeaderControl_Realign(THeaderControl AObj);

void
HeaderControl_Repaint(THeaderControl AObj);

void
HeaderControl_ScaleBy(THeaderControl AObj, int32_t M, int32_t D);

void
HeaderControl_ScrollBy(THeaderControl AObj, int32_t DeltaX, int32_t DeltaY);

void
HeaderControl_SetBounds(THeaderControl AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
HeaderControl_SetFocus(THeaderControl AObj);

void
HeaderControl_Update(THeaderControl AObj);

void
HeaderControl_BringToFront(THeaderControl AObj);

TPoint
HeaderControl_ClientToScreen(THeaderControl AObj, TPoint Point);

TPoint
HeaderControl_ClientToParent(THeaderControl AObj, TPoint Point, TWinControl AParent);

BOOL
HeaderControl_Dragging(THeaderControl AObj);

BOOL
HeaderControl_HasParent(THeaderControl AObj);

void
HeaderControl_Hide(THeaderControl AObj);

intptr_t
HeaderControl_Perform(THeaderControl AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
HeaderControl_Refresh(THeaderControl AObj);

TPoint
HeaderControl_ScreenToClient(THeaderControl AObj, TPoint Point);

TPoint
HeaderControl_ParentToClient(THeaderControl AObj, TPoint Point, TWinControl AParent);

void
HeaderControl_SendToBack(THeaderControl AObj);

void
HeaderControl_Show(THeaderControl AObj);

int32_t
HeaderControl_GetTextBuf(THeaderControl AObj, CChar char* Buffer, int32_t BufSize);

int32_t
HeaderControl_GetTextLen(THeaderControl AObj);

void
HeaderControl_SetTextBuf(THeaderControl AObj, CChar char* Buffer);

TComponent
HeaderControl_FindComponent(THeaderControl AObj, CChar char* AName);

char*
HeaderControl_GetNamePath(THeaderControl AObj);

void
HeaderControl_Assign(THeaderControl AObj, TObject Source);

TClass
HeaderControl_ClassType(THeaderControl AObj);

char*
HeaderControl_ClassName(THeaderControl AObj);

int32_t
HeaderControl_InstanceSize(THeaderControl AObj);

BOOL
HeaderControl_InheritsFrom(THeaderControl AObj, TClass AClass);

BOOL
HeaderControl_Equals(THeaderControl AObj, TObject Obj);

int32_t
HeaderControl_GetHashCode(THeaderControl AObj);

char*
HeaderControl_ToString(THeaderControl AObj);

void
HeaderControl_AnchorToNeighbour(THeaderControl AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
HeaderControl_AnchorParallel(THeaderControl AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
HeaderControl_AnchorHorizontalCenterTo(THeaderControl AObj, TControl ASibling);

void
HeaderControl_AnchorVerticalCenterTo(THeaderControl AObj, TControl ASibling);

void
HeaderControl_AnchorSame(THeaderControl AObj, TAnchorKind ASide, TControl ASibling);

void
HeaderControl_AnchorAsAlign(THeaderControl AObj, TAlign ATheAlign, int32_t ASpace);

void
HeaderControl_AnchorClient(THeaderControl AObj, int32_t ASpace);

int32_t
HeaderControl_ScaleDesignToForm(THeaderControl AObj, int32_t ASize);

int32_t
HeaderControl_ScaleFormToDesign(THeaderControl AObj, int32_t ASize);

int32_t
HeaderControl_Scale96ToForm(THeaderControl AObj, int32_t ASize);

int32_t
HeaderControl_ScaleFormTo96(THeaderControl AObj, int32_t ASize);

int32_t
HeaderControl_Scale96ToFont(THeaderControl AObj, int32_t ASize);

int32_t
HeaderControl_ScaleFontTo96(THeaderControl AObj, int32_t ASize);

int32_t
HeaderControl_ScaleScreenToFont(THeaderControl AObj, int32_t ASize);

int32_t
HeaderControl_ScaleFontToScreen(THeaderControl AObj, int32_t ASize);

int32_t
HeaderControl_Scale96ToScreen(THeaderControl AObj, int32_t ASize);

int32_t
HeaderControl_ScaleScreenTo96(THeaderControl AObj, int32_t ASize);

void
HeaderControl_AutoAdjustLayout(THeaderControl AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
HeaderControl_FixDesignFontsPPI(THeaderControl AObj, int32_t ADesignTimePPI);

void
HeaderControl_ScaleFontsPPI(THeaderControl AObj, int32_t AToPPI, double AProportion);

TAlign
HeaderControl_GetAlign(THeaderControl AObj);

void
HeaderControl_SetAlign(THeaderControl AObj, TAlign AValue);

TAnchors
HeaderControl_GetAnchors(THeaderControl AObj);

void
HeaderControl_SetAnchors(THeaderControl AObj, TAnchors AValue);

int32_t
HeaderControl_GetBorderWidth(THeaderControl AObj);

void
HeaderControl_SetBorderWidth(THeaderControl AObj, int32_t AValue);

BOOL
HeaderControl_GetDoubleBuffered(THeaderControl AObj);

void
HeaderControl_SetDoubleBuffered(THeaderControl AObj, BOOL AValue);

TCursor
HeaderControl_GetDragCursor(THeaderControl AObj);

void
HeaderControl_SetDragCursor(THeaderControl AObj, TCursor AValue);

TDragKind
HeaderControl_GetDragKind(THeaderControl AObj);

void
HeaderControl_SetDragKind(THeaderControl AObj, TDragKind AValue);

TDragMode
HeaderControl_GetDragMode(THeaderControl AObj);

void
HeaderControl_SetDragMode(THeaderControl AObj, TDragMode AValue);

BOOL
HeaderControl_GetEnabled(THeaderControl AObj);

void
HeaderControl_SetEnabled(THeaderControl AObj, BOOL AValue);

TFont
HeaderControl_GetFont(THeaderControl AObj);

void
HeaderControl_SetFont(THeaderControl AObj, TFont AValue);

TImageList
HeaderControl_GetImages(THeaderControl AObj);

void
HeaderControl_SetImages(THeaderControl AObj, TImageList AValue);

TSizeConstraints
HeaderControl_GetConstraints(THeaderControl AObj);

void
HeaderControl_SetConstraints(THeaderControl AObj, TSizeConstraints AValue);

THeaderSections
HeaderControl_GetSections(THeaderControl AObj);

void
HeaderControl_SetSections(THeaderControl AObj, THeaderSections AValue);

BOOL
HeaderControl_GetShowHint(THeaderControl AObj);

void
HeaderControl_SetShowHint(THeaderControl AObj, BOOL AValue);

BOOL
HeaderControl_GetParentDoubleBuffered(THeaderControl AObj);

void
HeaderControl_SetParentDoubleBuffered(THeaderControl AObj, BOOL AValue);

BOOL
HeaderControl_GetParentFont(THeaderControl AObj);

void
HeaderControl_SetParentFont(THeaderControl AObj, BOOL AValue);

BOOL
HeaderControl_GetParentShowHint(THeaderControl AObj);

void
HeaderControl_SetParentShowHint(THeaderControl AObj, BOOL AValue);

TPopupMenu
HeaderControl_GetPopupMenu(THeaderControl AObj);

void
HeaderControl_SetPopupMenu(THeaderControl AObj, TPopupMenu AValue);

BOOL
HeaderControl_GetVisible(THeaderControl AObj);

void
HeaderControl_SetVisible(THeaderControl AObj, BOOL AValue);

void
HeaderControl_SetOnContextPopup(THeaderControl AObj, TContextPopupEvent AEventData);

void
HeaderControl_SetOnDragDrop(THeaderControl AObj, TDragDropEvent AEventData);

void
HeaderControl_SetOnDragOver(THeaderControl AObj, TDragOverEvent AEventData);

void
HeaderControl_SetOnEndDock(THeaderControl AObj, TEndDragEvent AEventData);

void
HeaderControl_SetOnEndDrag(THeaderControl AObj, TEndDragEvent AEventData);

void
HeaderControl_SetOnMouseDown(THeaderControl AObj, TMouseEvent AEventData);

void
HeaderControl_SetOnMouseEnter(THeaderControl AObj, TNotifyEvent AEventData);

void
HeaderControl_SetOnMouseLeave(THeaderControl AObj, TNotifyEvent AEventData);

void
HeaderControl_SetOnMouseMove(THeaderControl AObj, TMouseMoveEvent AEventData);

void
HeaderControl_SetOnMouseUp(THeaderControl AObj, TMouseEvent AEventData);

void
HeaderControl_SetOnResize(THeaderControl AObj, TNotifyEvent AEventData);

void
HeaderControl_SetOnSectionClick(THeaderControl AObj, TSectionNotifyEvent AEventData);

void
HeaderControl_SetOnSectionResize(THeaderControl AObj, TSectionNotifyEvent AEventData);

void
HeaderControl_SetOnSectionTrack(THeaderControl AObj, TSectionTrackEvent AEventData);

void
HeaderControl_SetOnSectionDrag(THeaderControl AObj, TSectionDragEvent AEventData);

void
HeaderControl_SetOnSectionEndDrag(THeaderControl AObj, TNotifyEvent AEventData);

TCanvas
HeaderControl_GetCanvas(THeaderControl AObj);

int32_t
HeaderControl_GetDockClientCount(THeaderControl AObj);

BOOL
HeaderControl_GetDockSite(THeaderControl AObj);

void
HeaderControl_SetDockSite(THeaderControl AObj, BOOL AValue);

BOOL
HeaderControl_GetMouseInClient(THeaderControl AObj);

int32_t
HeaderControl_GetVisibleDockClientCount(THeaderControl AObj);

TBrush
HeaderControl_GetBrush(THeaderControl AObj);

int32_t
HeaderControl_GetControlCount(THeaderControl AObj);

HWND
HeaderControl_GetHandle(THeaderControl AObj);

HWND
HeaderControl_GetParentWindow(THeaderControl AObj);

void
HeaderControl_SetParentWindow(THeaderControl AObj, HWND AValue);

BOOL
HeaderControl_GetShowing(THeaderControl AObj);

TTabOrder
HeaderControl_GetTabOrder(THeaderControl AObj);

void
HeaderControl_SetTabOrder(THeaderControl AObj, TTabOrder AValue);

BOOL
HeaderControl_GetTabStop(THeaderControl AObj);

void
HeaderControl_SetTabStop(THeaderControl AObj, BOOL AValue);

BOOL
HeaderControl_GetUseDockManager(THeaderControl AObj);

void
HeaderControl_SetUseDockManager(THeaderControl AObj, BOOL AValue);

TAction
HeaderControl_GetAction(THeaderControl AObj);

void
HeaderControl_SetAction(THeaderControl AObj, TAction AValue);

TRect
HeaderControl_GetBoundsRect(THeaderControl AObj);

void
HeaderControl_SetBoundsRect(THeaderControl AObj, TRect AValue);

int32_t
HeaderControl_GetClientHeight(THeaderControl AObj);

void
HeaderControl_SetClientHeight(THeaderControl AObj, int32_t AValue);

TPoint
HeaderControl_GetClientOrigin(THeaderControl AObj);

TRect
HeaderControl_GetClientRect(THeaderControl AObj);

int32_t
HeaderControl_GetClientWidth(THeaderControl AObj);

void
HeaderControl_SetClientWidth(THeaderControl AObj, int32_t AValue);

TControlState
HeaderControl_GetControlState(THeaderControl AObj);

void
HeaderControl_SetControlState(THeaderControl AObj, TControlState AValue);

TControlStyle
HeaderControl_GetControlStyle(THeaderControl AObj);

void
HeaderControl_SetControlStyle(THeaderControl AObj, TControlStyle AValue);

BOOL
HeaderControl_GetFloating(THeaderControl AObj);

TWinControl
HeaderControl_GetParent(THeaderControl AObj);

void
HeaderControl_SetParent(THeaderControl AObj, TWinControl AValue);

int32_t
HeaderControl_GetLeft(THeaderControl AObj);

void
HeaderControl_SetLeft(THeaderControl AObj, int32_t AValue);

int32_t
HeaderControl_GetTop(THeaderControl AObj);

void
HeaderControl_SetTop(THeaderControl AObj, int32_t AValue);

int32_t
HeaderControl_GetWidth(THeaderControl AObj);

void
HeaderControl_SetWidth(THeaderControl AObj, int32_t AValue);

int32_t
HeaderControl_GetHeight(THeaderControl AObj);

void
HeaderControl_SetHeight(THeaderControl AObj, int32_t AValue);

TCursor
HeaderControl_GetCursor(THeaderControl AObj);

void
HeaderControl_SetCursor(THeaderControl AObj, TCursor AValue);

char*
HeaderControl_GetHint(THeaderControl AObj);

void
HeaderControl_SetHint(THeaderControl AObj, CChar char* AValue);

int32_t
HeaderControl_GetComponentCount(THeaderControl AObj);

int32_t
HeaderControl_GetComponentIndex(THeaderControl AObj);

void
HeaderControl_SetComponentIndex(THeaderControl AObj, int32_t AValue);

TComponent
HeaderControl_GetOwner(THeaderControl AObj);

char*
HeaderControl_GetName(THeaderControl AObj);

void
HeaderControl_SetName(THeaderControl AObj, CChar char* AValue);

intptr_t
HeaderControl_GetTag(THeaderControl AObj);

void
HeaderControl_SetTag(THeaderControl AObj, intptr_t AValue);

TAnchorSide
HeaderControl_GetAnchorSideLeft(THeaderControl AObj);

void
HeaderControl_SetAnchorSideLeft(THeaderControl AObj, TAnchorSide AValue);

TAnchorSide
HeaderControl_GetAnchorSideTop(THeaderControl AObj);

void
HeaderControl_SetAnchorSideTop(THeaderControl AObj, TAnchorSide AValue);

TAnchorSide
HeaderControl_GetAnchorSideRight(THeaderControl AObj);

void
HeaderControl_SetAnchorSideRight(THeaderControl AObj, TAnchorSide AValue);

TAnchorSide
HeaderControl_GetAnchorSideBottom(THeaderControl AObj);

void
HeaderControl_SetAnchorSideBottom(THeaderControl AObj, TAnchorSide AValue);

TControlChildSizing
HeaderControl_GetChildSizing(THeaderControl AObj);

void
HeaderControl_SetChildSizing(THeaderControl AObj, TControlChildSizing AValue);

TControlBorderSpacing
HeaderControl_GetBorderSpacing(THeaderControl AObj);

void
HeaderControl_SetBorderSpacing(THeaderControl AObj, TControlBorderSpacing AValue);

TControl
HeaderControl_GetDockClients(THeaderControl AObj, int32_t Index);

TControl
HeaderControl_GetControls(THeaderControl AObj, int32_t Index);

TComponent
HeaderControl_GetComponents(THeaderControl AObj, int32_t AIndex);

TAnchorSide
HeaderControl_GetAnchorSide(THeaderControl AObj, TAnchorKind AKind);

TClass
HeaderControl_StaticClassType();

// -------------------THeaderSection-------------------

THeaderSection
HeaderSection_Create(TCollection AOwner);

void
HeaderSection_Free(THeaderSection AObj);

void
HeaderSection_Assign(THeaderSection AObj, TObject Source);

char*
HeaderSection_GetNamePath(THeaderSection AObj);

TClass
HeaderSection_ClassType(THeaderSection AObj);

char*
HeaderSection_ClassName(THeaderSection AObj);

int32_t
HeaderSection_InstanceSize(THeaderSection AObj);

BOOL
HeaderSection_InheritsFrom(THeaderSection AObj, TClass AClass);

BOOL
HeaderSection_Equals(THeaderSection AObj, TObject Obj);

int32_t
HeaderSection_GetHashCode(THeaderSection AObj);

char*
HeaderSection_ToString(THeaderSection AObj);

int32_t
HeaderSection_GetLeft(THeaderSection AObj);

int32_t
HeaderSection_GetRight(THeaderSection AObj);

TAlignment
HeaderSection_GetAlignment(THeaderSection AObj);

void
HeaderSection_SetAlignment(THeaderSection AObj, TAlignment AValue);

int32_t
HeaderSection_GetImageIndex(THeaderSection AObj);

void
HeaderSection_SetImageIndex(THeaderSection AObj, int32_t AValue);

int32_t
HeaderSection_GetMaxWidth(THeaderSection AObj);

void
HeaderSection_SetMaxWidth(THeaderSection AObj, int32_t AValue);

int32_t
HeaderSection_GetMinWidth(THeaderSection AObj);

void
HeaderSection_SetMinWidth(THeaderSection AObj, int32_t AValue);

char*
HeaderSection_GetText(THeaderSection AObj);

void
HeaderSection_SetText(THeaderSection AObj, CChar char* AValue);

int32_t
HeaderSection_GetWidth(THeaderSection AObj);

void
HeaderSection_SetWidth(THeaderSection AObj, int32_t AValue);

TCollection
HeaderSection_GetCollection(THeaderSection AObj);

void
HeaderSection_SetCollection(THeaderSection AObj, TCollection AValue);

int32_t
HeaderSection_GetIndex(THeaderSection AObj);

void
HeaderSection_SetIndex(THeaderSection AObj, int32_t AValue);

char*
HeaderSection_GetDisplayName(THeaderSection AObj);

void
HeaderSection_SetDisplayName(THeaderSection AObj, CChar char* AValue);

TClass
HeaderSection_StaticClassType();

// -------------------THeaderSections-------------------

THeaderSections
HeaderSections_Create(THeaderControl AOwner);

void
HeaderSections_Free(THeaderSections AObj);

THeaderSection
HeaderSections_Add(THeaderSections AObj);

THeaderSection
HeaderSections_AddItem(THeaderSections AObj, THeaderSection Item, int32_t Index);

THeaderSection
HeaderSections_Insert(THeaderSections AObj, int32_t Index);

TObject
HeaderSections_Owner(THeaderSections AObj);

void
HeaderSections_Assign(THeaderSections AObj, TObject Source);

void
HeaderSections_BeginUpdate(THeaderSections AObj);

void
HeaderSections_Clear(THeaderSections AObj);

void
HeaderSections_Delete(THeaderSections AObj, int32_t Index);

void
HeaderSections_EndUpdate(THeaderSections AObj);

TCollectionItem
HeaderSections_FindItemID(THeaderSections AObj, int32_t ID);

char*
HeaderSections_GetNamePath(THeaderSections AObj);

TClass
HeaderSections_ClassType(THeaderSections AObj);

char*
HeaderSections_ClassName(THeaderSections AObj);

int32_t
HeaderSections_InstanceSize(THeaderSections AObj);

BOOL
HeaderSections_InheritsFrom(THeaderSections AObj, TClass AClass);

BOOL
HeaderSections_Equals(THeaderSections AObj, TObject Obj);

int32_t
HeaderSections_GetHashCode(THeaderSections AObj);

char*
HeaderSections_ToString(THeaderSections AObj);

int32_t
HeaderSections_GetCount(THeaderSections AObj);

THeaderSection
HeaderSections_GetItems(THeaderSections AObj, int32_t Index);

void
HeaderSections_SetItems(THeaderSections AObj, int32_t Index, THeaderSection AValue);

TClass
HeaderSections_StaticClassType();

// -------------------TLabeledEdit-------------------

TLabeledEdit
LabeledEdit_Create(TComponent AOwner);

void
LabeledEdit_Free(TLabeledEdit AObj);

void
LabeledEdit_SetBounds(TLabeledEdit AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
LabeledEdit_Clear(TLabeledEdit AObj);

void
LabeledEdit_ClearSelection(TLabeledEdit AObj);

void
LabeledEdit_CopyToClipboard(TLabeledEdit AObj);

void
LabeledEdit_CutToClipboard(TLabeledEdit AObj);

void
LabeledEdit_PasteFromClipboard(TLabeledEdit AObj);

void
LabeledEdit_Undo(TLabeledEdit AObj);

void
LabeledEdit_SelectAll(TLabeledEdit AObj);

BOOL
LabeledEdit_CanFocus(TLabeledEdit AObj);

BOOL
LabeledEdit_ContainsControl(TLabeledEdit AObj, TControl Control);

TControl
LabeledEdit_ControlAtPos(TLabeledEdit AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
LabeledEdit_DisableAlign(TLabeledEdit AObj);

void
LabeledEdit_EnableAlign(TLabeledEdit AObj);

TControl
LabeledEdit_FindChildControl(TLabeledEdit AObj, CChar char* ControlName);

void
LabeledEdit_FlipChildren(TLabeledEdit AObj, BOOL AllLevels);

BOOL
LabeledEdit_Focused(TLabeledEdit AObj);

BOOL
LabeledEdit_HandleAllocated(TLabeledEdit AObj);

void
LabeledEdit_InsertControl(TLabeledEdit AObj, TControl AControl);

void
LabeledEdit_Invalidate(TLabeledEdit AObj);

void
LabeledEdit_PaintTo(TLabeledEdit AObj, HDC DC, int32_t X, int32_t Y);

void
LabeledEdit_RemoveControl(TLabeledEdit AObj, TControl AControl);

void
LabeledEdit_Realign(TLabeledEdit AObj);

void
LabeledEdit_Repaint(TLabeledEdit AObj);

void
LabeledEdit_ScaleBy(TLabeledEdit AObj, int32_t M, int32_t D);

void
LabeledEdit_ScrollBy(TLabeledEdit AObj, int32_t DeltaX, int32_t DeltaY);

void
LabeledEdit_SetFocus(TLabeledEdit AObj);

void
LabeledEdit_Update(TLabeledEdit AObj);

void
LabeledEdit_BringToFront(TLabeledEdit AObj);

TPoint
LabeledEdit_ClientToScreen(TLabeledEdit AObj, TPoint Point);

TPoint
LabeledEdit_ClientToParent(TLabeledEdit AObj, TPoint Point, TWinControl AParent);

BOOL
LabeledEdit_Dragging(TLabeledEdit AObj);

BOOL
LabeledEdit_HasParent(TLabeledEdit AObj);

void
LabeledEdit_Hide(TLabeledEdit AObj);

intptr_t
LabeledEdit_Perform(TLabeledEdit AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
LabeledEdit_Refresh(TLabeledEdit AObj);

TPoint
LabeledEdit_ScreenToClient(TLabeledEdit AObj, TPoint Point);

TPoint
LabeledEdit_ParentToClient(TLabeledEdit AObj, TPoint Point, TWinControl AParent);

void
LabeledEdit_SendToBack(TLabeledEdit AObj);

void
LabeledEdit_Show(TLabeledEdit AObj);

int32_t
LabeledEdit_GetTextBuf(TLabeledEdit AObj, CChar char* Buffer, int32_t BufSize);

int32_t
LabeledEdit_GetTextLen(TLabeledEdit AObj);

void
LabeledEdit_SetTextBuf(TLabeledEdit AObj, CChar char* Buffer);

TComponent
LabeledEdit_FindComponent(TLabeledEdit AObj, CChar char* AName);

char*
LabeledEdit_GetNamePath(TLabeledEdit AObj);

void
LabeledEdit_Assign(TLabeledEdit AObj, TObject Source);

TClass
LabeledEdit_ClassType(TLabeledEdit AObj);

char*
LabeledEdit_ClassName(TLabeledEdit AObj);

int32_t
LabeledEdit_InstanceSize(TLabeledEdit AObj);

BOOL
LabeledEdit_InheritsFrom(TLabeledEdit AObj, TClass AClass);

BOOL
LabeledEdit_Equals(TLabeledEdit AObj, TObject Obj);

int32_t
LabeledEdit_GetHashCode(TLabeledEdit AObj);

char*
LabeledEdit_ToString(TLabeledEdit AObj);

void
LabeledEdit_AnchorToNeighbour(TLabeledEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
LabeledEdit_AnchorParallel(TLabeledEdit AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
LabeledEdit_AnchorHorizontalCenterTo(TLabeledEdit AObj, TControl ASibling);

void
LabeledEdit_AnchorVerticalCenterTo(TLabeledEdit AObj, TControl ASibling);

void
LabeledEdit_AnchorSame(TLabeledEdit AObj, TAnchorKind ASide, TControl ASibling);

void
LabeledEdit_AnchorAsAlign(TLabeledEdit AObj, TAlign ATheAlign, int32_t ASpace);

void
LabeledEdit_AnchorClient(TLabeledEdit AObj, int32_t ASpace);

int32_t
LabeledEdit_ScaleDesignToForm(TLabeledEdit AObj, int32_t ASize);

int32_t
LabeledEdit_ScaleFormToDesign(TLabeledEdit AObj, int32_t ASize);

int32_t
LabeledEdit_Scale96ToForm(TLabeledEdit AObj, int32_t ASize);

int32_t
LabeledEdit_ScaleFormTo96(TLabeledEdit AObj, int32_t ASize);

int32_t
LabeledEdit_Scale96ToFont(TLabeledEdit AObj, int32_t ASize);

int32_t
LabeledEdit_ScaleFontTo96(TLabeledEdit AObj, int32_t ASize);

int32_t
LabeledEdit_ScaleScreenToFont(TLabeledEdit AObj, int32_t ASize);

int32_t
LabeledEdit_ScaleFontToScreen(TLabeledEdit AObj, int32_t ASize);

int32_t
LabeledEdit_Scale96ToScreen(TLabeledEdit AObj, int32_t ASize);

int32_t
LabeledEdit_ScaleScreenTo96(TLabeledEdit AObj, int32_t ASize);

void
LabeledEdit_AutoAdjustLayout(TLabeledEdit AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
LabeledEdit_FixDesignFontsPPI(TLabeledEdit AObj, int32_t ADesignTimePPI);

void
LabeledEdit_ScaleFontsPPI(TLabeledEdit AObj, int32_t AToPPI, double AProportion);

TAlignment
LabeledEdit_GetAlignment(TLabeledEdit AObj);

void
LabeledEdit_SetAlignment(TLabeledEdit AObj, TAlignment AValue);

TAnchors
LabeledEdit_GetAnchors(TLabeledEdit AObj);

void
LabeledEdit_SetAnchors(TLabeledEdit AObj, TAnchors AValue);

BOOL
LabeledEdit_GetAutoSelect(TLabeledEdit AObj);

void
LabeledEdit_SetAutoSelect(TLabeledEdit AObj, BOOL AValue);

BOOL
LabeledEdit_GetAutoSize(TLabeledEdit AObj);

void
LabeledEdit_SetAutoSize(TLabeledEdit AObj, BOOL AValue);

TBiDiMode
LabeledEdit_GetBiDiMode(TLabeledEdit AObj);

void
LabeledEdit_SetBiDiMode(TLabeledEdit AObj, TBiDiMode AValue);

TBorderStyle
LabeledEdit_GetBorderStyle(TLabeledEdit AObj);

void
LabeledEdit_SetBorderStyle(TLabeledEdit AObj, TBorderStyle AValue);

TEditCharCase
LabeledEdit_GetCharCase(TLabeledEdit AObj);

void
LabeledEdit_SetCharCase(TLabeledEdit AObj, TEditCharCase AValue);

TColor
LabeledEdit_GetColor(TLabeledEdit AObj);

void
LabeledEdit_SetColor(TLabeledEdit AObj, TColor AValue);

TSizeConstraints
LabeledEdit_GetConstraints(TLabeledEdit AObj);

void
LabeledEdit_SetConstraints(TLabeledEdit AObj, TSizeConstraints AValue);

BOOL
LabeledEdit_GetDoubleBuffered(TLabeledEdit AObj);

void
LabeledEdit_SetDoubleBuffered(TLabeledEdit AObj, BOOL AValue);

TCursor
LabeledEdit_GetDragCursor(TLabeledEdit AObj);

void
LabeledEdit_SetDragCursor(TLabeledEdit AObj, TCursor AValue);

TDragMode
LabeledEdit_GetDragMode(TLabeledEdit AObj);

void
LabeledEdit_SetDragMode(TLabeledEdit AObj, TDragMode AValue);

TBoundLabel
LabeledEdit_GetEditLabel(TLabeledEdit AObj);

BOOL
LabeledEdit_GetEnabled(TLabeledEdit AObj);

void
LabeledEdit_SetEnabled(TLabeledEdit AObj, BOOL AValue);

TFont
LabeledEdit_GetFont(TLabeledEdit AObj);

void
LabeledEdit_SetFont(TLabeledEdit AObj, TFont AValue);

BOOL
LabeledEdit_GetHideSelection(TLabeledEdit AObj);

void
LabeledEdit_SetHideSelection(TLabeledEdit AObj, BOOL AValue);

TLabelPosition
LabeledEdit_GetLabelPosition(TLabeledEdit AObj);

void
LabeledEdit_SetLabelPosition(TLabeledEdit AObj, TLabelPosition AValue);

int32_t
LabeledEdit_GetLabelSpacing(TLabeledEdit AObj);

void
LabeledEdit_SetLabelSpacing(TLabeledEdit AObj, int32_t AValue);

int32_t
LabeledEdit_GetMaxLength(TLabeledEdit AObj);

void
LabeledEdit_SetMaxLength(TLabeledEdit AObj, int32_t AValue);

BOOL
LabeledEdit_GetNumbersOnly(TLabeledEdit AObj);

void
LabeledEdit_SetNumbersOnly(TLabeledEdit AObj, BOOL AValue);

BOOL
LabeledEdit_GetParentColor(TLabeledEdit AObj);

void
LabeledEdit_SetParentColor(TLabeledEdit AObj, BOOL AValue);

BOOL
LabeledEdit_GetParentDoubleBuffered(TLabeledEdit AObj);

void
LabeledEdit_SetParentDoubleBuffered(TLabeledEdit AObj, BOOL AValue);

BOOL
LabeledEdit_GetParentFont(TLabeledEdit AObj);

void
LabeledEdit_SetParentFont(TLabeledEdit AObj, BOOL AValue);

BOOL
LabeledEdit_GetParentShowHint(TLabeledEdit AObj);

void
LabeledEdit_SetParentShowHint(TLabeledEdit AObj, BOOL AValue);

Char
LabeledEdit_GetPasswordChar(TLabeledEdit AObj);

void
LabeledEdit_SetPasswordChar(TLabeledEdit AObj, Char AValue);

TPopupMenu
LabeledEdit_GetPopupMenu(TLabeledEdit AObj);

void
LabeledEdit_SetPopupMenu(TLabeledEdit AObj, TPopupMenu AValue);

BOOL
LabeledEdit_GetReadOnly(TLabeledEdit AObj);

void
LabeledEdit_SetReadOnly(TLabeledEdit AObj, BOOL AValue);

BOOL
LabeledEdit_GetShowHint(TLabeledEdit AObj);

void
LabeledEdit_SetShowHint(TLabeledEdit AObj, BOOL AValue);

TTabOrder
LabeledEdit_GetTabOrder(TLabeledEdit AObj);

void
LabeledEdit_SetTabOrder(TLabeledEdit AObj, TTabOrder AValue);

BOOL
LabeledEdit_GetTabStop(TLabeledEdit AObj);

void
LabeledEdit_SetTabStop(TLabeledEdit AObj, BOOL AValue);

char*
LabeledEdit_GetText(TLabeledEdit AObj);

void
LabeledEdit_SetText(TLabeledEdit AObj, CChar char* AValue);

char*
LabeledEdit_GetTextHint(TLabeledEdit AObj);

void
LabeledEdit_SetTextHint(TLabeledEdit AObj, CChar char* AValue);

BOOL
LabeledEdit_GetVisible(TLabeledEdit AObj);

void
LabeledEdit_SetVisible(TLabeledEdit AObj, BOOL AValue);

void
LabeledEdit_SetOnChange(TLabeledEdit AObj, TNotifyEvent AEventData);

void
LabeledEdit_SetOnClick(TLabeledEdit AObj, TNotifyEvent AEventData);

void
LabeledEdit_SetOnDblClick(TLabeledEdit AObj, TNotifyEvent AEventData);

void
LabeledEdit_SetOnDragDrop(TLabeledEdit AObj, TDragDropEvent AEventData);

void
LabeledEdit_SetOnDragOver(TLabeledEdit AObj, TDragOverEvent AEventData);

void
LabeledEdit_SetOnEndDrag(TLabeledEdit AObj, TEndDragEvent AEventData);

void
LabeledEdit_SetOnEnter(TLabeledEdit AObj, TNotifyEvent AEventData);

void
LabeledEdit_SetOnExit(TLabeledEdit AObj, TNotifyEvent AEventData);

void
LabeledEdit_SetOnKeyDown(TLabeledEdit AObj, TKeyEvent AEventData);

void
LabeledEdit_SetOnKeyPress(TLabeledEdit AObj, TKeyPressEvent AEventData);

void
LabeledEdit_SetOnKeyUp(TLabeledEdit AObj, TKeyEvent AEventData);

void
LabeledEdit_SetOnMouseDown(TLabeledEdit AObj, TMouseEvent AEventData);

void
LabeledEdit_SetOnMouseEnter(TLabeledEdit AObj, TNotifyEvent AEventData);

void
LabeledEdit_SetOnMouseLeave(TLabeledEdit AObj, TNotifyEvent AEventData);

void
LabeledEdit_SetOnMouseMove(TLabeledEdit AObj, TMouseMoveEvent AEventData);

void
LabeledEdit_SetOnMouseUp(TLabeledEdit AObj, TMouseEvent AEventData);

BOOL
LabeledEdit_GetCanUndo(TLabeledEdit AObj);

BOOL
LabeledEdit_GetModified(TLabeledEdit AObj);

void
LabeledEdit_SetModified(TLabeledEdit AObj, BOOL AValue);

int32_t
LabeledEdit_GetSelLength(TLabeledEdit AObj);

void
LabeledEdit_SetSelLength(TLabeledEdit AObj, int32_t AValue);

int32_t
LabeledEdit_GetSelStart(TLabeledEdit AObj);

void
LabeledEdit_SetSelStart(TLabeledEdit AObj, int32_t AValue);

char*
LabeledEdit_GetSelText(TLabeledEdit AObj);

void
LabeledEdit_SetSelText(TLabeledEdit AObj, CChar char* AValue);

int32_t
LabeledEdit_GetDockClientCount(TLabeledEdit AObj);

BOOL
LabeledEdit_GetDockSite(TLabeledEdit AObj);

void
LabeledEdit_SetDockSite(TLabeledEdit AObj, BOOL AValue);

BOOL
LabeledEdit_GetMouseInClient(TLabeledEdit AObj);

int32_t
LabeledEdit_GetVisibleDockClientCount(TLabeledEdit AObj);

TBrush
LabeledEdit_GetBrush(TLabeledEdit AObj);

int32_t
LabeledEdit_GetControlCount(TLabeledEdit AObj);

HWND
LabeledEdit_GetHandle(TLabeledEdit AObj);

HWND
LabeledEdit_GetParentWindow(TLabeledEdit AObj);

void
LabeledEdit_SetParentWindow(TLabeledEdit AObj, HWND AValue);

BOOL
LabeledEdit_GetShowing(TLabeledEdit AObj);

BOOL
LabeledEdit_GetUseDockManager(TLabeledEdit AObj);

void
LabeledEdit_SetUseDockManager(TLabeledEdit AObj, BOOL AValue);

TAction
LabeledEdit_GetAction(TLabeledEdit AObj);

void
LabeledEdit_SetAction(TLabeledEdit AObj, TAction AValue);

TAlign
LabeledEdit_GetAlign(TLabeledEdit AObj);

void
LabeledEdit_SetAlign(TLabeledEdit AObj, TAlign AValue);

TRect
LabeledEdit_GetBoundsRect(TLabeledEdit AObj);

void
LabeledEdit_SetBoundsRect(TLabeledEdit AObj, TRect AValue);

int32_t
LabeledEdit_GetClientHeight(TLabeledEdit AObj);

void
LabeledEdit_SetClientHeight(TLabeledEdit AObj, int32_t AValue);

TPoint
LabeledEdit_GetClientOrigin(TLabeledEdit AObj);

TRect
LabeledEdit_GetClientRect(TLabeledEdit AObj);

int32_t
LabeledEdit_GetClientWidth(TLabeledEdit AObj);

void
LabeledEdit_SetClientWidth(TLabeledEdit AObj, int32_t AValue);

TControlState
LabeledEdit_GetControlState(TLabeledEdit AObj);

void
LabeledEdit_SetControlState(TLabeledEdit AObj, TControlState AValue);

TControlStyle
LabeledEdit_GetControlStyle(TLabeledEdit AObj);

void
LabeledEdit_SetControlStyle(TLabeledEdit AObj, TControlStyle AValue);

BOOL
LabeledEdit_GetFloating(TLabeledEdit AObj);

TWinControl
LabeledEdit_GetParent(TLabeledEdit AObj);

void
LabeledEdit_SetParent(TLabeledEdit AObj, TWinControl AValue);

int32_t
LabeledEdit_GetLeft(TLabeledEdit AObj);

void
LabeledEdit_SetLeft(TLabeledEdit AObj, int32_t AValue);

int32_t
LabeledEdit_GetTop(TLabeledEdit AObj);

void
LabeledEdit_SetTop(TLabeledEdit AObj, int32_t AValue);

int32_t
LabeledEdit_GetWidth(TLabeledEdit AObj);

void
LabeledEdit_SetWidth(TLabeledEdit AObj, int32_t AValue);

int32_t
LabeledEdit_GetHeight(TLabeledEdit AObj);

void
LabeledEdit_SetHeight(TLabeledEdit AObj, int32_t AValue);

TCursor
LabeledEdit_GetCursor(TLabeledEdit AObj);

void
LabeledEdit_SetCursor(TLabeledEdit AObj, TCursor AValue);

char*
LabeledEdit_GetHint(TLabeledEdit AObj);

void
LabeledEdit_SetHint(TLabeledEdit AObj, CChar char* AValue);

int32_t
LabeledEdit_GetComponentCount(TLabeledEdit AObj);

int32_t
LabeledEdit_GetComponentIndex(TLabeledEdit AObj);

void
LabeledEdit_SetComponentIndex(TLabeledEdit AObj, int32_t AValue);

TComponent
LabeledEdit_GetOwner(TLabeledEdit AObj);

char*
LabeledEdit_GetName(TLabeledEdit AObj);

void
LabeledEdit_SetName(TLabeledEdit AObj, CChar char* AValue);

intptr_t
LabeledEdit_GetTag(TLabeledEdit AObj);

void
LabeledEdit_SetTag(TLabeledEdit AObj, intptr_t AValue);

TAnchorSide
LabeledEdit_GetAnchorSideLeft(TLabeledEdit AObj);

void
LabeledEdit_SetAnchorSideLeft(TLabeledEdit AObj, TAnchorSide AValue);

TAnchorSide
LabeledEdit_GetAnchorSideTop(TLabeledEdit AObj);

void
LabeledEdit_SetAnchorSideTop(TLabeledEdit AObj, TAnchorSide AValue);

TAnchorSide
LabeledEdit_GetAnchorSideRight(TLabeledEdit AObj);

void
LabeledEdit_SetAnchorSideRight(TLabeledEdit AObj, TAnchorSide AValue);

TAnchorSide
LabeledEdit_GetAnchorSideBottom(TLabeledEdit AObj);

void
LabeledEdit_SetAnchorSideBottom(TLabeledEdit AObj, TAnchorSide AValue);

TControlChildSizing
LabeledEdit_GetChildSizing(TLabeledEdit AObj);

void
LabeledEdit_SetChildSizing(TLabeledEdit AObj, TControlChildSizing AValue);

TControlBorderSpacing
LabeledEdit_GetBorderSpacing(TLabeledEdit AObj);

void
LabeledEdit_SetBorderSpacing(TLabeledEdit AObj, TControlBorderSpacing AValue);

TControl
LabeledEdit_GetDockClients(TLabeledEdit AObj, int32_t Index);

TControl
LabeledEdit_GetControls(TLabeledEdit AObj, int32_t Index);

TComponent
LabeledEdit_GetComponents(TLabeledEdit AObj, int32_t AIndex);

TAnchorSide
LabeledEdit_GetAnchorSide(TLabeledEdit AObj, TAnchorKind AKind);

TClass
LabeledEdit_StaticClassType();

// -------------------TBoundLabel-------------------

TBoundLabel
BoundLabel_Create(TComponent AOwner);

void
BoundLabel_Free(TBoundLabel AObj);

void
BoundLabel_BringToFront(TBoundLabel AObj);

TPoint
BoundLabel_ClientToScreen(TBoundLabel AObj, TPoint Point);

TPoint
BoundLabel_ClientToParent(TBoundLabel AObj, TPoint Point, TWinControl AParent);

BOOL
BoundLabel_Dragging(TBoundLabel AObj);

BOOL
BoundLabel_HasParent(TBoundLabel AObj);

void
BoundLabel_Hide(TBoundLabel AObj);

void
BoundLabel_Invalidate(TBoundLabel AObj);

intptr_t
BoundLabel_Perform(TBoundLabel AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
BoundLabel_Refresh(TBoundLabel AObj);

void
BoundLabel_Repaint(TBoundLabel AObj);

TPoint
BoundLabel_ScreenToClient(TBoundLabel AObj, TPoint Point);

TPoint
BoundLabel_ParentToClient(TBoundLabel AObj, TPoint Point, TWinControl AParent);

void
BoundLabel_SendToBack(TBoundLabel AObj);

void
BoundLabel_SetBounds(TBoundLabel AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
BoundLabel_Show(TBoundLabel AObj);

void
BoundLabel_Update(TBoundLabel AObj);

int32_t
BoundLabel_GetTextBuf(TBoundLabel AObj, CChar char* Buffer, int32_t BufSize);

int32_t
BoundLabel_GetTextLen(TBoundLabel AObj);

void
BoundLabel_SetTextBuf(TBoundLabel AObj, CChar char* Buffer);

TComponent
BoundLabel_FindComponent(TBoundLabel AObj, CChar char* AName);

char*
BoundLabel_GetNamePath(TBoundLabel AObj);

void
BoundLabel_Assign(TBoundLabel AObj, TObject Source);

TClass
BoundLabel_ClassType(TBoundLabel AObj);

char*
BoundLabel_ClassName(TBoundLabel AObj);

int32_t
BoundLabel_InstanceSize(TBoundLabel AObj);

BOOL
BoundLabel_InheritsFrom(TBoundLabel AObj, TClass AClass);

BOOL
BoundLabel_Equals(TBoundLabel AObj, TObject Obj);

int32_t
BoundLabel_GetHashCode(TBoundLabel AObj);

char*
BoundLabel_ToString(TBoundLabel AObj);

void
BoundLabel_AnchorToNeighbour(TBoundLabel AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
BoundLabel_AnchorParallel(TBoundLabel AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
BoundLabel_AnchorHorizontalCenterTo(TBoundLabel AObj, TControl ASibling);

void
BoundLabel_AnchorVerticalCenterTo(TBoundLabel AObj, TControl ASibling);

void
BoundLabel_AnchorSame(TBoundLabel AObj, TAnchorKind ASide, TControl ASibling);

void
BoundLabel_AnchorAsAlign(TBoundLabel AObj, TAlign ATheAlign, int32_t ASpace);

void
BoundLabel_AnchorClient(TBoundLabel AObj, int32_t ASpace);

int32_t
BoundLabel_ScaleDesignToForm(TBoundLabel AObj, int32_t ASize);

int32_t
BoundLabel_ScaleFormToDesign(TBoundLabel AObj, int32_t ASize);

int32_t
BoundLabel_Scale96ToForm(TBoundLabel AObj, int32_t ASize);

int32_t
BoundLabel_ScaleFormTo96(TBoundLabel AObj, int32_t ASize);

int32_t
BoundLabel_Scale96ToFont(TBoundLabel AObj, int32_t ASize);

int32_t
BoundLabel_ScaleFontTo96(TBoundLabel AObj, int32_t ASize);

int32_t
BoundLabel_ScaleScreenToFont(TBoundLabel AObj, int32_t ASize);

int32_t
BoundLabel_ScaleFontToScreen(TBoundLabel AObj, int32_t ASize);

int32_t
BoundLabel_Scale96ToScreen(TBoundLabel AObj, int32_t ASize);

int32_t
BoundLabel_ScaleScreenTo96(TBoundLabel AObj, int32_t ASize);

void
BoundLabel_AutoAdjustLayout(TBoundLabel AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
BoundLabel_FixDesignFontsPPI(TBoundLabel AObj, int32_t ADesignTimePPI);

void
BoundLabel_ScaleFontsPPI(TBoundLabel AObj, int32_t AToPPI, double AProportion);

TBiDiMode
BoundLabel_GetBiDiMode(TBoundLabel AObj);

void
BoundLabel_SetBiDiMode(TBoundLabel AObj, TBiDiMode AValue);

char*
BoundLabel_GetCaption(TBoundLabel AObj);

void
BoundLabel_SetCaption(TBoundLabel AObj, CChar char* AValue);

TColor
BoundLabel_GetColor(TBoundLabel AObj);

void
BoundLabel_SetColor(TBoundLabel AObj, TColor AValue);

TCursor
BoundLabel_GetDragCursor(TBoundLabel AObj);

void
BoundLabel_SetDragCursor(TBoundLabel AObj, TCursor AValue);

TDragMode
BoundLabel_GetDragMode(TBoundLabel AObj);

void
BoundLabel_SetDragMode(TBoundLabel AObj, TDragMode AValue);

TFont
BoundLabel_GetFont(TBoundLabel AObj);

void
BoundLabel_SetFont(TBoundLabel AObj, TFont AValue);

int32_t
BoundLabel_GetHeight(TBoundLabel AObj);

void
BoundLabel_SetHeight(TBoundLabel AObj, int32_t AValue);

int32_t
BoundLabel_GetLeft(TBoundLabel AObj);

BOOL
BoundLabel_GetParentColor(TBoundLabel AObj);

void
BoundLabel_SetParentColor(TBoundLabel AObj, BOOL AValue);

BOOL
BoundLabel_GetParentFont(TBoundLabel AObj);

void
BoundLabel_SetParentFont(TBoundLabel AObj, BOOL AValue);

BOOL
BoundLabel_GetParentShowHint(TBoundLabel AObj);

void
BoundLabel_SetParentShowHint(TBoundLabel AObj, BOOL AValue);

TPopupMenu
BoundLabel_GetPopupMenu(TBoundLabel AObj);

void
BoundLabel_SetPopupMenu(TBoundLabel AObj, TPopupMenu AValue);

BOOL
BoundLabel_GetShowAccelChar(TBoundLabel AObj);

void
BoundLabel_SetShowAccelChar(TBoundLabel AObj, BOOL AValue);

BOOL
BoundLabel_GetShowHint(TBoundLabel AObj);

void
BoundLabel_SetShowHint(TBoundLabel AObj, BOOL AValue);

int32_t
BoundLabel_GetTop(TBoundLabel AObj);

TTextLayout
BoundLabel_GetLayout(TBoundLabel AObj);

void
BoundLabel_SetLayout(TBoundLabel AObj, TTextLayout AValue);

BOOL
BoundLabel_GetWordWrap(TBoundLabel AObj);

void
BoundLabel_SetWordWrap(TBoundLabel AObj, BOOL AValue);

int32_t
BoundLabel_GetWidth(TBoundLabel AObj);

void
BoundLabel_SetWidth(TBoundLabel AObj, int32_t AValue);

void
BoundLabel_SetOnClick(TBoundLabel AObj, TNotifyEvent AEventData);

void
BoundLabel_SetOnDblClick(TBoundLabel AObj, TNotifyEvent AEventData);

void
BoundLabel_SetOnDragDrop(TBoundLabel AObj, TDragDropEvent AEventData);

void
BoundLabel_SetOnDragOver(TBoundLabel AObj, TDragOverEvent AEventData);

void
BoundLabel_SetOnEndDrag(TBoundLabel AObj, TEndDragEvent AEventData);

void
BoundLabel_SetOnMouseDown(TBoundLabel AObj, TMouseEvent AEventData);

void
BoundLabel_SetOnMouseMove(TBoundLabel AObj, TMouseMoveEvent AEventData);

void
BoundLabel_SetOnMouseUp(TBoundLabel AObj, TMouseEvent AEventData);

TCanvas
BoundLabel_GetCanvas(TBoundLabel AObj);

BOOL
BoundLabel_GetEnabled(TBoundLabel AObj);

void
BoundLabel_SetEnabled(TBoundLabel AObj, BOOL AValue);

TAction
BoundLabel_GetAction(TBoundLabel AObj);

void
BoundLabel_SetAction(TBoundLabel AObj, TAction AValue);

TAlign
BoundLabel_GetAlign(TBoundLabel AObj);

void
BoundLabel_SetAlign(TBoundLabel AObj, TAlign AValue);

TAnchors
BoundLabel_GetAnchors(TBoundLabel AObj);

void
BoundLabel_SetAnchors(TBoundLabel AObj, TAnchors AValue);

TRect
BoundLabel_GetBoundsRect(TBoundLabel AObj);

void
BoundLabel_SetBoundsRect(TBoundLabel AObj, TRect AValue);

int32_t
BoundLabel_GetClientHeight(TBoundLabel AObj);

void
BoundLabel_SetClientHeight(TBoundLabel AObj, int32_t AValue);

TPoint
BoundLabel_GetClientOrigin(TBoundLabel AObj);

TRect
BoundLabel_GetClientRect(TBoundLabel AObj);

int32_t
BoundLabel_GetClientWidth(TBoundLabel AObj);

void
BoundLabel_SetClientWidth(TBoundLabel AObj, int32_t AValue);

TSizeConstraints
BoundLabel_GetConstraints(TBoundLabel AObj);

void
BoundLabel_SetConstraints(TBoundLabel AObj, TSizeConstraints AValue);

TControlState
BoundLabel_GetControlState(TBoundLabel AObj);

void
BoundLabel_SetControlState(TBoundLabel AObj, TControlState AValue);

TControlStyle
BoundLabel_GetControlStyle(TBoundLabel AObj);

void
BoundLabel_SetControlStyle(TBoundLabel AObj, TControlStyle AValue);

BOOL
BoundLabel_GetFloating(TBoundLabel AObj);

BOOL
BoundLabel_GetVisible(TBoundLabel AObj);

void
BoundLabel_SetVisible(TBoundLabel AObj, BOOL AValue);

TWinControl
BoundLabel_GetParent(TBoundLabel AObj);

void
BoundLabel_SetParent(TBoundLabel AObj, TWinControl AValue);

TCursor
BoundLabel_GetCursor(TBoundLabel AObj);

void
BoundLabel_SetCursor(TBoundLabel AObj, TCursor AValue);

char*
BoundLabel_GetHint(TBoundLabel AObj);

void
BoundLabel_SetHint(TBoundLabel AObj, CChar char* AValue);

int32_t
BoundLabel_GetComponentCount(TBoundLabel AObj);

int32_t
BoundLabel_GetComponentIndex(TBoundLabel AObj);

void
BoundLabel_SetComponentIndex(TBoundLabel AObj, int32_t AValue);

TComponent
BoundLabel_GetOwner(TBoundLabel AObj);

char*
BoundLabel_GetName(TBoundLabel AObj);

void
BoundLabel_SetName(TBoundLabel AObj, CChar char* AValue);

intptr_t
BoundLabel_GetTag(TBoundLabel AObj);

void
BoundLabel_SetTag(TBoundLabel AObj, intptr_t AValue);

TAnchorSide
BoundLabel_GetAnchorSideLeft(TBoundLabel AObj);

void
BoundLabel_SetAnchorSideLeft(TBoundLabel AObj, TAnchorSide AValue);

TAnchorSide
BoundLabel_GetAnchorSideTop(TBoundLabel AObj);

void
BoundLabel_SetAnchorSideTop(TBoundLabel AObj, TAnchorSide AValue);

TAnchorSide
BoundLabel_GetAnchorSideRight(TBoundLabel AObj);

void
BoundLabel_SetAnchorSideRight(TBoundLabel AObj, TAnchorSide AValue);

TAnchorSide
BoundLabel_GetAnchorSideBottom(TBoundLabel AObj);

void
BoundLabel_SetAnchorSideBottom(TBoundLabel AObj, TAnchorSide AValue);

TControlBorderSpacing
BoundLabel_GetBorderSpacing(TBoundLabel AObj);

void
BoundLabel_SetBorderSpacing(TBoundLabel AObj, TControlBorderSpacing AValue);

TComponent
BoundLabel_GetComponents(TBoundLabel AObj, int32_t AIndex);

TAnchorSide
BoundLabel_GetAnchorSide(TBoundLabel AObj, TAnchorKind AKind);

TClass
BoundLabel_StaticClassType();

// -------------------TFlowPanel-------------------

TFlowPanel
FlowPanel_Create(TComponent AOwner);

void
FlowPanel_Free(TFlowPanel AObj);

int32_t
FlowPanel_GetControlIndex(TFlowPanel AObj, TControl AControl);

void
FlowPanel_SetControlIndex(TFlowPanel AObj, TControl AControl, int32_t Index);

BOOL
FlowPanel_CanFocus(TFlowPanel AObj);

BOOL
FlowPanel_ContainsControl(TFlowPanel AObj, TControl Control);

TControl
FlowPanel_ControlAtPos(TFlowPanel AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
FlowPanel_DisableAlign(TFlowPanel AObj);

void
FlowPanel_EnableAlign(TFlowPanel AObj);

TControl
FlowPanel_FindChildControl(TFlowPanel AObj, CChar char* ControlName);

void
FlowPanel_FlipChildren(TFlowPanel AObj, BOOL AllLevels);

BOOL
FlowPanel_Focused(TFlowPanel AObj);

BOOL
FlowPanel_HandleAllocated(TFlowPanel AObj);

void
FlowPanel_InsertControl(TFlowPanel AObj, TControl AControl);

void
FlowPanel_Invalidate(TFlowPanel AObj);

void
FlowPanel_PaintTo(TFlowPanel AObj, HDC DC, int32_t X, int32_t Y);

void
FlowPanel_RemoveControl(TFlowPanel AObj, TControl AControl);

void
FlowPanel_Realign(TFlowPanel AObj);

void
FlowPanel_Repaint(TFlowPanel AObj);

void
FlowPanel_ScaleBy(TFlowPanel AObj, int32_t M, int32_t D);

void
FlowPanel_ScrollBy(TFlowPanel AObj, int32_t DeltaX, int32_t DeltaY);

void
FlowPanel_SetBounds(TFlowPanel AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
FlowPanel_SetFocus(TFlowPanel AObj);

void
FlowPanel_Update(TFlowPanel AObj);

void
FlowPanel_BringToFront(TFlowPanel AObj);

TPoint
FlowPanel_ClientToScreen(TFlowPanel AObj, TPoint Point);

TPoint
FlowPanel_ClientToParent(TFlowPanel AObj, TPoint Point, TWinControl AParent);

BOOL
FlowPanel_Dragging(TFlowPanel AObj);

BOOL
FlowPanel_HasParent(TFlowPanel AObj);

void
FlowPanel_Hide(TFlowPanel AObj);

intptr_t
FlowPanel_Perform(TFlowPanel AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
FlowPanel_Refresh(TFlowPanel AObj);

TPoint
FlowPanel_ScreenToClient(TFlowPanel AObj, TPoint Point);

TPoint
FlowPanel_ParentToClient(TFlowPanel AObj, TPoint Point, TWinControl AParent);

void
FlowPanel_SendToBack(TFlowPanel AObj);

void
FlowPanel_Show(TFlowPanel AObj);

int32_t
FlowPanel_GetTextBuf(TFlowPanel AObj, CChar char* Buffer, int32_t BufSize);

int32_t
FlowPanel_GetTextLen(TFlowPanel AObj);

void
FlowPanel_SetTextBuf(TFlowPanel AObj, CChar char* Buffer);

TComponent
FlowPanel_FindComponent(TFlowPanel AObj, CChar char* AName);

char*
FlowPanel_GetNamePath(TFlowPanel AObj);

void
FlowPanel_Assign(TFlowPanel AObj, TObject Source);

TClass
FlowPanel_ClassType(TFlowPanel AObj);

char*
FlowPanel_ClassName(TFlowPanel AObj);

int32_t
FlowPanel_InstanceSize(TFlowPanel AObj);

BOOL
FlowPanel_InheritsFrom(TFlowPanel AObj, TClass AClass);

BOOL
FlowPanel_Equals(TFlowPanel AObj, TObject Obj);

int32_t
FlowPanel_GetHashCode(TFlowPanel AObj);

char*
FlowPanel_ToString(TFlowPanel AObj);

void
FlowPanel_AnchorToNeighbour(TFlowPanel AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
FlowPanel_AnchorParallel(TFlowPanel AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
FlowPanel_AnchorHorizontalCenterTo(TFlowPanel AObj, TControl ASibling);

void
FlowPanel_AnchorVerticalCenterTo(TFlowPanel AObj, TControl ASibling);

void
FlowPanel_AnchorSame(TFlowPanel AObj, TAnchorKind ASide, TControl ASibling);

void
FlowPanel_AnchorAsAlign(TFlowPanel AObj, TAlign ATheAlign, int32_t ASpace);

void
FlowPanel_AnchorClient(TFlowPanel AObj, int32_t ASpace);

int32_t
FlowPanel_ScaleDesignToForm(TFlowPanel AObj, int32_t ASize);

int32_t
FlowPanel_ScaleFormToDesign(TFlowPanel AObj, int32_t ASize);

int32_t
FlowPanel_Scale96ToForm(TFlowPanel AObj, int32_t ASize);

int32_t
FlowPanel_ScaleFormTo96(TFlowPanel AObj, int32_t ASize);

int32_t
FlowPanel_Scale96ToFont(TFlowPanel AObj, int32_t ASize);

int32_t
FlowPanel_ScaleFontTo96(TFlowPanel AObj, int32_t ASize);

int32_t
FlowPanel_ScaleScreenToFont(TFlowPanel AObj, int32_t ASize);

int32_t
FlowPanel_ScaleFontToScreen(TFlowPanel AObj, int32_t ASize);

int32_t
FlowPanel_Scale96ToScreen(TFlowPanel AObj, int32_t ASize);

int32_t
FlowPanel_ScaleScreenTo96(TFlowPanel AObj, int32_t ASize);

void
FlowPanel_AutoAdjustLayout(TFlowPanel AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
FlowPanel_FixDesignFontsPPI(TFlowPanel AObj, int32_t ADesignTimePPI);

void
FlowPanel_ScaleFontsPPI(TFlowPanel AObj, int32_t AToPPI, double AProportion);

TFlowPanelControlList
FlowPanel_GetControlList(TFlowPanel AObj);

void
FlowPanel_SetControlList(TFlowPanel AObj, TFlowPanelControlList AValue);

TAlign
FlowPanel_GetAlign(TFlowPanel AObj);

void
FlowPanel_SetAlign(TFlowPanel AObj, TAlign AValue);

TAlignment
FlowPanel_GetAlignment(TFlowPanel AObj);

void
FlowPanel_SetAlignment(TFlowPanel AObj, TAlignment AValue);

TAnchors
FlowPanel_GetAnchors(TFlowPanel AObj);

void
FlowPanel_SetAnchors(TFlowPanel AObj, TAnchors AValue);

BOOL
FlowPanel_GetAutoSize(TFlowPanel AObj);

void
FlowPanel_SetAutoSize(TFlowPanel AObj, BOOL AValue);

BOOL
FlowPanel_GetAutoWrap(TFlowPanel AObj);

void
FlowPanel_SetAutoWrap(TFlowPanel AObj, BOOL AValue);

TBiDiMode
FlowPanel_GetBiDiMode(TFlowPanel AObj);

void
FlowPanel_SetBiDiMode(TFlowPanel AObj, TBiDiMode AValue);

int32_t
FlowPanel_GetBorderWidth(TFlowPanel AObj);

void
FlowPanel_SetBorderWidth(TFlowPanel AObj, int32_t AValue);

TBorderStyle
FlowPanel_GetBorderStyle(TFlowPanel AObj);

void
FlowPanel_SetBorderStyle(TFlowPanel AObj, TBorderStyle AValue);

char*
FlowPanel_GetCaption(TFlowPanel AObj);

void
FlowPanel_SetCaption(TFlowPanel AObj, CChar char* AValue);

TColor
FlowPanel_GetColor(TFlowPanel AObj);

void
FlowPanel_SetColor(TFlowPanel AObj, TColor AValue);

TSizeConstraints
FlowPanel_GetConstraints(TFlowPanel AObj);

void
FlowPanel_SetConstraints(TFlowPanel AObj, TSizeConstraints AValue);

BOOL
FlowPanel_GetUseDockManager(TFlowPanel AObj);

void
FlowPanel_SetUseDockManager(TFlowPanel AObj, BOOL AValue);

BOOL
FlowPanel_GetDockSite(TFlowPanel AObj);

void
FlowPanel_SetDockSite(TFlowPanel AObj, BOOL AValue);

BOOL
FlowPanel_GetDoubleBuffered(TFlowPanel AObj);

void
FlowPanel_SetDoubleBuffered(TFlowPanel AObj, BOOL AValue);

TCursor
FlowPanel_GetDragCursor(TFlowPanel AObj);

void
FlowPanel_SetDragCursor(TFlowPanel AObj, TCursor AValue);

TDragKind
FlowPanel_GetDragKind(TFlowPanel AObj);

void
FlowPanel_SetDragKind(TFlowPanel AObj, TDragKind AValue);

TDragMode
FlowPanel_GetDragMode(TFlowPanel AObj);

void
FlowPanel_SetDragMode(TFlowPanel AObj, TDragMode AValue);

BOOL
FlowPanel_GetEnabled(TFlowPanel AObj);

void
FlowPanel_SetEnabled(TFlowPanel AObj, BOOL AValue);

TFlowStyle
FlowPanel_GetFlowStyle(TFlowPanel AObj);

void
FlowPanel_SetFlowStyle(TFlowPanel AObj, TFlowStyle AValue);

BOOL
FlowPanel_GetFullRepaint(TFlowPanel AObj);

void
FlowPanel_SetFullRepaint(TFlowPanel AObj, BOOL AValue);

TFont
FlowPanel_GetFont(TFlowPanel AObj);

void
FlowPanel_SetFont(TFlowPanel AObj, TFont AValue);

BOOL
FlowPanel_GetParentBackground(TFlowPanel AObj);

void
FlowPanel_SetParentBackground(TFlowPanel AObj, BOOL AValue);

BOOL
FlowPanel_GetParentColor(TFlowPanel AObj);

void
FlowPanel_SetParentColor(TFlowPanel AObj, BOOL AValue);

BOOL
FlowPanel_GetParentDoubleBuffered(TFlowPanel AObj);

void
FlowPanel_SetParentDoubleBuffered(TFlowPanel AObj, BOOL AValue);

BOOL
FlowPanel_GetParentFont(TFlowPanel AObj);

void
FlowPanel_SetParentFont(TFlowPanel AObj, BOOL AValue);

BOOL
FlowPanel_GetParentShowHint(TFlowPanel AObj);

void
FlowPanel_SetParentShowHint(TFlowPanel AObj, BOOL AValue);

TPopupMenu
FlowPanel_GetPopupMenu(TFlowPanel AObj);

void
FlowPanel_SetPopupMenu(TFlowPanel AObj, TPopupMenu AValue);

BOOL
FlowPanel_GetShowHint(TFlowPanel AObj);

void
FlowPanel_SetShowHint(TFlowPanel AObj, BOOL AValue);

TTabOrder
FlowPanel_GetTabOrder(TFlowPanel AObj);

void
FlowPanel_SetTabOrder(TFlowPanel AObj, TTabOrder AValue);

BOOL
FlowPanel_GetTabStop(TFlowPanel AObj);

void
FlowPanel_SetTabStop(TFlowPanel AObj, BOOL AValue);

BOOL
FlowPanel_GetVisible(TFlowPanel AObj);

void
FlowPanel_SetVisible(TFlowPanel AObj, BOOL AValue);

void
FlowPanel_SetOnAlignPosition(TFlowPanel AObj, TAlignPositionEvent AEventData);

void
FlowPanel_SetOnClick(TFlowPanel AObj, TNotifyEvent AEventData);

void
FlowPanel_SetOnConstrainedResize(TFlowPanel AObj, TConstrainedResizeEvent AEventData);

void
FlowPanel_SetOnContextPopup(TFlowPanel AObj, TContextPopupEvent AEventData);

void
FlowPanel_SetOnDockDrop(TFlowPanel AObj, TDockDropEvent AEventData);

void
FlowPanel_SetOnDblClick(TFlowPanel AObj, TNotifyEvent AEventData);

void
FlowPanel_SetOnDragDrop(TFlowPanel AObj, TDragDropEvent AEventData);

void
FlowPanel_SetOnDragOver(TFlowPanel AObj, TDragOverEvent AEventData);

void
FlowPanel_SetOnEndDock(TFlowPanel AObj, TEndDragEvent AEventData);

void
FlowPanel_SetOnEndDrag(TFlowPanel AObj, TEndDragEvent AEventData);

void
FlowPanel_SetOnEnter(TFlowPanel AObj, TNotifyEvent AEventData);

void
FlowPanel_SetOnExit(TFlowPanel AObj, TNotifyEvent AEventData);

void
FlowPanel_SetOnGetSiteInfo(TFlowPanel AObj, TGetSiteInfoEvent AEventData);

void
FlowPanel_SetOnMouseDown(TFlowPanel AObj, TMouseEvent AEventData);

void
FlowPanel_SetOnMouseEnter(TFlowPanel AObj, TNotifyEvent AEventData);

void
FlowPanel_SetOnMouseLeave(TFlowPanel AObj, TNotifyEvent AEventData);

void
FlowPanel_SetOnMouseMove(TFlowPanel AObj, TMouseMoveEvent AEventData);

void
FlowPanel_SetOnMouseUp(TFlowPanel AObj, TMouseEvent AEventData);

void
FlowPanel_SetOnResize(TFlowPanel AObj, TNotifyEvent AEventData);

void
FlowPanel_SetOnStartDock(TFlowPanel AObj, TStartDockEvent AEventData);

void
FlowPanel_SetOnUnDock(TFlowPanel AObj, TUnDockEvent AEventData);

int32_t
FlowPanel_GetDockClientCount(TFlowPanel AObj);

BOOL
FlowPanel_GetMouseInClient(TFlowPanel AObj);

int32_t
FlowPanel_GetVisibleDockClientCount(TFlowPanel AObj);

TBrush
FlowPanel_GetBrush(TFlowPanel AObj);

int32_t
FlowPanel_GetControlCount(TFlowPanel AObj);

HWND
FlowPanel_GetHandle(TFlowPanel AObj);

HWND
FlowPanel_GetParentWindow(TFlowPanel AObj);

void
FlowPanel_SetParentWindow(TFlowPanel AObj, HWND AValue);

BOOL
FlowPanel_GetShowing(TFlowPanel AObj);

TAction
FlowPanel_GetAction(TFlowPanel AObj);

void
FlowPanel_SetAction(TFlowPanel AObj, TAction AValue);

TRect
FlowPanel_GetBoundsRect(TFlowPanel AObj);

void
FlowPanel_SetBoundsRect(TFlowPanel AObj, TRect AValue);

int32_t
FlowPanel_GetClientHeight(TFlowPanel AObj);

void
FlowPanel_SetClientHeight(TFlowPanel AObj, int32_t AValue);

TPoint
FlowPanel_GetClientOrigin(TFlowPanel AObj);

TRect
FlowPanel_GetClientRect(TFlowPanel AObj);

int32_t
FlowPanel_GetClientWidth(TFlowPanel AObj);

void
FlowPanel_SetClientWidth(TFlowPanel AObj, int32_t AValue);

TControlState
FlowPanel_GetControlState(TFlowPanel AObj);

void
FlowPanel_SetControlState(TFlowPanel AObj, TControlState AValue);

TControlStyle
FlowPanel_GetControlStyle(TFlowPanel AObj);

void
FlowPanel_SetControlStyle(TFlowPanel AObj, TControlStyle AValue);

BOOL
FlowPanel_GetFloating(TFlowPanel AObj);

TWinControl
FlowPanel_GetParent(TFlowPanel AObj);

void
FlowPanel_SetParent(TFlowPanel AObj, TWinControl AValue);

int32_t
FlowPanel_GetLeft(TFlowPanel AObj);

void
FlowPanel_SetLeft(TFlowPanel AObj, int32_t AValue);

int32_t
FlowPanel_GetTop(TFlowPanel AObj);

void
FlowPanel_SetTop(TFlowPanel AObj, int32_t AValue);

int32_t
FlowPanel_GetWidth(TFlowPanel AObj);

void
FlowPanel_SetWidth(TFlowPanel AObj, int32_t AValue);

int32_t
FlowPanel_GetHeight(TFlowPanel AObj);

void
FlowPanel_SetHeight(TFlowPanel AObj, int32_t AValue);

TCursor
FlowPanel_GetCursor(TFlowPanel AObj);

void
FlowPanel_SetCursor(TFlowPanel AObj, TCursor AValue);

char*
FlowPanel_GetHint(TFlowPanel AObj);

void
FlowPanel_SetHint(TFlowPanel AObj, CChar char* AValue);

int32_t
FlowPanel_GetComponentCount(TFlowPanel AObj);

int32_t
FlowPanel_GetComponentIndex(TFlowPanel AObj);

void
FlowPanel_SetComponentIndex(TFlowPanel AObj, int32_t AValue);

TComponent
FlowPanel_GetOwner(TFlowPanel AObj);

char*
FlowPanel_GetName(TFlowPanel AObj);

void
FlowPanel_SetName(TFlowPanel AObj, CChar char* AValue);

intptr_t
FlowPanel_GetTag(TFlowPanel AObj);

void
FlowPanel_SetTag(TFlowPanel AObj, intptr_t AValue);

TAnchorSide
FlowPanel_GetAnchorSideLeft(TFlowPanel AObj);

void
FlowPanel_SetAnchorSideLeft(TFlowPanel AObj, TAnchorSide AValue);

TAnchorSide
FlowPanel_GetAnchorSideTop(TFlowPanel AObj);

void
FlowPanel_SetAnchorSideTop(TFlowPanel AObj, TAnchorSide AValue);

TAnchorSide
FlowPanel_GetAnchorSideRight(TFlowPanel AObj);

void
FlowPanel_SetAnchorSideRight(TFlowPanel AObj, TAnchorSide AValue);

TAnchorSide
FlowPanel_GetAnchorSideBottom(TFlowPanel AObj);

void
FlowPanel_SetAnchorSideBottom(TFlowPanel AObj, TAnchorSide AValue);

TControlChildSizing
FlowPanel_GetChildSizing(TFlowPanel AObj);

void
FlowPanel_SetChildSizing(TFlowPanel AObj, TControlChildSizing AValue);

TControlBorderSpacing
FlowPanel_GetBorderSpacing(TFlowPanel AObj);

void
FlowPanel_SetBorderSpacing(TFlowPanel AObj, TControlBorderSpacing AValue);

TControl
FlowPanel_GetDockClients(TFlowPanel AObj, int32_t Index);

TControl
FlowPanel_GetControls(TFlowPanel AObj, int32_t Index);

TComponent
FlowPanel_GetComponents(TFlowPanel AObj, int32_t AIndex);

TAnchorSide
FlowPanel_GetAnchorSide(TFlowPanel AObj, TAnchorKind AKind);

TClass
FlowPanel_StaticClassType();

// -------------------TFlowPanelControlList-------------------

int32_t
FlowPanelControlList_IndexOf(TFlowPanelControlList AObj, TControl AControl);

void
FlowPanelControlList_Exchange(TFlowPanelControlList AObj, int32_t Index1, int32_t index2);

void
FlowPanelControlList_Move(TFlowPanelControlList AObj, int32_t Index1, int32_t index2);

BOOL
FlowPanelControlList_AllowAdd(TFlowPanelControlList AObj);

BOOL
FlowPanelControlList_AllowDelete(TFlowPanelControlList AObj);

TObject
FlowPanelControlList_Owner(TFlowPanelControlList AObj);

TCollectionItem
FlowPanelControlList_Add(TFlowPanelControlList AObj);

void
FlowPanelControlList_Assign(TFlowPanelControlList AObj, TObject Source);

void
FlowPanelControlList_BeginUpdate(TFlowPanelControlList AObj);

void
FlowPanelControlList_Clear(TFlowPanelControlList AObj);

void
FlowPanelControlList_Delete(TFlowPanelControlList AObj, int32_t Index);

void
FlowPanelControlList_EndUpdate(TFlowPanelControlList AObj);

TCollectionItem
FlowPanelControlList_FindItemID(TFlowPanelControlList AObj, int32_t ID);

char*
FlowPanelControlList_GetNamePath(TFlowPanelControlList AObj);

TCollectionItem
FlowPanelControlList_Insert(TFlowPanelControlList AObj, int32_t Index);

TClass
FlowPanelControlList_ClassType(TFlowPanelControlList AObj);

char*
FlowPanelControlList_ClassName(TFlowPanelControlList AObj);

int32_t
FlowPanelControlList_InstanceSize(TFlowPanelControlList AObj);

BOOL
FlowPanelControlList_InheritsFrom(TFlowPanelControlList AObj, TClass AClass);

BOOL
FlowPanelControlList_Equals(TFlowPanelControlList AObj, TObject Obj);

int32_t
FlowPanelControlList_GetHashCode(TFlowPanelControlList AObj);

char*
FlowPanelControlList_ToString(TFlowPanelControlList AObj);

int32_t
FlowPanelControlList_GetCount(TFlowPanelControlList AObj);

TFlowPanelControl
FlowPanelControlList_GetItems(TFlowPanelControlList AObj, int32_t Index);

void
FlowPanelControlList_SetItems(TFlowPanelControlList AObj, int32_t Index, TFlowPanelControl AValue);

TClass
FlowPanelControlList_StaticClassType();

// -------------------TFlowPanelControl-------------------

BOOL
FlowPanelControl_AllowAdd(TFlowPanelControl AObj);

BOOL
FlowPanelControl_AllowDelete(TFlowPanelControl AObj);

char*
FlowPanelControl_GetNamePath(TFlowPanelControl AObj);

void
FlowPanelControl_Assign(TFlowPanelControl AObj, TObject Source);

TClass
FlowPanelControl_ClassType(TFlowPanelControl AObj);

char*
FlowPanelControl_ClassName(TFlowPanelControl AObj);

int32_t
FlowPanelControl_InstanceSize(TFlowPanelControl AObj);

BOOL
FlowPanelControl_InheritsFrom(TFlowPanelControl AObj, TClass AClass);

BOOL
FlowPanelControl_Equals(TFlowPanelControl AObj, TObject Obj);

int32_t
FlowPanelControl_GetHashCode(TFlowPanelControl AObj);

char*
FlowPanelControl_ToString(TFlowPanelControl AObj);

TControl
FlowPanelControl_GetControl(TFlowPanelControl AObj);

void
FlowPanelControl_SetControl(TFlowPanelControl AObj, TControl AValue);

TWrapAfter
FlowPanelControl_GetWrapAfter(TFlowPanelControl AObj);

void
FlowPanelControl_SetWrapAfter(TFlowPanelControl AObj, TWrapAfter AValue);

int32_t
FlowPanelControl_GetIndex(TFlowPanelControl AObj);

void
FlowPanelControl_SetIndex(TFlowPanelControl AObj, int32_t AValue);

TCollection
FlowPanelControl_GetCollection(TFlowPanelControl AObj);

void
FlowPanelControl_SetCollection(TFlowPanelControl AObj, TCollection AValue);

char*
FlowPanelControl_GetDisplayName(TFlowPanelControl AObj);

void
FlowPanelControl_SetDisplayName(TFlowPanelControl AObj, CChar char* AValue);

TClass
FlowPanelControl_StaticClassType();

// -------------------TCoolBar-------------------

TCoolBar
CoolBar_Create(TComponent AOwner);

void
CoolBar_Free(TCoolBar AObj);

void
CoolBar_FlipChildren(TCoolBar AObj, BOOL AllLevels);

BOOL
CoolBar_CanFocus(TCoolBar AObj);

BOOL
CoolBar_ContainsControl(TCoolBar AObj, TControl Control);

TControl
CoolBar_ControlAtPos(TCoolBar AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
CoolBar_DisableAlign(TCoolBar AObj);

void
CoolBar_EnableAlign(TCoolBar AObj);

TControl
CoolBar_FindChildControl(TCoolBar AObj, CChar char* ControlName);

BOOL
CoolBar_Focused(TCoolBar AObj);

BOOL
CoolBar_HandleAllocated(TCoolBar AObj);

void
CoolBar_Invalidate(TCoolBar AObj);

void
CoolBar_PaintTo(TCoolBar AObj, HDC DC, int32_t X, int32_t Y);

void
CoolBar_RemoveControl(TCoolBar AObj, TControl AControl);

void
CoolBar_Realign(TCoolBar AObj);

void
CoolBar_Repaint(TCoolBar AObj);

void
CoolBar_ScaleBy(TCoolBar AObj, int32_t M, int32_t D);

void
CoolBar_ScrollBy(TCoolBar AObj, int32_t DeltaX, int32_t DeltaY);

void
CoolBar_SetBounds(TCoolBar AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
CoolBar_SetFocus(TCoolBar AObj);

void
CoolBar_Update(TCoolBar AObj);

void
CoolBar_BringToFront(TCoolBar AObj);

TPoint
CoolBar_ClientToScreen(TCoolBar AObj, TPoint Point);

TPoint
CoolBar_ClientToParent(TCoolBar AObj, TPoint Point, TWinControl AParent);

BOOL
CoolBar_Dragging(TCoolBar AObj);

BOOL
CoolBar_HasParent(TCoolBar AObj);

void
CoolBar_Hide(TCoolBar AObj);

intptr_t
CoolBar_Perform(TCoolBar AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
CoolBar_Refresh(TCoolBar AObj);

TPoint
CoolBar_ScreenToClient(TCoolBar AObj, TPoint Point);

TPoint
CoolBar_ParentToClient(TCoolBar AObj, TPoint Point, TWinControl AParent);

void
CoolBar_SendToBack(TCoolBar AObj);

void
CoolBar_Show(TCoolBar AObj);

int32_t
CoolBar_GetTextBuf(TCoolBar AObj, CChar char* Buffer, int32_t BufSize);

int32_t
CoolBar_GetTextLen(TCoolBar AObj);

void
CoolBar_SetTextBuf(TCoolBar AObj, CChar char* Buffer);

TComponent
CoolBar_FindComponent(TCoolBar AObj, CChar char* AName);

char*
CoolBar_GetNamePath(TCoolBar AObj);

void
CoolBar_Assign(TCoolBar AObj, TObject Source);

TClass
CoolBar_ClassType(TCoolBar AObj);

char*
CoolBar_ClassName(TCoolBar AObj);

int32_t
CoolBar_InstanceSize(TCoolBar AObj);

BOOL
CoolBar_InheritsFrom(TCoolBar AObj, TClass AClass);

BOOL
CoolBar_Equals(TCoolBar AObj, TObject Obj);

int32_t
CoolBar_GetHashCode(TCoolBar AObj);

char*
CoolBar_ToString(TCoolBar AObj);

void
CoolBar_AnchorToNeighbour(TCoolBar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
CoolBar_AnchorParallel(TCoolBar AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
CoolBar_AnchorHorizontalCenterTo(TCoolBar AObj, TControl ASibling);

void
CoolBar_AnchorVerticalCenterTo(TCoolBar AObj, TControl ASibling);

void
CoolBar_AnchorSame(TCoolBar AObj, TAnchorKind ASide, TControl ASibling);

void
CoolBar_AnchorAsAlign(TCoolBar AObj, TAlign ATheAlign, int32_t ASpace);

void
CoolBar_AnchorClient(TCoolBar AObj, int32_t ASpace);

int32_t
CoolBar_ScaleDesignToForm(TCoolBar AObj, int32_t ASize);

int32_t
CoolBar_ScaleFormToDesign(TCoolBar AObj, int32_t ASize);

int32_t
CoolBar_Scale96ToForm(TCoolBar AObj, int32_t ASize);

int32_t
CoolBar_ScaleFormTo96(TCoolBar AObj, int32_t ASize);

int32_t
CoolBar_Scale96ToFont(TCoolBar AObj, int32_t ASize);

int32_t
CoolBar_ScaleFontTo96(TCoolBar AObj, int32_t ASize);

int32_t
CoolBar_ScaleScreenToFont(TCoolBar AObj, int32_t ASize);

int32_t
CoolBar_ScaleFontToScreen(TCoolBar AObj, int32_t ASize);

int32_t
CoolBar_Scale96ToScreen(TCoolBar AObj, int32_t ASize);

int32_t
CoolBar_ScaleScreenTo96(TCoolBar AObj, int32_t ASize);

void
CoolBar_AutoAdjustLayout(TCoolBar AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
CoolBar_FixDesignFontsPPI(TCoolBar AObj, int32_t ADesignTimePPI);

void
CoolBar_ScaleFontsPPI(TCoolBar AObj, int32_t AToPPI, double AProportion);

TAlign
CoolBar_GetAlign(TCoolBar AObj);

void
CoolBar_SetAlign(TCoolBar AObj, TAlign AValue);

TAnchors
CoolBar_GetAnchors(TCoolBar AObj);

void
CoolBar_SetAnchors(TCoolBar AObj, TAnchors AValue);

BOOL
CoolBar_GetAutoSize(TCoolBar AObj);

void
CoolBar_SetAutoSize(TCoolBar AObj, BOOL AValue);

TBorderStyle
CoolBar_GetBandBorderStyle(TCoolBar AObj);

void
CoolBar_SetBandBorderStyle(TCoolBar AObj, TBorderStyle AValue);

TCoolBandMaximize
CoolBar_GetBandMaximize(TCoolBar AObj);

void
CoolBar_SetBandMaximize(TCoolBar AObj, TCoolBandMaximize AValue);

TCoolBands
CoolBar_GetBands(TCoolBar AObj);

void
CoolBar_SetBands(TCoolBar AObj, TCoolBands AValue);

int32_t
CoolBar_GetBorderWidth(TCoolBar AObj);

void
CoolBar_SetBorderWidth(TCoolBar AObj, int32_t AValue);

TColor
CoolBar_GetColor(TCoolBar AObj);

void
CoolBar_SetColor(TCoolBar AObj, TColor AValue);

TSizeConstraints
CoolBar_GetConstraints(TCoolBar AObj);

void
CoolBar_SetConstraints(TCoolBar AObj, TSizeConstraints AValue);

BOOL
CoolBar_GetDockSite(TCoolBar AObj);

void
CoolBar_SetDockSite(TCoolBar AObj, BOOL AValue);

BOOL
CoolBar_GetDoubleBuffered(TCoolBar AObj);

void
CoolBar_SetDoubleBuffered(TCoolBar AObj, BOOL AValue);

TCursor
CoolBar_GetDragCursor(TCoolBar AObj);

void
CoolBar_SetDragCursor(TCoolBar AObj, TCursor AValue);

TDragKind
CoolBar_GetDragKind(TCoolBar AObj);

void
CoolBar_SetDragKind(TCoolBar AObj, TDragKind AValue);

TDragMode
CoolBar_GetDragMode(TCoolBar AObj);

void
CoolBar_SetDragMode(TCoolBar AObj, TDragMode AValue);

TEdgeBorders
CoolBar_GetEdgeBorders(TCoolBar AObj);

void
CoolBar_SetEdgeBorders(TCoolBar AObj, TEdgeBorders AValue);

TEdgeStyle
CoolBar_GetEdgeInner(TCoolBar AObj);

void
CoolBar_SetEdgeInner(TCoolBar AObj, TEdgeStyle AValue);

TEdgeStyle
CoolBar_GetEdgeOuter(TCoolBar AObj);

void
CoolBar_SetEdgeOuter(TCoolBar AObj, TEdgeStyle AValue);

BOOL
CoolBar_GetEnabled(TCoolBar AObj);

void
CoolBar_SetEnabled(TCoolBar AObj, BOOL AValue);

BOOL
CoolBar_GetFixedSize(TCoolBar AObj);

void
CoolBar_SetFixedSize(TCoolBar AObj, BOOL AValue);

BOOL
CoolBar_GetFixedOrder(TCoolBar AObj);

void
CoolBar_SetFixedOrder(TCoolBar AObj, BOOL AValue);

TFont
CoolBar_GetFont(TCoolBar AObj);

void
CoolBar_SetFont(TCoolBar AObj, TFont AValue);

TImageList
CoolBar_GetImages(TCoolBar AObj);

void
CoolBar_SetImages(TCoolBar AObj, TImageList AValue);

BOOL
CoolBar_GetParentColor(TCoolBar AObj);

void
CoolBar_SetParentColor(TCoolBar AObj, BOOL AValue);

BOOL
CoolBar_GetParentDoubleBuffered(TCoolBar AObj);

void
CoolBar_SetParentDoubleBuffered(TCoolBar AObj, BOOL AValue);

BOOL
CoolBar_GetParentFont(TCoolBar AObj);

void
CoolBar_SetParentFont(TCoolBar AObj, BOOL AValue);

BOOL
CoolBar_GetParentShowHint(TCoolBar AObj);

void
CoolBar_SetParentShowHint(TCoolBar AObj, BOOL AValue);

TBitmap
CoolBar_GetBitmap(TCoolBar AObj);

void
CoolBar_SetBitmap(TCoolBar AObj, TBitmap AValue);

TPopupMenu
CoolBar_GetPopupMenu(TCoolBar AObj);

void
CoolBar_SetPopupMenu(TCoolBar AObj, TPopupMenu AValue);

BOOL
CoolBar_GetShowHint(TCoolBar AObj);

void
CoolBar_SetShowHint(TCoolBar AObj, BOOL AValue);

BOOL
CoolBar_GetShowText(TCoolBar AObj);

void
CoolBar_SetShowText(TCoolBar AObj, BOOL AValue);

BOOL
CoolBar_GetVertical(TCoolBar AObj);

void
CoolBar_SetVertical(TCoolBar AObj, BOOL AValue);

BOOL
CoolBar_GetVisible(TCoolBar AObj);

void
CoolBar_SetVisible(TCoolBar AObj, BOOL AValue);

void
CoolBar_SetOnChange(TCoolBar AObj, TNotifyEvent AEventData);

void
CoolBar_SetOnClick(TCoolBar AObj, TNotifyEvent AEventData);

void
CoolBar_SetOnContextPopup(TCoolBar AObj, TContextPopupEvent AEventData);

void
CoolBar_SetOnDblClick(TCoolBar AObj, TNotifyEvent AEventData);

void
CoolBar_SetOnDockDrop(TCoolBar AObj, TDockDropEvent AEventData);

void
CoolBar_SetOnDragDrop(TCoolBar AObj, TDragDropEvent AEventData);

void
CoolBar_SetOnDragOver(TCoolBar AObj, TDragOverEvent AEventData);

void
CoolBar_SetOnEndDock(TCoolBar AObj, TEndDragEvent AEventData);

void
CoolBar_SetOnEndDrag(TCoolBar AObj, TEndDragEvent AEventData);

void
CoolBar_SetOnGetSiteInfo(TCoolBar AObj, TGetSiteInfoEvent AEventData);

void
CoolBar_SetOnMouseDown(TCoolBar AObj, TMouseEvent AEventData);

void
CoolBar_SetOnMouseEnter(TCoolBar AObj, TNotifyEvent AEventData);

void
CoolBar_SetOnMouseLeave(TCoolBar AObj, TNotifyEvent AEventData);

void
CoolBar_SetOnMouseMove(TCoolBar AObj, TMouseMoveEvent AEventData);

void
CoolBar_SetOnMouseUp(TCoolBar AObj, TMouseEvent AEventData);

void
CoolBar_SetOnResize(TCoolBar AObj, TNotifyEvent AEventData);

void
CoolBar_SetOnStartDock(TCoolBar AObj, TStartDockEvent AEventData);

void
CoolBar_SetOnUnDock(TCoolBar AObj, TUnDockEvent AEventData);

int32_t
CoolBar_GetDockClientCount(TCoolBar AObj);

BOOL
CoolBar_GetMouseInClient(TCoolBar AObj);

int32_t
CoolBar_GetVisibleDockClientCount(TCoolBar AObj);

TBrush
CoolBar_GetBrush(TCoolBar AObj);

int32_t
CoolBar_GetControlCount(TCoolBar AObj);

HWND
CoolBar_GetHandle(TCoolBar AObj);

HWND
CoolBar_GetParentWindow(TCoolBar AObj);

void
CoolBar_SetParentWindow(TCoolBar AObj, HWND AValue);

BOOL
CoolBar_GetShowing(TCoolBar AObj);

TTabOrder
CoolBar_GetTabOrder(TCoolBar AObj);

void
CoolBar_SetTabOrder(TCoolBar AObj, TTabOrder AValue);

BOOL
CoolBar_GetTabStop(TCoolBar AObj);

void
CoolBar_SetTabStop(TCoolBar AObj, BOOL AValue);

BOOL
CoolBar_GetUseDockManager(TCoolBar AObj);

void
CoolBar_SetUseDockManager(TCoolBar AObj, BOOL AValue);

TAction
CoolBar_GetAction(TCoolBar AObj);

void
CoolBar_SetAction(TCoolBar AObj, TAction AValue);

TBiDiMode
CoolBar_GetBiDiMode(TCoolBar AObj);

void
CoolBar_SetBiDiMode(TCoolBar AObj, TBiDiMode AValue);

TRect
CoolBar_GetBoundsRect(TCoolBar AObj);

void
CoolBar_SetBoundsRect(TCoolBar AObj, TRect AValue);

int32_t
CoolBar_GetClientHeight(TCoolBar AObj);

void
CoolBar_SetClientHeight(TCoolBar AObj, int32_t AValue);

TPoint
CoolBar_GetClientOrigin(TCoolBar AObj);

TRect
CoolBar_GetClientRect(TCoolBar AObj);

int32_t
CoolBar_GetClientWidth(TCoolBar AObj);

void
CoolBar_SetClientWidth(TCoolBar AObj, int32_t AValue);

TControlState
CoolBar_GetControlState(TCoolBar AObj);

void
CoolBar_SetControlState(TCoolBar AObj, TControlState AValue);

TControlStyle
CoolBar_GetControlStyle(TCoolBar AObj);

void
CoolBar_SetControlStyle(TCoolBar AObj, TControlStyle AValue);

BOOL
CoolBar_GetFloating(TCoolBar AObj);

TWinControl
CoolBar_GetParent(TCoolBar AObj);

void
CoolBar_SetParent(TCoolBar AObj, TWinControl AValue);

int32_t
CoolBar_GetLeft(TCoolBar AObj);

void
CoolBar_SetLeft(TCoolBar AObj, int32_t AValue);

int32_t
CoolBar_GetTop(TCoolBar AObj);

void
CoolBar_SetTop(TCoolBar AObj, int32_t AValue);

int32_t
CoolBar_GetWidth(TCoolBar AObj);

void
CoolBar_SetWidth(TCoolBar AObj, int32_t AValue);

int32_t
CoolBar_GetHeight(TCoolBar AObj);

void
CoolBar_SetHeight(TCoolBar AObj, int32_t AValue);

TCursor
CoolBar_GetCursor(TCoolBar AObj);

void
CoolBar_SetCursor(TCoolBar AObj, TCursor AValue);

char*
CoolBar_GetHint(TCoolBar AObj);

void
CoolBar_SetHint(TCoolBar AObj, CChar char* AValue);

int32_t
CoolBar_GetComponentCount(TCoolBar AObj);

int32_t
CoolBar_GetComponentIndex(TCoolBar AObj);

void
CoolBar_SetComponentIndex(TCoolBar AObj, int32_t AValue);

TComponent
CoolBar_GetOwner(TCoolBar AObj);

char*
CoolBar_GetName(TCoolBar AObj);

void
CoolBar_SetName(TCoolBar AObj, CChar char* AValue);

intptr_t
CoolBar_GetTag(TCoolBar AObj);

void
CoolBar_SetTag(TCoolBar AObj, intptr_t AValue);

TAnchorSide
CoolBar_GetAnchorSideLeft(TCoolBar AObj);

void
CoolBar_SetAnchorSideLeft(TCoolBar AObj, TAnchorSide AValue);

TAnchorSide
CoolBar_GetAnchorSideTop(TCoolBar AObj);

void
CoolBar_SetAnchorSideTop(TCoolBar AObj, TAnchorSide AValue);

TAnchorSide
CoolBar_GetAnchorSideRight(TCoolBar AObj);

void
CoolBar_SetAnchorSideRight(TCoolBar AObj, TAnchorSide AValue);

TAnchorSide
CoolBar_GetAnchorSideBottom(TCoolBar AObj);

void
CoolBar_SetAnchorSideBottom(TCoolBar AObj, TAnchorSide AValue);

TControlChildSizing
CoolBar_GetChildSizing(TCoolBar AObj);

void
CoolBar_SetChildSizing(TCoolBar AObj, TControlChildSizing AValue);

TControlBorderSpacing
CoolBar_GetBorderSpacing(TCoolBar AObj);

void
CoolBar_SetBorderSpacing(TCoolBar AObj, TControlBorderSpacing AValue);

TControl
CoolBar_GetDockClients(TCoolBar AObj, int32_t Index);

TControl
CoolBar_GetControls(TCoolBar AObj, int32_t Index);

TComponent
CoolBar_GetComponents(TCoolBar AObj, int32_t AIndex);

TAnchorSide
CoolBar_GetAnchorSide(TCoolBar AObj, TAnchorKind AKind);

TClass
CoolBar_StaticClassType();

// -------------------TCoolBands-------------------

TCoolBands
CoolBands_Create(TCoolBar AOwner);

void
CoolBands_Free(TCoolBands AObj);

TCoolBand
CoolBands_Add(TCoolBands AObj);

TCoolBand
CoolBands_FindBand(TCoolBands AObj, TControl AControl);

TObject
CoolBands_Owner(TCoolBands AObj);

void
CoolBands_Assign(TCoolBands AObj, TObject Source);

void
CoolBands_BeginUpdate(TCoolBands AObj);

void
CoolBands_Clear(TCoolBands AObj);

void
CoolBands_Delete(TCoolBands AObj, int32_t Index);

void
CoolBands_EndUpdate(TCoolBands AObj);

TCollectionItem
CoolBands_FindItemID(TCoolBands AObj, int32_t ID);

char*
CoolBands_GetNamePath(TCoolBands AObj);

TCollectionItem
CoolBands_Insert(TCoolBands AObj, int32_t Index);

TClass
CoolBands_ClassType(TCoolBands AObj);

char*
CoolBands_ClassName(TCoolBands AObj);

int32_t
CoolBands_InstanceSize(TCoolBands AObj);

BOOL
CoolBands_InheritsFrom(TCoolBands AObj, TClass AClass);

BOOL
CoolBands_Equals(TCoolBands AObj, TObject Obj);

int32_t
CoolBands_GetHashCode(TCoolBands AObj);

char*
CoolBands_ToString(TCoolBands AObj);

int32_t
CoolBands_GetCount(TCoolBands AObj);

TCoolBand
CoolBands_GetItems(TCoolBands AObj, int32_t Index);

void
CoolBands_SetItems(TCoolBands AObj, int32_t Index, TCoolBand AValue);

TClass
CoolBands_StaticClassType();

// -------------------TCoolBand-------------------

TCoolBand
CoolBand_Create(TCollection AOwner);

void
CoolBand_Free(TCoolBand AObj);

void
CoolBand_Assign(TCoolBand AObj, TObject Source);

char*
CoolBand_GetNamePath(TCoolBand AObj);

TClass
CoolBand_ClassType(TCoolBand AObj);

char*
CoolBand_ClassName(TCoolBand AObj);

int32_t
CoolBand_InstanceSize(TCoolBand AObj);

BOOL
CoolBand_InheritsFrom(TCoolBand AObj, TClass AClass);

BOOL
CoolBand_Equals(TCoolBand AObj, TObject Obj);

int32_t
CoolBand_GetHashCode(TCoolBand AObj);

char*
CoolBand_ToString(TCoolBand AObj);

int32_t
CoolBand_GetHeight(TCoolBand AObj);

TBitmap
CoolBand_GetBitmap(TCoolBand AObj);

void
CoolBand_SetBitmap(TCoolBand AObj, TBitmap AValue);

TBorderStyle
CoolBand_GetBorderStyle(TCoolBand AObj);

void
CoolBand_SetBorderStyle(TCoolBand AObj, TBorderStyle AValue);

BOOL
CoolBand_GetBreak(TCoolBand AObj);

void
CoolBand_SetBreak(TCoolBand AObj, BOOL AValue);

TColor
CoolBand_GetColor(TCoolBand AObj);

void
CoolBand_SetColor(TCoolBand AObj, TColor AValue);

TWinControl
CoolBand_GetControl(TCoolBand AObj);

void
CoolBand_SetControl(TCoolBand AObj, TWinControl AValue);

BOOL
CoolBand_GetFixedBackground(TCoolBand AObj);

void
CoolBand_SetFixedBackground(TCoolBand AObj, BOOL AValue);

BOOL
CoolBand_GetFixedSize(TCoolBand AObj);

void
CoolBand_SetFixedSize(TCoolBand AObj, BOOL AValue);

BOOL
CoolBand_GetHorizontalOnly(TCoolBand AObj);

void
CoolBand_SetHorizontalOnly(TCoolBand AObj, BOOL AValue);

int32_t
CoolBand_GetImageIndex(TCoolBand AObj);

void
CoolBand_SetImageIndex(TCoolBand AObj, int32_t AValue);

int32_t
CoolBand_GetMinHeight(TCoolBand AObj);

void
CoolBand_SetMinHeight(TCoolBand AObj, int32_t AValue);

int32_t
CoolBand_GetMinWidth(TCoolBand AObj);

void
CoolBand_SetMinWidth(TCoolBand AObj, int32_t AValue);

BOOL
CoolBand_GetParentColor(TCoolBand AObj);

void
CoolBand_SetParentColor(TCoolBand AObj, BOOL AValue);

BOOL
CoolBand_GetParentBitmap(TCoolBand AObj);

void
CoolBand_SetParentBitmap(TCoolBand AObj, BOOL AValue);

char*
CoolBand_GetText(TCoolBand AObj);

void
CoolBand_SetText(TCoolBand AObj, CChar char* AValue);

BOOL
CoolBand_GetVisible(TCoolBand AObj);

void
CoolBand_SetVisible(TCoolBand AObj, BOOL AValue);

int32_t
CoolBand_GetWidth(TCoolBand AObj);

void
CoolBand_SetWidth(TCoolBand AObj, int32_t AValue);

TCollection
CoolBand_GetCollection(TCoolBand AObj);

void
CoolBand_SetCollection(TCoolBand AObj, TCollection AValue);

int32_t
CoolBand_GetIndex(TCoolBand AObj);

void
CoolBand_SetIndex(TCoolBand AObj, int32_t AValue);

char*
CoolBand_GetDisplayName(TCoolBand AObj);

void
CoolBand_SetDisplayName(TCoolBand AObj, CChar char* AValue);

TClass
CoolBand_StaticClassType();

// -------------------TCollection-------------------

TCollection
Collection_Create(void* AOwner);

void
Collection_Free(TCollection AObj);

TObject
Collection_Owner(TCollection AObj);

TCollectionItem
Collection_Add(TCollection AObj);

void
Collection_Assign(TCollection AObj, TObject Source);

void
Collection_BeginUpdate(TCollection AObj);

void
Collection_Clear(TCollection AObj);

void
Collection_Delete(TCollection AObj, int32_t Index);

void
Collection_EndUpdate(TCollection AObj);

TCollectionItem
Collection_FindItemID(TCollection AObj, int32_t ID);

char*
Collection_GetNamePath(TCollection AObj);

TCollectionItem
Collection_Insert(TCollection AObj, int32_t Index);

TClass
Collection_ClassType(TCollection AObj);

char*
Collection_ClassName(TCollection AObj);

int32_t
Collection_InstanceSize(TCollection AObj);

BOOL
Collection_InheritsFrom(TCollection AObj, TClass AClass);

BOOL
Collection_Equals(TCollection AObj, TObject Obj);

int32_t
Collection_GetHashCode(TCollection AObj);

char*
Collection_ToString(TCollection AObj);

int32_t
Collection_GetCount(TCollection AObj);

TCollectionItem
Collection_GetItems(TCollection AObj, int32_t Index);

void
Collection_SetItems(TCollection AObj, int32_t Index, TCollectionItem AValue);

TClass
Collection_StaticClassType();

// -------------------TPrinter-------------------

TPrinter
Printer_Create();

void
Printer_Free(TPrinter AObj);

void
Printer_Abort(TPrinter AObj);

void
Printer_BeginDoc(TPrinter AObj);

void
Printer_EndDoc(TPrinter AObj);

void
Printer_NewPage(TPrinter AObj);

void
Printer_Refresh(TPrinter AObj);

TClass
Printer_ClassType(TPrinter AObj);

char*
Printer_ClassName(TPrinter AObj);

int32_t
Printer_InstanceSize(TPrinter AObj);

BOOL
Printer_InheritsFrom(TPrinter AObj, TClass AClass);

BOOL
Printer_Equals(TPrinter AObj, TObject Obj);

int32_t
Printer_GetHashCode(TPrinter AObj);

char*
Printer_ToString(TPrinter AObj);

BOOL
Printer_GetAborted(TPrinter AObj);

TCanvas
Printer_GetCanvas(TPrinter AObj);

int32_t
Printer_GetCopies(TPrinter AObj);

void
Printer_SetCopies(TPrinter AObj, int32_t AValue);

TStrings
Printer_GetFonts(TPrinter AObj);

TPrinterOrientation
Printer_GetOrientation(TPrinter AObj);

void
Printer_SetOrientation(TPrinter AObj, TPrinterOrientation AValue);

int32_t
Printer_GetPageHeight(TPrinter AObj);

int32_t
Printer_GetPageWidth(TPrinter AObj);

int32_t
Printer_GetPageNumber(TPrinter AObj);

int32_t
Printer_GetPrinterIndex(TPrinter AObj);

void
Printer_SetPrinterIndex(TPrinter AObj, int32_t AValue);

BOOL
Printer_GetPrinting(TPrinter AObj);

TStrings
Printer_GetPrinters(TPrinter AObj);

char*
Printer_GetTitle(TPrinter AObj);

void
Printer_SetTitle(TPrinter AObj, CChar char* AValue);

TClass
Printer_StaticClassType();

void
Printer_SetPrinter(TPrinter Obj, CChar char* aName);

// -------------------TTaskDialog-------------------

TTaskDialog
TaskDialog_Create(TComponent AOwner);

void
TaskDialog_Free(TTaskDialog AObj);

BOOL
TaskDialog_Execute(TTaskDialog AObj);

TComponent
TaskDialog_FindComponent(TTaskDialog AObj, CChar char* AName);

char*
TaskDialog_GetNamePath(TTaskDialog AObj);

BOOL
TaskDialog_HasParent(TTaskDialog AObj);

void
TaskDialog_Assign(TTaskDialog AObj, TObject Source);

TClass
TaskDialog_ClassType(TTaskDialog AObj);

char*
TaskDialog_ClassName(TTaskDialog AObj);

int32_t
TaskDialog_InstanceSize(TTaskDialog AObj);

BOOL
TaskDialog_InheritsFrom(TTaskDialog AObj, TClass AClass);

BOOL
TaskDialog_Equals(TTaskDialog AObj, TObject Obj);

int32_t
TaskDialog_GetHashCode(TTaskDialog AObj);

char*
TaskDialog_ToString(TTaskDialog AObj);

TTaskDialogButtons
TaskDialog_GetButtons(TTaskDialog AObj);

void
TaskDialog_SetButtons(TTaskDialog AObj, TTaskDialogButtons AValue);

char*
TaskDialog_GetCaption(TTaskDialog AObj);

void
TaskDialog_SetCaption(TTaskDialog AObj, CChar char* AValue);

TTaskDialogCommonButtons
TaskDialog_GetCommonButtons(TTaskDialog AObj);

void
TaskDialog_SetCommonButtons(TTaskDialog AObj, TTaskDialogCommonButtons AValue);

TTaskDialogCommonButton
TaskDialog_GetDefaultButton(TTaskDialog AObj);

void
TaskDialog_SetDefaultButton(TTaskDialog AObj, TTaskDialogCommonButton AValue);

char*
TaskDialog_GetExpandButtonCaption(TTaskDialog AObj);

void
TaskDialog_SetExpandButtonCaption(TTaskDialog AObj, CChar char* AValue);

char*
TaskDialog_GetExpandedText(TTaskDialog AObj);

void
TaskDialog_SetExpandedText(TTaskDialog AObj, CChar char* AValue);

TTaskDialogFlags
TaskDialog_GetFlags(TTaskDialog AObj);

void
TaskDialog_SetFlags(TTaskDialog AObj, TTaskDialogFlags AValue);

TTaskDialogIcon
TaskDialog_GetFooterIcon(TTaskDialog AObj);

void
TaskDialog_SetFooterIcon(TTaskDialog AObj, TTaskDialogIcon AValue);

char*
TaskDialog_GetFooterText(TTaskDialog AObj);

void
TaskDialog_SetFooterText(TTaskDialog AObj, CChar char* AValue);

TTaskDialogIcon
TaskDialog_GetMainIcon(TTaskDialog AObj);

void
TaskDialog_SetMainIcon(TTaskDialog AObj, TTaskDialogIcon AValue);

TTaskDialogButtons
TaskDialog_GetRadioButtons(TTaskDialog AObj);

void
TaskDialog_SetRadioButtons(TTaskDialog AObj, TTaskDialogButtons AValue);

char*
TaskDialog_GetText(TTaskDialog AObj);

void
TaskDialog_SetText(TTaskDialog AObj, CChar char* AValue);

char*
TaskDialog_GetTitle(TTaskDialog AObj);

void
TaskDialog_SetTitle(TTaskDialog AObj, CChar char* AValue);

char*
TaskDialog_GetVerificationText(TTaskDialog AObj);

void
TaskDialog_SetVerificationText(TTaskDialog AObj, CChar char* AValue);

void
TaskDialog_SetOnButtonClicked(TTaskDialog AObj, TTaskDlgClickEvent AEventData);

TTaskDialogButtonItem
TaskDialog_GetButton(TTaskDialog AObj);

void
TaskDialog_SetButton(TTaskDialog AObj, TTaskDialogButtonItem AValue);

TModalResult
TaskDialog_GetModalResult(TTaskDialog AObj);

void
TaskDialog_SetModalResult(TTaskDialog AObj, TModalResult AValue);

TTaskDialogRadioButtonItem
TaskDialog_GetRadioButton(TTaskDialog AObj);

int32_t
TaskDialog_GetComponentCount(TTaskDialog AObj);

int32_t
TaskDialog_GetComponentIndex(TTaskDialog AObj);

void
TaskDialog_SetComponentIndex(TTaskDialog AObj, int32_t AValue);

TComponent
TaskDialog_GetOwner(TTaskDialog AObj);

char*
TaskDialog_GetName(TTaskDialog AObj);

void
TaskDialog_SetName(TTaskDialog AObj, CChar char* AValue);

intptr_t
TaskDialog_GetTag(TTaskDialog AObj);

void
TaskDialog_SetTag(TTaskDialog AObj, intptr_t AValue);

TComponent
TaskDialog_GetComponents(TTaskDialog AObj, int32_t AIndex);

TClass
TaskDialog_StaticClassType();

// -------------------TTaskDialogButtons-------------------

TTaskDialogBaseButtonItem
TaskDialogButtons_Add(TTaskDialogButtons AObj);

TTaskDialogBaseButtonItem
TaskDialogButtons_FindButton(TTaskDialogButtons AObj, TModalResult AModalResult);

TObject
TaskDialogButtons_Owner(TTaskDialogButtons AObj);

void
TaskDialogButtons_Assign(TTaskDialogButtons AObj, TObject Source);

void
TaskDialogButtons_BeginUpdate(TTaskDialogButtons AObj);

void
TaskDialogButtons_Clear(TTaskDialogButtons AObj);

void
TaskDialogButtons_Delete(TTaskDialogButtons AObj, int32_t Index);

void
TaskDialogButtons_EndUpdate(TTaskDialogButtons AObj);

TCollectionItem
TaskDialogButtons_FindItemID(TTaskDialogButtons AObj, int32_t ID);

char*
TaskDialogButtons_GetNamePath(TTaskDialogButtons AObj);

TCollectionItem
TaskDialogButtons_Insert(TTaskDialogButtons AObj, int32_t Index);

TClass
TaskDialogButtons_ClassType(TTaskDialogButtons AObj);

char*
TaskDialogButtons_ClassName(TTaskDialogButtons AObj);

int32_t
TaskDialogButtons_InstanceSize(TTaskDialogButtons AObj);

BOOL
TaskDialogButtons_InheritsFrom(TTaskDialogButtons AObj, TClass AClass);

BOOL
TaskDialogButtons_Equals(TTaskDialogButtons AObj, TObject Obj);

int32_t
TaskDialogButtons_GetHashCode(TTaskDialogButtons AObj);

char*
TaskDialogButtons_ToString(TTaskDialogButtons AObj);

TTaskDialogBaseButtonItem
TaskDialogButtons_GetDefaultButton(TTaskDialogButtons AObj);

void
TaskDialogButtons_SetDefaultButton(TTaskDialogButtons AObj, TTaskDialogBaseButtonItem AValue);

int32_t
TaskDialogButtons_GetCount(TTaskDialogButtons AObj);

TTaskDialogBaseButtonItem
TaskDialogButtons_GetItems(TTaskDialogButtons AObj, int32_t Index);

void
TaskDialogButtons_SetItems(TTaskDialogButtons AObj, int32_t Index, TTaskDialogBaseButtonItem AValue);

TClass
TaskDialogButtons_StaticClassType();

// -------------------TTaskDialogButtonItem-------------------

TTaskDialogButtonItem
TaskDialogButtonItem_Create(TCollection AOwner);

void
TaskDialogButtonItem_Free(TTaskDialogButtonItem AObj);

char*
TaskDialogButtonItem_GetNamePath(TTaskDialogButtonItem AObj);

void
TaskDialogButtonItem_Assign(TTaskDialogButtonItem AObj, TObject Source);

TClass
TaskDialogButtonItem_ClassType(TTaskDialogButtonItem AObj);

char*
TaskDialogButtonItem_ClassName(TTaskDialogButtonItem AObj);

int32_t
TaskDialogButtonItem_InstanceSize(TTaskDialogButtonItem AObj);

BOOL
TaskDialogButtonItem_InheritsFrom(TTaskDialogButtonItem AObj, TClass AClass);

BOOL
TaskDialogButtonItem_Equals(TTaskDialogButtonItem AObj, TObject Obj);

int32_t
TaskDialogButtonItem_GetHashCode(TTaskDialogButtonItem AObj);

char*
TaskDialogButtonItem_ToString(TTaskDialogButtonItem AObj);

TModalResult
TaskDialogButtonItem_GetModalResult(TTaskDialogButtonItem AObj);

void
TaskDialogButtonItem_SetModalResult(TTaskDialogButtonItem AObj, TModalResult AValue);

char*
TaskDialogButtonItem_GetCaption(TTaskDialogButtonItem AObj);

void
TaskDialogButtonItem_SetCaption(TTaskDialogButtonItem AObj, CChar char* AValue);

BOOL
TaskDialogButtonItem_GetDefault(TTaskDialogButtonItem AObj);

void
TaskDialogButtonItem_SetDefault(TTaskDialogButtonItem AObj, BOOL AValue);

TCollection
TaskDialogButtonItem_GetCollection(TTaskDialogButtonItem AObj);

void
TaskDialogButtonItem_SetCollection(TTaskDialogButtonItem AObj, TCollection AValue);

int32_t
TaskDialogButtonItem_GetIndex(TTaskDialogButtonItem AObj);

void
TaskDialogButtonItem_SetIndex(TTaskDialogButtonItem AObj, int32_t AValue);

char*
TaskDialogButtonItem_GetDisplayName(TTaskDialogButtonItem AObj);

void
TaskDialogButtonItem_SetDisplayName(TTaskDialogButtonItem AObj, CChar char* AValue);

TClass
TaskDialogButtonItem_StaticClassType();

// -------------------TTaskDialogRadioButtonItem-------------------

TTaskDialogRadioButtonItem
TaskDialogRadioButtonItem_Create(TCollection AOwner);

void
TaskDialogRadioButtonItem_Free(TTaskDialogRadioButtonItem AObj);

char*
TaskDialogRadioButtonItem_GetNamePath(TTaskDialogRadioButtonItem AObj);

void
TaskDialogRadioButtonItem_Assign(TTaskDialogRadioButtonItem AObj, TObject Source);

TClass
TaskDialogRadioButtonItem_ClassType(TTaskDialogRadioButtonItem AObj);

char*
TaskDialogRadioButtonItem_ClassName(TTaskDialogRadioButtonItem AObj);

int32_t
TaskDialogRadioButtonItem_InstanceSize(TTaskDialogRadioButtonItem AObj);

BOOL
TaskDialogRadioButtonItem_InheritsFrom(TTaskDialogRadioButtonItem AObj, TClass AClass);

BOOL
TaskDialogRadioButtonItem_Equals(TTaskDialogRadioButtonItem AObj, TObject Obj);

int32_t
TaskDialogRadioButtonItem_GetHashCode(TTaskDialogRadioButtonItem AObj);

char*
TaskDialogRadioButtonItem_ToString(TTaskDialogRadioButtonItem AObj);

TModalResult
TaskDialogRadioButtonItem_GetModalResult(TTaskDialogRadioButtonItem AObj);

void
TaskDialogRadioButtonItem_SetModalResult(TTaskDialogRadioButtonItem AObj, TModalResult AValue);

char*
TaskDialogRadioButtonItem_GetCaption(TTaskDialogRadioButtonItem AObj);

void
TaskDialogRadioButtonItem_SetCaption(TTaskDialogRadioButtonItem AObj, CChar char* AValue);

BOOL
TaskDialogRadioButtonItem_GetDefault(TTaskDialogRadioButtonItem AObj);

void
TaskDialogRadioButtonItem_SetDefault(TTaskDialogRadioButtonItem AObj, BOOL AValue);

TCollection
TaskDialogRadioButtonItem_GetCollection(TTaskDialogRadioButtonItem AObj);

void
TaskDialogRadioButtonItem_SetCollection(TTaskDialogRadioButtonItem AObj, TCollection AValue);

int32_t
TaskDialogRadioButtonItem_GetIndex(TTaskDialogRadioButtonItem AObj);

void
TaskDialogRadioButtonItem_SetIndex(TTaskDialogRadioButtonItem AObj, int32_t AValue);

char*
TaskDialogRadioButtonItem_GetDisplayName(TTaskDialogRadioButtonItem AObj);

void
TaskDialogRadioButtonItem_SetDisplayName(TTaskDialogRadioButtonItem AObj, CChar char* AValue);

TClass
TaskDialogRadioButtonItem_StaticClassType();

// -------------------TTaskDialogBaseButtonItem-------------------

TTaskDialogBaseButtonItem
TaskDialogBaseButtonItem_Create(TCollection AOwner);

void
TaskDialogBaseButtonItem_Free(TTaskDialogBaseButtonItem AObj);

char*
TaskDialogBaseButtonItem_GetNamePath(TTaskDialogBaseButtonItem AObj);

void
TaskDialogBaseButtonItem_Assign(TTaskDialogBaseButtonItem AObj, TObject Source);

TClass
TaskDialogBaseButtonItem_ClassType(TTaskDialogBaseButtonItem AObj);

char*
TaskDialogBaseButtonItem_ClassName(TTaskDialogBaseButtonItem AObj);

int32_t
TaskDialogBaseButtonItem_InstanceSize(TTaskDialogBaseButtonItem AObj);

BOOL
TaskDialogBaseButtonItem_InheritsFrom(TTaskDialogBaseButtonItem AObj, TClass AClass);

BOOL
TaskDialogBaseButtonItem_Equals(TTaskDialogBaseButtonItem AObj, TObject Obj);

int32_t
TaskDialogBaseButtonItem_GetHashCode(TTaskDialogBaseButtonItem AObj);

char*
TaskDialogBaseButtonItem_ToString(TTaskDialogBaseButtonItem AObj);

TModalResult
TaskDialogBaseButtonItem_GetModalResult(TTaskDialogBaseButtonItem AObj);

void
TaskDialogBaseButtonItem_SetModalResult(TTaskDialogBaseButtonItem AObj, TModalResult AValue);

char*
TaskDialogBaseButtonItem_GetCaption(TTaskDialogBaseButtonItem AObj);

void
TaskDialogBaseButtonItem_SetCaption(TTaskDialogBaseButtonItem AObj, CChar char* AValue);

BOOL
TaskDialogBaseButtonItem_GetDefault(TTaskDialogBaseButtonItem AObj);

void
TaskDialogBaseButtonItem_SetDefault(TTaskDialogBaseButtonItem AObj, BOOL AValue);

TCollection
TaskDialogBaseButtonItem_GetCollection(TTaskDialogBaseButtonItem AObj);

void
TaskDialogBaseButtonItem_SetCollection(TTaskDialogBaseButtonItem AObj, TCollection AValue);

int32_t
TaskDialogBaseButtonItem_GetIndex(TTaskDialogBaseButtonItem AObj);

void
TaskDialogBaseButtonItem_SetIndex(TTaskDialogBaseButtonItem AObj, int32_t AValue);

char*
TaskDialogBaseButtonItem_GetDisplayName(TTaskDialogBaseButtonItem AObj);

void
TaskDialogBaseButtonItem_SetDisplayName(TTaskDialogBaseButtonItem AObj, CChar char* AValue);

TClass
TaskDialogBaseButtonItem_StaticClassType();

// -------------------TComboBoxEx-------------------

TComboBoxEx
ComboBoxEx_Create(TComponent AOwner);

void
ComboBoxEx_Free(TComboBoxEx AObj);

BOOL
ComboBoxEx_Focused(TComboBoxEx AObj);

void
ComboBoxEx_AddItem(TComboBoxEx AObj, CChar char* Item, TObject AObject);

void
ComboBoxEx_Clear(TComboBoxEx AObj);

void
ComboBoxEx_ClearSelection(TComboBoxEx AObj);

void
ComboBoxEx_DeleteSelected(TComboBoxEx AObj);

void
ComboBoxEx_SelectAll(TComboBoxEx AObj);

BOOL
ComboBoxEx_CanFocus(TComboBoxEx AObj);

BOOL
ComboBoxEx_ContainsControl(TComboBoxEx AObj, TControl Control);

TControl
ComboBoxEx_ControlAtPos(TComboBoxEx AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
ComboBoxEx_DisableAlign(TComboBoxEx AObj);

void
ComboBoxEx_EnableAlign(TComboBoxEx AObj);

TControl
ComboBoxEx_FindChildControl(TComboBoxEx AObj, CChar char* ControlName);

void
ComboBoxEx_FlipChildren(TComboBoxEx AObj, BOOL AllLevels);

BOOL
ComboBoxEx_HandleAllocated(TComboBoxEx AObj);

void
ComboBoxEx_InsertControl(TComboBoxEx AObj, TControl AControl);

void
ComboBoxEx_Invalidate(TComboBoxEx AObj);

void
ComboBoxEx_PaintTo(TComboBoxEx AObj, HDC DC, int32_t X, int32_t Y);

void
ComboBoxEx_RemoveControl(TComboBoxEx AObj, TControl AControl);

void
ComboBoxEx_Realign(TComboBoxEx AObj);

void
ComboBoxEx_Repaint(TComboBoxEx AObj);

void
ComboBoxEx_ScaleBy(TComboBoxEx AObj, int32_t M, int32_t D);

void
ComboBoxEx_ScrollBy(TComboBoxEx AObj, int32_t DeltaX, int32_t DeltaY);

void
ComboBoxEx_SetBounds(TComboBoxEx AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ComboBoxEx_SetFocus(TComboBoxEx AObj);

void
ComboBoxEx_Update(TComboBoxEx AObj);

void
ComboBoxEx_BringToFront(TComboBoxEx AObj);

TPoint
ComboBoxEx_ClientToScreen(TComboBoxEx AObj, TPoint Point);

TPoint
ComboBoxEx_ClientToParent(TComboBoxEx AObj, TPoint Point, TWinControl AParent);

BOOL
ComboBoxEx_Dragging(TComboBoxEx AObj);

BOOL
ComboBoxEx_HasParent(TComboBoxEx AObj);

void
ComboBoxEx_Hide(TComboBoxEx AObj);

intptr_t
ComboBoxEx_Perform(TComboBoxEx AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ComboBoxEx_Refresh(TComboBoxEx AObj);

TPoint
ComboBoxEx_ScreenToClient(TComboBoxEx AObj, TPoint Point);

TPoint
ComboBoxEx_ParentToClient(TComboBoxEx AObj, TPoint Point, TWinControl AParent);

void
ComboBoxEx_SendToBack(TComboBoxEx AObj);

void
ComboBoxEx_Show(TComboBoxEx AObj);

int32_t
ComboBoxEx_GetTextBuf(TComboBoxEx AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ComboBoxEx_GetTextLen(TComboBoxEx AObj);

void
ComboBoxEx_SetTextBuf(TComboBoxEx AObj, CChar char* Buffer);

TComponent
ComboBoxEx_FindComponent(TComboBoxEx AObj, CChar char* AName);

char*
ComboBoxEx_GetNamePath(TComboBoxEx AObj);

void
ComboBoxEx_Assign(TComboBoxEx AObj, TObject Source);

TClass
ComboBoxEx_ClassType(TComboBoxEx AObj);

char*
ComboBoxEx_ClassName(TComboBoxEx AObj);

int32_t
ComboBoxEx_InstanceSize(TComboBoxEx AObj);

BOOL
ComboBoxEx_InheritsFrom(TComboBoxEx AObj, TClass AClass);

BOOL
ComboBoxEx_Equals(TComboBoxEx AObj, TObject Obj);

int32_t
ComboBoxEx_GetHashCode(TComboBoxEx AObj);

char*
ComboBoxEx_ToString(TComboBoxEx AObj);

void
ComboBoxEx_AnchorToNeighbour(TComboBoxEx AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ComboBoxEx_AnchorParallel(TComboBoxEx AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ComboBoxEx_AnchorHorizontalCenterTo(TComboBoxEx AObj, TControl ASibling);

void
ComboBoxEx_AnchorVerticalCenterTo(TComboBoxEx AObj, TControl ASibling);

void
ComboBoxEx_AnchorSame(TComboBoxEx AObj, TAnchorKind ASide, TControl ASibling);

void
ComboBoxEx_AnchorAsAlign(TComboBoxEx AObj, TAlign ATheAlign, int32_t ASpace);

void
ComboBoxEx_AnchorClient(TComboBoxEx AObj, int32_t ASpace);

int32_t
ComboBoxEx_ScaleDesignToForm(TComboBoxEx AObj, int32_t ASize);

int32_t
ComboBoxEx_ScaleFormToDesign(TComboBoxEx AObj, int32_t ASize);

int32_t
ComboBoxEx_Scale96ToForm(TComboBoxEx AObj, int32_t ASize);

int32_t
ComboBoxEx_ScaleFormTo96(TComboBoxEx AObj, int32_t ASize);

int32_t
ComboBoxEx_Scale96ToFont(TComboBoxEx AObj, int32_t ASize);

int32_t
ComboBoxEx_ScaleFontTo96(TComboBoxEx AObj, int32_t ASize);

int32_t
ComboBoxEx_ScaleScreenToFont(TComboBoxEx AObj, int32_t ASize);

int32_t
ComboBoxEx_ScaleFontToScreen(TComboBoxEx AObj, int32_t ASize);

int32_t
ComboBoxEx_Scale96ToScreen(TComboBoxEx AObj, int32_t ASize);

int32_t
ComboBoxEx_ScaleScreenTo96(TComboBoxEx AObj, int32_t ASize);

void
ComboBoxEx_AutoAdjustLayout(TComboBoxEx AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ComboBoxEx_FixDesignFontsPPI(TComboBoxEx AObj, int32_t ADesignTimePPI);

void
ComboBoxEx_ScaleFontsPPI(TComboBoxEx AObj, int32_t AToPPI, double AProportion);

TAlign
ComboBoxEx_GetAlign(TComboBoxEx AObj);

void
ComboBoxEx_SetAlign(TComboBoxEx AObj, TAlign AValue);

TAutoCompleteOptions
ComboBoxEx_GetAutoCompleteOptions(TComboBoxEx AObj);

void
ComboBoxEx_SetAutoCompleteOptions(TComboBoxEx AObj, TAutoCompleteOptions AValue);

TComboExItems
ComboBoxEx_GetItemsEx(TComboBoxEx AObj);

void
ComboBoxEx_SetItemsEx(TComboBoxEx AObj, TComboExItems AValue);

TComboBoxExStyle
ComboBoxEx_GetStyle(TComboBoxEx AObj);

void
ComboBoxEx_SetStyle(TComboBoxEx AObj, TComboBoxExStyle AValue);

TComboBoxExStyles
ComboBoxEx_GetStyleEx(TComboBoxEx AObj);

void
ComboBoxEx_SetStyleEx(TComboBoxEx AObj, TComboBoxExStyles AValue);

TAction
ComboBoxEx_GetAction(TComboBoxEx AObj);

void
ComboBoxEx_SetAction(TComboBoxEx AObj, TAction AValue);

TAnchors
ComboBoxEx_GetAnchors(TComboBoxEx AObj);

void
ComboBoxEx_SetAnchors(TComboBoxEx AObj, TAnchors AValue);

TBiDiMode
ComboBoxEx_GetBiDiMode(TComboBoxEx AObj);

void
ComboBoxEx_SetBiDiMode(TComboBoxEx AObj, TBiDiMode AValue);

TColor
ComboBoxEx_GetColor(TComboBoxEx AObj);

void
ComboBoxEx_SetColor(TComboBoxEx AObj, TColor AValue);

TSizeConstraints
ComboBoxEx_GetConstraints(TComboBoxEx AObj);

void
ComboBoxEx_SetConstraints(TComboBoxEx AObj, TSizeConstraints AValue);

BOOL
ComboBoxEx_GetDoubleBuffered(TComboBoxEx AObj);

void
ComboBoxEx_SetDoubleBuffered(TComboBoxEx AObj, BOOL AValue);

TCursor
ComboBoxEx_GetDragCursor(TComboBoxEx AObj);

void
ComboBoxEx_SetDragCursor(TComboBoxEx AObj, TCursor AValue);

TDragKind
ComboBoxEx_GetDragKind(TComboBoxEx AObj);

void
ComboBoxEx_SetDragKind(TComboBoxEx AObj, TDragKind AValue);

TDragMode
ComboBoxEx_GetDragMode(TComboBoxEx AObj);

void
ComboBoxEx_SetDragMode(TComboBoxEx AObj, TDragMode AValue);

BOOL
ComboBoxEx_GetEnabled(TComboBoxEx AObj);

void
ComboBoxEx_SetEnabled(TComboBoxEx AObj, BOOL AValue);

TFont
ComboBoxEx_GetFont(TComboBoxEx AObj);

void
ComboBoxEx_SetFont(TComboBoxEx AObj, TFont AValue);

int32_t
ComboBoxEx_GetItemHeight(TComboBoxEx AObj);

void
ComboBoxEx_SetItemHeight(TComboBoxEx AObj, int32_t AValue);

int32_t
ComboBoxEx_GetMaxLength(TComboBoxEx AObj);

void
ComboBoxEx_SetMaxLength(TComboBoxEx AObj, int32_t AValue);

BOOL
ComboBoxEx_GetParentColor(TComboBoxEx AObj);

void
ComboBoxEx_SetParentColor(TComboBoxEx AObj, BOOL AValue);

BOOL
ComboBoxEx_GetParentDoubleBuffered(TComboBoxEx AObj);

void
ComboBoxEx_SetParentDoubleBuffered(TComboBoxEx AObj, BOOL AValue);

BOOL
ComboBoxEx_GetParentFont(TComboBoxEx AObj);

void
ComboBoxEx_SetParentFont(TComboBoxEx AObj, BOOL AValue);

BOOL
ComboBoxEx_GetParentShowHint(TComboBoxEx AObj);

void
ComboBoxEx_SetParentShowHint(TComboBoxEx AObj, BOOL AValue);

TPopupMenu
ComboBoxEx_GetPopupMenu(TComboBoxEx AObj);

void
ComboBoxEx_SetPopupMenu(TComboBoxEx AObj, TPopupMenu AValue);

BOOL
ComboBoxEx_GetShowHint(TComboBoxEx AObj);

void
ComboBoxEx_SetShowHint(TComboBoxEx AObj, BOOL AValue);

TTabOrder
ComboBoxEx_GetTabOrder(TComboBoxEx AObj);

void
ComboBoxEx_SetTabOrder(TComboBoxEx AObj, TTabOrder AValue);

BOOL
ComboBoxEx_GetTabStop(TComboBoxEx AObj);

void
ComboBoxEx_SetTabStop(TComboBoxEx AObj, BOOL AValue);

char*
ComboBoxEx_GetText(TComboBoxEx AObj);

void
ComboBoxEx_SetText(TComboBoxEx AObj, CChar char* AValue);

BOOL
ComboBoxEx_GetVisible(TComboBoxEx AObj);

void
ComboBoxEx_SetVisible(TComboBoxEx AObj, BOOL AValue);

void
ComboBoxEx_SetOnChange(TComboBoxEx AObj, TNotifyEvent AEventData);

void
ComboBoxEx_SetOnClick(TComboBoxEx AObj, TNotifyEvent AEventData);

void
ComboBoxEx_SetOnContextPopup(TComboBoxEx AObj, TContextPopupEvent AEventData);

void
ComboBoxEx_SetOnDblClick(TComboBoxEx AObj, TNotifyEvent AEventData);

void
ComboBoxEx_SetOnDragDrop(TComboBoxEx AObj, TDragDropEvent AEventData);

void
ComboBoxEx_SetOnDragOver(TComboBoxEx AObj, TDragOverEvent AEventData);

void
ComboBoxEx_SetOnDropDown(TComboBoxEx AObj, TNotifyEvent AEventData);

void
ComboBoxEx_SetOnEndDock(TComboBoxEx AObj, TEndDragEvent AEventData);

void
ComboBoxEx_SetOnEndDrag(TComboBoxEx AObj, TEndDragEvent AEventData);

void
ComboBoxEx_SetOnEnter(TComboBoxEx AObj, TNotifyEvent AEventData);

void
ComboBoxEx_SetOnExit(TComboBoxEx AObj, TNotifyEvent AEventData);

void
ComboBoxEx_SetOnKeyDown(TComboBoxEx AObj, TKeyEvent AEventData);

void
ComboBoxEx_SetOnKeyPress(TComboBoxEx AObj, TKeyPressEvent AEventData);

void
ComboBoxEx_SetOnKeyUp(TComboBoxEx AObj, TKeyEvent AEventData);

void
ComboBoxEx_SetOnMouseMove(TComboBoxEx AObj, TMouseMoveEvent AEventData);

void
ComboBoxEx_SetOnSelect(TComboBoxEx AObj, TNotifyEvent AEventData);

void
ComboBoxEx_SetOnStartDock(TComboBoxEx AObj, TStartDockEvent AEventData);

TImageList
ComboBoxEx_GetImages(TComboBoxEx AObj);

void
ComboBoxEx_SetImages(TComboBoxEx AObj, TImageList AValue);

int32_t
ComboBoxEx_GetDropDownCount(TComboBoxEx AObj);

void
ComboBoxEx_SetDropDownCount(TComboBoxEx AObj, int32_t AValue);

char*
ComboBoxEx_GetSelText(TComboBoxEx AObj);

void
ComboBoxEx_SetSelText(TComboBoxEx AObj, CChar char* AValue);

TCanvas
ComboBoxEx_GetCanvas(TComboBoxEx AObj);

BOOL
ComboBoxEx_GetDroppedDown(TComboBoxEx AObj);

void
ComboBoxEx_SetDroppedDown(TComboBoxEx AObj, BOOL AValue);

TStrings
ComboBoxEx_GetItems(TComboBoxEx AObj);

void
ComboBoxEx_SetItems(TComboBoxEx AObj, TStrings AValue);

int32_t
ComboBoxEx_GetSelLength(TComboBoxEx AObj);

void
ComboBoxEx_SetSelLength(TComboBoxEx AObj, int32_t AValue);

int32_t
ComboBoxEx_GetSelStart(TComboBoxEx AObj);

void
ComboBoxEx_SetSelStart(TComboBoxEx AObj, int32_t AValue);

int32_t
ComboBoxEx_GetItemIndex(TComboBoxEx AObj);

void
ComboBoxEx_SetItemIndex(TComboBoxEx AObj, int32_t AValue);

int32_t
ComboBoxEx_GetDockClientCount(TComboBoxEx AObj);

BOOL
ComboBoxEx_GetDockSite(TComboBoxEx AObj);

void
ComboBoxEx_SetDockSite(TComboBoxEx AObj, BOOL AValue);

BOOL
ComboBoxEx_GetMouseInClient(TComboBoxEx AObj);

int32_t
ComboBoxEx_GetVisibleDockClientCount(TComboBoxEx AObj);

TBrush
ComboBoxEx_GetBrush(TComboBoxEx AObj);

int32_t
ComboBoxEx_GetControlCount(TComboBoxEx AObj);

HWND
ComboBoxEx_GetHandle(TComboBoxEx AObj);

HWND
ComboBoxEx_GetParentWindow(TComboBoxEx AObj);

void
ComboBoxEx_SetParentWindow(TComboBoxEx AObj, HWND AValue);

BOOL
ComboBoxEx_GetShowing(TComboBoxEx AObj);

BOOL
ComboBoxEx_GetUseDockManager(TComboBoxEx AObj);

void
ComboBoxEx_SetUseDockManager(TComboBoxEx AObj, BOOL AValue);

TRect
ComboBoxEx_GetBoundsRect(TComboBoxEx AObj);

void
ComboBoxEx_SetBoundsRect(TComboBoxEx AObj, TRect AValue);

int32_t
ComboBoxEx_GetClientHeight(TComboBoxEx AObj);

void
ComboBoxEx_SetClientHeight(TComboBoxEx AObj, int32_t AValue);

TPoint
ComboBoxEx_GetClientOrigin(TComboBoxEx AObj);

TRect
ComboBoxEx_GetClientRect(TComboBoxEx AObj);

int32_t
ComboBoxEx_GetClientWidth(TComboBoxEx AObj);

void
ComboBoxEx_SetClientWidth(TComboBoxEx AObj, int32_t AValue);

TControlState
ComboBoxEx_GetControlState(TComboBoxEx AObj);

void
ComboBoxEx_SetControlState(TComboBoxEx AObj, TControlState AValue);

TControlStyle
ComboBoxEx_GetControlStyle(TComboBoxEx AObj);

void
ComboBoxEx_SetControlStyle(TComboBoxEx AObj, TControlStyle AValue);

BOOL
ComboBoxEx_GetFloating(TComboBoxEx AObj);

TWinControl
ComboBoxEx_GetParent(TComboBoxEx AObj);

void
ComboBoxEx_SetParent(TComboBoxEx AObj, TWinControl AValue);

int32_t
ComboBoxEx_GetLeft(TComboBoxEx AObj);

void
ComboBoxEx_SetLeft(TComboBoxEx AObj, int32_t AValue);

int32_t
ComboBoxEx_GetTop(TComboBoxEx AObj);

void
ComboBoxEx_SetTop(TComboBoxEx AObj, int32_t AValue);

int32_t
ComboBoxEx_GetWidth(TComboBoxEx AObj);

void
ComboBoxEx_SetWidth(TComboBoxEx AObj, int32_t AValue);

int32_t
ComboBoxEx_GetHeight(TComboBoxEx AObj);

void
ComboBoxEx_SetHeight(TComboBoxEx AObj, int32_t AValue);

TCursor
ComboBoxEx_GetCursor(TComboBoxEx AObj);

void
ComboBoxEx_SetCursor(TComboBoxEx AObj, TCursor AValue);

char*
ComboBoxEx_GetHint(TComboBoxEx AObj);

void
ComboBoxEx_SetHint(TComboBoxEx AObj, CChar char* AValue);

int32_t
ComboBoxEx_GetComponentCount(TComboBoxEx AObj);

int32_t
ComboBoxEx_GetComponentIndex(TComboBoxEx AObj);

void
ComboBoxEx_SetComponentIndex(TComboBoxEx AObj, int32_t AValue);

TComponent
ComboBoxEx_GetOwner(TComboBoxEx AObj);

char*
ComboBoxEx_GetName(TComboBoxEx AObj);

void
ComboBoxEx_SetName(TComboBoxEx AObj, CChar char* AValue);

intptr_t
ComboBoxEx_GetTag(TComboBoxEx AObj);

void
ComboBoxEx_SetTag(TComboBoxEx AObj, intptr_t AValue);

TAnchorSide
ComboBoxEx_GetAnchorSideLeft(TComboBoxEx AObj);

void
ComboBoxEx_SetAnchorSideLeft(TComboBoxEx AObj, TAnchorSide AValue);

TAnchorSide
ComboBoxEx_GetAnchorSideTop(TComboBoxEx AObj);

void
ComboBoxEx_SetAnchorSideTop(TComboBoxEx AObj, TAnchorSide AValue);

TAnchorSide
ComboBoxEx_GetAnchorSideRight(TComboBoxEx AObj);

void
ComboBoxEx_SetAnchorSideRight(TComboBoxEx AObj, TAnchorSide AValue);

TAnchorSide
ComboBoxEx_GetAnchorSideBottom(TComboBoxEx AObj);

void
ComboBoxEx_SetAnchorSideBottom(TComboBoxEx AObj, TAnchorSide AValue);

TControlChildSizing
ComboBoxEx_GetChildSizing(TComboBoxEx AObj);

void
ComboBoxEx_SetChildSizing(TComboBoxEx AObj, TControlChildSizing AValue);

TControlBorderSpacing
ComboBoxEx_GetBorderSpacing(TComboBoxEx AObj);

void
ComboBoxEx_SetBorderSpacing(TComboBoxEx AObj, TControlBorderSpacing AValue);

TControl
ComboBoxEx_GetDockClients(TComboBoxEx AObj, int32_t Index);

TControl
ComboBoxEx_GetControls(TComboBoxEx AObj, int32_t Index);

TComponent
ComboBoxEx_GetComponents(TComboBoxEx AObj, int32_t AIndex);

TAnchorSide
ComboBoxEx_GetAnchorSide(TComboBoxEx AObj, TAnchorKind AKind);

TClass
ComboBoxEx_StaticClassType();

// -------------------TComboExItems-------------------

TComboExItem
ComboExItems_Add(TComboExItems AObj);

TComboExItem
ComboExItems_AddItem(TComboExItems AObj, CChar char* Caption, int32_t ImageIndex, int32_t SelectedImageIndex, int32_t OverlayImageIndex, int32_t Indent, void* Data);

TComboExItem
ComboExItems_Insert(TComboExItems AObj, int32_t Index);

TObject
ComboExItems_Owner(TComboExItems AObj);

void
ComboExItems_Assign(TComboExItems AObj, TObject Source);

void
ComboExItems_BeginUpdate(TComboExItems AObj);

void
ComboExItems_Clear(TComboExItems AObj);

void
ComboExItems_Delete(TComboExItems AObj, int32_t Index);

void
ComboExItems_EndUpdate(TComboExItems AObj);

TCollectionItem
ComboExItems_FindItemID(TComboExItems AObj, int32_t ID);

char*
ComboExItems_GetNamePath(TComboExItems AObj);

TClass
ComboExItems_ClassType(TComboExItems AObj);

char*
ComboExItems_ClassName(TComboExItems AObj);

int32_t
ComboExItems_InstanceSize(TComboExItems AObj);

BOOL
ComboExItems_InheritsFrom(TComboExItems AObj, TClass AClass);

BOOL
ComboExItems_Equals(TComboExItems AObj, TObject Obj);

int32_t
ComboExItems_GetHashCode(TComboExItems AObj);

char*
ComboExItems_ToString(TComboExItems AObj);

int32_t
ComboExItems_GetCount(TComboExItems AObj);

TComboExItem
ComboExItems_GetComboItems(TComboExItems AObj, int32_t Index);

TClass
ComboExItems_StaticClassType();

// -------------------TComboExItem-------------------

void
ComboExItem_Assign(TComboExItem AObj, TObject Source);

char*
ComboExItem_GetNamePath(TComboExItem AObj);

TClass
ComboExItem_ClassType(TComboExItem AObj);

char*
ComboExItem_ClassName(TComboExItem AObj);

int32_t
ComboExItem_InstanceSize(TComboExItem AObj);

BOOL
ComboExItem_InheritsFrom(TComboExItem AObj, TClass AClass);

BOOL
ComboExItem_Equals(TComboExItem AObj, TObject Obj);

int32_t
ComboExItem_GetHashCode(TComboExItem AObj);

char*
ComboExItem_ToString(TComboExItem AObj);

int32_t
ComboExItem_GetIndent(TComboExItem AObj);

void
ComboExItem_SetIndent(TComboExItem AObj, int32_t AValue);

int32_t
ComboExItem_GetOverlayImageIndex(TComboExItem AObj);

void
ComboExItem_SetOverlayImageIndex(TComboExItem AObj, int32_t AValue);

void*
ComboExItem_GetData(TComboExItem AObj);

void
ComboExItem_SetData(TComboExItem AObj, void* AValue);

char*
ComboExItem_GetCaption(TComboExItem AObj);

void
ComboExItem_SetCaption(TComboExItem AObj, CChar char* AValue);

int32_t
ComboExItem_GetImageIndex(TComboExItem AObj);

void
ComboExItem_SetImageIndex(TComboExItem AObj, int32_t AValue);

TCollection
ComboExItem_GetCollection(TComboExItem AObj);

void
ComboExItem_SetCollection(TComboExItem AObj, TCollection AValue);

int32_t
ComboExItem_GetIndex(TComboExItem AObj);

void
ComboExItem_SetIndex(TComboExItem AObj, int32_t AValue);

char*
ComboExItem_GetDisplayName(TComboExItem AObj);

void
ComboExItem_SetDisplayName(TComboExItem AObj, CChar char* AValue);

TClass
ComboExItem_StaticClassType();

// -------------------TFrame-------------------

TFrame
Frame_Create(TComponent AOwner);

void
Frame_Free(TFrame AObj);

void
Frame_ScrollInView(TFrame AObj, TControl AControl);

BOOL
Frame_CanFocus(TFrame AObj);

BOOL
Frame_ContainsControl(TFrame AObj, TControl Control);

TControl
Frame_ControlAtPos(TFrame AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
Frame_DisableAlign(TFrame AObj);

void
Frame_EnableAlign(TFrame AObj);

TControl
Frame_FindChildControl(TFrame AObj, CChar char* ControlName);

void
Frame_FlipChildren(TFrame AObj, BOOL AllLevels);

BOOL
Frame_Focused(TFrame AObj);

BOOL
Frame_HandleAllocated(TFrame AObj);

void
Frame_InsertControl(TFrame AObj, TControl AControl);

void
Frame_Invalidate(TFrame AObj);

void
Frame_PaintTo(TFrame AObj, HDC DC, int32_t X, int32_t Y);

void
Frame_RemoveControl(TFrame AObj, TControl AControl);

void
Frame_Realign(TFrame AObj);

void
Frame_Repaint(TFrame AObj);

void
Frame_ScaleBy(TFrame AObj, int32_t M, int32_t D);

void
Frame_ScrollBy(TFrame AObj, int32_t DeltaX, int32_t DeltaY);

void
Frame_SetBounds(TFrame AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
Frame_SetFocus(TFrame AObj);

void
Frame_Update(TFrame AObj);

void
Frame_BringToFront(TFrame AObj);

TPoint
Frame_ClientToScreen(TFrame AObj, TPoint Point);

TPoint
Frame_ClientToParent(TFrame AObj, TPoint Point, TWinControl AParent);

BOOL
Frame_Dragging(TFrame AObj);

BOOL
Frame_HasParent(TFrame AObj);

void
Frame_Hide(TFrame AObj);

intptr_t
Frame_Perform(TFrame AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
Frame_Refresh(TFrame AObj);

TPoint
Frame_ScreenToClient(TFrame AObj, TPoint Point);

TPoint
Frame_ParentToClient(TFrame AObj, TPoint Point, TWinControl AParent);

void
Frame_SendToBack(TFrame AObj);

void
Frame_Show(TFrame AObj);

int32_t
Frame_GetTextBuf(TFrame AObj, CChar char* Buffer, int32_t BufSize);

int32_t
Frame_GetTextLen(TFrame AObj);

void
Frame_SetTextBuf(TFrame AObj, CChar char* Buffer);

TComponent
Frame_FindComponent(TFrame AObj, CChar char* AName);

char*
Frame_GetNamePath(TFrame AObj);

void
Frame_Assign(TFrame AObj, TObject Source);

TClass
Frame_ClassType(TFrame AObj);

char*
Frame_ClassName(TFrame AObj);

int32_t
Frame_InstanceSize(TFrame AObj);

BOOL
Frame_InheritsFrom(TFrame AObj, TClass AClass);

BOOL
Frame_Equals(TFrame AObj, TObject Obj);

int32_t
Frame_GetHashCode(TFrame AObj);

char*
Frame_ToString(TFrame AObj);

void
Frame_AnchorToNeighbour(TFrame AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Frame_AnchorParallel(TFrame AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
Frame_AnchorHorizontalCenterTo(TFrame AObj, TControl ASibling);

void
Frame_AnchorVerticalCenterTo(TFrame AObj, TControl ASibling);

void
Frame_AnchorSame(TFrame AObj, TAnchorKind ASide, TControl ASibling);

void
Frame_AnchorAsAlign(TFrame AObj, TAlign ATheAlign, int32_t ASpace);

void
Frame_AnchorClient(TFrame AObj, int32_t ASpace);

int32_t
Frame_ScaleDesignToForm(TFrame AObj, int32_t ASize);

int32_t
Frame_ScaleFormToDesign(TFrame AObj, int32_t ASize);

int32_t
Frame_Scale96ToForm(TFrame AObj, int32_t ASize);

int32_t
Frame_ScaleFormTo96(TFrame AObj, int32_t ASize);

int32_t
Frame_Scale96ToFont(TFrame AObj, int32_t ASize);

int32_t
Frame_ScaleFontTo96(TFrame AObj, int32_t ASize);

int32_t
Frame_ScaleScreenToFont(TFrame AObj, int32_t ASize);

int32_t
Frame_ScaleFontToScreen(TFrame AObj, int32_t ASize);

int32_t
Frame_Scale96ToScreen(TFrame AObj, int32_t ASize);

int32_t
Frame_ScaleScreenTo96(TFrame AObj, int32_t ASize);

void
Frame_AutoAdjustLayout(TFrame AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
Frame_FixDesignFontsPPI(TFrame AObj, int32_t ADesignTimePPI);

void
Frame_ScaleFontsPPI(TFrame AObj, int32_t AToPPI, double AProportion);

int32_t
Frame_GetDesignTimePPI(TFrame AObj);

void
Frame_SetDesignTimePPI(TFrame AObj, int32_t AValue);

TAlign
Frame_GetAlign(TFrame AObj);

void
Frame_SetAlign(TFrame AObj, TAlign AValue);

TAnchors
Frame_GetAnchors(TFrame AObj);

void
Frame_SetAnchors(TFrame AObj, TAnchors AValue);

BOOL
Frame_GetAutoScroll(TFrame AObj);

void
Frame_SetAutoScroll(TFrame AObj, BOOL AValue);

BOOL
Frame_GetAutoSize(TFrame AObj);

void
Frame_SetAutoSize(TFrame AObj, BOOL AValue);

TBiDiMode
Frame_GetBiDiMode(TFrame AObj);

void
Frame_SetBiDiMode(TFrame AObj, TBiDiMode AValue);

TSizeConstraints
Frame_GetConstraints(TFrame AObj);

void
Frame_SetConstraints(TFrame AObj, TSizeConstraints AValue);

BOOL
Frame_GetDockSite(TFrame AObj);

void
Frame_SetDockSite(TFrame AObj, BOOL AValue);

BOOL
Frame_GetDoubleBuffered(TFrame AObj);

void
Frame_SetDoubleBuffered(TFrame AObj, BOOL AValue);

TCursor
Frame_GetDragCursor(TFrame AObj);

void
Frame_SetDragCursor(TFrame AObj, TCursor AValue);

TDragKind
Frame_GetDragKind(TFrame AObj);

void
Frame_SetDragKind(TFrame AObj, TDragKind AValue);

TDragMode
Frame_GetDragMode(TFrame AObj);

void
Frame_SetDragMode(TFrame AObj, TDragMode AValue);

BOOL
Frame_GetEnabled(TFrame AObj);

void
Frame_SetEnabled(TFrame AObj, BOOL AValue);

TColor
Frame_GetColor(TFrame AObj);

void
Frame_SetColor(TFrame AObj, TColor AValue);

TFont
Frame_GetFont(TFrame AObj);

void
Frame_SetFont(TFrame AObj, TFont AValue);

BOOL
Frame_GetParentBackground(TFrame AObj);

void
Frame_SetParentBackground(TFrame AObj, BOOL AValue);

BOOL
Frame_GetParentColor(TFrame AObj);

void
Frame_SetParentColor(TFrame AObj, BOOL AValue);

BOOL
Frame_GetParentDoubleBuffered(TFrame AObj);

void
Frame_SetParentDoubleBuffered(TFrame AObj, BOOL AValue);

BOOL
Frame_GetParentFont(TFrame AObj);

void
Frame_SetParentFont(TFrame AObj, BOOL AValue);

BOOL
Frame_GetParentShowHint(TFrame AObj);

void
Frame_SetParentShowHint(TFrame AObj, BOOL AValue);

TPopupMenu
Frame_GetPopupMenu(TFrame AObj);

void
Frame_SetPopupMenu(TFrame AObj, TPopupMenu AValue);

BOOL
Frame_GetShowHint(TFrame AObj);

void
Frame_SetShowHint(TFrame AObj, BOOL AValue);

TTabOrder
Frame_GetTabOrder(TFrame AObj);

void
Frame_SetTabOrder(TFrame AObj, TTabOrder AValue);

BOOL
Frame_GetTabStop(TFrame AObj);

void
Frame_SetTabStop(TFrame AObj, BOOL AValue);

BOOL
Frame_GetVisible(TFrame AObj);

void
Frame_SetVisible(TFrame AObj, BOOL AValue);

void
Frame_SetOnAlignPosition(TFrame AObj, TAlignPositionEvent AEventData);

void
Frame_SetOnClick(TFrame AObj, TNotifyEvent AEventData);

void
Frame_SetOnConstrainedResize(TFrame AObj, TConstrainedResizeEvent AEventData);

void
Frame_SetOnContextPopup(TFrame AObj, TContextPopupEvent AEventData);

void
Frame_SetOnDblClick(TFrame AObj, TNotifyEvent AEventData);

void
Frame_SetOnDockDrop(TFrame AObj, TDockDropEvent AEventData);

void
Frame_SetOnDragDrop(TFrame AObj, TDragDropEvent AEventData);

void
Frame_SetOnDragOver(TFrame AObj, TDragOverEvent AEventData);

void
Frame_SetOnEndDock(TFrame AObj, TEndDragEvent AEventData);

void
Frame_SetOnEndDrag(TFrame AObj, TEndDragEvent AEventData);

void
Frame_SetOnEnter(TFrame AObj, TNotifyEvent AEventData);

void
Frame_SetOnExit(TFrame AObj, TNotifyEvent AEventData);

void
Frame_SetOnGetSiteInfo(TFrame AObj, TGetSiteInfoEvent AEventData);

void
Frame_SetOnMouseDown(TFrame AObj, TMouseEvent AEventData);

void
Frame_SetOnMouseEnter(TFrame AObj, TNotifyEvent AEventData);

void
Frame_SetOnMouseLeave(TFrame AObj, TNotifyEvent AEventData);

void
Frame_SetOnMouseMove(TFrame AObj, TMouseMoveEvent AEventData);

void
Frame_SetOnMouseUp(TFrame AObj, TMouseEvent AEventData);

void
Frame_SetOnMouseWheel(TFrame AObj, TMouseWheelEvent AEventData);

void
Frame_SetOnMouseWheelDown(TFrame AObj, TMouseWheelUpDownEvent AEventData);

void
Frame_SetOnMouseWheelUp(TFrame AObj, TMouseWheelUpDownEvent AEventData);

void
Frame_SetOnResize(TFrame AObj, TNotifyEvent AEventData);

void
Frame_SetOnStartDock(TFrame AObj, TStartDockEvent AEventData);

void
Frame_SetOnUnDock(TFrame AObj, TUnDockEvent AEventData);

TControlScrollBar
Frame_GetHorzScrollBar(TFrame AObj);

void
Frame_SetHorzScrollBar(TFrame AObj, TControlScrollBar AValue);

TControlScrollBar
Frame_GetVertScrollBar(TFrame AObj);

void
Frame_SetVertScrollBar(TFrame AObj, TControlScrollBar AValue);

int32_t
Frame_GetDockClientCount(TFrame AObj);

BOOL
Frame_GetMouseInClient(TFrame AObj);

int32_t
Frame_GetVisibleDockClientCount(TFrame AObj);

TBrush
Frame_GetBrush(TFrame AObj);

int32_t
Frame_GetControlCount(TFrame AObj);

HWND
Frame_GetHandle(TFrame AObj);

HWND
Frame_GetParentWindow(TFrame AObj);

void
Frame_SetParentWindow(TFrame AObj, HWND AValue);

BOOL
Frame_GetShowing(TFrame AObj);

BOOL
Frame_GetUseDockManager(TFrame AObj);

void
Frame_SetUseDockManager(TFrame AObj, BOOL AValue);

TAction
Frame_GetAction(TFrame AObj);

void
Frame_SetAction(TFrame AObj, TAction AValue);

TRect
Frame_GetBoundsRect(TFrame AObj);

void
Frame_SetBoundsRect(TFrame AObj, TRect AValue);

int32_t
Frame_GetClientHeight(TFrame AObj);

void
Frame_SetClientHeight(TFrame AObj, int32_t AValue);

TPoint
Frame_GetClientOrigin(TFrame AObj);

TRect
Frame_GetClientRect(TFrame AObj);

int32_t
Frame_GetClientWidth(TFrame AObj);

void
Frame_SetClientWidth(TFrame AObj, int32_t AValue);

TControlState
Frame_GetControlState(TFrame AObj);

void
Frame_SetControlState(TFrame AObj, TControlState AValue);

TControlStyle
Frame_GetControlStyle(TFrame AObj);

void
Frame_SetControlStyle(TFrame AObj, TControlStyle AValue);

BOOL
Frame_GetFloating(TFrame AObj);

TWinControl
Frame_GetParent(TFrame AObj);

void
Frame_SetParent(TFrame AObj, TWinControl AValue);

int32_t
Frame_GetLeft(TFrame AObj);

void
Frame_SetLeft(TFrame AObj, int32_t AValue);

int32_t
Frame_GetTop(TFrame AObj);

void
Frame_SetTop(TFrame AObj, int32_t AValue);

int32_t
Frame_GetWidth(TFrame AObj);

void
Frame_SetWidth(TFrame AObj, int32_t AValue);

int32_t
Frame_GetHeight(TFrame AObj);

void
Frame_SetHeight(TFrame AObj, int32_t AValue);

TCursor
Frame_GetCursor(TFrame AObj);

void
Frame_SetCursor(TFrame AObj, TCursor AValue);

char*
Frame_GetHint(TFrame AObj);

void
Frame_SetHint(TFrame AObj, CChar char* AValue);

int32_t
Frame_GetComponentCount(TFrame AObj);

int32_t
Frame_GetComponentIndex(TFrame AObj);

void
Frame_SetComponentIndex(TFrame AObj, int32_t AValue);

TComponent
Frame_GetOwner(TFrame AObj);

char*
Frame_GetName(TFrame AObj);

void
Frame_SetName(TFrame AObj, CChar char* AValue);

intptr_t
Frame_GetTag(TFrame AObj);

void
Frame_SetTag(TFrame AObj, intptr_t AValue);

TAnchorSide
Frame_GetAnchorSideLeft(TFrame AObj);

void
Frame_SetAnchorSideLeft(TFrame AObj, TAnchorSide AValue);

TAnchorSide
Frame_GetAnchorSideTop(TFrame AObj);

void
Frame_SetAnchorSideTop(TFrame AObj, TAnchorSide AValue);

TAnchorSide
Frame_GetAnchorSideRight(TFrame AObj);

void
Frame_SetAnchorSideRight(TFrame AObj, TAnchorSide AValue);

TAnchorSide
Frame_GetAnchorSideBottom(TFrame AObj);

void
Frame_SetAnchorSideBottom(TFrame AObj, TAnchorSide AValue);

TControlChildSizing
Frame_GetChildSizing(TFrame AObj);

void
Frame_SetChildSizing(TFrame AObj, TControlChildSizing AValue);

TControlBorderSpacing
Frame_GetBorderSpacing(TFrame AObj);

void
Frame_SetBorderSpacing(TFrame AObj, TControlBorderSpacing AValue);

TControl
Frame_GetDockClients(TFrame AObj, int32_t Index);

TControl
Frame_GetControls(TFrame AObj, int32_t Index);

TComponent
Frame_GetComponents(TFrame AObj, int32_t AIndex);

TAnchorSide
Frame_GetAnchorSide(TFrame AObj, TAnchorKind AKind);

TClass
Frame_StaticClassType();

// -------------------TControlScrollBar-------------------

void
ControlScrollBar_Assign(TControlScrollBar AObj, TObject Source);

BOOL
ControlScrollBar_IsScrollBarVisible(TControlScrollBar AObj);

char*
ControlScrollBar_GetNamePath(TControlScrollBar AObj);

TClass
ControlScrollBar_ClassType(TControlScrollBar AObj);

char*
ControlScrollBar_ClassName(TControlScrollBar AObj);

int32_t
ControlScrollBar_InstanceSize(TControlScrollBar AObj);

BOOL
ControlScrollBar_InheritsFrom(TControlScrollBar AObj, TClass AClass);

BOOL
ControlScrollBar_Equals(TControlScrollBar AObj, TObject Obj);

int32_t
ControlScrollBar_GetHashCode(TControlScrollBar AObj);

char*
ControlScrollBar_ToString(TControlScrollBar AObj);

TScrollBarKind
ControlScrollBar_GetKind(TControlScrollBar AObj);

int32_t
ControlScrollBar_GetScrollPos(TControlScrollBar AObj);

TScrollBarInc
ControlScrollBar_GetIncrement(TControlScrollBar AObj);

void
ControlScrollBar_SetIncrement(TControlScrollBar AObj, TScrollBarInc AValue);

int32_t
ControlScrollBar_GetPosition(TControlScrollBar AObj);

void
ControlScrollBar_SetPosition(TControlScrollBar AObj, int32_t AValue);

int32_t
ControlScrollBar_GetRange(TControlScrollBar AObj);

void
ControlScrollBar_SetRange(TControlScrollBar AObj, int32_t AValue);

BOOL
ControlScrollBar_GetSmooth(TControlScrollBar AObj);

void
ControlScrollBar_SetSmooth(TControlScrollBar AObj, BOOL AValue);

BOOL
ControlScrollBar_GetTracking(TControlScrollBar AObj);

void
ControlScrollBar_SetTracking(TControlScrollBar AObj, BOOL AValue);

BOOL
ControlScrollBar_GetVisible(TControlScrollBar AObj);

void
ControlScrollBar_SetVisible(TControlScrollBar AObj, BOOL AValue);

TClass
ControlScrollBar_StaticClassType();

// -------------------TSizeConstraints-------------------

void
SizeConstraints_Assign(TSizeConstraints AObj, TObject Source);

char*
SizeConstraints_GetNamePath(TSizeConstraints AObj);

TClass
SizeConstraints_ClassType(TSizeConstraints AObj);

char*
SizeConstraints_ClassName(TSizeConstraints AObj);

int32_t
SizeConstraints_InstanceSize(TSizeConstraints AObj);

BOOL
SizeConstraints_InheritsFrom(TSizeConstraints AObj, TClass AClass);

BOOL
SizeConstraints_Equals(TSizeConstraints AObj, TObject Obj);

int32_t
SizeConstraints_GetHashCode(TSizeConstraints AObj);

char*
SizeConstraints_ToString(TSizeConstraints AObj);

void
SizeConstraints_SetOnChange(TSizeConstraints AObj, TNotifyEvent AEventData);

TConstraintSize
SizeConstraints_GetMaxHeight(TSizeConstraints AObj);

void
SizeConstraints_SetMaxHeight(TSizeConstraints AObj, TConstraintSize AValue);

TConstraintSize
SizeConstraints_GetMaxWidth(TSizeConstraints AObj);

void
SizeConstraints_SetMaxWidth(TSizeConstraints AObj, TConstraintSize AValue);

TConstraintSize
SizeConstraints_GetMinHeight(TSizeConstraints AObj);

void
SizeConstraints_SetMinHeight(TSizeConstraints AObj, TConstraintSize AValue);

TConstraintSize
SizeConstraints_GetMinWidth(TSizeConstraints AObj);

void
SizeConstraints_SetMinWidth(TSizeConstraints AObj, TConstraintSize AValue);

TClass
SizeConstraints_StaticClassType();

// -------------------TXButton-------------------

TXButton
XButton_Create(TComponent AOwner);

void
XButton_Free(TXButton AObj);

void
XButton_BringToFront(TXButton AObj);

TPoint
XButton_ClientToScreen(TXButton AObj, TPoint Point);

TPoint
XButton_ClientToParent(TXButton AObj, TPoint Point, TWinControl AParent);

BOOL
XButton_Dragging(TXButton AObj);

BOOL
XButton_HasParent(TXButton AObj);

void
XButton_Hide(TXButton AObj);

void
XButton_Invalidate(TXButton AObj);

intptr_t
XButton_Perform(TXButton AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
XButton_Refresh(TXButton AObj);

void
XButton_Repaint(TXButton AObj);

TPoint
XButton_ScreenToClient(TXButton AObj, TPoint Point);

TPoint
XButton_ParentToClient(TXButton AObj, TPoint Point, TWinControl AParent);

void
XButton_SendToBack(TXButton AObj);

void
XButton_SetBounds(TXButton AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
XButton_Show(TXButton AObj);

void
XButton_Update(TXButton AObj);

int32_t
XButton_GetTextBuf(TXButton AObj, CChar char* Buffer, int32_t BufSize);

int32_t
XButton_GetTextLen(TXButton AObj);

void
XButton_SetTextBuf(TXButton AObj, CChar char* Buffer);

TComponent
XButton_FindComponent(TXButton AObj, CChar char* AName);

char*
XButton_GetNamePath(TXButton AObj);

void
XButton_Assign(TXButton AObj, TObject Source);

TClass
XButton_ClassType(TXButton AObj);

char*
XButton_ClassName(TXButton AObj);

int32_t
XButton_InstanceSize(TXButton AObj);

BOOL
XButton_InheritsFrom(TXButton AObj, TClass AClass);

BOOL
XButton_Equals(TXButton AObj, TObject Obj);

int32_t
XButton_GetHashCode(TXButton AObj);

char*
XButton_ToString(TXButton AObj);

void
XButton_AnchorToNeighbour(TXButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
XButton_AnchorParallel(TXButton AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
XButton_AnchorHorizontalCenterTo(TXButton AObj, TControl ASibling);

void
XButton_AnchorVerticalCenterTo(TXButton AObj, TControl ASibling);

void
XButton_AnchorSame(TXButton AObj, TAnchorKind ASide, TControl ASibling);

void
XButton_AnchorAsAlign(TXButton AObj, TAlign ATheAlign, int32_t ASpace);

void
XButton_AnchorClient(TXButton AObj, int32_t ASpace);

int32_t
XButton_ScaleDesignToForm(TXButton AObj, int32_t ASize);

int32_t
XButton_ScaleFormToDesign(TXButton AObj, int32_t ASize);

int32_t
XButton_Scale96ToForm(TXButton AObj, int32_t ASize);

int32_t
XButton_ScaleFormTo96(TXButton AObj, int32_t ASize);

int32_t
XButton_Scale96ToFont(TXButton AObj, int32_t ASize);

int32_t
XButton_ScaleFontTo96(TXButton AObj, int32_t ASize);

int32_t
XButton_ScaleScreenToFont(TXButton AObj, int32_t ASize);

int32_t
XButton_ScaleFontToScreen(TXButton AObj, int32_t ASize);

int32_t
XButton_Scale96ToScreen(TXButton AObj, int32_t ASize);

int32_t
XButton_ScaleScreenTo96(TXButton AObj, int32_t ASize);

void
XButton_AutoAdjustLayout(TXButton AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
XButton_FixDesignFontsPPI(TXButton AObj, int32_t ADesignTimePPI);

void
XButton_ScaleFontsPPI(TXButton AObj, int32_t AToPPI, double AProportion);

char*
XButton_GetCaption(TXButton AObj);

void
XButton_SetCaption(TXButton AObj, CChar char* AValue);

BOOL
XButton_GetShowCaption(TXButton AObj);

void
XButton_SetShowCaption(TXButton AObj, BOOL AValue);

TColor
XButton_GetBackColor(TXButton AObj);

void
XButton_SetBackColor(TXButton AObj, TColor AValue);

TColor
XButton_GetHoverColor(TXButton AObj);

void
XButton_SetHoverColor(TXButton AObj, TColor AValue);

TColor
XButton_GetDownColor(TXButton AObj);

void
XButton_SetDownColor(TXButton AObj, TColor AValue);

int32_t
XButton_GetBorderWidth(TXButton AObj);

void
XButton_SetBorderWidth(TXButton AObj, int32_t AValue);

TColor
XButton_GetBorderColor(TXButton AObj);

void
XButton_SetBorderColor(TXButton AObj, TColor AValue);

TPicture
XButton_GetPicture(TXButton AObj);

void
XButton_SetPicture(TXButton AObj, TPicture AValue);

TDrawImageMode
XButton_GetDrawMode(TXButton AObj);

void
XButton_SetDrawMode(TXButton AObj, TDrawImageMode AValue);

TColor
XButton_GetNormalFontColor(TXButton AObj);

void
XButton_SetNormalFontColor(TXButton AObj, TColor AValue);

TColor
XButton_GetDownFontColor(TXButton AObj);

void
XButton_SetDownFontColor(TXButton AObj, TColor AValue);

TColor
XButton_GetHoverFontColor(TXButton AObj);

void
XButton_SetHoverFontColor(TXButton AObj, TColor AValue);

TAction
XButton_GetAction(TXButton AObj);

void
XButton_SetAction(TXButton AObj, TAction AValue);

TAlign
XButton_GetAlign(TXButton AObj);

void
XButton_SetAlign(TXButton AObj, TAlign AValue);

TAnchors
XButton_GetAnchors(TXButton AObj);

void
XButton_SetAnchors(TXButton AObj, TAnchors AValue);

TBiDiMode
XButton_GetBiDiMode(TXButton AObj);

void
XButton_SetBiDiMode(TXButton AObj, TBiDiMode AValue);

TSizeConstraints
XButton_GetConstraints(TXButton AObj);

void
XButton_SetConstraints(TXButton AObj, TSizeConstraints AValue);

BOOL
XButton_GetEnabled(TXButton AObj);

void
XButton_SetEnabled(TXButton AObj, BOOL AValue);

TFont
XButton_GetFont(TXButton AObj);

void
XButton_SetFont(TXButton AObj, TFont AValue);

BOOL
XButton_GetParentFont(TXButton AObj);

void
XButton_SetParentFont(TXButton AObj, BOOL AValue);

BOOL
XButton_GetParentShowHint(TXButton AObj);

void
XButton_SetParentShowHint(TXButton AObj, BOOL AValue);

TPopupMenu
XButton_GetPopupMenu(TXButton AObj);

void
XButton_SetPopupMenu(TXButton AObj, TPopupMenu AValue);

BOOL
XButton_GetShowHint(TXButton AObj);

void
XButton_SetShowHint(TXButton AObj, BOOL AValue);

BOOL
XButton_GetVisible(TXButton AObj);

void
XButton_SetVisible(TXButton AObj, BOOL AValue);

void
XButton_SetOnClick(TXButton AObj, TNotifyEvent AEventData);

void
XButton_SetOnDblClick(TXButton AObj, TNotifyEvent AEventData);

void
XButton_SetOnMouseDown(TXButton AObj, TMouseEvent AEventData);

void
XButton_SetOnMouseEnter(TXButton AObj, TNotifyEvent AEventData);

void
XButton_SetOnMouseLeave(TXButton AObj, TNotifyEvent AEventData);

void
XButton_SetOnMouseMove(TXButton AObj, TMouseMoveEvent AEventData);

void
XButton_SetOnMouseUp(TXButton AObj, TMouseEvent AEventData);

TRect
XButton_GetBoundsRect(TXButton AObj);

void
XButton_SetBoundsRect(TXButton AObj, TRect AValue);

int32_t
XButton_GetClientHeight(TXButton AObj);

void
XButton_SetClientHeight(TXButton AObj, int32_t AValue);

TPoint
XButton_GetClientOrigin(TXButton AObj);

TRect
XButton_GetClientRect(TXButton AObj);

int32_t
XButton_GetClientWidth(TXButton AObj);

void
XButton_SetClientWidth(TXButton AObj, int32_t AValue);

TControlState
XButton_GetControlState(TXButton AObj);

void
XButton_SetControlState(TXButton AObj, TControlState AValue);

TControlStyle
XButton_GetControlStyle(TXButton AObj);

void
XButton_SetControlStyle(TXButton AObj, TControlStyle AValue);

BOOL
XButton_GetFloating(TXButton AObj);

TWinControl
XButton_GetParent(TXButton AObj);

void
XButton_SetParent(TXButton AObj, TWinControl AValue);

int32_t
XButton_GetLeft(TXButton AObj);

void
XButton_SetLeft(TXButton AObj, int32_t AValue);

int32_t
XButton_GetTop(TXButton AObj);

void
XButton_SetTop(TXButton AObj, int32_t AValue);

int32_t
XButton_GetWidth(TXButton AObj);

void
XButton_SetWidth(TXButton AObj, int32_t AValue);

int32_t
XButton_GetHeight(TXButton AObj);

void
XButton_SetHeight(TXButton AObj, int32_t AValue);

TCursor
XButton_GetCursor(TXButton AObj);

void
XButton_SetCursor(TXButton AObj, TCursor AValue);

char*
XButton_GetHint(TXButton AObj);

void
XButton_SetHint(TXButton AObj, CChar char* AValue);

int32_t
XButton_GetComponentCount(TXButton AObj);

int32_t
XButton_GetComponentIndex(TXButton AObj);

void
XButton_SetComponentIndex(TXButton AObj, int32_t AValue);

TComponent
XButton_GetOwner(TXButton AObj);

char*
XButton_GetName(TXButton AObj);

void
XButton_SetName(TXButton AObj, CChar char* AValue);

intptr_t
XButton_GetTag(TXButton AObj);

void
XButton_SetTag(TXButton AObj, intptr_t AValue);

TAnchorSide
XButton_GetAnchorSideLeft(TXButton AObj);

void
XButton_SetAnchorSideLeft(TXButton AObj, TAnchorSide AValue);

TAnchorSide
XButton_GetAnchorSideTop(TXButton AObj);

void
XButton_SetAnchorSideTop(TXButton AObj, TAnchorSide AValue);

TAnchorSide
XButton_GetAnchorSideRight(TXButton AObj);

void
XButton_SetAnchorSideRight(TXButton AObj, TAnchorSide AValue);

TAnchorSide
XButton_GetAnchorSideBottom(TXButton AObj);

void
XButton_SetAnchorSideBottom(TXButton AObj, TAnchorSide AValue);

TControlBorderSpacing
XButton_GetBorderSpacing(TXButton AObj);

void
XButton_SetBorderSpacing(TXButton AObj, TControlBorderSpacing AValue);

TComponent
XButton_GetComponents(TXButton AObj, int32_t AIndex);

TAnchorSide
XButton_GetAnchorSide(TXButton AObj, TAnchorKind AKind);

TClass
XButton_StaticClassType();

// -------------------TAnchorSide-------------------

void
AnchorSide_Assign(TAnchorSide AObj, TObject Source);

char*
AnchorSide_GetNamePath(TAnchorSide AObj);

TClass
AnchorSide_ClassType(TAnchorSide AObj);

char*
AnchorSide_ClassName(TAnchorSide AObj);

int32_t
AnchorSide_InstanceSize(TAnchorSide AObj);

BOOL
AnchorSide_InheritsFrom(TAnchorSide AObj, TClass AClass);

BOOL
AnchorSide_Equals(TAnchorSide AObj, TObject Obj);

int32_t
AnchorSide_GetHashCode(TAnchorSide AObj);

char*
AnchorSide_ToString(TAnchorSide AObj);

TControl
AnchorSide_GetOwner(TAnchorSide AObj);

TAnchorKind
AnchorSide_GetKind(TAnchorSide AObj);

TControl
AnchorSide_GetControl(TAnchorSide AObj);

void
AnchorSide_SetControl(TAnchorSide AObj, TControl AValue);

TAnchorSideReference
AnchorSide_GetSide(TAnchorSide AObj);

void
AnchorSide_SetSide(TAnchorSide AObj, TAnchorSideReference AValue);

TClass
AnchorSide_StaticClassType();

// -------------------TControlBorderSpacing-------------------

void
ControlBorderSpacing_Assign(TControlBorderSpacing AObj, TObject Source);

char*
ControlBorderSpacing_GetNamePath(TControlBorderSpacing AObj);

TClass
ControlBorderSpacing_ClassType(TControlBorderSpacing AObj);

char*
ControlBorderSpacing_ClassName(TControlBorderSpacing AObj);

int32_t
ControlBorderSpacing_InstanceSize(TControlBorderSpacing AObj);

BOOL
ControlBorderSpacing_InheritsFrom(TControlBorderSpacing AObj, TClass AClass);

BOOL
ControlBorderSpacing_Equals(TControlBorderSpacing AObj, TObject Obj);

int32_t
ControlBorderSpacing_GetHashCode(TControlBorderSpacing AObj);

char*
ControlBorderSpacing_ToString(TControlBorderSpacing AObj);

TControl
ControlBorderSpacing_GetControl(TControlBorderSpacing AObj);

int32_t
ControlBorderSpacing_GetAroundLeft(TControlBorderSpacing AObj);

int32_t
ControlBorderSpacing_GetAroundTop(TControlBorderSpacing AObj);

int32_t
ControlBorderSpacing_GetAroundRight(TControlBorderSpacing AObj);

int32_t
ControlBorderSpacing_GetAroundBottom(TControlBorderSpacing AObj);

int32_t
ControlBorderSpacing_GetControlLeft(TControlBorderSpacing AObj);

int32_t
ControlBorderSpacing_GetControlTop(TControlBorderSpacing AObj);

int32_t
ControlBorderSpacing_GetControlWidth(TControlBorderSpacing AObj);

int32_t
ControlBorderSpacing_GetControlHeight(TControlBorderSpacing AObj);

int32_t
ControlBorderSpacing_GetControlRight(TControlBorderSpacing AObj);

int32_t
ControlBorderSpacing_GetControlBottom(TControlBorderSpacing AObj);

void
ControlBorderSpacing_SetOnChange(TControlBorderSpacing AObj, TNotifyEvent AEventData);

int32_t
ControlBorderSpacing_GetLeft(TControlBorderSpacing AObj);

void
ControlBorderSpacing_SetLeft(TControlBorderSpacing AObj, int32_t AValue);

int32_t
ControlBorderSpacing_GetTop(TControlBorderSpacing AObj);

void
ControlBorderSpacing_SetTop(TControlBorderSpacing AObj, int32_t AValue);

int32_t
ControlBorderSpacing_GetRight(TControlBorderSpacing AObj);

void
ControlBorderSpacing_SetRight(TControlBorderSpacing AObj, int32_t AValue);

int32_t
ControlBorderSpacing_GetBottom(TControlBorderSpacing AObj);

void
ControlBorderSpacing_SetBottom(TControlBorderSpacing AObj, int32_t AValue);

int32_t
ControlBorderSpacing_GetAround(TControlBorderSpacing AObj);

void
ControlBorderSpacing_SetAround(TControlBorderSpacing AObj, int32_t AValue);

int32_t
ControlBorderSpacing_GetInnerBorder(TControlBorderSpacing AObj);

void
ControlBorderSpacing_SetInnerBorder(TControlBorderSpacing AObj, int32_t AValue);

TControlCellAlign
ControlBorderSpacing_GetCellAlignHorizontal(TControlBorderSpacing AObj);

void
ControlBorderSpacing_SetCellAlignHorizontal(TControlBorderSpacing AObj, TControlCellAlign AValue);

TControlCellAlign
ControlBorderSpacing_GetCellAlignVertical(TControlBorderSpacing AObj);

void
ControlBorderSpacing_SetCellAlignVertical(TControlBorderSpacing AObj, TControlCellAlign AValue);

int32_t
ControlBorderSpacing_GetSpace(TControlBorderSpacing AObj, TAnchorKind Kind);

void
ControlBorderSpacing_SetSpace(TControlBorderSpacing AObj, TAnchorKind Kind, int32_t AValue);

TClass
ControlBorderSpacing_StaticClassType();

// -------------------TControlChildSizing-------------------

void
ControlChildSizing_Assign(TControlChildSizing AObj, TObject Source);

char*
ControlChildSizing_GetNamePath(TControlChildSizing AObj);

TClass
ControlChildSizing_ClassType(TControlChildSizing AObj);

char*
ControlChildSizing_ClassName(TControlChildSizing AObj);

int32_t
ControlChildSizing_InstanceSize(TControlChildSizing AObj);

BOOL
ControlChildSizing_InheritsFrom(TControlChildSizing AObj, TClass AClass);

BOOL
ControlChildSizing_Equals(TControlChildSizing AObj, TObject Obj);

int32_t
ControlChildSizing_GetHashCode(TControlChildSizing AObj);

char*
ControlChildSizing_ToString(TControlChildSizing AObj);

TWinControl
ControlChildSizing_GetControl(TControlChildSizing AObj);

void
ControlChildSizing_SetOnChange(TControlChildSizing AObj, TNotifyEvent AEventData);

int32_t
ControlChildSizing_GetLeftRightSpacing(TControlChildSizing AObj);

void
ControlChildSizing_SetLeftRightSpacing(TControlChildSizing AObj, int32_t AValue);

int32_t
ControlChildSizing_GetTopBottomSpacing(TControlChildSizing AObj);

void
ControlChildSizing_SetTopBottomSpacing(TControlChildSizing AObj, int32_t AValue);

int32_t
ControlChildSizing_GetHorizontalSpacing(TControlChildSizing AObj);

void
ControlChildSizing_SetHorizontalSpacing(TControlChildSizing AObj, int32_t AValue);

int32_t
ControlChildSizing_GetVerticalSpacing(TControlChildSizing AObj);

void
ControlChildSizing_SetVerticalSpacing(TControlChildSizing AObj, int32_t AValue);

TChildControlResizeStyle
ControlChildSizing_GetEnlargeHorizontal(TControlChildSizing AObj);

void
ControlChildSizing_SetEnlargeHorizontal(TControlChildSizing AObj, TChildControlResizeStyle AValue);

TChildControlResizeStyle
ControlChildSizing_GetEnlargeVertical(TControlChildSizing AObj);

void
ControlChildSizing_SetEnlargeVertical(TControlChildSizing AObj, TChildControlResizeStyle AValue);

TChildControlResizeStyle
ControlChildSizing_GetShrinkHorizontal(TControlChildSizing AObj);

void
ControlChildSizing_SetShrinkHorizontal(TControlChildSizing AObj, TChildControlResizeStyle AValue);

TChildControlResizeStyle
ControlChildSizing_GetShrinkVertical(TControlChildSizing AObj);

void
ControlChildSizing_SetShrinkVertical(TControlChildSizing AObj, TChildControlResizeStyle AValue);

TControlChildrenLayout
ControlChildSizing_GetLayout(TControlChildSizing AObj);

void
ControlChildSizing_SetLayout(TControlChildSizing AObj, TControlChildrenLayout AValue);

int32_t
ControlChildSizing_GetControlsPerLine(TControlChildSizing AObj);

void
ControlChildSizing_SetControlsPerLine(TControlChildSizing AObj, int32_t AValue);

TClass
ControlChildSizing_StaticClassType();

// -------------------TCheckGroup-------------------

TCheckGroup
CheckGroup_Create(TComponent AOwner);

void
CheckGroup_Free(TCheckGroup AObj);

void
CheckGroup_FlipChildren(TCheckGroup AObj, BOOL AllLevels);

int32_t
CheckGroup_Rows(TCheckGroup AObj);

BOOL
CheckGroup_CanFocus(TCheckGroup AObj);

BOOL
CheckGroup_ContainsControl(TCheckGroup AObj, TControl Control);

TControl
CheckGroup_ControlAtPos(TCheckGroup AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
CheckGroup_DisableAlign(TCheckGroup AObj);

void
CheckGroup_EnableAlign(TCheckGroup AObj);

TControl
CheckGroup_FindChildControl(TCheckGroup AObj, CChar char* ControlName);

BOOL
CheckGroup_Focused(TCheckGroup AObj);

BOOL
CheckGroup_HandleAllocated(TCheckGroup AObj);

void
CheckGroup_InsertControl(TCheckGroup AObj, TControl AControl);

void
CheckGroup_Invalidate(TCheckGroup AObj);

void
CheckGroup_PaintTo(TCheckGroup AObj, HDC DC, int32_t X, int32_t Y);

void
CheckGroup_RemoveControl(TCheckGroup AObj, TControl AControl);

void
CheckGroup_Realign(TCheckGroup AObj);

void
CheckGroup_Repaint(TCheckGroup AObj);

void
CheckGroup_ScaleBy(TCheckGroup AObj, int32_t M, int32_t D);

void
CheckGroup_ScrollBy(TCheckGroup AObj, int32_t DeltaX, int32_t DeltaY);

void
CheckGroup_SetBounds(TCheckGroup AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
CheckGroup_SetFocus(TCheckGroup AObj);

void
CheckGroup_Update(TCheckGroup AObj);

void
CheckGroup_BringToFront(TCheckGroup AObj);

TPoint
CheckGroup_ClientToScreen(TCheckGroup AObj, TPoint Point);

TPoint
CheckGroup_ClientToParent(TCheckGroup AObj, TPoint Point, TWinControl AParent);

BOOL
CheckGroup_Dragging(TCheckGroup AObj);

BOOL
CheckGroup_HasParent(TCheckGroup AObj);

void
CheckGroup_Hide(TCheckGroup AObj);

intptr_t
CheckGroup_Perform(TCheckGroup AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
CheckGroup_Refresh(TCheckGroup AObj);

TPoint
CheckGroup_ScreenToClient(TCheckGroup AObj, TPoint Point);

TPoint
CheckGroup_ParentToClient(TCheckGroup AObj, TPoint Point, TWinControl AParent);

void
CheckGroup_SendToBack(TCheckGroup AObj);

void
CheckGroup_Show(TCheckGroup AObj);

int32_t
CheckGroup_GetTextBuf(TCheckGroup AObj, CChar char* Buffer, int32_t BufSize);

int32_t
CheckGroup_GetTextLen(TCheckGroup AObj);

void
CheckGroup_SetTextBuf(TCheckGroup AObj, CChar char* Buffer);

TComponent
CheckGroup_FindComponent(TCheckGroup AObj, CChar char* AName);

char*
CheckGroup_GetNamePath(TCheckGroup AObj);

void
CheckGroup_Assign(TCheckGroup AObj, TObject Source);

TClass
CheckGroup_ClassType(TCheckGroup AObj);

char*
CheckGroup_ClassName(TCheckGroup AObj);

int32_t
CheckGroup_InstanceSize(TCheckGroup AObj);

BOOL
CheckGroup_InheritsFrom(TCheckGroup AObj, TClass AClass);

BOOL
CheckGroup_Equals(TCheckGroup AObj, TObject Obj);

int32_t
CheckGroup_GetHashCode(TCheckGroup AObj);

char*
CheckGroup_ToString(TCheckGroup AObj);

void
CheckGroup_AnchorToNeighbour(TCheckGroup AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
CheckGroup_AnchorParallel(TCheckGroup AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
CheckGroup_AnchorHorizontalCenterTo(TCheckGroup AObj, TControl ASibling);

void
CheckGroup_AnchorVerticalCenterTo(TCheckGroup AObj, TControl ASibling);

void
CheckGroup_AnchorSame(TCheckGroup AObj, TAnchorKind ASide, TControl ASibling);

void
CheckGroup_AnchorAsAlign(TCheckGroup AObj, TAlign ATheAlign, int32_t ASpace);

void
CheckGroup_AnchorClient(TCheckGroup AObj, int32_t ASpace);

int32_t
CheckGroup_ScaleDesignToForm(TCheckGroup AObj, int32_t ASize);

int32_t
CheckGroup_ScaleFormToDesign(TCheckGroup AObj, int32_t ASize);

int32_t
CheckGroup_Scale96ToForm(TCheckGroup AObj, int32_t ASize);

int32_t
CheckGroup_ScaleFormTo96(TCheckGroup AObj, int32_t ASize);

int32_t
CheckGroup_Scale96ToFont(TCheckGroup AObj, int32_t ASize);

int32_t
CheckGroup_ScaleFontTo96(TCheckGroup AObj, int32_t ASize);

int32_t
CheckGroup_ScaleScreenToFont(TCheckGroup AObj, int32_t ASize);

int32_t
CheckGroup_ScaleFontToScreen(TCheckGroup AObj, int32_t ASize);

int32_t
CheckGroup_Scale96ToScreen(TCheckGroup AObj, int32_t ASize);

int32_t
CheckGroup_ScaleScreenTo96(TCheckGroup AObj, int32_t ASize);

void
CheckGroup_AutoAdjustLayout(TCheckGroup AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
CheckGroup_FixDesignFontsPPI(TCheckGroup AObj, int32_t ADesignTimePPI);

void
CheckGroup_ScaleFontsPPI(TCheckGroup AObj, int32_t AToPPI, double AProportion);

TAlign
CheckGroup_GetAlign(TCheckGroup AObj);

void
CheckGroup_SetAlign(TCheckGroup AObj, TAlign AValue);

TAnchors
CheckGroup_GetAnchors(TCheckGroup AObj);

void
CheckGroup_SetAnchors(TCheckGroup AObj, TAnchors AValue);

BOOL
CheckGroup_GetAutoFill(TCheckGroup AObj);

void
CheckGroup_SetAutoFill(TCheckGroup AObj, BOOL AValue);

BOOL
CheckGroup_GetAutoSize(TCheckGroup AObj);

void
CheckGroup_SetAutoSize(TCheckGroup AObj, BOOL AValue);

TBiDiMode
CheckGroup_GetBiDiMode(TCheckGroup AObj);

void
CheckGroup_SetBiDiMode(TCheckGroup AObj, TBiDiMode AValue);

char*
CheckGroup_GetCaption(TCheckGroup AObj);

void
CheckGroup_SetCaption(TCheckGroup AObj, CChar char* AValue);

int32_t
CheckGroup_GetClientHeight(TCheckGroup AObj);

void
CheckGroup_SetClientHeight(TCheckGroup AObj, int32_t AValue);

int32_t
CheckGroup_GetClientWidth(TCheckGroup AObj);

void
CheckGroup_SetClientWidth(TCheckGroup AObj, int32_t AValue);

TColor
CheckGroup_GetColor(TCheckGroup AObj);

void
CheckGroup_SetColor(TCheckGroup AObj, TColor AValue);

TColumnLayout
CheckGroup_GetColumnLayout(TCheckGroup AObj);

void
CheckGroup_SetColumnLayout(TCheckGroup AObj, TColumnLayout AValue);

int32_t
CheckGroup_GetColumns(TCheckGroup AObj);

void
CheckGroup_SetColumns(TCheckGroup AObj, int32_t AValue);

TSizeConstraints
CheckGroup_GetConstraints(TCheckGroup AObj);

void
CheckGroup_SetConstraints(TCheckGroup AObj, TSizeConstraints AValue);

BOOL
CheckGroup_GetDoubleBuffered(TCheckGroup AObj);

void
CheckGroup_SetDoubleBuffered(TCheckGroup AObj, BOOL AValue);

TCursor
CheckGroup_GetDragCursor(TCheckGroup AObj);

void
CheckGroup_SetDragCursor(TCheckGroup AObj, TCursor AValue);

TDragMode
CheckGroup_GetDragMode(TCheckGroup AObj);

void
CheckGroup_SetDragMode(TCheckGroup AObj, TDragMode AValue);

BOOL
CheckGroup_GetEnabled(TCheckGroup AObj);

void
CheckGroup_SetEnabled(TCheckGroup AObj, BOOL AValue);

TFont
CheckGroup_GetFont(TCheckGroup AObj);

void
CheckGroup_SetFont(TCheckGroup AObj, TFont AValue);

TStrings
CheckGroup_GetItems(TCheckGroup AObj);

void
CheckGroup_SetItems(TCheckGroup AObj, TStrings AValue);

void
CheckGroup_SetOnClick(TCheckGroup AObj, TNotifyEvent AEventData);

void
CheckGroup_SetOnDblClick(TCheckGroup AObj, TNotifyEvent AEventData);

void
CheckGroup_SetOnDragDrop(TCheckGroup AObj, TDragDropEvent AEventData);

void
CheckGroup_SetOnDragOver(TCheckGroup AObj, TDragOverEvent AEventData);

void
CheckGroup_SetOnEndDrag(TCheckGroup AObj, TEndDragEvent AEventData);

void
CheckGroup_SetOnEnter(TCheckGroup AObj, TNotifyEvent AEventData);

void
CheckGroup_SetOnExit(TCheckGroup AObj, TNotifyEvent AEventData);

void
CheckGroup_SetOnItemClick(TCheckGroup AObj, TCheckGroupClicked AEventData);

void
CheckGroup_SetOnKeyDown(TCheckGroup AObj, TKeyEvent AEventData);

void
CheckGroup_SetOnKeyPress(TCheckGroup AObj, TKeyPressEvent AEventData);

void
CheckGroup_SetOnKeyUp(TCheckGroup AObj, TKeyEvent AEventData);

void
CheckGroup_SetOnMouseDown(TCheckGroup AObj, TMouseEvent AEventData);

void
CheckGroup_SetOnMouseEnter(TCheckGroup AObj, TNotifyEvent AEventData);

void
CheckGroup_SetOnMouseLeave(TCheckGroup AObj, TNotifyEvent AEventData);

void
CheckGroup_SetOnMouseMove(TCheckGroup AObj, TMouseMoveEvent AEventData);

void
CheckGroup_SetOnMouseUp(TCheckGroup AObj, TMouseEvent AEventData);

void
CheckGroup_SetOnMouseWheel(TCheckGroup AObj, TMouseWheelEvent AEventData);

void
CheckGroup_SetOnMouseWheelDown(TCheckGroup AObj, TMouseWheelUpDownEvent AEventData);

void
CheckGroup_SetOnMouseWheelUp(TCheckGroup AObj, TMouseWheelUpDownEvent AEventData);

void
CheckGroup_SetOnResize(TCheckGroup AObj, TNotifyEvent AEventData);

BOOL
CheckGroup_GetParentFont(TCheckGroup AObj);

void
CheckGroup_SetParentFont(TCheckGroup AObj, BOOL AValue);

BOOL
CheckGroup_GetParentColor(TCheckGroup AObj);

void
CheckGroup_SetParentColor(TCheckGroup AObj, BOOL AValue);

BOOL
CheckGroup_GetParentDoubleBuffered(TCheckGroup AObj);

void
CheckGroup_SetParentDoubleBuffered(TCheckGroup AObj, BOOL AValue);

BOOL
CheckGroup_GetParentShowHint(TCheckGroup AObj);

void
CheckGroup_SetParentShowHint(TCheckGroup AObj, BOOL AValue);

TPopupMenu
CheckGroup_GetPopupMenu(TCheckGroup AObj);

void
CheckGroup_SetPopupMenu(TCheckGroup AObj, TPopupMenu AValue);

BOOL
CheckGroup_GetShowHint(TCheckGroup AObj);

void
CheckGroup_SetShowHint(TCheckGroup AObj, BOOL AValue);

TTabOrder
CheckGroup_GetTabOrder(TCheckGroup AObj);

void
CheckGroup_SetTabOrder(TCheckGroup AObj, TTabOrder AValue);

BOOL
CheckGroup_GetTabStop(TCheckGroup AObj);

void
CheckGroup_SetTabStop(TCheckGroup AObj, BOOL AValue);

BOOL
CheckGroup_GetVisible(TCheckGroup AObj);

void
CheckGroup_SetVisible(TCheckGroup AObj, BOOL AValue);

BOOL
CheckGroup_GetParentBackground(TCheckGroup AObj);

void
CheckGroup_SetParentBackground(TCheckGroup AObj, BOOL AValue);

int32_t
CheckGroup_GetDockClientCount(TCheckGroup AObj);

BOOL
CheckGroup_GetDockSite(TCheckGroup AObj);

void
CheckGroup_SetDockSite(TCheckGroup AObj, BOOL AValue);

BOOL
CheckGroup_GetMouseInClient(TCheckGroup AObj);

int32_t
CheckGroup_GetVisibleDockClientCount(TCheckGroup AObj);

TBrush
CheckGroup_GetBrush(TCheckGroup AObj);

int32_t
CheckGroup_GetControlCount(TCheckGroup AObj);

HWND
CheckGroup_GetHandle(TCheckGroup AObj);

HWND
CheckGroup_GetParentWindow(TCheckGroup AObj);

void
CheckGroup_SetParentWindow(TCheckGroup AObj, HWND AValue);

BOOL
CheckGroup_GetShowing(TCheckGroup AObj);

BOOL
CheckGroup_GetUseDockManager(TCheckGroup AObj);

void
CheckGroup_SetUseDockManager(TCheckGroup AObj, BOOL AValue);

TAction
CheckGroup_GetAction(TCheckGroup AObj);

void
CheckGroup_SetAction(TCheckGroup AObj, TAction AValue);

TRect
CheckGroup_GetBoundsRect(TCheckGroup AObj);

void
CheckGroup_SetBoundsRect(TCheckGroup AObj, TRect AValue);

TPoint
CheckGroup_GetClientOrigin(TCheckGroup AObj);

TRect
CheckGroup_GetClientRect(TCheckGroup AObj);

TControlState
CheckGroup_GetControlState(TCheckGroup AObj);

void
CheckGroup_SetControlState(TCheckGroup AObj, TControlState AValue);

TControlStyle
CheckGroup_GetControlStyle(TCheckGroup AObj);

void
CheckGroup_SetControlStyle(TCheckGroup AObj, TControlStyle AValue);

BOOL
CheckGroup_GetFloating(TCheckGroup AObj);

TWinControl
CheckGroup_GetParent(TCheckGroup AObj);

void
CheckGroup_SetParent(TCheckGroup AObj, TWinControl AValue);

int32_t
CheckGroup_GetLeft(TCheckGroup AObj);

void
CheckGroup_SetLeft(TCheckGroup AObj, int32_t AValue);

int32_t
CheckGroup_GetTop(TCheckGroup AObj);

void
CheckGroup_SetTop(TCheckGroup AObj, int32_t AValue);

int32_t
CheckGroup_GetWidth(TCheckGroup AObj);

void
CheckGroup_SetWidth(TCheckGroup AObj, int32_t AValue);

int32_t
CheckGroup_GetHeight(TCheckGroup AObj);

void
CheckGroup_SetHeight(TCheckGroup AObj, int32_t AValue);

TCursor
CheckGroup_GetCursor(TCheckGroup AObj);

void
CheckGroup_SetCursor(TCheckGroup AObj, TCursor AValue);

char*
CheckGroup_GetHint(TCheckGroup AObj);

void
CheckGroup_SetHint(TCheckGroup AObj, CChar char* AValue);

int32_t
CheckGroup_GetComponentCount(TCheckGroup AObj);

int32_t
CheckGroup_GetComponentIndex(TCheckGroup AObj);

void
CheckGroup_SetComponentIndex(TCheckGroup AObj, int32_t AValue);

TComponent
CheckGroup_GetOwner(TCheckGroup AObj);

char*
CheckGroup_GetName(TCheckGroup AObj);

void
CheckGroup_SetName(TCheckGroup AObj, CChar char* AValue);

intptr_t
CheckGroup_GetTag(TCheckGroup AObj);

void
CheckGroup_SetTag(TCheckGroup AObj, intptr_t AValue);

TAnchorSide
CheckGroup_GetAnchorSideLeft(TCheckGroup AObj);

void
CheckGroup_SetAnchorSideLeft(TCheckGroup AObj, TAnchorSide AValue);

TAnchorSide
CheckGroup_GetAnchorSideTop(TCheckGroup AObj);

void
CheckGroup_SetAnchorSideTop(TCheckGroup AObj, TAnchorSide AValue);

TAnchorSide
CheckGroup_GetAnchorSideRight(TCheckGroup AObj);

void
CheckGroup_SetAnchorSideRight(TCheckGroup AObj, TAnchorSide AValue);

TAnchorSide
CheckGroup_GetAnchorSideBottom(TCheckGroup AObj);

void
CheckGroup_SetAnchorSideBottom(TCheckGroup AObj, TAnchorSide AValue);

TControlChildSizing
CheckGroup_GetChildSizing(TCheckGroup AObj);

void
CheckGroup_SetChildSizing(TCheckGroup AObj, TControlChildSizing AValue);

TControlBorderSpacing
CheckGroup_GetBorderSpacing(TCheckGroup AObj);

void
CheckGroup_SetBorderSpacing(TCheckGroup AObj, TControlBorderSpacing AValue);

BOOL
CheckGroup_GetChecked(TCheckGroup AObj, int32_t Index);

void
CheckGroup_SetChecked(TCheckGroup AObj, int32_t Index, BOOL AValue);

BOOL
CheckGroup_GetCheckEnabled(TCheckGroup AObj, int32_t Index);

void
CheckGroup_SetCheckEnabled(TCheckGroup AObj, int32_t Index, BOOL AValue);

TControl
CheckGroup_GetDockClients(TCheckGroup AObj, int32_t Index);

TControl
CheckGroup_GetControls(TCheckGroup AObj, int32_t Index);

TComponent
CheckGroup_GetComponents(TCheckGroup AObj, int32_t AIndex);

TAnchorSide
CheckGroup_GetAnchorSide(TCheckGroup AObj, TAnchorKind AKind);

TClass
CheckGroup_StaticClassType();

// -------------------TToggleBox-------------------

TToggleBox
ToggleBox_Create(TComponent AOwner);

void
ToggleBox_Free(TToggleBox AObj);

BOOL
ToggleBox_CanFocus(TToggleBox AObj);

BOOL
ToggleBox_ContainsControl(TToggleBox AObj, TControl Control);

TControl
ToggleBox_ControlAtPos(TToggleBox AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
ToggleBox_DisableAlign(TToggleBox AObj);

void
ToggleBox_EnableAlign(TToggleBox AObj);

TControl
ToggleBox_FindChildControl(TToggleBox AObj, CChar char* ControlName);

void
ToggleBox_FlipChildren(TToggleBox AObj, BOOL AllLevels);

BOOL
ToggleBox_Focused(TToggleBox AObj);

BOOL
ToggleBox_HandleAllocated(TToggleBox AObj);

void
ToggleBox_InsertControl(TToggleBox AObj, TControl AControl);

void
ToggleBox_Invalidate(TToggleBox AObj);

void
ToggleBox_PaintTo(TToggleBox AObj, HDC DC, int32_t X, int32_t Y);

void
ToggleBox_RemoveControl(TToggleBox AObj, TControl AControl);

void
ToggleBox_Realign(TToggleBox AObj);

void
ToggleBox_Repaint(TToggleBox AObj);

void
ToggleBox_ScaleBy(TToggleBox AObj, int32_t M, int32_t D);

void
ToggleBox_ScrollBy(TToggleBox AObj, int32_t DeltaX, int32_t DeltaY);

void
ToggleBox_SetBounds(TToggleBox AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
ToggleBox_SetFocus(TToggleBox AObj);

void
ToggleBox_Update(TToggleBox AObj);

void
ToggleBox_BringToFront(TToggleBox AObj);

TPoint
ToggleBox_ClientToScreen(TToggleBox AObj, TPoint Point);

TPoint
ToggleBox_ClientToParent(TToggleBox AObj, TPoint Point, TWinControl AParent);

BOOL
ToggleBox_Dragging(TToggleBox AObj);

BOOL
ToggleBox_HasParent(TToggleBox AObj);

void
ToggleBox_Hide(TToggleBox AObj);

intptr_t
ToggleBox_Perform(TToggleBox AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
ToggleBox_Refresh(TToggleBox AObj);

TPoint
ToggleBox_ScreenToClient(TToggleBox AObj, TPoint Point);

TPoint
ToggleBox_ParentToClient(TToggleBox AObj, TPoint Point, TWinControl AParent);

void
ToggleBox_SendToBack(TToggleBox AObj);

void
ToggleBox_Show(TToggleBox AObj);

int32_t
ToggleBox_GetTextBuf(TToggleBox AObj, CChar char* Buffer, int32_t BufSize);

int32_t
ToggleBox_GetTextLen(TToggleBox AObj);

void
ToggleBox_SetTextBuf(TToggleBox AObj, CChar char* Buffer);

TComponent
ToggleBox_FindComponent(TToggleBox AObj, CChar char* AName);

char*
ToggleBox_GetNamePath(TToggleBox AObj);

void
ToggleBox_Assign(TToggleBox AObj, TObject Source);

TClass
ToggleBox_ClassType(TToggleBox AObj);

char*
ToggleBox_ClassName(TToggleBox AObj);

int32_t
ToggleBox_InstanceSize(TToggleBox AObj);

BOOL
ToggleBox_InheritsFrom(TToggleBox AObj, TClass AClass);

BOOL
ToggleBox_Equals(TToggleBox AObj, TObject Obj);

int32_t
ToggleBox_GetHashCode(TToggleBox AObj);

char*
ToggleBox_ToString(TToggleBox AObj);

void
ToggleBox_AnchorToNeighbour(TToggleBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ToggleBox_AnchorParallel(TToggleBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
ToggleBox_AnchorHorizontalCenterTo(TToggleBox AObj, TControl ASibling);

void
ToggleBox_AnchorVerticalCenterTo(TToggleBox AObj, TControl ASibling);

void
ToggleBox_AnchorSame(TToggleBox AObj, TAnchorKind ASide, TControl ASibling);

void
ToggleBox_AnchorAsAlign(TToggleBox AObj, TAlign ATheAlign, int32_t ASpace);

void
ToggleBox_AnchorClient(TToggleBox AObj, int32_t ASpace);

int32_t
ToggleBox_ScaleDesignToForm(TToggleBox AObj, int32_t ASize);

int32_t
ToggleBox_ScaleFormToDesign(TToggleBox AObj, int32_t ASize);

int32_t
ToggleBox_Scale96ToForm(TToggleBox AObj, int32_t ASize);

int32_t
ToggleBox_ScaleFormTo96(TToggleBox AObj, int32_t ASize);

int32_t
ToggleBox_Scale96ToFont(TToggleBox AObj, int32_t ASize);

int32_t
ToggleBox_ScaleFontTo96(TToggleBox AObj, int32_t ASize);

int32_t
ToggleBox_ScaleScreenToFont(TToggleBox AObj, int32_t ASize);

int32_t
ToggleBox_ScaleFontToScreen(TToggleBox AObj, int32_t ASize);

int32_t
ToggleBox_Scale96ToScreen(TToggleBox AObj, int32_t ASize);

int32_t
ToggleBox_ScaleScreenTo96(TToggleBox AObj, int32_t ASize);

void
ToggleBox_AutoAdjustLayout(TToggleBox AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
ToggleBox_FixDesignFontsPPI(TToggleBox AObj, int32_t ADesignTimePPI);

void
ToggleBox_ScaleFontsPPI(TToggleBox AObj, int32_t AToPPI, double AProportion);

BOOL
ToggleBox_GetAllowGrayed(TToggleBox AObj);

void
ToggleBox_SetAllowGrayed(TToggleBox AObj, BOOL AValue);

TAlign
ToggleBox_GetAlign(TToggleBox AObj);

void
ToggleBox_SetAlign(TToggleBox AObj, TAlign AValue);

TAnchors
ToggleBox_GetAnchors(TToggleBox AObj);

void
ToggleBox_SetAnchors(TToggleBox AObj, TAnchors AValue);

BOOL
ToggleBox_GetAutoSize(TToggleBox AObj);

void
ToggleBox_SetAutoSize(TToggleBox AObj, BOOL AValue);

char*
ToggleBox_GetCaption(TToggleBox AObj);

void
ToggleBox_SetCaption(TToggleBox AObj, CChar char* AValue);

BOOL
ToggleBox_GetChecked(TToggleBox AObj);

void
ToggleBox_SetChecked(TToggleBox AObj, BOOL AValue);

TColor
ToggleBox_GetColor(TToggleBox AObj);

void
ToggleBox_SetColor(TToggleBox AObj, TColor AValue);

TSizeConstraints
ToggleBox_GetConstraints(TToggleBox AObj);

void
ToggleBox_SetConstraints(TToggleBox AObj, TSizeConstraints AValue);

BOOL
ToggleBox_GetDoubleBuffered(TToggleBox AObj);

void
ToggleBox_SetDoubleBuffered(TToggleBox AObj, BOOL AValue);

TCursor
ToggleBox_GetDragCursor(TToggleBox AObj);

void
ToggleBox_SetDragCursor(TToggleBox AObj, TCursor AValue);

TDragKind
ToggleBox_GetDragKind(TToggleBox AObj);

void
ToggleBox_SetDragKind(TToggleBox AObj, TDragKind AValue);

TDragMode
ToggleBox_GetDragMode(TToggleBox AObj);

void
ToggleBox_SetDragMode(TToggleBox AObj, TDragMode AValue);

BOOL
ToggleBox_GetEnabled(TToggleBox AObj);

void
ToggleBox_SetEnabled(TToggleBox AObj, BOOL AValue);

TFont
ToggleBox_GetFont(TToggleBox AObj);

void
ToggleBox_SetFont(TToggleBox AObj, TFont AValue);

char*
ToggleBox_GetHint(TToggleBox AObj);

void
ToggleBox_SetHint(TToggleBox AObj, CChar char* AValue);

void
ToggleBox_SetOnChange(TToggleBox AObj, TNotifyEvent AEventData);

void
ToggleBox_SetOnClick(TToggleBox AObj, TNotifyEvent AEventData);

void
ToggleBox_SetOnDragDrop(TToggleBox AObj, TDragDropEvent AEventData);

void
ToggleBox_SetOnDragOver(TToggleBox AObj, TDragOverEvent AEventData);

void
ToggleBox_SetOnEndDrag(TToggleBox AObj, TEndDragEvent AEventData);

void
ToggleBox_SetOnEnter(TToggleBox AObj, TNotifyEvent AEventData);

void
ToggleBox_SetOnExit(TToggleBox AObj, TNotifyEvent AEventData);

void
ToggleBox_SetOnMouseDown(TToggleBox AObj, TMouseEvent AEventData);

void
ToggleBox_SetOnMouseEnter(TToggleBox AObj, TNotifyEvent AEventData);

void
ToggleBox_SetOnMouseLeave(TToggleBox AObj, TNotifyEvent AEventData);

void
ToggleBox_SetOnMouseMove(TToggleBox AObj, TMouseMoveEvent AEventData);

void
ToggleBox_SetOnMouseUp(TToggleBox AObj, TMouseEvent AEventData);

void
ToggleBox_SetOnMouseWheel(TToggleBox AObj, TMouseWheelEvent AEventData);

void
ToggleBox_SetOnMouseWheelDown(TToggleBox AObj, TMouseWheelUpDownEvent AEventData);

void
ToggleBox_SetOnMouseWheelUp(TToggleBox AObj, TMouseWheelUpDownEvent AEventData);

BOOL
ToggleBox_GetParentDoubleBuffered(TToggleBox AObj);

void
ToggleBox_SetParentDoubleBuffered(TToggleBox AObj, BOOL AValue);

BOOL
ToggleBox_GetParentFont(TToggleBox AObj);

void
ToggleBox_SetParentFont(TToggleBox AObj, BOOL AValue);

BOOL
ToggleBox_GetParentShowHint(TToggleBox AObj);

void
ToggleBox_SetParentShowHint(TToggleBox AObj, BOOL AValue);

TPopupMenu
ToggleBox_GetPopupMenu(TToggleBox AObj);

void
ToggleBox_SetPopupMenu(TToggleBox AObj, TPopupMenu AValue);

BOOL
ToggleBox_GetShowHint(TToggleBox AObj);

void
ToggleBox_SetShowHint(TToggleBox AObj, BOOL AValue);

TCheckBoxState
ToggleBox_GetState(TToggleBox AObj);

void
ToggleBox_SetState(TToggleBox AObj, TCheckBoxState AValue);

TTabOrder
ToggleBox_GetTabOrder(TToggleBox AObj);

void
ToggleBox_SetTabOrder(TToggleBox AObj, TTabOrder AValue);

BOOL
ToggleBox_GetTabStop(TToggleBox AObj);

void
ToggleBox_SetTabStop(TToggleBox AObj, BOOL AValue);

BOOL
ToggleBox_GetVisible(TToggleBox AObj);

void
ToggleBox_SetVisible(TToggleBox AObj, BOOL AValue);

int32_t
ToggleBox_GetDockClientCount(TToggleBox AObj);

BOOL
ToggleBox_GetDockSite(TToggleBox AObj);

void
ToggleBox_SetDockSite(TToggleBox AObj, BOOL AValue);

BOOL
ToggleBox_GetMouseInClient(TToggleBox AObj);

int32_t
ToggleBox_GetVisibleDockClientCount(TToggleBox AObj);

TBrush
ToggleBox_GetBrush(TToggleBox AObj);

int32_t
ToggleBox_GetControlCount(TToggleBox AObj);

HWND
ToggleBox_GetHandle(TToggleBox AObj);

HWND
ToggleBox_GetParentWindow(TToggleBox AObj);

void
ToggleBox_SetParentWindow(TToggleBox AObj, HWND AValue);

BOOL
ToggleBox_GetShowing(TToggleBox AObj);

BOOL
ToggleBox_GetUseDockManager(TToggleBox AObj);

void
ToggleBox_SetUseDockManager(TToggleBox AObj, BOOL AValue);

TAction
ToggleBox_GetAction(TToggleBox AObj);

void
ToggleBox_SetAction(TToggleBox AObj, TAction AValue);

TBiDiMode
ToggleBox_GetBiDiMode(TToggleBox AObj);

void
ToggleBox_SetBiDiMode(TToggleBox AObj, TBiDiMode AValue);

TRect
ToggleBox_GetBoundsRect(TToggleBox AObj);

void
ToggleBox_SetBoundsRect(TToggleBox AObj, TRect AValue);

int32_t
ToggleBox_GetClientHeight(TToggleBox AObj);

void
ToggleBox_SetClientHeight(TToggleBox AObj, int32_t AValue);

TPoint
ToggleBox_GetClientOrigin(TToggleBox AObj);

TRect
ToggleBox_GetClientRect(TToggleBox AObj);

int32_t
ToggleBox_GetClientWidth(TToggleBox AObj);

void
ToggleBox_SetClientWidth(TToggleBox AObj, int32_t AValue);

TControlState
ToggleBox_GetControlState(TToggleBox AObj);

void
ToggleBox_SetControlState(TToggleBox AObj, TControlState AValue);

TControlStyle
ToggleBox_GetControlStyle(TToggleBox AObj);

void
ToggleBox_SetControlStyle(TToggleBox AObj, TControlStyle AValue);

BOOL
ToggleBox_GetFloating(TToggleBox AObj);

TWinControl
ToggleBox_GetParent(TToggleBox AObj);

void
ToggleBox_SetParent(TToggleBox AObj, TWinControl AValue);

int32_t
ToggleBox_GetLeft(TToggleBox AObj);

void
ToggleBox_SetLeft(TToggleBox AObj, int32_t AValue);

int32_t
ToggleBox_GetTop(TToggleBox AObj);

void
ToggleBox_SetTop(TToggleBox AObj, int32_t AValue);

int32_t
ToggleBox_GetWidth(TToggleBox AObj);

void
ToggleBox_SetWidth(TToggleBox AObj, int32_t AValue);

int32_t
ToggleBox_GetHeight(TToggleBox AObj);

void
ToggleBox_SetHeight(TToggleBox AObj, int32_t AValue);

TCursor
ToggleBox_GetCursor(TToggleBox AObj);

void
ToggleBox_SetCursor(TToggleBox AObj, TCursor AValue);

int32_t
ToggleBox_GetComponentCount(TToggleBox AObj);

int32_t
ToggleBox_GetComponentIndex(TToggleBox AObj);

void
ToggleBox_SetComponentIndex(TToggleBox AObj, int32_t AValue);

TComponent
ToggleBox_GetOwner(TToggleBox AObj);

char*
ToggleBox_GetName(TToggleBox AObj);

void
ToggleBox_SetName(TToggleBox AObj, CChar char* AValue);

intptr_t
ToggleBox_GetTag(TToggleBox AObj);

void
ToggleBox_SetTag(TToggleBox AObj, intptr_t AValue);

TAnchorSide
ToggleBox_GetAnchorSideLeft(TToggleBox AObj);

void
ToggleBox_SetAnchorSideLeft(TToggleBox AObj, TAnchorSide AValue);

TAnchorSide
ToggleBox_GetAnchorSideTop(TToggleBox AObj);

void
ToggleBox_SetAnchorSideTop(TToggleBox AObj, TAnchorSide AValue);

TAnchorSide
ToggleBox_GetAnchorSideRight(TToggleBox AObj);

void
ToggleBox_SetAnchorSideRight(TToggleBox AObj, TAnchorSide AValue);

TAnchorSide
ToggleBox_GetAnchorSideBottom(TToggleBox AObj);

void
ToggleBox_SetAnchorSideBottom(TToggleBox AObj, TAnchorSide AValue);

TControlChildSizing
ToggleBox_GetChildSizing(TToggleBox AObj);

void
ToggleBox_SetChildSizing(TToggleBox AObj, TControlChildSizing AValue);

TControlBorderSpacing
ToggleBox_GetBorderSpacing(TToggleBox AObj);

void
ToggleBox_SetBorderSpacing(TToggleBox AObj, TControlBorderSpacing AValue);

TControl
ToggleBox_GetDockClients(TToggleBox AObj, int32_t Index);

TControl
ToggleBox_GetControls(TToggleBox AObj, int32_t Index);

TComponent
ToggleBox_GetComponents(TToggleBox AObj, int32_t AIndex);

TAnchorSide
ToggleBox_GetAnchorSide(TToggleBox AObj, TAnchorKind AKind);

TClass
ToggleBox_StaticClassType();

// -------------------TCheckComboBox-------------------

TCheckComboBox
CheckComboBox_Create(TComponent AOwner);

void
CheckComboBox_Free(TCheckComboBox AObj);

void
CheckComboBox_AddItem(TCheckComboBox AObj, CChar char* AItem, TCheckBoxState AState, BOOL AEnabled);

void
CheckComboBox_AssignItems(TCheckComboBox AObj, TStrings AItems);

void
CheckComboBox_Clear(TCheckComboBox AObj);

void
CheckComboBox_DeleteItem(TCheckComboBox AObj, int32_t AIndex);

void
CheckComboBox_CheckAll(TCheckComboBox AObj, TCheckBoxState AState, BOOL AAllowGrayed, BOOL AAllowDisabled);

void
CheckComboBox_Toggle(TCheckComboBox AObj, int32_t AIndex);

void
CheckComboBox_ClearSelection(TCheckComboBox AObj);

BOOL
CheckComboBox_Focused(TCheckComboBox AObj);

void
CheckComboBox_SelectAll(TCheckComboBox AObj);

BOOL
CheckComboBox_CanFocus(TCheckComboBox AObj);

BOOL
CheckComboBox_ContainsControl(TCheckComboBox AObj, TControl Control);

TControl
CheckComboBox_ControlAtPos(TCheckComboBox AObj, TPoint Pos, BOOL AllowDisabled, BOOL AllowWinControls);

void
CheckComboBox_DisableAlign(TCheckComboBox AObj);

void
CheckComboBox_EnableAlign(TCheckComboBox AObj);

TControl
CheckComboBox_FindChildControl(TCheckComboBox AObj, CChar char* ControlName);

void
CheckComboBox_FlipChildren(TCheckComboBox AObj, BOOL AllLevels);

BOOL
CheckComboBox_HandleAllocated(TCheckComboBox AObj);

void
CheckComboBox_InsertControl(TCheckComboBox AObj, TControl AControl);

void
CheckComboBox_Invalidate(TCheckComboBox AObj);

void
CheckComboBox_PaintTo(TCheckComboBox AObj, HDC DC, int32_t X, int32_t Y);

void
CheckComboBox_RemoveControl(TCheckComboBox AObj, TControl AControl);

void
CheckComboBox_Realign(TCheckComboBox AObj);

void
CheckComboBox_Repaint(TCheckComboBox AObj);

void
CheckComboBox_ScaleBy(TCheckComboBox AObj, int32_t M, int32_t D);

void
CheckComboBox_ScrollBy(TCheckComboBox AObj, int32_t DeltaX, int32_t DeltaY);

void
CheckComboBox_SetBounds(TCheckComboBox AObj, int32_t ALeft, int32_t ATop, int32_t AWidth, int32_t AHeight);

void
CheckComboBox_SetFocus(TCheckComboBox AObj);

void
CheckComboBox_Update(TCheckComboBox AObj);

void
CheckComboBox_BringToFront(TCheckComboBox AObj);

TPoint
CheckComboBox_ClientToScreen(TCheckComboBox AObj, TPoint Point);

TPoint
CheckComboBox_ClientToParent(TCheckComboBox AObj, TPoint Point, TWinControl AParent);

BOOL
CheckComboBox_Dragging(TCheckComboBox AObj);

BOOL
CheckComboBox_HasParent(TCheckComboBox AObj);

void
CheckComboBox_Hide(TCheckComboBox AObj);

intptr_t
CheckComboBox_Perform(TCheckComboBox AObj, uint32_t Msg, uintptr_t WParam, intptr_t LParam);

void
CheckComboBox_Refresh(TCheckComboBox AObj);

TPoint
CheckComboBox_ScreenToClient(TCheckComboBox AObj, TPoint Point);

TPoint
CheckComboBox_ParentToClient(TCheckComboBox AObj, TPoint Point, TWinControl AParent);

void
CheckComboBox_SendToBack(TCheckComboBox AObj);

void
CheckComboBox_Show(TCheckComboBox AObj);

int32_t
CheckComboBox_GetTextBuf(TCheckComboBox AObj, CChar char* Buffer, int32_t BufSize);

int32_t
CheckComboBox_GetTextLen(TCheckComboBox AObj);

void
CheckComboBox_SetTextBuf(TCheckComboBox AObj, CChar char* Buffer);

TComponent
CheckComboBox_FindComponent(TCheckComboBox AObj, CChar char* AName);

char*
CheckComboBox_GetNamePath(TCheckComboBox AObj);

void
CheckComboBox_Assign(TCheckComboBox AObj, TObject Source);

TClass
CheckComboBox_ClassType(TCheckComboBox AObj);

char*
CheckComboBox_ClassName(TCheckComboBox AObj);

int32_t
CheckComboBox_InstanceSize(TCheckComboBox AObj);

BOOL
CheckComboBox_InheritsFrom(TCheckComboBox AObj, TClass AClass);

BOOL
CheckComboBox_Equals(TCheckComboBox AObj, TObject Obj);

int32_t
CheckComboBox_GetHashCode(TCheckComboBox AObj);

char*
CheckComboBox_ToString(TCheckComboBox AObj);

void
CheckComboBox_AnchorToNeighbour(TCheckComboBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
CheckComboBox_AnchorParallel(TCheckComboBox AObj, TAnchorKind ASide, int32_t ASpace, TControl ASibling);

void
CheckComboBox_AnchorHorizontalCenterTo(TCheckComboBox AObj, TControl ASibling);

void
CheckComboBox_AnchorVerticalCenterTo(TCheckComboBox AObj, TControl ASibling);

void
CheckComboBox_AnchorSame(TCheckComboBox AObj, TAnchorKind ASide, TControl ASibling);

void
CheckComboBox_AnchorAsAlign(TCheckComboBox AObj, TAlign ATheAlign, int32_t ASpace);

void
CheckComboBox_AnchorClient(TCheckComboBox AObj, int32_t ASpace);

int32_t
CheckComboBox_ScaleDesignToForm(TCheckComboBox AObj, int32_t ASize);

int32_t
CheckComboBox_ScaleFormToDesign(TCheckComboBox AObj, int32_t ASize);

int32_t
CheckComboBox_Scale96ToForm(TCheckComboBox AObj, int32_t ASize);

int32_t
CheckComboBox_ScaleFormTo96(TCheckComboBox AObj, int32_t ASize);

int32_t
CheckComboBox_Scale96ToFont(TCheckComboBox AObj, int32_t ASize);

int32_t
CheckComboBox_ScaleFontTo96(TCheckComboBox AObj, int32_t ASize);

int32_t
CheckComboBox_ScaleScreenToFont(TCheckComboBox AObj, int32_t ASize);

int32_t
CheckComboBox_ScaleFontToScreen(TCheckComboBox AObj, int32_t ASize);

int32_t
CheckComboBox_Scale96ToScreen(TCheckComboBox AObj, int32_t ASize);

int32_t
CheckComboBox_ScaleScreenTo96(TCheckComboBox AObj, int32_t ASize);

void
CheckComboBox_AutoAdjustLayout(TCheckComboBox AObj, TLayoutAdjustmentPolicy AMode, int32_t AFromPPI, int32_t AToPPI, int32_t AOldFormWidth, int32_t ANewFormWidth);

void
CheckComboBox_FixDesignFontsPPI(TCheckComboBox AObj, int32_t ADesignTimePPI);

void
CheckComboBox_ScaleFontsPPI(TCheckComboBox AObj, int32_t AToPPI, double AProportion);

TAlign
CheckComboBox_GetAlign(TCheckComboBox AObj);

void
CheckComboBox_SetAlign(TCheckComboBox AObj, TAlign AValue);

BOOL
CheckComboBox_GetAllowGrayed(TCheckComboBox AObj);

void
CheckComboBox_SetAllowGrayed(TCheckComboBox AObj, BOOL AValue);

TAnchors
CheckComboBox_GetAnchors(TCheckComboBox AObj);

void
CheckComboBox_SetAnchors(TCheckComboBox AObj, TAnchors AValue);

BOOL
CheckComboBox_GetAutoDropDown(TCheckComboBox AObj);

void
CheckComboBox_SetAutoDropDown(TCheckComboBox AObj, BOOL AValue);

BOOL
CheckComboBox_GetAutoSize(TCheckComboBox AObj);

void
CheckComboBox_SetAutoSize(TCheckComboBox AObj, BOOL AValue);

TColor
CheckComboBox_GetColor(TCheckComboBox AObj);

void
CheckComboBox_SetColor(TCheckComboBox AObj, TColor AValue);

TSizeConstraints
CheckComboBox_GetConstraints(TCheckComboBox AObj);

void
CheckComboBox_SetConstraints(TCheckComboBox AObj, TSizeConstraints AValue);

int32_t
CheckComboBox_GetCount(TCheckComboBox AObj);

TCursor
CheckComboBox_GetDragCursor(TCheckComboBox AObj);

void
CheckComboBox_SetDragCursor(TCheckComboBox AObj, TCursor AValue);

TDragKind
CheckComboBox_GetDragKind(TCheckComboBox AObj);

void
CheckComboBox_SetDragKind(TCheckComboBox AObj, TDragKind AValue);

TDragMode
CheckComboBox_GetDragMode(TCheckComboBox AObj);

void
CheckComboBox_SetDragMode(TCheckComboBox AObj, TDragMode AValue);

int32_t
CheckComboBox_GetDropDownCount(TCheckComboBox AObj);

void
CheckComboBox_SetDropDownCount(TCheckComboBox AObj, int32_t AValue);

BOOL
CheckComboBox_GetEnabled(TCheckComboBox AObj);

void
CheckComboBox_SetEnabled(TCheckComboBox AObj, BOOL AValue);

TFont
CheckComboBox_GetFont(TCheckComboBox AObj);

void
CheckComboBox_SetFont(TCheckComboBox AObj, TFont AValue);

int32_t
CheckComboBox_GetItemHeight(TCheckComboBox AObj);

void
CheckComboBox_SetItemHeight(TCheckComboBox AObj, int32_t AValue);

int32_t
CheckComboBox_GetItemIndex(TCheckComboBox AObj);

void
CheckComboBox_SetItemIndex(TCheckComboBox AObj, int32_t AValue);

TStrings
CheckComboBox_GetItems(TCheckComboBox AObj);

void
CheckComboBox_SetItems(TCheckComboBox AObj, TStrings AValue);

int32_t
CheckComboBox_GetItemWidth(TCheckComboBox AObj);

void
CheckComboBox_SetItemWidth(TCheckComboBox AObj, int32_t AValue);

int32_t
CheckComboBox_GetMaxLength(TCheckComboBox AObj);

void
CheckComboBox_SetMaxLength(TCheckComboBox AObj, int32_t AValue);

void
CheckComboBox_SetOnChange(TCheckComboBox AObj, TNotifyEvent AEventData);

void
CheckComboBox_SetOnClick(TCheckComboBox AObj, TNotifyEvent AEventData);

void
CheckComboBox_SetOnCloseUp(TCheckComboBox AObj, TNotifyEvent AEventData);

void
CheckComboBox_SetOnContextPopup(TCheckComboBox AObj, TContextPopupEvent AEventData);

void
CheckComboBox_SetOnDblClick(TCheckComboBox AObj, TNotifyEvent AEventData);

void
CheckComboBox_SetOnDragDrop(TCheckComboBox AObj, TDragDropEvent AEventData);

void
CheckComboBox_SetOnDragOver(TCheckComboBox AObj, TDragOverEvent AEventData);

void
CheckComboBox_SetOnEndDrag(TCheckComboBox AObj, TEndDragEvent AEventData);

void
CheckComboBox_SetOnDropDown(TCheckComboBox AObj, TNotifyEvent AEventData);

void
CheckComboBox_SetOnEnter(TCheckComboBox AObj, TNotifyEvent AEventData);

void
CheckComboBox_SetOnExit(TCheckComboBox AObj, TNotifyEvent AEventData);

void
CheckComboBox_SetOnItemChange(TCheckComboBox AObj, TCheckItemChange AEventData);

void
CheckComboBox_SetOnKeyDown(TCheckComboBox AObj, TKeyEvent AEventData);

void
CheckComboBox_SetOnKeyPress(TCheckComboBox AObj, TKeyPressEvent AEventData);

void
CheckComboBox_SetOnKeyUp(TCheckComboBox AObj, TKeyEvent AEventData);

void
CheckComboBox_SetOnMouseDown(TCheckComboBox AObj, TMouseEvent AEventData);

void
CheckComboBox_SetOnMouseEnter(TCheckComboBox AObj, TNotifyEvent AEventData);

void
CheckComboBox_SetOnMouseLeave(TCheckComboBox AObj, TNotifyEvent AEventData);

void
CheckComboBox_SetOnMouseMove(TCheckComboBox AObj, TMouseMoveEvent AEventData);

void
CheckComboBox_SetOnMouseUp(TCheckComboBox AObj, TMouseEvent AEventData);

void
CheckComboBox_SetOnMouseWheel(TCheckComboBox AObj, TMouseWheelEvent AEventData);

void
CheckComboBox_SetOnMouseWheelDown(TCheckComboBox AObj, TMouseWheelUpDownEvent AEventData);

void
CheckComboBox_SetOnMouseWheelUp(TCheckComboBox AObj, TMouseWheelUpDownEvent AEventData);

void
CheckComboBox_SetOnSelect(TCheckComboBox AObj, TNotifyEvent AEventData);

BOOL
CheckComboBox_GetParentColor(TCheckComboBox AObj);

void
CheckComboBox_SetParentColor(TCheckComboBox AObj, BOOL AValue);

BOOL
CheckComboBox_GetParentFont(TCheckComboBox AObj);

void
CheckComboBox_SetParentFont(TCheckComboBox AObj, BOOL AValue);

BOOL
CheckComboBox_GetParentShowHint(TCheckComboBox AObj);

void
CheckComboBox_SetParentShowHint(TCheckComboBox AObj, BOOL AValue);

TPopupMenu
CheckComboBox_GetPopupMenu(TCheckComboBox AObj);

void
CheckComboBox_SetPopupMenu(TCheckComboBox AObj, TPopupMenu AValue);

BOOL
CheckComboBox_GetShowHint(TCheckComboBox AObj);

void
CheckComboBox_SetShowHint(TCheckComboBox AObj, BOOL AValue);

BOOL
CheckComboBox_GetSorted(TCheckComboBox AObj);

void
CheckComboBox_SetSorted(TCheckComboBox AObj, BOOL AValue);

TTabOrder
CheckComboBox_GetTabOrder(TCheckComboBox AObj);

void
CheckComboBox_SetTabOrder(TCheckComboBox AObj, TTabOrder AValue);

BOOL
CheckComboBox_GetTabStop(TCheckComboBox AObj);

void
CheckComboBox_SetTabStop(TCheckComboBox AObj, BOOL AValue);

char*
CheckComboBox_GetText(TCheckComboBox AObj);

void
CheckComboBox_SetText(TCheckComboBox AObj, CChar char* AValue);

char*
CheckComboBox_GetTextHint(TCheckComboBox AObj);

void
CheckComboBox_SetTextHint(TCheckComboBox AObj, CChar char* AValue);

BOOL
CheckComboBox_GetVisible(TCheckComboBox AObj);

void
CheckComboBox_SetVisible(TCheckComboBox AObj, BOOL AValue);

BOOL
CheckComboBox_GetAutoComplete(TCheckComboBox AObj);

void
CheckComboBox_SetAutoComplete(TCheckComboBox AObj, BOOL AValue);

TEditCharCase
CheckComboBox_GetCharCase(TCheckComboBox AObj);

void
CheckComboBox_SetCharCase(TCheckComboBox AObj, TEditCharCase AValue);

char*
CheckComboBox_GetSelText(TCheckComboBox AObj);

void
CheckComboBox_SetSelText(TCheckComboBox AObj, CChar char* AValue);

TCanvas
CheckComboBox_GetCanvas(TCheckComboBox AObj);

BOOL
CheckComboBox_GetDroppedDown(TCheckComboBox AObj);

void
CheckComboBox_SetDroppedDown(TCheckComboBox AObj, BOOL AValue);

int32_t
CheckComboBox_GetSelLength(TCheckComboBox AObj);

void
CheckComboBox_SetSelLength(TCheckComboBox AObj, int32_t AValue);

int32_t
CheckComboBox_GetSelStart(TCheckComboBox AObj);

void
CheckComboBox_SetSelStart(TCheckComboBox AObj, int32_t AValue);

int32_t
CheckComboBox_GetDockClientCount(TCheckComboBox AObj);

BOOL
CheckComboBox_GetDockSite(TCheckComboBox AObj);

void
CheckComboBox_SetDockSite(TCheckComboBox AObj, BOOL AValue);

BOOL
CheckComboBox_GetDoubleBuffered(TCheckComboBox AObj);

void
CheckComboBox_SetDoubleBuffered(TCheckComboBox AObj, BOOL AValue);

BOOL
CheckComboBox_GetMouseInClient(TCheckComboBox AObj);

int32_t
CheckComboBox_GetVisibleDockClientCount(TCheckComboBox AObj);

TBrush
CheckComboBox_GetBrush(TCheckComboBox AObj);

int32_t
CheckComboBox_GetControlCount(TCheckComboBox AObj);

HWND
CheckComboBox_GetHandle(TCheckComboBox AObj);

BOOL
CheckComboBox_GetParentDoubleBuffered(TCheckComboBox AObj);

void
CheckComboBox_SetParentDoubleBuffered(TCheckComboBox AObj, BOOL AValue);

HWND
CheckComboBox_GetParentWindow(TCheckComboBox AObj);

void
CheckComboBox_SetParentWindow(TCheckComboBox AObj, HWND AValue);

BOOL
CheckComboBox_GetShowing(TCheckComboBox AObj);

BOOL
CheckComboBox_GetUseDockManager(TCheckComboBox AObj);

void
CheckComboBox_SetUseDockManager(TCheckComboBox AObj, BOOL AValue);

TAction
CheckComboBox_GetAction(TCheckComboBox AObj);

void
CheckComboBox_SetAction(TCheckComboBox AObj, TAction AValue);

TBiDiMode
CheckComboBox_GetBiDiMode(TCheckComboBox AObj);

void
CheckComboBox_SetBiDiMode(TCheckComboBox AObj, TBiDiMode AValue);

TRect
CheckComboBox_GetBoundsRect(TCheckComboBox AObj);

void
CheckComboBox_SetBoundsRect(TCheckComboBox AObj, TRect AValue);

int32_t
CheckComboBox_GetClientHeight(TCheckComboBox AObj);

void
CheckComboBox_SetClientHeight(TCheckComboBox AObj, int32_t AValue);

TPoint
CheckComboBox_GetClientOrigin(TCheckComboBox AObj);

TRect
CheckComboBox_GetClientRect(TCheckComboBox AObj);

int32_t
CheckComboBox_GetClientWidth(TCheckComboBox AObj);

void
CheckComboBox_SetClientWidth(TCheckComboBox AObj, int32_t AValue);

TControlState
CheckComboBox_GetControlState(TCheckComboBox AObj);

void
CheckComboBox_SetControlState(TCheckComboBox AObj, TControlState AValue);

TControlStyle
CheckComboBox_GetControlStyle(TCheckComboBox AObj);

void
CheckComboBox_SetControlStyle(TCheckComboBox AObj, TControlStyle AValue);

BOOL
CheckComboBox_GetFloating(TCheckComboBox AObj);

TWinControl
CheckComboBox_GetParent(TCheckComboBox AObj);

void
CheckComboBox_SetParent(TCheckComboBox AObj, TWinControl AValue);

int32_t
CheckComboBox_GetLeft(TCheckComboBox AObj);

void
CheckComboBox_SetLeft(TCheckComboBox AObj, int32_t AValue);

int32_t
CheckComboBox_GetTop(TCheckComboBox AObj);

void
CheckComboBox_SetTop(TCheckComboBox AObj, int32_t AValue);

int32_t
CheckComboBox_GetWidth(TCheckComboBox AObj);

void
CheckComboBox_SetWidth(TCheckComboBox AObj, int32_t AValue);

int32_t
CheckComboBox_GetHeight(TCheckComboBox AObj);

void
CheckComboBox_SetHeight(TCheckComboBox AObj, int32_t AValue);

TCursor
CheckComboBox_GetCursor(TCheckComboBox AObj);

void
CheckComboBox_SetCursor(TCheckComboBox AObj, TCursor AValue);

char*
CheckComboBox_GetHint(TCheckComboBox AObj);

void
CheckComboBox_SetHint(TCheckComboBox AObj, CChar char* AValue);

int32_t
CheckComboBox_GetComponentCount(TCheckComboBox AObj);

int32_t
CheckComboBox_GetComponentIndex(TCheckComboBox AObj);

void
CheckComboBox_SetComponentIndex(TCheckComboBox AObj, int32_t AValue);

TComponent
CheckComboBox_GetOwner(TCheckComboBox AObj);

char*
CheckComboBox_GetName(TCheckComboBox AObj);

void
CheckComboBox_SetName(TCheckComboBox AObj, CChar char* AValue);

intptr_t
CheckComboBox_GetTag(TCheckComboBox AObj);

void
CheckComboBox_SetTag(TCheckComboBox AObj, intptr_t AValue);

TAnchorSide
CheckComboBox_GetAnchorSideLeft(TCheckComboBox AObj);

void
CheckComboBox_SetAnchorSideLeft(TCheckComboBox AObj, TAnchorSide AValue);

TAnchorSide
CheckComboBox_GetAnchorSideTop(TCheckComboBox AObj);

void
CheckComboBox_SetAnchorSideTop(TCheckComboBox AObj, TAnchorSide AValue);

TAnchorSide
CheckComboBox_GetAnchorSideRight(TCheckComboBox AObj);

void
CheckComboBox_SetAnchorSideRight(TCheckComboBox AObj, TAnchorSide AValue);

TAnchorSide
CheckComboBox_GetAnchorSideBottom(TCheckComboBox AObj);

void
CheckComboBox_SetAnchorSideBottom(TCheckComboBox AObj, TAnchorSide AValue);

TControlChildSizing
CheckComboBox_GetChildSizing(TCheckComboBox AObj);

void
CheckComboBox_SetChildSizing(TCheckComboBox AObj, TControlChildSizing AValue);

TControlBorderSpacing
CheckComboBox_GetBorderSpacing(TCheckComboBox AObj);

void
CheckComboBox_SetBorderSpacing(TCheckComboBox AObj, TControlBorderSpacing AValue);

BOOL
CheckComboBox_GetChecked(TCheckComboBox AObj, int32_t AIndex);

void
CheckComboBox_SetChecked(TCheckComboBox AObj, int32_t AIndex, BOOL AValue);

BOOL
CheckComboBox_GetItemEnabled(TCheckComboBox AObj, int32_t AIndex);

void
CheckComboBox_SetItemEnabled(TCheckComboBox AObj, int32_t AIndex, BOOL AValue);

TObject
CheckComboBox_GetObjects(TCheckComboBox AObj, int32_t AIndex);

void
CheckComboBox_SetObjects(TCheckComboBox AObj, int32_t AIndex, TObject AValue);

TCheckBoxState
CheckComboBox_GetState(TCheckComboBox AObj, int32_t AIndex);

void
CheckComboBox_SetState(TCheckComboBox AObj, int32_t AIndex, TCheckBoxState AValue);

TControl
CheckComboBox_GetDockClients(TCheckComboBox AObj, int32_t Index);

TControl
CheckComboBox_GetControls(TCheckComboBox AObj, int32_t Index);

TComponent
CheckComboBox_GetComponents(TCheckComboBox AObj, int32_t AIndex);

TAnchorSide
CheckComboBox_GetAnchorSide(TCheckComboBox AObj, TAnchorKind AKind);

TClass
CheckComboBox_StaticClassType();

// -------------------TGridColumnTitle-------------------

void
GridColumnTitle_Assign(TGridColumnTitle AObj, TObject Source);

void
GridColumnTitle_FillTitleDefaultFont(TGridColumnTitle AObj);

void
GridColumnTitle_FixDesignFontsPPI(TGridColumnTitle AObj, int32_t ADesignTimePPI);

void
GridColumnTitle_ScaleFontsPPI(TGridColumnTitle AObj, int32_t AToPPI, double AProportion);

BOOL
GridColumnTitle_IsDefault(TGridColumnTitle AObj);

char*
GridColumnTitle_GetNamePath(TGridColumnTitle AObj);

TClass
GridColumnTitle_ClassType(TGridColumnTitle AObj);

char*
GridColumnTitle_ClassName(TGridColumnTitle AObj);

int32_t
GridColumnTitle_InstanceSize(TGridColumnTitle AObj);

BOOL
GridColumnTitle_InheritsFrom(TGridColumnTitle AObj, TClass AClass);

BOOL
GridColumnTitle_Equals(TGridColumnTitle AObj, TObject Obj);

int32_t
GridColumnTitle_GetHashCode(TGridColumnTitle AObj);

char*
GridColumnTitle_ToString(TGridColumnTitle AObj);

TGridColumn
GridColumnTitle_GetColumn(TGridColumnTitle AObj);

TAlignment
GridColumnTitle_GetAlignment(TGridColumnTitle AObj);

void
GridColumnTitle_SetAlignment(TGridColumnTitle AObj, TAlignment AValue);

char*
GridColumnTitle_GetCaption(TGridColumnTitle AObj);

void
GridColumnTitle_SetCaption(TGridColumnTitle AObj, CChar char* AValue);

TColor
GridColumnTitle_GetColor(TGridColumnTitle AObj);

void
GridColumnTitle_SetColor(TGridColumnTitle AObj, TColor AValue);

TFont
GridColumnTitle_GetFont(TGridColumnTitle AObj);

void
GridColumnTitle_SetFont(TGridColumnTitle AObj, TFont AValue);

int32_t
GridColumnTitle_GetImageIndex(TGridColumnTitle AObj);

void
GridColumnTitle_SetImageIndex(TGridColumnTitle AObj, int32_t AValue);

TButtonLayout
GridColumnTitle_GetImageLayout(TGridColumnTitle AObj);

void
GridColumnTitle_SetImageLayout(TGridColumnTitle AObj, TButtonLayout AValue);

TTextLayout
GridColumnTitle_GetLayout(TGridColumnTitle AObj);

void
GridColumnTitle_SetLayout(TGridColumnTitle AObj, TTextLayout AValue);

BOOL
GridColumnTitle_GetMultiLine(TGridColumnTitle AObj);

void
GridColumnTitle_SetMultiLine(TGridColumnTitle AObj, BOOL AValue);

TPrefixOption
GridColumnTitle_GetPrefixOption(TGridColumnTitle AObj);

void
GridColumnTitle_SetPrefixOption(TGridColumnTitle AObj, TPrefixOption AValue);

TClass
GridColumnTitle_StaticClassType();

// -------------------TGridColumn-------------------

void
GridColumn_Assign(TGridColumn AObj, TObject Source);

void
GridColumn_FixDesignFontsPPI(TGridColumn AObj, int32_t ADesignTimePPI);

void
GridColumn_ScaleFontsPPI(TGridColumn AObj, int32_t AToPPI, double AProportion);

BOOL
GridColumn_IsDefault(TGridColumn AObj);

char*
GridColumn_GetNamePath(TGridColumn AObj);

TClass
GridColumn_ClassType(TGridColumn AObj);

char*
GridColumn_ClassName(TGridColumn AObj);

int32_t
GridColumn_InstanceSize(TGridColumn AObj);

BOOL
GridColumn_InheritsFrom(TGridColumn AObj, TClass AClass);

BOOL
GridColumn_Equals(TGridColumn AObj, TObject Obj);

int32_t
GridColumn_GetHashCode(TGridColumn AObj);

char*
GridColumn_ToString(TGridColumn AObj);

TStringGrid
GridColumn_GetGrid(TGridColumn AObj);

int32_t
GridColumn_GetDefaultWidth(TGridColumn AObj);

int32_t
GridColumn_GetStoredWidth(TGridColumn AObj);

BOOL
GridColumn_GetWidthChanged(TGridColumn AObj);

TAlignment
GridColumn_GetAlignment(TGridColumn AObj);

void
GridColumn_SetAlignment(TGridColumn AObj, TAlignment AValue);

TColumnButtonStyle
GridColumn_GetButtonStyle(TGridColumn AObj);

void
GridColumn_SetButtonStyle(TGridColumn AObj, TColumnButtonStyle AValue);

TColor
GridColumn_GetColor(TGridColumn AObj);

void
GridColumn_SetColor(TGridColumn AObj, TColor AValue);

int32_t
GridColumn_GetDropDownRows(TGridColumn AObj);

void
GridColumn_SetDropDownRows(TGridColumn AObj, int32_t AValue);

BOOL
GridColumn_GetExpanded(TGridColumn AObj);

void
GridColumn_SetExpanded(TGridColumn AObj, BOOL AValue);

TFont
GridColumn_GetFont(TGridColumn AObj);

void
GridColumn_SetFont(TGridColumn AObj, TFont AValue);

TTextLayout
GridColumn_GetLayout(TGridColumn AObj);

void
GridColumn_SetLayout(TGridColumn AObj, TTextLayout AValue);

int32_t
GridColumn_GetMinSize(TGridColumn AObj);

void
GridColumn_SetMinSize(TGridColumn AObj, int32_t AValue);

int32_t
GridColumn_GetMaxSize(TGridColumn AObj);

void
GridColumn_SetMaxSize(TGridColumn AObj, int32_t AValue);

TStrings
GridColumn_GetPickList(TGridColumn AObj);

void
GridColumn_SetPickList(TGridColumn AObj, TStrings AValue);

BOOL
GridColumn_GetReadOnly(TGridColumn AObj);

void
GridColumn_SetReadOnly(TGridColumn AObj, BOOL AValue);

int32_t
GridColumn_GetSizePriority(TGridColumn AObj);

void
GridColumn_SetSizePriority(TGridColumn AObj, int32_t AValue);

intptr_t
GridColumn_GetTag(TGridColumn AObj);

void
GridColumn_SetTag(TGridColumn AObj, intptr_t AValue);

TGridColumnTitle
GridColumn_GetTitle(TGridColumn AObj);

void
GridColumn_SetTitle(TGridColumn AObj, TGridColumnTitle AValue);

int32_t
GridColumn_GetWidth(TGridColumn AObj);

void
GridColumn_SetWidth(TGridColumn AObj, int32_t AValue);

BOOL
GridColumn_GetVisible(TGridColumn AObj);

void
GridColumn_SetVisible(TGridColumn AObj, BOOL AValue);

char*
GridColumn_GetValueChecked(TGridColumn AObj);

void
GridColumn_SetValueChecked(TGridColumn AObj, CChar char* AValue);

char*
GridColumn_GetValueUnchecked(TGridColumn AObj);

void
GridColumn_SetValueUnchecked(TGridColumn AObj, CChar char* AValue);

TCollection
GridColumn_GetCollection(TGridColumn AObj);

void
GridColumn_SetCollection(TGridColumn AObj, TCollection AValue);

int32_t
GridColumn_GetIndex(TGridColumn AObj);

void
GridColumn_SetIndex(TGridColumn AObj, int32_t AValue);

char*
GridColumn_GetDisplayName(TGridColumn AObj);

void
GridColumn_SetDisplayName(TGridColumn AObj, CChar char* AValue);

TClass
GridColumn_StaticClassType();

// -------------------TGridColumns-------------------

TGridColumn
GridColumns_Add(TGridColumns AObj);

void
GridColumns_Clear(TGridColumns AObj);

int32_t
GridColumns_RealIndex(TGridColumns AObj, int32_t Index);

int32_t
GridColumns_IndexOf(TGridColumns AObj, TGridColumn Column);

BOOL
GridColumns_IsDefault(TGridColumns AObj);

BOOL
GridColumns_HasIndex(TGridColumns AObj, int32_t Index);

TObject
GridColumns_Owner(TGridColumns AObj);

void
GridColumns_Assign(TGridColumns AObj, TObject Source);

void
GridColumns_BeginUpdate(TGridColumns AObj);

void
GridColumns_Delete(TGridColumns AObj, int32_t Index);

void
GridColumns_EndUpdate(TGridColumns AObj);

TCollectionItem
GridColumns_FindItemID(TGridColumns AObj, int32_t ID);

char*
GridColumns_GetNamePath(TGridColumns AObj);

TCollectionItem
GridColumns_Insert(TGridColumns AObj, int32_t Index);

TClass
GridColumns_ClassType(TGridColumns AObj);

char*
GridColumns_ClassName(TGridColumns AObj);

int32_t
GridColumns_InstanceSize(TGridColumns AObj);

BOOL
GridColumns_InheritsFrom(TGridColumns AObj, TClass AClass);

BOOL
GridColumns_Equals(TGridColumns AObj, TObject Obj);

int32_t
GridColumns_GetHashCode(TGridColumns AObj);

char*
GridColumns_ToString(TGridColumns AObj);

TStringGrid
GridColumns_GetGrid(TGridColumns AObj);

int32_t
GridColumns_GetVisibleCount(TGridColumns AObj);

BOOL
GridColumns_GetEnabled(TGridColumns AObj);

int32_t
GridColumns_GetCount(TGridColumns AObj);

TGridColumn
GridColumns_GetItems(TGridColumns AObj, int32_t Index);

void
GridColumns_SetItems(TGridColumns AObj, int32_t Index, TGridColumn AValue);

TClass
GridColumns_StaticClassType();


/* ------------------函数重定义------------------------------- */
static inline char* GetFPStringArrayMember(void* P, intptr_t AIndex) {
    return GetStringArrOf(P, AIndex);
}



// 事件call
typedef void(*ESYSCALL0)();
typedef void(*ESYSCALL1)(intptr_t);
typedef void(*ESYSCALL2)(intptr_t, uintptr_t);
typedef void(*ESYSCALL3)(intptr_t, uintptr_t, uintptr_t);
typedef void(*ESYSCALL4)(intptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef void(*ESYSCALL5)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef void(*ESYSCALL6)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef void(*ESYSCALL7)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef void(*ESYSCALL8)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef void(*ESYSCALL9)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef void(*ESYSCALL10)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef void(*ESYSCALL11)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef void(*ESYSCALL12)(intptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);

// getParam 从指定索引和地址获取事件中的参数
#define getParamOf(index, ptr) \
 (*((uintptr_t*)((uintptr_t)ptr + (uintptr_t)index*sizeof(uintptr_t))))


// 事件回调
static void* LCLAPI doEventCallbackProc(void* f, void* args, long argCount) {

	// 获取参数的宏
	#define _A_(index) \
	   getParamOf(index, args)

    switch (argCount) {
    case 0:  ((ESYSCALL0) (f))(); break;
    case 1:  ((ESYSCALL1) (f))(_A_(0)); break;
    case 2:  ((ESYSCALL2) (f))(_A_(0), _A_(1)); break;
    case 3:  ((ESYSCALL3) (f))(_A_(0), _A_(1), _A_(2)); break;
    case 4:  ((ESYSCALL4) (f))(_A_(0), _A_(1), _A_(2), _A_(2)); break;
    case 5:  ((ESYSCALL5) (f))(_A_(0), _A_(1), _A_(2), _A_(3), _A_(4)); break;
    case 6:  ((ESYSCALL6) (f))(_A_(0), _A_(1), _A_(2), _A_(3), _A_(4), _A_(5)); break;
    case 7:  ((ESYSCALL7) (f))(_A_(0), _A_(1), _A_(2), _A_(3), _A_(4), _A_(5), _A_(6)); break;
    case 8:  ((ESYSCALL8) (f))(_A_(0), _A_(1), _A_(2), _A_(3), _A_(4), _A_(5), _A_(6), _A_(7)); break;
    case 9:  ((ESYSCALL9) (f))(_A_(0), _A_(1), _A_(2), _A_(3), _A_(4), _A_(5), _A_(6), _A_(7), _A_(8)); break;
    case 10: ((ESYSCALL10)(f))(_A_(0), _A_(1), _A_(2), _A_(3), _A_(4), _A_(5), _A_(6), _A_(7), _A_(8), _A_(9)); break;
    case 11: ((ESYSCALL11)(f))(_A_(0), _A_(1), _A_(2), _A_(3), _A_(4), _A_(5), _A_(6), _A_(7), _A_(8), _A_(9), _A_(10)); break;
    case 12: ((ESYSCALL12)(f))(_A_(0), _A_(1), _A_(2), _A_(3), _A_(4), _A_(5), _A_(6), _A_(7), _A_(8), _A_(9), _A_(10), _A_(11)); break;
    }
    return NULL;
}


// 消息回调
static void* LCLAPI doMessageCallbackProc(void* f, void* msg) {
   ((void(*)(void*))f)(msg);
    return NULL;
}

// 线程同步过程
static TThreadProc threadSyncProc;
// 线程同步回调
static void* LCLAPI doThreadSyncCallbackProc() {
    if (threadSyncProc) {
        ((TThreadProc)threadSyncProc)();
        threadSyncProc = NULL;
    }
    return NULL;
}

// 线程同步方法
// 无参数，无返回值的一个函数
void ThreadSync(TThreadProc fn);

#define GET_CALLBACK(name) \
  (void*)&name

static void init_lib_lcl() {
#ifdef __GNUC__
    pthread_mutex_init(&threadSyncMutex, NULL);
#else
    InitializeCriticalSection(&threadSyncMutex);
#endif

    // 设置事件的回调函数
	SetEventCallback(GET_CALLBACK(doEventCallbackProc));
	// 消息回调
	SetMessageCallback(GET_CALLBACK(doMessageCallbackProc));
	// 线程同步回调
	SetThreadSyncCallback(GET_CALLBACK(doThreadSyncCallbackProc));

    Application = Application_Instance();
    Screen = Screen_Instance();
    Mouse = Mouse_Instance();
    Clipboard = Clipboard_Instance();
    Printer = Printer_Instance();

}

static void un_init_lib_lcl();

#ifdef __cplusplus
}
#endif

#endif // _LIBLCL_H
